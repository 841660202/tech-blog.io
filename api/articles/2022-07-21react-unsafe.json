{"title":"React@16.5.0 unsafe_","uid":"f07658ed4d8d481756bfa8b0d656b104","slug":"2022-07-21react-unsafe","date":"2022-07-21T06:23:16.000Z","updated":"2022-07-23T09:24:23.110Z","comments":true,"path":"api/articles/2022-07-21react-unsafe.json","keywords":null,"cover":null,"content":"<h2 id=\"我整理这篇文章的目的\"><a href=\"#我整理这篇文章的目的\" class=\"headerlink\" title=\"我整理这篇文章的目的\"></a>我整理这篇文章的目的</h2><p>很多时候，我在学技术时候更多关注的是<code>教程</code>和<code>文档</code>,原因有三：时间紧、任务重、新技术很多</p>\n<p>最近手头无事，刚好搜源码搜到了，希望闲暇之余，你也能了解 React 变更过程，加深 React 的理解</p>\n<h2 id=\"过时的组件生命周期往往会带来不安全的编码实践\"><a href=\"#过时的组件生命周期往往会带来不安全的编码实践\" class=\"headerlink\" title=\"过时的组件生命周期往往会带来不安全的编码实践\"></a>过时的组件生命周期往往会带来不安全的编码实践</h2><ul>\n<li>componentWillMount</li>\n<li>componentWillReceiveProps</li>\n<li>componentWillUpdate</li>\n</ul>\n<p>这些生命周期方法经常被<code>误解和滥用</code>；此外，React 团队预计到，在异步渲染中，它们潜在的<code>误用问题可能更大</code>。所以在 March 27, 2018 提出</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们将在即将发布的版本中为这些生命周期添加 <code>UNSAFE_</code> 前缀。（这里的 “unsafe” <code>不是指安全性</code>，<code>而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 bug</code>，<code>尤其是在启用异步渲染之后</code>。）</p></blockquote>\n<h2 id=\"遵循语义版本控制\"><a href=\"#遵循语义版本控制\" class=\"headerlink\" title=\"遵循语义版本控制\"></a>遵循语义版本控制</h2><p>React <a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" >遵循语义版本控制</a>，因此这种变化将是逐步的。我们目前的计划是：</p>\n<ul>\n<li>16.3：为不安全的生命周期引入别名，<code>UNSAFE_componentWillMount``、UNSAFE_componentWillReceiveProps</code> 和 <code>UNSAFE_componentWillUpdate</code>。（旧的生命周期名称和新的别名都可以在此版本中使用。）<br>未来</li>\n<li>16.x 版本：为 <code>componentWillMount``、componentWillReceiveProps</code> 和 <code>componentWillUpdate</code> 启用废弃告警。（旧的生命周期名称和新的别名都将在这个版本中工作，但是旧的名称在开发模式下会产生一个警告。）</li>\n<li>17.0：删除 <code>componentWillMount</code>、<code>componentWillReceiveProps</code> 和 <code>componentWillUpdate</code>。（在此版本之后，只有新的 “UNSAFE_” 生命周期名称可以使用。）</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意，如果你是 React 应用程序开发人员，则无需对这些过时的方法执行任何操作。即将发布的 16.3 版本的主要目的是使开源项目维护人员能够在任何废弃警告之前更新他们的库。在未来的 16.x 版本发布之前，不会启用这些警告。</p>\n</div>\n<h2 id=\"迁移过时的生命周期\"><a href=\"#迁移过时的生命周期\" class=\"headerlink\" title=\"迁移过时的生命周期\"></a>迁移过时的生命周期</h2><p>在开始之前，下面是关于 16.3 版本计划的生命周期变更的快速概述：</p>\n<ul>\n<li>添加以下生命周期别名：<code>UNSAFE_componentWillMount</code>、<code>UNSAFE_componentWillReceiveProps</code> 和 <code>UNSAFE_componentWillUpdate</code>。（将同时支持旧的生命周期名称和新别名。）</li>\n<li>引入两个新的生命周期，静态的 <code>getDerivedStateFromProps</code> 和 <code>getSnapshotBeforeUpdate</code>。</li>\n</ul>\n<h2 id=\"getDerivedStateFromProps\"><a href=\"#getDerivedStateFromProps\" class=\"headerlink\" title=\"getDerivedStateFromProps\"></a>getDerivedStateFromProps</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">class Example extends React.Component &#123;\n  static getDerivedStateFromProps(props, state) &#123;\n    &#x2F;&#x2F; ...\n  &#125;\n&#125;</code></pre>\n\n<p>新的静态 <code>getDerivedStateFromProps</code> 生命周期方法<code>在组件实例化之后以及重新渲染之前调用</code>。它可以返回一个对象来更新 state，或者<code>返回 null 来表示新的 props 不需要任何 state 的更新</code>。</p>\n<p>与 <code>componentDidUpdate</code> 一起，这个新的生命周期涵盖过时的 <code>componentWillReceiveProps</code> 的所有用例。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意：</p>\n<p>旧的 componentWillReceiveProps 和新的 getDerivedStateFromProps 方法都会增加组件的复杂性。这经常会导致 bug。考虑使用 <a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" >派生 state 的简单替代方法</a> 让组件可预测且可维护。</p>\n</div>\n<h2 id=\"getSnapshotBeforeUpdate\"><a href=\"#getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate\"></a>getSnapshotBeforeUpdate</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">class Example extends React.Component &#123;\n  getSnapshotBeforeUpdate(prevProps, prevState) &#123;\n    &#x2F;&#x2F; ...\n  &#125;\n&#125;</code></pre>\n\n<p>新的 <code>getSnapshotBeforeUpdate</code> 生命周期方法<code>在更新之前（如：更新 DOM 之前）被调用</code>。<strong>此生命周期的返回值将作为第三个参数传递给 componentDidUpdate</strong>。（通常不需要，但在重新渲染过程中手动保留滚动位置等情况下非常有用。）</p>\n<p>与 <code>componentDidUpdate</code> 一起，这个新的生命周期涵盖过时的 <code>componentWillUpdate</code> 的所有用例。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"初始化-state\"><a href=\"#初始化-state\" class=\"headerlink\" title=\"初始化 state\"></a>初始化 state</h3><p>这个例子显示了组件在 componentWillMount 中调用 setState：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;&#125;;\n\n  componentWillMount() &#123;\n    this.setState(&#123;\n      currentColor: this.props.defaultColor,\n      palette: &quot;rgb&quot;,\n    &#125;);\n  &#125;\n&#125;</code></pre>\n\n<p>对于这种类型的组件，最简单的重构是将 state 的初始化，移到构造函数或属性的初始化器内，</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    currentColor: this.props.defaultColor,\n    palette: &quot;rgb&quot;,\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"获取外部数据\"><a href=\"#获取外部数据\" class=\"headerlink\" title=\"获取外部数据\"></a>获取外部数据</h3><p>以下是使用 componentWillMount 获取外部数据的组件的示例：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    externalData: null,\n  &#125;;\n\n  componentWillMount() &#123;\n    this._asyncRequest &#x3D; loadMyAsyncData().then((externalData) &#x3D;&gt; &#123;\n      this._asyncRequest &#x3D; null;\n      this.setState(&#123; externalData &#125;);\n    &#125;);\n  &#125;\n\n  componentWillUnmount() &#123;\n    if (this._asyncRequest) &#123;\n      this._asyncRequest.cancel();\n    &#125;\n  &#125;\n\n  render() &#123;\n    if (this.state.externalData &#x3D;&#x3D;&#x3D; null) &#123;\n      &#x2F;&#x2F; 渲染加载状态 ...\n    &#125; else &#123;\n      &#x2F;&#x2F; 渲染真实 UI ...\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>上述代码对于服务器渲染（不使用外部数据）和即将推出的异步渲染模式（可能多次启动请求）都存在问题。</p>\n<p>大多数用例推荐的升级方式是将数据获取移到 componentDidMount：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    externalData: null,\n  &#125;;\n\n  componentDidMount() &#123;\n    this._asyncRequest &#x3D; loadMyAsyncData().then((externalData) &#x3D;&gt; &#123;\n      this._asyncRequest &#x3D; null;\n      this.setState(&#123; externalData &#125;);\n    &#125;);\n  &#125;\n\n  componentWillUnmount() &#123;\n    if (this._asyncRequest) &#123;\n      this._asyncRequest.cancel();\n    &#125;\n  &#125;\n\n  render() &#123;\n    if (this.state.externalData &#x3D;&#x3D;&#x3D; null) &#123;\n      &#x2F;&#x2F; 渲染加载状态 ...\n    &#125; else &#123;\n      &#x2F;&#x2F; 渲染真实 UI ...\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"误解-1\"><a href=\"#误解-1\" class=\"headerlink\" title=\"误解 1\"></a>误解 1</h3><p>有一个常见的误解是，在 <code>componentWillMount</code> 中获取数据可以避免第一次渲染为空的状态。实际上，这是不对的，因为 React 总是在 <code>componentWillMount</code> 之后立即执行 <code>render</code>。如果在 <code>componentWillMount</code> 触发时数据不可用，那么第一次 <code>render</code> 仍然会显示加载的状态，而不管你在哪里初始化获取数据。这就是为什么在绝大多数情况下，将获取数据移到 <code>componentDidMount</code> 没有明显效果的原因。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意</p>\n<p>一些高级用例（如：<code>Relay</code> 库）可能尝试提前获取异步数据。这里提供了一个如何实现的示例。</p>\n<p>从长远来看，在 React 组件中获取数据的标准方法应该基于 “<code>suspense</code>” API 在冰岛 JSConf 提出。无论是简单的数据获取解决方案，还是像 <code>Apollo</code> 和 <code>Relay</code> 这样的库，都可以在内部使用它。它比上面的任何一个解决方案都要简洁，但是不会在 16.3 版本发布之前完成。</p>\n<p>当支持服务器渲染时，需要同步获取数据——<code>componentWillMount</code> 经常用于此目的，也可以用构造函数替代。即将推出的 suspense API 将使异步数据获取对于客户端和服务器渲染都是完全有可能的。</p>\n\n</div>\n<h3 id=\"添加事件监听器（或订阅）\"><a href=\"#添加事件监听器（或订阅）\" class=\"headerlink\" title=\"添加事件监听器（或订阅）\"></a>添加事件监听器（或订阅）</h3><p>下面是一个示例，在组件挂载时订阅了外部事件：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  componentWillMount() &#123;\n    this.setState(&#123;\n      subscribedValue: this.props.dataSource.value,\n    &#125;);\n    &#x2F;&#x2F; 这是不安全的，它会导致内存泄漏！\n    this.props.dataSource.subscribe(this.handleSubscriptionChange);\n  &#125;\n\n  componentWillUnmount() &#123;\n    this.props.dataSource.unsubscribe(this.handleSubscriptionChange);\n  &#125;\n\n  handleSubscriptionChange &#x3D; (dataSource) &#x3D;&gt; &#123;\n    this.setState(&#123;\n      subscribedValue: dataSource.value,\n    &#125;);\n  &#125;;\n&#125;</code></pre>\n\n<p>遗憾的是，这可能导致服务器渲染（永远不会调用 <code>componentWillUnmount</code>）和异步渲染（在渲染完成之前可能被中断，导致不调用 <code>componentWillUnmount</code>）的<code>内存泄漏</code>。</p>\n<h3 id=\"误解-2\"><a href=\"#误解-2\" class=\"headerlink\" title=\"误解 2\"></a>误解 2</h3><p>人们通常认为 <code>componentWillMount</code> 和 <code>componentWillUnmount</code> 是成对出现的，但这并不能保证。只有调用了 <code>componentDidMount</code> 之后，React 才能保证稍后调用 <code>componentWillUnmount</code> 进行清理。</p>\n<p>因此，添加监听器&#x2F;订阅的推荐方法是使用 <code>componentDidMount</code> 生命周期：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    subscribedValue: this.props.dataSource.value,\n  &#125;;\n  componentDidMount() &#123;\n    &#x2F;&#x2F; 事件监听器只有在挂载后添加才是安全的，\n    &#x2F;&#x2F; 因此，如果挂载中断或错误，它们不会泄漏。\n    this.props.dataSource.subscribe(this.handleSubscriptionChange);\n    &#x2F;&#x2F; 外部值可能在渲染和挂载期间改变，\n    &#x2F;&#x2F; 在某些情况下，处理这种情况很重要。\n    if (this.state.subscribedValue !&#x3D;&#x3D; this.props.dataSource.value) &#123;\n      this.setState(&#123;\n        subscribedValue: this.props.dataSource.value,\n      &#125;);\n    &#125;\n  &#125;\n\n  componentWillUnmount() &#123;\n    this.props.dataSource.unsubscribe(this.handleSubscriptionChange);\n  &#125;\n\n  handleSubscriptionChange &#x3D; (dataSource) &#x3D;&gt; &#123;\n    this.setState(&#123;\n      subscribedValue: dataSource.value,\n    &#125;);\n  &#125;;\n&#125;</code></pre>\n\n<p>有时，更新订阅来响应属性变更非常重要。如果你正在使用像 <code>Redux</code> 或 <code>MobX</code> 这样的库，<code>库的容器组件应该为你处理了这个问题</code>。对于应用程序作者，我们创建了一个小型库，<code>create-subscription</code>，来帮助解决这个问题。我们将它与 React 16.3 一起发布。</p>\n<p>我们可以使用 <code>create-subscription</code> 来传递订阅的值，而不是像上面示例那样传递一个可订阅的 dataSource prop：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">import &#123; createSubscription &#125; from &quot;create-subscription&quot;;\n\nconst Subscription &#x3D; createSubscription(&#123;\n  getCurrentValue(sourceProp) &#123;\n    &#x2F;&#x2F; 返回订阅的当前值（sourceProp）。\n    return sourceProp.value;\n  &#125;,\n\n  subscribe(sourceProp, callback) &#123;\n    function handleSubscriptionChange() &#123;\n      callback(sourceProp.value);\n    &#125;\n\n    &#x2F;&#x2F; 订阅（例如：向订阅（sourceProp）添加事件监听器。\n    &#x2F;&#x2F; 每当订阅发生变化时，调用回调函数（新值）。\n    sourceProp.subscribe(handleSubscriptionChange);\n\n    &#x2F;&#x2F; 返回取消订阅方法。\n    return function unsubscribe() &#123;\n      sourceProp.unsubscribe(handleSubscriptionChange);\n    &#125;;\n  &#125;,\n&#125;);\n\n&#x2F;&#x2F; 我们可以直接传递订阅的值，\n&#x2F;&#x2F; 而不是将可订阅的源传递给我们的 ExampleComponent：\n&lt;Subscription source&#x3D;&#123;dataSource&#125;&gt;\n  &#123;(value) &#x3D;&gt; &lt;ExampleComponent subscribedValue&#x3D;&#123;value&#125; &#x2F;&gt;&#125;\n&lt;&#x2F;Subscription&gt;;</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意：</p>\n<p>像 <code>Relay/Apollo</code> 这样的库，内部应该使用了与 <code>create-subscription</code> 相同的技术，用最适合他们库使用的方式手动管理订阅（参考这里）。</p>\n</div>\n<h3 id=\"基于-props-更新-state\"><a href=\"#基于-props-更新-state\" class=\"headerlink\" title=\"基于 props 更新 state\"></a>基于 props 更新 state</h3><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意：</p>\n<p>旧的 <code>componentWillReceiveProps</code> 和新的 <code>getDerivedStateFromProps</code> 方法都会给组件增加明显的复杂性。这通常会导致 <code>bug</code>。考虑 派生 state 的简单替代方法 使组件可预测且可维护。\n</div>\n<p>这是一个示例，组件使用过时的 <code>componentWillReceiveProps</code> 生命周期基于新的 <code>props</code> 更新 <code>state</code>：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    isScrollingDown: false,\n  &#125;;\n\n  componentWillReceiveProps(nextProps) &#123;\n    if (this.props.currentRow !&#x3D;&#x3D; nextProps.currentRow) &#123;\n      this.setState(&#123;\n        isScrollingDown: nextProps.currentRow &gt; this.props.currentRow,\n      &#125;);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>尽管上面的代码本身没有问题，但是 <code>componentWillReceiveProps</code> 生命周期经常被误用，会产生问题。因此，该方法将被废弃。</p>\n<p>从 16.3 版本开始，当 <code>props</code> 变化时，建议使用新的 <code>static getDerivedStateFromProps</code> 生命周期更新 <code>state</code>。创建组件以及每次组件由于 <code>props</code> 或 <code>state</code> 的改变而重新渲染时都会调用该生命周期：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  &#x2F;&#x2F; 在构造函数中初始化 state，\n  &#x2F;&#x2F; 或者使用属性初始化器。\n  state &#x3D; &#123;\n    isScrollingDown: false,\n    lastRow: null,\n  &#125;;\n\n  static getDerivedStateFromProps(props, state) &#123;\n    if (props.currentRow !&#x3D;&#x3D; state.lastRow) &#123;\n      return &#123;\n        isScrollingDown: props.currentRow &gt; state.lastRow,\n        lastRow: props.currentRow,\n      &#125;;\n    &#125;\n\n    &#x2F;&#x2F; 返回 null 表示无需更新 state。\n    return null;\n  &#125;\n&#125;</code></pre>\n\n<p>在上面的示例中，你可能会注意到 <code>props.currentRow</code> 在 state 中的镜像（<code>state.lastRow</code>）。这使得 <code>getDerivedStateFromProps</code> 能够像在 <code>componentWillReceiveProps</code> 中相同的方式访问上一个 <code>props</code> 的值。</p>\n<p>你可能想知道为什么我们不将上一个 <code>props</code> 作为参数传递给 <code>getDerivedStateFromProps</code>。我们在设计 API 时考虑过这个方案，但最终决定不采用它，原因有两个：</p>\n<ul>\n<li><p><code>prevProps</code> 参数在第一次调用 <code>getDerivedStateFromProps</code>（实例化之后）时为 <code>null</code>，需要在每次访问 <code>prevProps</code> 时添加 <code>if-not-null</code> 检查。</p>\n</li>\n<li><p>在 <code>React</code> 的未来版本中，不传递上一个 <code>props</code> 给这个方法是为了释放内存。（如果 <code>React</code> 无需传递上一个 <code>props</code> 给生命周期，那么它就无需保存上一个 <code>props</code> 对象在内存中。）</p>\n</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p><p>注意</p>\n<p>如果你正在编写共享组件，<code>react-lifecycles-compat</code> polyfill 可以在旧版本的 React 里面使用新的 <code>getDerivedStateFromProps</code> 生命周期。在下面了解更多如何使用。</p>\n</p>\n</div>\n<h3 id=\"调用外部回调\"><a href=\"#调用外部回调\" class=\"headerlink\" title=\"调用外部回调\"></a>调用外部回调</h3><p>调用外部回调<br>下面是一个组件的示例，它在内部 state 发生变化时调用了外部函数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  componentWillUpdate(nextProps, nextState) &#123;\n    if (this.state.someStatefulValue !&#x3D;&#x3D; nextState.someStatefulValue) &#123;\n      nextProps.onChange(nextState.someStatefulValue);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"误解-3\"><a href=\"#误解-3\" class=\"headerlink\" title=\"误解 3\"></a>误解 3</h3><p>有时人们使用 <code>componentWillUpdate</code> 是出于一种错误的担心，即当 <code>componentDidUpdate</code> 触发时，更新其他组件的 <code>state</code> 已经”太晚”了。事实并非如此。React 可确保在用户看到更新的 UI 之前，刷新在 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 期间发生的任何 <code>setState</code> 调用。通常，最好避免这样的级联更新，<em>但在某些情况下，这些更新是必需的（例如：如果你需要在测量渲染的 DOM 元素后，定位工具的提示）。</em></p>\n<p>不管怎样，在异步模式下使用 <code>componentWillUpdate</code> 都是不安全的，因为<code>外部回调可能会在一次更新中被多次调用</code>。相反，应该使用 <code>componentDidUpdate</code> 生命周期，因为它保证每次更新只调用一次：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  componentDidUpdate(prevProps, prevState) &#123;\n    if (this.state.someStatefulValue !&#x3D;&#x3D; prevState.someStatefulValue) &#123;\n      this.props.onChange(this.state.someStatefulValue);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"props-更新的副作用\"><a href=\"#props-更新的副作用\" class=\"headerlink\" title=\"props 更新的副作用\"></a>props 更新的副作用</h3><p>类似于上面的例子，有时候组件在 <code>props</code> 发生变化时会产生副作用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  componentWillReceiveProps(nextProps) &#123;\n    if (this.props.isVisible !&#x3D;&#x3D; nextProps.isVisible) &#123;\n      logVisibleChange(nextProps.isVisible);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>与 <code>componentWillUpdate</code> 类似，<code>componentWillReceiveProps</code> 可能在一次更新中被多次调用。<strong>因此，避免在此方法中产生副作用非常重要</strong>。相反，应该使用 <code>componentDidUpdate</code>，因为它保证每次更新只调用一次：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  componentDidUpdate(prevProps, prevState) &#123;\n    if (this.props.isVisible !&#x3D;&#x3D; prevProps.isVisible) &#123;\n      logVisibleChange(this.props.isVisible);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"props-更新时获取外部数据\"><a href=\"#props-更新时获取外部数据\" class=\"headerlink\" title=\"props 更新时获取外部数据\"></a>props 更新时获取外部数据</h3><p>下面是一个组件的示例，它根据 props 的值获取外部数据：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; Before\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    externalData: null,\n  &#125;;\n\n  componentDidMount() &#123;\n    this._loadAsyncData(this.props.id);\n  &#125;\n\n  componentWillReceiveProps(nextProps) &#123;\n    if (nextProps.id !&#x3D;&#x3D; this.props.id) &#123;\n      this.setState(&#123; externalData: null &#125;);\n      this._loadAsyncData(nextProps.id);\n    &#125;\n  &#125;\n\n  componentWillUnmount() &#123;\n    if (this._asyncRequest) &#123;\n      this._asyncRequest.cancel();\n    &#125;\n  &#125;\n\n  render() &#123;\n    if (this.state.externalData &#x3D;&#x3D;&#x3D; null) &#123;\n      &#x2F;&#x2F; 渲染加载状态 ...\n    &#125; else &#123;\n      &#x2F;&#x2F; 渲染真实 UI ...\n    &#125;\n  &#125;\n\n  _loadAsyncData(id) &#123;\n    this._asyncRequest &#x3D; loadMyAsyncData(id).then((externalData) &#x3D;&gt; &#123;\n      this._asyncRequest &#x3D; null;\n      this.setState(&#123; externalData &#125;);\n    &#125;);\n  &#125;\n&#125;</code></pre>\n\n<p>此组件的推荐升级路径是将数据更新移动到 <code>componentDidUpdate</code>。你还可以使用新的 <code>getDerivedStateFromProps</code> 生命周期，在渲染新的 props 之前清除旧数据：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; After\nclass ExampleComponent extends React.Component &#123;\n  state &#x3D; &#123;\n    externalData: null,\n  &#125;;\n\n  static getDerivedStateFromProps(props, state) &#123;\n    &#x2F;&#x2F; 保存 prevId 在 state 中，以便我们在 props 变化时进行对比。\n    &#x2F;&#x2F; 清除之前加载的数据（这样我们就不会渲染旧的内容）。\n    if (props.id !&#x3D;&#x3D; state.prevId) &#123;\n      return &#123;\n        externalData: null,\n        prevId: props.id,\n      &#125;;\n    &#125;\n    &#x2F;&#x2F; 无需更新 state\n    return null;\n  &#125;\n\n  componentDidMount() &#123;\n    this._loadAsyncData(this.props.id);\n  &#125;\n\n  componentDidUpdate(prevProps, prevState) &#123;\n    if (this.state.externalData &#x3D;&#x3D;&#x3D; null) &#123;\n      this._loadAsyncData(this.props.id);\n    &#125;\n  &#125;\n\n  componentWillUnmount() &#123;\n    if (this._asyncRequest) &#123;\n      this._asyncRequest.cancel();\n    &#125;\n  &#125;\n\n  render() &#123;\n    if (this.state.externalData &#x3D;&#x3D;&#x3D; null) &#123;\n      &#x2F;&#x2F; 渲染加载状态 ...\n    &#125; else &#123;\n      &#x2F;&#x2F; 渲染真实 UI ...\n    &#125;\n  &#125;\n\n  _loadAsyncData(id) &#123;\n    this._asyncRequest &#x3D; loadMyAsyncData(id).then((externalData) &#x3D;&gt; &#123;\n      this._asyncRequest &#x3D; null;\n      this.setState(&#123; externalData &#125;);\n    &#125;);\n  &#125;\n&#125;</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意</p>\n<p>如果你正在使用支持取消的 HTTP 库，例如 axios 那么在卸载时取消正在进行的请求非常简单。对于原生的 Promise，<a href=\"https://gist.github.com/bvaughn/982ab689a41097237f6e9860db7ca8d6\" target=\"_blank\" >你可以使用类似此处所示的方法</a>。</p>\n</div>\n<h3 id=\"更新前读取-DOM-属性\"><a href=\"#更新前读取-DOM-属性\" class=\"headerlink\" title=\"更新前读取 DOM 属性\"></a>更新前读取 DOM 属性</h3><p>下面是一个组件的示例，该组件在更新之前从 DOM 中读取属性，以便在列表中保持滚动的位置</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">class ScrollingList extends React.Component &#123;\n  listRef &#x3D; null;\n  previousScrollOffset &#x3D; null;\n\n  componentWillUpdate(nextProps, nextState) &#123;\n    &#x2F;&#x2F; 我们正在向列表中添加新项吗？\n    &#x2F;&#x2F; 捕获滚动位置，以便我们稍后可以调整滚动位置。\n    if (this.props.list.length &lt; nextProps.list.length) &#123;\n      this.previousScrollOffset &#x3D;\n        this.listRef.scrollHeight - this.listRef.scrollTop;\n    &#125;\n  &#125;\n\n  componentDidUpdate(prevProps, prevState) &#123;\n    &#x2F;&#x2F; 如果我们刚刚添加了新项，并且设置了 previousScrollOffset。\n    &#x2F;&#x2F; 调整滚动位置，以便这些新项不会把旧项挤出视图。\n    if (this.previousScrollOffset !&#x3D;&#x3D; null) &#123;\n      this.listRef.scrollTop &#x3D;\n        this.listRef.scrollHeight - this.previousScrollOffset;\n      this.previousScrollOffset &#x3D; null;\n    &#125;\n  &#125;\n\n  render() &#123;\n    return &lt;div ref&#x3D;&#123;this.setListRef&#125;&gt;&#123;&#x2F;* ...内容... *&#x2F;&#125;&lt;&#x2F;div&gt;;\n  &#125;\n\n  setListRef &#x3D; (ref) &#x3D;&gt; &#123;\n    this.listRef &#x3D; ref;\n  &#125;;\n&#125;</code></pre>\n\n<p>在上面的示例中，<code>componentWillUpdate</code> 用于读取 DOM 属性。但是，对于异步渲染，“渲染”阶段的生命周期（如 <code>componentWillUpdate</code> 和 <code>render</code>）和”提交”阶段的生命周期（如 <code>componentDidUpdate</code>）之间可能存在延迟。如果用户在这段时间内调整窗口大小，那么从 <code>componentWillUpdate</code> 读取的 <code>scrollHeight</code> 值将过时。</p>\n<p>这个问题的解决方案是使用新的“提交”阶段生命周期 <code>getSnapshotBeforeUpdate</code>。这个方法在发生变化 <em>前立即</em> 被调用（例如在更新 DOM 之前）。它可以返回一个 React 的值作为参数传递给 <code>componentDidUpdate</code> 方法，该方法在发生变化 <em>后立即</em> 被调用。</p>\n<p>这两个生命周期可以像这样一起使用：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">class ScrollingList extends React.Component &#123;\n  listRef &#x3D; null;\n\n  getSnapshotBeforeUpdate(prevProps, prevState) &#123;\n    &#x2F;&#x2F; 我们正在向列表中添加新项吗？\n    &#x2F;&#x2F; 捕获滚动位置，以便我们稍后可以调整滚动位置。\n    if (prevProps.list.length &lt; this.props.list.length) &#123;\n      return this.listRef.scrollHeight - this.listRef.scrollTop;\n    &#125;\n    return null;\n  &#125;\n\n  componentDidUpdate(prevProps, prevState, snapshot) &#123;\n    &#x2F;&#x2F; 如果我们刚刚添加了新项，并且有了快照值。\n    &#x2F;&#x2F; 调整滚动位置，以便这些新项不会把旧项挤出视图。\n    &#x2F;&#x2F; （此处的快照是从 getSnapshotBeforeUpdate 返回的值）\n    if (snapshot !&#x3D;&#x3D; null) &#123;\n      this.listRef.scrollTop &#x3D; this.listRef.scrollHeight - snapshot;\n    &#125;\n  &#125;\n\n  render() &#123;\n    return &lt;div ref&#x3D;&#123;this.setListRef&#125;&gt;&#123;&#x2F;* ...内容... *&#x2F;&#125;&lt;&#x2F;div&gt;;\n  &#125;\n\n  setListRef &#x3D; (ref) &#x3D;&gt; &#123;\n    this.listRef &#x3D; ref;\n  &#125;;\n&#125;</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意</p>\n<p>如果你正在编写共享组件，那么 react-lifecycles-compat polyfill 可以使新的 getSnapshotBeforeUpdate 生命周期与旧版本的 React 一起使用。在下面了解更多如何使用。</p>\n\n</div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>误解、滥用、异步中老 API 多次调用</p>\n<ul>\n<li><p>误解 <code>componentWillMount</code> 中初始化 state</p>\n<br/>\n<br/>\n</li>\n<li><p>误解 <code>componentWillMount</code> 中获取数据，在 <code>componentWillMount</code> 之后立即执行 <code>render</code>。如果在 <code>componentWillMount</code> 触发时数据不可用，那么第一次 <code>render</code> 仍然会显示加载的状态，而不管你在哪里初始化获取数据</p>\n<br/>\n<br/>\n</li>\n<li><p>误解 <code>componentWillMount</code> 中订阅，在服务端不会调用<code>componentWillUnMount</code>,导致内存泄漏,</p>\n<br/>\n<br/>\n</li>\n<li><p>使用 <code>componentWillUpdate</code> 是出于一种错误的担心，即当 <code>componentDidUpdate</code> 触发时，更新其他组件的 <code>state</code> 已经”太晚”了。事实并非如此。React 可确保在用户看到更新的 UI 之前，刷新在 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 期间发生的任何 <code>setState</code> 调用。通常，最好避免这样的级联更新，<em>但在某些情况下，这些更新是必需的（例如：如果你需要在测量渲染的 DOM 元素后，定位工具的提示）。</em> <strong>异步中，多次调用</strong></p>\n<br/>\n<br/>\n</li>\n<li><p><code>componentWillReceiveProps</code> 可能在一次更新中被多次调用。<strong>因此，避免在此方法中产生副作用非常重要</strong></p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html\" target=\"_blank\" >异步渲染之更新</a></p>\n","text":"我整理这篇文章的目的很多时候，我在学技术时候更多关注的是教程和文档,原因有三：时间紧、任务重、新技术很多 最近手头无事，刚好搜源码搜到了，希望闲暇之余，你也能了解 React 变更过程，加深 React 的理解 过时的组件生命周期往往会带来不安全的编码实践 componentWi...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/categories/React-16-5-0.json"}],"tags":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/tags/React-16-5-0.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%91%E6%95%B4%E7%90%86%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">我整理这篇文章的目的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%97%B6%E7%9A%84%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%BE%80%E5%BE%80%E4%BC%9A%E5%B8%A6%E6%9D%A5%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E7%BC%96%E7%A0%81%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">过时的组件生命周期往往会带来不安全的编码实践</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%B5%E5%BE%AA%E8%AF%AD%E4%B9%89%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">遵循语义版本控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%81%E7%A7%BB%E8%BF%87%E6%97%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">迁移过时的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getDerivedStateFromProps\"><span class=\"toc-text\">getDerivedStateFromProps</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getSnapshotBeforeUpdate\"><span class=\"toc-text\">getSnapshotBeforeUpdate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-state\"><span class=\"toc-text\">初始化 state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">获取外部数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AF%E8%A7%A3-1\"><span class=\"toc-text\">误解 1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%88%E6%88%96%E8%AE%A2%E9%98%85%EF%BC%89\"><span class=\"toc-text\">添加事件监听器（或订阅）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AF%E8%A7%A3-2\"><span class=\"toc-text\">误解 2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E-props-%E6%9B%B4%E6%96%B0-state\"><span class=\"toc-text\">基于 props 更新 state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E5%9B%9E%E8%B0%83\"><span class=\"toc-text\">调用外部回调</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AF%E8%A7%A3-3\"><span class=\"toc-text\">误解 3</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#props-%E6%9B%B4%E6%96%B0%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">props 更新的副作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#props-%E6%9B%B4%E6%96%B0%E6%97%B6%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">props 更新时获取外部数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E5%89%8D%E8%AF%BB%E5%8F%96-DOM-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">更新前读取 DOM 属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React@16.5.0 PureComponent","uid":"d6e3ef07929a629e78ad737d602fe838","slug":"2022-07-21react-PureComponent","date":"2022-07-21T08:28:39.000Z","updated":"2022-07-23T09:24:12.073Z","comments":true,"path":"api/articles/2022-07-21react-PureComponent.json","keywords":null,"cover":[],"text":"串串 PureComponent 继承 Component,添加 isPureReactComponent 标记 &#x2F;&#x2F; ComponentDummy 是典型的 JavaScript 原型模拟继承的做法， function ComponentDummy() &#...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/categories/React-16-5-0.json"}],"tags":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/tags/React-16-5-0.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React@16.5.0 createElement","uid":"5d9b43eaa4875051b6cba337b4fe23d2","slug":"2022-07-21react-createElement","date":"2022-07-21T03:18:50.000Z","updated":"2022-07-23T09:24:47.961Z","comments":true,"path":"api/articles/2022-07-21react-createElement.json","keywords":null,"cover":null,"text":"项目开发时候书写代码某个页面或者是组件 &#x2F;&#x2F; class ReactComponent extends React.Component &#123; &#x2F;&#x2F; render() &#123; &#x2F;&#x2F; return &lt;p ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/categories/React-16-5-0.json"}],"tags":[{"name":"React@16.5.0","slug":"React-16-5-0","count":5,"path":"api/tags/React-16-5-0.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}