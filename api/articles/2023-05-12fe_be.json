{"title":"fe->be","uid":"ad4b164a322c7a38979fb0b108e710ba","slug":"2023-05-12fe_be","date":"2023-05-12T10:28:29.000Z","updated":"2023-05-15T13:17:33.012Z","comments":true,"path":"api/articles/2023-05-12fe_be.json","keywords":null,"cover":null,"content":"<h2 id=\"为什么我觉得-Python-很难，语法内容非常多\"><a href=\"#为什么我觉得-Python-很难，语法内容非常多\" class=\"headerlink\" title=\"为什么我觉得 Python 很难，语法内容非常多\"></a>为什么我觉得 Python 很难，语法内容非常多</h2><p>Python 是一种高级编程语言，它的语法相对于其他一些编程语言来说确实比较简洁和易读。相比于一些低级语言，Python 不需要过多关注底层细节，可以更专注于问题的解决和业务逻辑的实现。</p>\n<p>然而，对于初学者来说，学习任何一门编程语言都可能感到困难，包括 Python。以下是一些可能导致你觉得 Python 难以理解的原因：</p>\n<ol>\n<li><p><code>语法规则</code>：学习任何编程语言都需要掌握其语法规则。尽管 Python 的语法相对简洁，但仍然需要了解变量、数据类型、条件语句、循环、函数等基本概念和语法结构。</p>\n</li>\n<li><p><code>多样性和广泛性</code>：Python 生态系统非常丰富，有许多第三方库和框架可供选择，因此你可能感到有很多内容需要学习。但不必担心，你可以根据自己的需求选择学习的内容，逐步扩展你的知识。</p>\n</li>\n<li><p><code>编程思维</code>：编程不仅仅是学习语法，还需要培养一种抽象思维和解决问题的能力。这需要时间和实践来发展，通过编写代码并解决实际问题来提升自己的编程能力。</p>\n</li>\n<li><p><code>学习资源选择</code>：有时候，选择合适的学习资源也会影响你对 Python 的学习感受。确保选择适合自己的教程、书籍或在线课程，可以帮助你更好地理解和学习 Python。</p>\n</li>\n</ol>\n<p>记住，学习任何新的领域都需要时间和耐心。Python 作为一种高级编程语言，具有广泛的应用和强大的社区支持，一旦掌握了它的基本概念和语法，你会发现它是一门非常有用和灵活的语言。坚持学习，多写代码并解决实际问题，逐渐积累经验，你会越来越熟悉和自信地使用 Python。</p>\n<h2 id=\"python-编程思维什么意思\"><a href=\"#python-编程思维什么意思\" class=\"headerlink\" title=\"python 编程思维什么意思\"></a>python 编程思维什么意思</h2><p>编程思维指的是一种解决问题和设计系统的思考方式和方法。它是指通过编程的思维方式来分析问题、提出解决方案并将其转化为计算机可执行的指令。具体来说，Python 编程思维包括以下几个方面：</p>\n<ol>\n<li><p><code>抽象化</code>：将复杂的问题分解为更小、更简单的部分，通过定义和使用函数、类、模块等抽象概念来组织和管理代码。</p>\n</li>\n<li><p><code>模块化</code>：将大型任务划分为较小的模块，每个模块负责完成特定的功能，使得代码更易于理解、维护和复用。</p>\n</li>\n<li><p><code>算法思维</code>：思考如何设计高效的算法来解决问题，考虑时间和空间复杂度，并根据具体情况选择合适的数据结构和算法。</p>\n</li>\n<li><p><code>逻辑思维</code>：通过条件语句、循环和逻辑运算符来处理不同的情况，实现控制流程和逻辑判断。</p>\n</li>\n<li><p><code>调试和问题解决</code>：学会通过调试技巧和日志来定位和修复代码中的错误，以及解决遇到的问题。</p>\n</li>\n<li><p><code>创造性思维</code>：将问题和需求转化为创造性的解决方案，发挥创意和想象力，构建具有创新性和实用性的程序。</p>\n</li>\n</ol>\n<p>Python 编程思维的核心是通过编程语言和工具来解决实际问题，并以计算机的方式思考和分析。它强调的是问题解决的方法、代码的组织结构、算法的设计和效率，以及迭代和优化的过程。通过培养良好的编程思维，你可以更加高效地解决问题，设计出更好的软件系统，并与其他开发者更好地合作和交流。</p>\n<h2 id=\"前端转后端，编程思维应如何改变\"><a href=\"#前端转后端，编程思维应如何改变\" class=\"headerlink\" title=\"前端转后端，编程思维应如何改变\"></a>前端转后端，编程思维应如何改变</h2><p>当前端开发人员转向后端开发时，编程思维需要进行一些调整和适应。虽然前端和后端都是编程任务，但两者在目标、技术栈和思考方式上存在一些差异。以下是前端转向后端时需要考虑的几个方面：</p>\n<ol>\n<li><p><code>API 开发和接口设计</code>：后端开发通常涉及开发 API 接口，与前端进行数据交互。你需要了解 RESTful API 设计原则、HTTP 协议和常见的 API 工具和框架。</p>\n</li>\n<li><p><code>安全性和权限控制</code>：后端开发需要重视安全性和权限控制，例如用户认证、访问控制等。你需要学习如何进行安全编码和防止常见的安全漏洞，以保护用户数据和系统的安全性。</p>\n</li>\n<li><p><code>逻辑和业务处理</code>：后端开发更加注重逻辑和业务处理，需要深入理解业务需求，将其转化为后端代码逻辑。你需要熟悉后端的业务领域和相关技术，例如数据库操作、服务器端框架等。</p>\n</li>\n<li><p><code>数据处理和存储</code>：后端开发通常涉及与数据库进行交互、处理和存储数据。你需要了解数据库的基本概念和操作，掌握 SQL 查询语言，并学会使用适当的 ORM 工具进行数据操作。</p>\n</li>\n<li><p><code>性能和扩展性</code>：后端系统往往面临更大的数据量和并发请求，因此性能和扩展性变得更为重要。你需要学习如何优化数据库查询、处理大量数据和设计可扩展的系统架构。</p>\n</li>\n<li><p><code>故障排查和日志记录?</code>：后端开发需要具备故障排查和日志记录的能力，能够快速定位和修复问题。你需要学习如何使用调试工具、记录日志并进行故障排查。</p>\n</li>\n<li><p><code>面向整个系统</code>：后端开发需要考虑整个系统的架构和各个模块的协作。你需要了解系统的整体设计和不同组件之间的交互，以及如何与其他开发人员协作进行系统集成。</p>\n</li>\n</ol>\n<p>在转向后端开发时，需要对这些方面进行学习和实践，并与前端开发的经验相结合。充分了解后端技术栈和相关工具，理解后端的需求和挑战，并逐步培养适应后端开发的编程思维和技能。</p>\n<h2 id=\"如果含有-bug-的代码上线，会丢数据，bug-已经运行一段时间，怎么处理，好像解决不了了\"><a href=\"#如果含有-bug-的代码上线，会丢数据，bug-已经运行一段时间，怎么处理，好像解决不了了\" class=\"headerlink\" title=\"如果含有 bug 的代码上线，会丢数据，bug 已经运行一段时间，怎么处理，好像解决不了了\"></a>如果含有 bug 的代码上线，会丢数据，bug 已经运行一段时间，怎么处理，好像解决不了了</h2><p>如果已经上线的代码中存在严重的 bug 并导致数据丢失，以下是一些建议来处理这种情况：</p>\n<ol>\n<li><p><code>紧急回滚</code>：首先，立即回滚到一个可靠的版本，即将受影响的代码版本退回到上一个稳定的版本。这可以防止继续出现数据丢失的情况。</p>\n</li>\n<li><p><code>数据恢复</code>：如果数据丢失是由于 bug 导致的，你可以考虑从备份中恢复丢失的数据。如果没有备份，你可以尝试通过其他手段恢复数据，如与用户进行沟通、使用其他数据源等。</p>\n</li>\n<li><p><code>问题分析</code>：对于已经运行一段时间的 bug，你需要对问题进行详细的分析和排查，以找出根本原因。仔细检查代码、日志和错误报告，使用调试工具定位问题。了解问题的具体情况和影响范围对解决问题很重要。</p>\n</li>\n<li><p><code>紧急修复</code>：一旦发现了导致数据丢失的 bug，你需要尽快修复该 bug，并确保修复的代码经过充分的测试。修复后，可以进行测试环境的验证，确保问题不再重现。</p>\n</li>\n<li><p><code>数据补救</code>：如果数据丢失是不可逆转的，那么你可能需要考虑其他方法来弥补数据损失。这可能包括向<strong>用户道歉、提供补偿或手动恢复部分数据</strong>。具体的补救方法取决于问题的性质和受影响的数据。</p>\n</li>\n<li><p><code>总结经验教训</code>：从这次问题中吸取经验教训，并采取措施防止类似的问题再次发生。这可能包括改进代码审查流程、加强测试和质量保证、实施更严格的发布策略等。</p>\n</li>\n</ol>\n<p>最重要的是要及时采取行动，并与团队合作解决问题。在处理这类紧急情况时，及时沟通和透明度对于与相关方保持良好的关系至关重要。同时，确保你的系统具备良好的监控和报警机制，可以及时发现和响应潜在的问题。</p>\n<h2 id=\"后端常见的-bug-有哪些\"><a href=\"#后端常见的-bug-有哪些\" class=\"headerlink\" title=\"后端常见的 bug 有哪些\"></a>后端常见的 bug 有哪些</h2><p>后端开发中常见的一些 bug 包括但不限于以下几种：</p>\n<ol>\n<li><p><code>输入验证问题</code>：未对用户输入进行正确的验证和过滤，导致恶意用户提交恶意数据或造成系统崩溃。</p>\n</li>\n<li><p><code>边界条件错误</code>：未正确处理边界条件，例如数组越界、空指针引用等，导致程序崩溃或产生意外结果。</p>\n</li>\n<li><p><code>并发和竞态条件</code>：多个线程或进程同时访问共享资源，未进行适当的同步控制，导致数据错误或系统不稳定。</p>\n</li>\n<li><p><code>内存泄漏</code>：未正确释放申请的内存空间，导致内存占用不断增加，最终导致系统崩溃或性能下降。</p>\n</li>\n<li><p><code>数据库操作问题</code>：未正确处理数据库事务、锁定和索引，导致数据一致性问题或性能问题。</p>\n</li>\n<li><p><code>跨站脚本攻击（XSS）</code>：未正确过滤用户输入中的脚本代码，使恶意用户可以注入恶意脚本，并在其他用户浏览页面时执行。</p>\n</li>\n<li><p><code>SQL 注入攻击</code>：未正确过滤用户输入，使恶意用户可以在数据库查询中注入恶意 SQL 代码，从而获取敏感信息或破坏数据。</p>\n</li>\n<li><p><code>配置错误</code>：错误的配置文件设置、环境变量或权限设置，导致系统无法正常运行或暴露敏感信息。</p>\n</li>\n<li><p><code>依赖项问题</code>：未正确管理和更新项目所依赖的库和组件，导致版本冲突、安全漏洞或不兼容性问题。</p>\n</li>\n<li><p><code>日志和异常处理问题</code>：缺乏良好的日志记录和异常处理机制，导致问题排查困难或无法及时发现和解决问题。</p>\n</li>\n</ol>\n<p>这些只是常见的一些后端 bug 类型，实际情况可能因项目和环境而异。为了尽量避免这些问题，需要进行严格的代码审查、单元测试和集成测试，同时保持良好的编码习惯和规范，以及关注安全性和性能优化。</p>\n<h2 id=\"代码审查、单元测试和集成测试\"><a href=\"#代码审查、单元测试和集成测试\" class=\"headerlink\" title=\"代码审查、单元测试和集成测试\"></a>代码审查、单元测试和集成测试</h2><p>代码审查、单元测试和集成测试是常用的软件开发过程中的质量保证措施，它们有助于发现和修复潜在的问题，并确保软件的稳定性和可靠性。</p>\n<ol>\n<li><p>代码审查（Code Review）：代码审查是通过检查和评估代码质量来发现潜在问题和改进机会的过程。它通常由其他开发人员或团队成员对编写的代码进行检查。代码审查可以帮助发现潜在的错误、代码风格问题、性能问题等，提高代码的可读性和可维护性。常见的代码审查方法包括使用代码审查工具、代码走查会议等。</p>\n</li>\n<li><p>单元测试（Unit Testing）：单元测试是针对软件中最小可测试单元（如函数、方法）的测试过程。它通过编写测试用例来验证代码的正确性，捕获潜在的错误和异常情况。单元测试应该覆盖不同的代码路径和边界条件，并对预期结果进行断言。常见的 Python 单元测试框架包括 unittest、pytest 和 nose 等。</p>\n</li>\n<li><p>集成测试（Integration Testing）：集成测试是对多个组件或模块之间的交互进行测试的过程。它验证这些组件在一起协同工作的正确性和一致性。集成测试可以模拟真实的系统环境，并测试不同组件之间的接口和数据传递。常见的集成测试方法包括构建测试环境、使用自动化测试工具和编写集成测试用例等。</p>\n</li>\n</ol>\n<p>代码审查、单元测试和集成测试在软件开发过程中都是非常重要的环节，它们有助于提高代码质量、减少 bug 和错误，并增强系统的稳定性。通过定期进行代码审查和测试，可以尽早发现和解决问题，避免问题在后续阶段扩大。此外，持续集成和自动化测试也是推动代码质量保证的重要实践，可以减少人工测试的工作量，提高开发效率。</p>\n","text":"为什么我觉得 Python 很难，语法内容非常多Python 是一种高级编程语言，它的语法相对于其他一些编程语言来说确实比较简洁和易读。相比于一些低级语言，Python 不需要过多关注底层细节，可以更专注于问题的解决和业务逻辑的实现。 然而，对于初学者来说，学习任何一门编程语言都...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"其他","slug":"其他","count":3,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":2,"path":"api/tags/其他.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%A7%89%E5%BE%97-Python-%E5%BE%88%E9%9A%BE%EF%BC%8C%E8%AF%AD%E6%B3%95%E5%86%85%E5%AE%B9%E9%9D%9E%E5%B8%B8%E5%A4%9A\"><span class=\"toc-text\">为什么我觉得 Python 很难，语法内容非常多</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\"><span class=\"toc-text\">python 编程思维什么意思</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E8%BD%AC%E5%90%8E%E7%AB%AF%EF%BC%8C%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E5%BA%94%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98\"><span class=\"toc-text\">前端转后端，编程思维应如何改变</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E5%90%AB%E6%9C%89-bug-%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%BA%BF%EF%BC%8C%E4%BC%9A%E4%B8%A2%E6%95%B0%E6%8D%AE%EF%BC%8Cbug-%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%EF%BC%8C%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%8C%E5%A5%BD%E5%83%8F%E8%A7%A3%E5%86%B3%E4%B8%8D%E4%BA%86%E4%BA%86\"><span class=\"toc-text\">如果含有 bug 的代码上线，会丢数据，bug 已经运行一段时间，怎么处理，好像解决不了了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84-bug-%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">后端常见的 bug 有哪些</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E3%80%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">代码审查、单元测试和集成测试</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"knife4j","uid":"acc57bd22d883480671c69c000337b31","slug":"2023-05-15knife4j","date":"2023-05-15T10:38:24.000Z","updated":"2023-05-15T13:17:33.012Z","comments":true,"path":"api/articles/2023-05-15knife4j.json","keywords":null,"cover":[],"text":"上图 😓，人才啊！ ","link":"","photos":[],"count_time":{"symbolsCount":14,"symbolsTime":"1 mins."},"categories":[{"name":"思考","slug":"思考","count":1,"path":"api/categories/思考.json"}],"tags":[{"name":"思考","slug":"思考","count":1,"path":"api/tags/思考.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"ClickHouse","uid":"c6848d81e0857e8e07365785ba422395","slug":"2023-05-12clickhouse","date":"2023-05-12T03:39:31.000Z","updated":"2023-05-15T13:17:33.011Z","comments":true,"path":"api/articles/2023-05-12clickhouse.json","keywords":null,"cover":[],"text":"clickhouse 是什么 ClickHouse® 是一个开源的面向列的数据库管理系统，允许实时生成分析数据报告 ClickHouse 是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。 ClickHouse 是一个用于分析大规模数据的开源列式数据库管理系统。它专...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"大数据","slug":"大数据","count":1,"path":"api/categories/大数据.json"}],"tags":[{"name":"大数据","slug":"大数据","count":1,"path":"api/tags/大数据.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}