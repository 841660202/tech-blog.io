{"title":"python3 干就完了～","uid":"1ff7bc15a19101d81a6f563025053eaf","slug":"2022-09-24python","date":"2022-09-24T10:21:22.000Z","updated":"2022-09-25T11:28:05.452Z","comments":true,"path":"api/articles/2022-09-24python.json","keywords":null,"cover":[],"content":"<h1 id=\"Python3-升级\"><a href=\"#Python3-升级\" class=\"headerlink\" title=\"Python3 升级\"></a>Python3 升级</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$ python --version\nPython 2.7.15\n$ python3 --version\nPython 3.7.2\n$ brew upgrade python@3.10</code></pre>\n\n<p>大概是2019年安装的python 3.7.2版本，看了下文档，有少数内容是需要3.8版本才可以使用，所以升级下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 尝试的方案就不提了，最后是使用brew更新的，我印象中也是使用brew进行安装的 Python 3.7.2\n\n&#x2F;&#x2F;  1. brew升级问题\n$ brew update                     \nError: \n  homebrew-core is a shallow clone.\n  homebrew-cask is a shallow clone.\nTo &#96;brew update&#96;, first run:\n&#x2F;&#x2F; 提示更新 homebrew-core 、 homebrew-cask\n  git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow\n  git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow\nThese commands may take a few minutes to run due to the large size of the repositories.\nThis restriction has been made on GitHub&#39;s request because updating shallow\nclones is an extremely expensive operation due to the tree layout and traffic of\nHomebrew&#x2F;homebrew-core and Homebrew&#x2F;homebrew-cask. We don&#39;t do this for you\nautomatically to avoid repeatedly performing an expensive unshallow operation in\nCI systems (which should instead be fixed to not use shallow clones). Sorry for\nthe inconvenience!\n\n$  git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core fetch --unshallow\nremote: Enumerating objects: 554589, done.\nremote: Counting objects: 100% (554579&#x2F;554579), done.\nremote: Compressing objects: 100% (203589&#x2F;203589), done.\nremote: Total 545216 (delta 349940), reused 533974 (delta 338772), pack-reused 0\nReceiving objects: 100% (545216&#x2F;545216), 185.96 MiB | 3.35 MiB&#x2F;s, done.\nResolving deltas: 100% (349940&#x2F;349940), completed with 7224 local objects.\nFrom https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core\n   ec1cfdae42e..44f9ecb1cc9  master     -&gt; origin&#x2F;master\n\n$ git -C &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask fetch --unshallow\n\nremote: Enumerating objects: 183139, done.\nremote: Counting objects: 100% (170633&#x2F;170633), done.\nremote: Compressing objects: 100% (52991&#x2F;52991), done.\nremote: Total 157830 (delta 118189), reused 144193 (delta 104700), pack-reused 0\nReceiving objects: 100% (157830&#x2F;157830), 74.85 MiB | 3.34 MiB&#x2F;s, done.\nResolving deltas: 100% (118189&#x2F;118189), completed with 6886 local objects.\nFrom https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-cask\n   372fbf30e9..91f5fb626d  master     -&gt; origin&#x2F;master\n\n&#x2F;&#x2F; python3.10安装\n\n$ brew upgrade python@3.10\n\nRunning &#96;brew update --preinstall&#96;...\n\n&#x3D;&#x3D;&gt; Upgrading 1 outdated package:\npython@3.10 3.10.2 -&gt; 3.10.6_2\nError: python@3.10: the bottle needs the Apple Command Line Tools to be installed.\n  You can install them, if desired, with:\n    xcode-select --install\nYou can try to install from source with:\n  brew install --build-from-source python@3.10\nPlease note building from source is unsupported. You will encounter build\nfailures with some formulae. If you experience any issues please create pull\nrequests instead of asking for help on Homebrew&#39;s GitHub, Twitter or any other\nofficial channels.\n\n&#x2F;&#x2F; 失败提示\n\n$ xcode-select --install\nxcode-select: note: install requested for command line developer tools\n\n&#x2F;&#x2F; 从source安装\n$  brew install --build-from-source python@3.10\n...\n\n&#x2F;&#x2F; 安装 98.4% 失败\n######################################################################    98.4%curl: (56) LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60\n\nError: python@3.10: Failed to download resource &quot;python@3.10&quot;\nDownload failed: https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.10.6&#x2F;Python-3.10.6.tgz\n\n&#x2F;&#x2F; 重新执行命令再次安装\n\n$  brew install --build-from-source python@3.10\nRunning &#96;brew update --auto-update&#96;...\npython@3.10 3.7.2_2 is already installed but outdated (so it will be upgraded).\n\n\n&#x3D;&#x3D;&gt; Downloading https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.10.6&#x2F;Python-3.10.6.tgz\n######################################################################## 100.0%\n&#x3D;&#x3D;&gt; Upgrading python@3.10\n  3.10.2 -&gt; 3.10.6_2 \n\n\n\n&#x2F;&#x2F; 整个过程很长，还需要vpn加持\n\nLast login: Sat Sep 24 17:31:07 on ttys008\n $ python3 --version\nPython 3.10.6\n $ python           \nzsh: command not found: python &#x2F;&#x2F; 是真的狗啊\n $ \n\n&#x2F;&#x2F; 发现又在下载了，我确认了下安装日志，之前是有2.7.15的\n&#x3D;&#x3D;&gt; Downloading https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;2.7.15&#x2F;Python-2.7.15.tar.xz\n######                                                                     8.6%\n\n\n\n$ brew install --build-from-source python@2.7.15\nWarning: No available formula with the name &quot;python@2.7.15&quot;. Did you mean python@3.7?\n&#x3D;&#x3D;&gt; Searching for similarly named formulae...\nThis similarly named formula was found:\npython@3.7\nTo install it, run:\n  brew install python@3.7\n&#x3D;&#x3D;&gt; Searching for a previously deleted formula (in the last month)...\nError: No previously deleted formula found.\n&#x3D;&#x3D;&gt; Searching taps on GitHub...\nError: No formulae found in taps.\n$ brew install --build-from-source python@2.7   \nWarning: No available formula with the name &quot;python@2.7&quot;. Did you mean python@3.7, python@3.9, python@3.8, python@3.10 or python-yq?\n&#x3D;&#x3D;&gt; Searching for similarly named formulae...\nThese similarly named formulae were found:\npython@3.7                   python@3.9                   python@3.8                   python@3.10 ✔                python-yq\nTo install one of them, run (for example):\n  brew install python@3.7\n&#x3D;&#x3D;&gt; Searching for a previously deleted formula (in the last month)...\nError: No previously deleted formula found.\n&#x3D;&#x3D;&gt; Searching taps on GitHub...\nError: No formulae found in taps.\n$ brew link --overwrite python@2\n\nLinking &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python@2&#x2F;2.7.15... 33 symlinks created.\n$ brew link --overwrite python@2\nWarning: Already linked: &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python@2&#x2F;2.7.15\nTo relink, run:\n  brew unlink python@2 &amp;&amp; brew link python@2\n\n&#x2F;&#x2F; unlink、link  \n$ brew unlink python@2 &amp;&amp; brew link python@2\nUnlinking &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python@2&#x2F;2.7.15... 33 symlinks removed.\nLinking &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python@2&#x2F;2.7.15... 33 symlinks created.\n\n&#x2F;&#x2F; 终于好了\n$ python --version\nPython 2.7.15\n$ python3 --version\nPython 3.10.6\n$ \n</code></pre>\n\n<h1 id=\"python官网\"><a href=\"#python官网\" class=\"headerlink\" title=\"python官网\"></a>python官网</h1><p>对于python官网，我特意和java、go、rust、nodejs做了下比较，虽然python的官网也显得老旧，我甚至一度怀疑我看的是不是python文档。没go官网看的那么舒服。可毕竟人家是编程语言排名第一。嗯～，就这一点，都可以忍。学～</p>\n<p><a href=\"https://docs.python.org/zh-cn/3/tutorial/index.html\" target=\"_blank\" >见 python</a></p>\n<p><a href=\"https://www.runoob.com/python3/python3-tutorial.html\" target=\"_blank\" >见 runoob</a></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>对于菜鸟教程上的例子，可以选择更改页面样式<code>img &#123;display: none&#125;</code>来查看，gif文件跳来跳去，看的眼花，而且每个图占据那么大的空间，文章结构感被破坏了</p>\n</div>\n<h1 id=\"python-web框架选择\"><a href=\"#python-web框架选择\" class=\"headerlink\" title=\"python web框架选择\"></a>python web框架选择</h1><p>去boss搜了下，主要是 django 和 Flask</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/359280800\" target=\"_blank\" >Django vs Flask: 到底应该选哪个?</a></p>\n<p>我选了 django ,原因</p>\n<ul>\n<li>django star多一点</li>\n<li>Django vs Flask: 到底应该选哪个? 让我觉得，django更稳</li>\n<li>Django官网比Flask看着舒服</li>\n</ul>\n<p><a href=\"https://pythondjango.cn/django/basic-tutorials\" target=\"_blank\" >见 pythondjango</a><br><a href=\"https://zhuanlan.zhihu.com/p/110479564\" target=\"_blank\" >Django 的由来及名字如何发音如何读</a><br><a href=\"https://zhuanlan.zhihu.com/p/110479564\" target=\"_blank\" >Django 由来</a></p>\n<h1 id=\"我的感受\"><a href=\"#我的感受\" class=\"headerlink\" title=\"我的感受\"></a>我的感受</h1><p>在感受了 python， django 和 Flask。 我觉得，这比java简单多了，和js比较，python api也更多，虽然，一开始有点抵触语法，习惯就好～</p>\n<p>java这玩意，生态再好，我都不想下手（虽然之前也有学过😓，迷途小书童）</p>\n<h1 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h1><p>Last login: Sat Sep 24 18:45:11 on ttys009<br>$ pip install Django&#x3D;&#x3D;4.1.1<br>zsh: command not found: pip<br>$ brew install pip<br>Running <code>brew update --auto-update</code>…<br>&#x3D;&#x3D;&gt; Auto-updated Homebrew!<br>Updated 1 tap (homebrew&#x2F;core).</p>\n<p>You have 22 outdated formulae installed.<br>You can upgrade them with brew upgrade<br>or list them with brew outdated.</p>\n<p>Warning: No available formula with the name “pip”. Did you mean pipx, pig, pit, php, pcp, pup, zip, sip or vip?<br>&#x3D;&#x3D;&gt; Searching for similarly named formulae…<br>These similarly named formulae were found:<br>aespipe              libpipeline          pipe-rename          pipes-sh             pyenv-pip-migrate    pit                  zip<br>brew-pip             pip-audit            pipebench            pipeviewer           spiped               php                  sip<br>grepip               pip-completion       pipemeter            pipgrip              xpipe                pcp                  vip<br>lesspipe             pip-tools            pipenv               pipx                 pig                  pup<br>To install one of them, run (for example):<br>  brew install aespipe<br>pip is part of the python formula:<br>  brew install python</p>\n<h1 id=\"安装-Django\"><a href=\"#安装-Django\" class=\"headerlink\" title=\"安装 Django\"></a>安装 Django</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ python3 -m pip install Django\nCollecting Django\n  Downloading Django-4.1.1-python-none-any.whl (8.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.1&#x2F;8.1 MB 2.0 MB&#x2F;s eta 0:00:00\nCollecting sqlparse&gt;&#x3D;0.2.2\n  Downloading sqlparse-0.4.3-python-none-any.whl (42 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 42.8&#x2F;42.8 kB 238.6 kB&#x2F;s eta 0:00:00\nCollecting asgiref&lt;4,&gt;&#x3D;3.5.2\n  Downloading asgiref-3.5.2-python-none-any.whl (22 kB)\nInstalling collected packages: sqlparse, asgiref, Django\nSuccessfully installed Django-4.1.1 asgiref-3.5.2 sqlparse-0.4.3</code></pre>\n\n<p><a href=\"https://www.runoob.com/django/django-intro.html\" target=\"_blank\" >runoob</a></p>\n<h1 id=\"事例\"><a href=\"#事例\" class=\"headerlink\" title=\"事例\"></a>事例</h1><h1 id=\"Django-ORM\"><a href=\"#Django-ORM\" class=\"headerlink\" title=\"Django ORM\"></a>Django ORM</h1><h2 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h2><ul>\n<li>正反向区别</li>\n<li>一对一、一对多、多对多区别</li>\n<li>单划线、双划线区别</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Book(models.Model):\n    title &#x3D; models.CharField(max_length&#x3D;32)\n    price &#x3D; models.DecimalField(max_digits&#x3D;5, decimal_places&#x3D;2)\n    pub_date &#x3D; models.DateField()\n    # 暂且理解 关联\n    publish &#x3D; models.ForeignKey(&quot;Publish&quot;, on_delete&#x3D;models.CASCADE)\n    # 多对多， \n    # 从Book往Author看，为正向，\n    # 从Author往Book看，为反向\n    authors &#x3D; models.ManyToManyField(&quot;Author&quot;)\n\n\nclass Publish(models.Model):\n    name &#x3D; models.CharField(max_length&#x3D;32)\n    city &#x3D; models.CharField(max_length&#x3D;64)\n    email &#x3D; models.EmailField()\n\n\nclass Author(models.Model):\n    name &#x3D; models.CharField(max_length&#x3D;32)\n    age &#x3D; models.SmallIntegerField()\n    # 一对一\n    au_detail &#x3D; models.OneToOneField(&quot;AuthorDetail&quot;, on_delete&#x3D;models.CASCADE)\n\n\nclass AuthorDetail(models.Model):\n    gender_choices &#x3D; (\n        (0, &quot;女&quot;),\n        (1, &quot;男&quot;),\n        (2, &quot;保密&quot;),\n    )\n    gender &#x3D; models.SmallIntegerField(choices&#x3D;gender_choices)\n    tel &#x3D; models.CharField(max_length&#x3D;32)\n    addr &#x3D; models.CharField(max_length&#x3D;64)\n    birthday &#x3D; models.DateField()</code></pre>\n\n<p>说明：</p>\n<p>1、EmailField 数据类型是邮箱格式，底层继承 CharField，进行了封装，相当于 MySQL 中的 varchar。</p>\n<p>2、Django1.1 版本不需要联级删除：on_delete&#x3D;models.CASCADE，Django2.2 需要。</p>\n<p>3、一般不需要设置联级更新.</p>\n<p>4、外键在一对多的多中设置：models.ForeignKey(“关联类名”, on_delete&#x3D;models.CASCADE)。</p>\n<p>5、OneToOneField &#x3D; ForeignKey(…，unique&#x3D;True)设置一对一。</p>\n<p>6、若有模型类存在外键，创建数据时，要先创建外键关联的模型类的数据，不然创建包含外键的模型类的数据时，外键的关联模型类的数据会找不到。</p>\n<h2 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h2><p><strong>书籍表 Book</strong>：title 、 price 、 pub_date 、 publish（外键，多对一） 、 authors（多对多）</p>\n<p><strong>出版社表 Publish</strong>：name 、 city 、 email</p>\n<p><strong>作者表 Author</strong>：name 、 age 、 au_detail（一对一）</p>\n<p><strong>作者详情表 AuthorDetail</strong>：gender 、 tel 、 addr 、 birthday</p>\n<h2 id=\"表关系\"><a href=\"#表关系\" class=\"headerlink\" title=\"表关系\"></a>表关系</h2><img src=\"http://t-blog-images.aijs.top/img/202209251553634.png\" />\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO app01_publish ( name, city, email )\nVALUES\n ( &quot;华山出版社&quot;, &quot;华山&quot;, &quot;hs@163.com&quot; ),\n ( &quot;明教出版社&quot;, &quot;黑木崖&quot;, &quot;mj@163.com&quot; )\n \n# 先插入 authordetail 表中多数据\nINSERT INTO app01_authordetail ( gender, tel, addr, birthday )\nVALUES\n ( 1, 13432335433, &quot;华山&quot;, &quot;1994-5-23&quot; ),\n ( 1, 13943454554, &quot;黑木崖&quot;, &quot;1961-8-13&quot; ),\n ( 0, 13878934322, &quot;黑木崖&quot;, &quot;1996-5-20&quot; )\n\n# 再将数据插入 author，这样 author 才能找到 authordetail \nINSERT INTO app01_author ( name, age, au_detail_id )\nVALUES\n ( &quot;令狐冲&quot;, 25, 1 ),\n ( &quot;任我行&quot;, 58, 2 ),\n ( &quot;任盈盈&quot;, 23, 3 )</code></pre>\n\n<p>在 MySQL 中执行以下 SQL 插入操作：</p>\n<h2 id=\"ORM-添加数据\"><a href=\"#ORM-添加数据\" class=\"headerlink\" title=\"ORM - 添加数据\"></a>ORM - 添加数据</h2><h3 id=\"一对多-外键-ForeignKey\"><a href=\"#一对多-外键-ForeignKey\" class=\"headerlink\" title=\"一对多(外键 ForeignKey)\"></a>一对多(外键 ForeignKey)</h3><p><strong>方式一:</strong> 传对象的形式，返回值的数据类型是对象，书籍对象。</p>\n<p>步骤：</p>\n<p>a. 获取出版社对象<br>b. 给书籍的出版社属性 pulish 传出版社对象</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># app01&#x2F;views.py 文件代码：\ndef add_book(request):\n    #  获取出版社对象\n    pub_obj &#x3D; models.Publish.objects.filter(pk&#x3D;1).first() # pk 缩写 primary key\n    #  给书籍的出版社属性publish传出版社对象\n    book &#x3D; models.Book.objects.create(title&#x3D;&quot;菜鸟教程&quot;, price&#x3D;200, pub_date&#x3D;&quot;2010-10-10&quot;, publish&#x3D;pub_obj)\n    print(book, type(book))\n    return HttpResponse(book)</code></pre>\n\n<p><strong>方式二:</strong> 传对象ID的形式（传对象id常用）</p>\n<p>一对多中，设置外键属性的类(多的表)中，MySQL 中显示的字段名是:外键属性名_id。</p>\n<p>返回值的数据类型是对象，书籍对象。</p>\n<p>步骤：</p>\n<p>a. 获取出版社对象的 id<br>b. 给书籍的关联出版社字段 pulish_id 传出版社对象的 id</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># app01&#x2F;views.py 文件代码：\ndef add_book(request):\n    #  获取出版社对象\n    pub_obj &#x3D; models.Publish.objects.filter(pk&#x3D;1).first()\n    #  获取出版社对象的id\n    pk &#x3D; pub_obj.pk\n    #  给书籍的关联出版社字段 publish_id 传出版社对象的id\n    book &#x3D; models.Book.objects.create(title&#x3D;&quot;冲灵剑法&quot;, price&#x3D;100, pub_date&#x3D;&quot;2004-04-04&quot;, publish_id&#x3D;pk)\n    print(book, type(book))\n    return HttpResponse(book)</code></pre>\n\n<h3 id=\"多对多-ManyToManyField-：在第三张关系表中新增数据\"><a href=\"#多对多-ManyToManyField-：在第三张关系表中新增数据\" class=\"headerlink\" title=\"多对多(ManyToManyField)：在第三张关系表中新增数据\"></a>多对多(ManyToManyField)：在第三张关系表中新增数据</h3><p><strong>方式一:</strong> 传对象形式，无返回值。</p>\n<p>步骤：</p>\n<p>a. 获取作者对象<br>b. 获取书籍对象<br>c. 给书籍对象的 authors 属性用 add 方法传作者对象</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># app01&#x2F;views.py 文件代码：\ndef add_book(request):\n    #  获取作者对象\n    chong &#x3D; models.Author.objects.filter(name&#x3D;&quot;令狐冲&quot;).first()\n    ying &#x3D; models.Author.objects.filter(name&#x3D;&quot;任盈盈&quot;).first()\n    #  获取书籍对象\n    book &#x3D; models.Book.objects.filter(title&#x3D;&quot;菜鸟教程&quot;).first()\n    #  给书籍对象的 authors 属性用 add 方法传作者对象\n    book.authors.add(chong, ying)\n    return HttpResponse(book)</code></pre>\n\n<p><strong>方式二:</strong> 传对象id形式，无返回值。</p>\n<p>步骤：</p>\n<p>a. 获取作者对象的 id<br>b. 获取书籍对象<br>c. 给书籍对象的 authors 属性用 add 方法传作者对象的 id</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># app01&#x2F;views.py 文件代码：\ndef add_book(request):\n    #  获取作者对象\n    chong &#x3D; models.Author.objects.filter(name&#x3D;&quot;令狐冲&quot;).first()\n    #  获取作者对象的id\n    pk &#x3D; chong.pk\n    #  获取书籍对象\n    book &#x3D; models.Book.objects.filter(title&#x3D;&quot;冲灵剑法&quot;).first()\n    #  给书籍对象的 authors 属性用 add 方法传作者对象的id\n    book.authors.add(pk) # 这个不能理解了，authors这个字段接受了pk</code></pre>\n\n<h2 id=\"关联管理器-对象调用\"><a href=\"#关联管理器-对象调用\" class=\"headerlink\" title=\"关联管理器(对象调用)\"></a>关联管理器(对象调用)</h2><p>前提：</p>\n<h3 id=\"多对多（双向均有关联管理器）\"><a href=\"#多对多（双向均有关联管理器）\" class=\"headerlink\" title=\"多对多（双向均有关联管理器）\"></a>多对多（双向均有关联管理器）</h3><h3 id=\"一对多（只有多的那个类的对象有关联管理器，即反向才有）\"><a href=\"#一对多（只有多的那个类的对象有关联管理器，即反向才有）\" class=\"headerlink\" title=\"一对多（只有多的那个类的对象有关联管理器，即反向才有）\"></a>一对多（只有多的那个类的对象有关联管理器，即反向才有）</h3><p>语法格式：</p>\n<p>正向：属性名<br>反向：小写类名加 _set</p>\n<p><strong>注意：一对多只能反向</strong></p>\n<p>常用方法：</p>\n<p>add()：用于多对多，把指定的模型对象添加到关联对象集（关系表）中。</p>\n<p>注意：add() 在一对多(即外键)中，只能传对象（ <em>QuerySet数据类型），不能传 id（</em>[id表]）。</p>\n<p>*[ ] 的使用:</p>\n<h3 id=\"方式一：传对象\"><a href=\"#方式一：传对象\" class=\"headerlink\" title=\"方式一：传对象\"></a>方式一：传对象</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">book_obj &#x3D; models.Book.objects.get(id&#x3D;10)\nauthor_list &#x3D; models.Author.objects.filter(id__gt&#x3D;2)\nbook_obj.authors.add(*author_list)  # 将 id 大于2的作者对象添加到这本书的作者集合中</code></pre>\n\n<h3 id=\"方式二：传对象-id\"><a href=\"#方式二：传对象-id\" class=\"headerlink\" title=\"方式二：传对象 id\"></a>方式二：传对象 id</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">book_obj.authors.add(*[1,3]) # 将 id&#x3D;1 和 id&#x3D;3 的作者对象添加到这本书的作者集合中\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<p>反向：小写表名_set</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ying &#x3D; models.Author.objects.filter(name&#x3D;&quot;任盈盈&quot;).first()\nbook &#x3D; models.Book.objects.filter(title&#x3D;&quot;冲灵剑法&quot;).first()\nying.book_set.add(book)\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<p>create()：创建一个新的对象，并同时将它添加到关联对象集之中。</p>\n<p>返回新创建的对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pub &#x3D; models.Publish.objects.filter(name&#x3D;&quot;明教出版社&quot;).first()\nwo &#x3D; models.Author.objects.filter(name&#x3D;&quot;任我行&quot;).first()\nbook &#x3D; wo.book_set.create(title&#x3D;&quot;吸星大法&quot;, price&#x3D;300, pub_date&#x3D;&quot;1999-9-19&quot;, publish&#x3D;pub)\nprint(book, type(book))\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<p>remove()：从关联对象集中移除执行的模型对象。</p>\n<p>对于 ForeignKey 对象，这个方法仅在 null&#x3D;True（可以为空）时存在，无返回值。</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">author_obj &#x3D;models.Author.objects.get(id&#x3D;1)\nbook_obj &#x3D; models.Book.objects.get(id&#x3D;11)\nauthor_obj.book_set.remove(book_obj)\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<p>clear()：从关联对象集中移除一切对象，删除关联，不会删除对象。</p>\n<p>对于 ForeignKey 对象，这个方法仅在 null&#x3D;True（可以为空）时存在。</p>\n<p>无返回值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 清空独孤九剑关联的所有作者\nbook &#x3D; models.Book.objects.filter(title&#x3D;&quot;菜鸟教程&quot;).first()\nbook.authors.clear()</code></pre>\n\n<h2 id=\"ORM-查询-set语法\"><a href=\"#ORM-查询-set语法\" class=\"headerlink\" title=\"ORM 查询 _set语法\"></a>ORM 查询 _set语法</h2><p>基于对象的跨表查询。</p>\n<p>正向：属性名称<br>反向：小写类名_set</p>\n<h3 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h3><h4 id=\"正向\"><a href=\"#正向\" class=\"headerlink\" title=\"正向\"></a>正向</h4><p>查询主键为 1 的书籍的出版社所在的城市（正向）。</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">book &#x3D; models.Book.objects.filter(pk&#x3D;1).first()\nres &#x3D; book.publish.city\nprint(res, type(res))\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h4 id=\"反向\"><a href=\"#反向\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p>查询明教出版社出版的书籍名（反向）。</p>\n<p>反向：对象.小写类名_set(pub.book_set) 可以跳转到关联的表(书籍表)。</p>\n<p>pub.book_set.all()：取出书籍表的所有书籍对象，在一个 QuerySet 里，遍历取出一个个书籍对象。</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pub &#x3D; models.Publish.objects.filter(name&#x3D;&quot;明教出版社&quot;).first()\nres &#x3D; pub.book_set.all()\nfor i in res:\n    print(i.title)\nreturn HttpResponse(&quot;ok&quot;)\n</code></pre>\n\n<h3 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h3><p>查询令狐冲的电话（正向）</p>\n<h4 id=\"正向-1\"><a href=\"#正向-1\" class=\"headerlink\" title=\"正向\"></a>正向</h4><p>正向：对象.属性 (author.au_detail) 可以跳转到关联的表(作者详情表)</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">author &#x3D; models.Author.objects.filter(name&#x3D;&quot;令狐冲&quot;).first()\nres &#x3D; author.au_detail.tel\nprint(res, type(res))\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h4 id=\"反向-1\"><a href=\"#反向-1\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p>查询所有住址在黑木崖的作者的姓名（反向）。</p>\n<p>一对一的反向，用 对象.小写类名 即可，不用加 _set。（这个比较特别）</p>\n<p>反向：对象.小写类名(addr.author)可以跳转到关联的表(作者表)。</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">addr &#x3D; models.AuthorDetail.objects.filter(addr&#x3D;&quot;黑木崖&quot;).first()\nres &#x3D; addr.author.name\nprint(res, type(res))\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h3 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>菜鸟教程所有作者的名字以及手机号（正向）。</p>\n<h4 id=\"正向-2\"><a href=\"#正向-2\" class=\"headerlink\" title=\"正向\"></a>正向</h4><p>正向：对象.属性(book.authors)可以跳转到关联的表(作者表)。</p>\n<p>作者表里没有作者电话，因此再次通过对象.属性(i.au_detail)跳转到关联的表（作者详情表）。</p>\n<p><strong>实例</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">book &#x3D; models.Book.objects.filter(title&#x3D;&quot;菜鸟教程&quot;).first()\nres &#x3D; book.authors.all()\nfor i in res:\n    print(i.name, i.au_detail.tel) # au_detail 为author类的一个字段\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h4 id=\"反向-2\"><a href=\"#反向-2\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p>查询任我行出过的所有书籍的名字（反向）。</p>\n<p><strong>实例</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">author &#x3D; models.Author.objects.filter(name&#x3D;&quot;任我行&quot;).first()\nres &#x3D; author.book_set.all()\nfor i in res:\n    print(i.title)\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h2 id=\"ORM查询-基于双下划线的跨表查询-语法\"><a href=\"#ORM查询-基于双下划线的跨表查询-语法\" class=\"headerlink\" title=\"ORM查询 基于双下划线的跨表查询 语法\"></a>ORM查询 基于双下划线的跨表查询 语法</h2><p><strong>正向：</strong>属性名称__跨表的属性名称<br><strong>反向：</strong>小写类名__跨表的属性名称（有个问题，如果类名和属性名一样，呃呃呃～～～？）</p>\n<h3 id=\"一对多-1\"><a href=\"#一对多-1\" class=\"headerlink\" title=\"一对多\"></a>一对多</h3><p>查询菜鸟出版社出版过的所有书籍的名字与价格。</p>\n<h4 id=\"正向-3\"><a href=\"#正向-3\" class=\"headerlink\" title=\"正向\"></a>正向</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.filter(publish__name&#x3D;&quot;菜鸟出版社&quot;).values_list(&quot;title&quot;, &quot;price&quot;)</code></pre>\n\n<h4 id=\"反向-3\"><a href=\"#反向-3\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p>反向：通过 小写类名__跨表的属性名称（book__title，book__price） 跨表获取数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Publish.objects.filter(name&#x3D;&quot;菜鸟出版社&quot;).\n# Book 中有publish，从Publish 找Book为反向查找\nvalues_list(&quot;book__title&quot;,&quot;book__price&quot;) # 模型与表：只要存在模型关系，就可以获取相关表中数据\nreturn HttpResponse(&quot;ok&quot;)</code></pre>\n\n<h3 id=\"多对多-1\"><a href=\"#多对多-1\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>查询任我行出过的所有书籍的名字。</p>\n<h4 id=\"正向-4\"><a href=\"#正向-4\" class=\"headerlink\" title=\"正向\"></a>正向</h4><p>正向：通过 属性名称__跨表的属性名称(authors__name) 跨表获取数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.filter(authors__name&#x3D;&quot;任我行&quot;).values_list(&quot;title&quot;)</code></pre>\n\n<h4 id=\"反向-4\"><a href=\"#反向-4\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p><strong>反向：</strong>通过 小写类名__跨表的属性名称（book__title） 跨表获取数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Author.objects.filter(name&#x3D;&quot;任我行&quot;).values_list(&quot;book__title&quot;)</code></pre>\n\n<h3 id=\"一对一-1\"><a href=\"#一对一-1\" class=\"headerlink\" title=\"一对一\"></a>一对一</h3><p>查询任我行的手机号。</p>\n<h4 id=\"正向-5\"><a href=\"#正向-5\" class=\"headerlink\" title=\"正向\"></a>正向</h4><p><strong>正向：</strong>通过 属性名称__跨表的属性名称(au_detail__tel) 跨表获取数据。（Author中au_detail 字段）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Author.objects.filter(name&#x3D;&quot;任我行&quot;).values_list(&quot;au_detail__tel&quot;)</code></pre>\n\n<h4 id=\"反向-5\"><a href=\"#反向-5\" class=\"headerlink\" title=\"反向\"></a>反向</h4><p><strong>反向：</strong>通过 小写类名__跨表的属性名称（author__name） 跨表获取数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.AuthorDetail.objects.filter(author__name&#x3D;&quot;任我行&quot;).values_list(&quot;tel&quot;)</code></pre>\n\n<h2 id=\"ORM-–-多表实例（聚合与分组查询）\"><a href=\"#ORM-–-多表实例（聚合与分组查询）\" class=\"headerlink\" title=\"ORM – 多表实例（聚合与分组查询）\"></a>ORM – 多表实例（聚合与分组查询）</h2><h3 id=\"聚合查询（aggregate）\"><a href=\"#聚合查询（aggregate）\" class=\"headerlink\" title=\"聚合查询（aggregate）\"></a>聚合查询（aggregate）</h3><p>聚合查询函数是对一组值执行计算，并返回单个值。</p>\n<p>Django 使用聚合查询前要先从 django.db.models 引入 Avg、Max、Min、Count、Sum（首字母大写）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<ul>\n<li><p>聚合查询返回值的数据类型是字典。</p>\n</li>\n<li><p>聚合函数 aggregate() 是 QuerySet 的一个终止子句， 生成的一个汇总值，相当于 count()。</p>\n</li>\n<li><p>使用 aggregate() 后，数据类型就变为字典，不能再使用 QuerySet 数据类型的一些 API 了。</p>\n</li>\n<li><p>日期数据类型(DateField)可以用 Max 和 Min。</p>\n</li>\n<li><p>返回的字典中：键的名称默认是（属性名称加上__聚合函数名），值是计算出来的聚合值。</p>\n</li>\n<li><p>如果要自定义返回字典的键的名称，可以起别名：</p>\n</li>\n<li><p>aggregate(别名 &#x3D; 聚合函数名(“属性名称”))\n</div>\n</li>\n</ul>\n<p>计算所有图书的平均价格:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数\n...\nres &#x3D; models.Book.objects.aggregate(Avg(&quot;price&quot;))\nprint(res, type(res))\n...</code></pre>\n\n<p>计算所有图书的数量、最贵价格和最便宜价格:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res&#x3D;models.Book.objects.aggregate(c&#x3D;Count(&quot;id&quot;),max&#x3D;Max(&quot;price&quot;),min&#x3D;Min(&quot;price&quot;))\nprint(res,type(res)\n</code></pre>\n\n<h3 id=\"分组查询（annotate）\"><a href=\"#分组查询（annotate）\" class=\"headerlink\" title=\"分组查询（annotate）\"></a>分组查询（annotate）</h3><p>分组查询一般会用到聚合函数，所以使用前要先从 django.db.models 引入 Avg,Max,Min,Count,Sum（首字母大写）。</p>\n<p>from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数</p>\n<p>返回值：</p>\n<p>分组后，用 values 取值，则返回值是 QuerySet 数据类型里面为一个个字典；<br>分组后，用 values_list 取值，则返回值是 QuerySet 数据类型里面为一个个元组。<br>MySQL 中的 limit 相当于 ORM 中的 QuerySet 数据类型的切片。</p>\n<p>注意：</p>\n<p>annotate 里面放聚合函数。</p>\n<p>values 或者 values_list 放在 annotate 前面：values 或者 values_list 是声明以什么字段分组，annotate 执行分组。</p>\n<p>values 或者 values_list 放在annotate后面： annotate 表示直接以当前表的pk执行分组，values 或者 values_list 表示查询哪些字段， 并且要将 annotate 里的聚合函数起别名，在 values 或者 values_list 里写其别名。</p>\n<p>准备数据和创建模型</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># models.py\nclass Emp(models.Model):\n    name &#x3D; models.CharField(max_length&#x3D;32)\n    age &#x3D; models.IntegerField()\n    # 外键\n    salary &#x3D; models.DecimalField(max_digits&#x3D;8, decimal_places&#x3D;2)\n    dep &#x3D; models.CharField(max_length&#x3D;32)\n    province &#x3D; models.CharField(max_length&#x3D;32)\n\nclass Emps(models.Model):\n    name &#x3D; models.CharField(max_length&#x3D;32)\n    age &#x3D; models.IntegerField()\n    salary &#x3D; models.DecimalField(max_digits&#x3D;8, decimal_places&#x3D;2)\n    # 外键\n    dep &#x3D; models.ForeignKey(&quot;Dep&quot;, on_delete&#x3D;models.CASCADE)\n    province &#x3D; models.CharField(max_length&#x3D;32)\n\nclass Dep(models.Model):\n    title &#x3D; models.CharField(max_length&#x3D;32)</code></pre>\n\n<p>数据:</p>\n<p>在 MySQL 命令行中执行：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- app01_emp数据\nINSERT INTO &#96; app01_emp &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; dep &#96; , &#96; province &#96;) VALUES (&#39;1&#39;, &#39;令狐冲&#39;, &#39;24&#39;, &#39;6000.00&#39;, &#39;销售部&#39; , &#39;河南&#39;);\nINSERT INTO &#96; app01_emp &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; dep &#96; , &#96; province &#96;) VALUES (&#39;2&#39;, &#39;任盈盈&#39;, &#39;18&#39;, &#39;8000.00&#39;, &#39;关公部&#39; , &#39;广东&#39;);\nINSERT INTO &#96; app01_emp &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; dep &#96; , &#96; province &#96;) VALUES (&#39;3&#39;, &#39;任我行&#39;, &#39;56&#39;, &#39;10000.00&#39;, &#39;销售部&#39; , &#39;广东&#39;);\nINSERT INTO &#96; app01_emp &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; dep &#96; , &#96; province &#96;) VALUES (&#39;4&#39;, &#39;岳灵珊&#39;, &#39;19&#39;, &#39;6000.00&#39;, &#39;关公部&#39; , &#39;河南&#39;);\nINSERT INTO &#96; app01_emp &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; dep &#96; , &#96; province &#96;) VALUES (&#39;5&#39;, &#39;小龙女&#39;, &#39;20&#39;, &#39;8000.00&#39;, &#39;关公部&#39; , &#39;河北&#39;);\n-- app01_dep数据\nINSERT INTO &#96; app01_dep &#96; (&#96; id &#96;, &#96; title &#96;) VALUES (&#39;1&#39;, &#39;销售部&#39;);\nINSERT INTO &#96; app01_dep &#96; (&#96; id &#96;, &#96; title &#96;) VALUES (&#39;2&#39;, &#39;关公部&#39;);\n-- app01_emps 数据\nINSERT INTO &#96; app01_emps &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; province &#96; , &#96; dep_id &#96;) VALUES (&#39;2&#39;, &#39;令狐冲&#39;, &#39;24&#39;, &#39;8000.00&#39;, &#39;河南&#39; , &#39;1&#39;);\nINSERT INTO &#96; app01_emps &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; province &#96; , &#96; dep_id &#96;) VALUES (&#39;3&#39;, &#39;任盈盈&#39;, &#39;18&#39;, &#39;9000.00&#39;, &#39;广东&#39; , &#39;2&#39;);\nINSERT INTO &#96; app01_emps &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; province &#96; , &#96; dep_id &#96;) VALUES (&#39;4&#39;, &#39;任我行&#39;, &#39;57&#39;, &#39;10000.00&#39;, &#39;广东&#39; , &#39;1&#39;);\nINSERT INTO &#96; app01_emps &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; province &#96; , &#96; dep_id &#96;) VALUES (&#39;5&#39;, &#39;岳灵珊&#39;, &#39;19&#39;, &#39;6000.00&#39;, &#39;河南&#39; , &#39;2&#39;);\nINSERT INTO &#96; app01_emps &#96; (&#96; id &#96;, &#96; name &#96;, &#96; age &#96;, &#96; salary &#96;, &#96; province &#96; , &#96; dep_id &#96;) VALUES (&#39;6&#39;, &#39;小龙女&#39;, &#39;20&#39;, &#39;8000.00&#39;, &#39;河北&#39; , &#39;2&#39;);</code></pre>\n\n<p>统计每一个出版社的最便宜的书的价格：</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Publish.objects.values(&quot;name&quot;).annotate(in_price &#x3D; Min(&quot;book__price&quot;))\nprint(res)</code></pre>\n\n<p>命令行中可以看到以下输出：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&lt;QuerySet [&#123;&#39;name&#39;: &#39;菜鸟出版社&#39;, &#39;in_price&#39;: Decimal(&#39;100.00&#39;)&#125;, &#123;&#39;name&#39;: &#39;明教出版社&#39;, &#39;in_price&#39;: Decimal(&#39;300.00&#39;)&#125;]&gt;</code></pre>\n\n<p>统计每一本书的作者个数：</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.annotate(c &#x3D; Count(&quot;authors__name&quot;)).values(&quot;title&quot;,&quot;c&quot;)\nprint(res)</code></pre>\n\n<p>命令行中可以看到以下输出：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&lt;QuerySet [&#123;&#39;title&#39;: &#39;菜鸟教程&#39;, &#39;c&#39;: 1&#125;, &#123;&#39;title&#39;: &#39;吸星大法&#39;, &#39;c&#39;: 1&#125;, &#123;&#39;title&#39;: &#39;冲灵剑法&#39;, &#39;c&#39;: 1&#125;]&gt;</code></pre>\n\n<p>统计每一本以”菜”开头的书籍的作者个数：</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.filter(title__startswith&#x3D;&quot;菜&quot;).annotate(c &#x3D; Count(&quot;authors__name&quot;)).values(&quot;title&quot;,&quot;c&quot;)\nprint(res)</code></pre>\n\n<p>统计不止一个作者的图书名称：</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.annotate(c &#x3D; Count(&quot;authors__name&quot;)).filter(c__gt&#x3D;0).values(&quot;title&quot;,&quot;c&quot;)\nprint(res)</code></pre>\n\n<p>命令行中可以看到以下输出：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&lt;QuerySet [&#123;&#39;title&#39;: &#39;菜鸟教程&#39;, &#39;c&#39;: 1&#125;, &#123;&#39;title&#39;: &#39;吸星大法&#39;, &#39;c&#39;: 1&#125;, &#123;&#39;title&#39;: &#39;冲灵剑法&#39;, &#39;c&#39;: 1&#125;]&gt;</code></pre>\n\n<p>根据一本图书作者数量的多少对查询集 QuerySet 进行降序排序:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.annotate(c &#x3D; Count(&quot;authors__name&quot;)).order_by(&quot;-c&quot;).values(&quot;title&quot;,&quot;c&quot;)\nprint(res)</code></pre>\n\n<p>查询各个作者出的书的总价格:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Author.objects.annotate(all &#x3D; Sum(&quot;book__price&quot;)).values(&quot;name&quot;,&quot;all&quot;)\nprint(res)</code></pre>\n\n<h3 id=\"F-查询\"><a href=\"#F-查询\" class=\"headerlink\" title=\"F() 查询\"></a>F() 查询</h3><p>F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。</p>\n<p>之前构造的过滤器都只是将字段值与某个常量做比较，如果想要对两个字段的值做比较，就需要用到 F()。</p>\n<p>使用前要先从 django.db.models 引入 F:</p>\n<p>from django.db.models import F<br>用法：</p>\n<p>F(“字段名称”)<br>F 动态获取对象字段的值，可以进行运算。</p>\n<p>Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取余的操作。</p>\n<p>修改操作（update）也可以使用 F() 函数。</p>\n<p>查询工资大于年龄的人：</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.db.models import F\n...\nbook&#x3D;models.Emp.objects.filter(salary__gt&#x3D;F(&quot;age&quot;)).values(&quot;name&quot;,&quot;age&quot;)\n...</code></pre>\n\n<p>将每一本书的价格提高100元:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.update(price&#x3D;F(&quot;price&quot;)+100)\nprint(res)</code></pre>\n\n<h3 id=\"Q-查询-（与-或-非）操作符\"><a href=\"#Q-查询-（与-或-非）操作符\" class=\"headerlink\" title=\"Q() 查询 （与 或 非）操作符\"></a>Q() 查询 （与 或 非）操作符</h3><p>使用前要先从 django.db.models 引入 Q:<br>from django.db.models import Q<br>用法：</p>\n<p>Q(条件判断)</p>\n<p>例如：</p>\n<p>Q(title__startswith&#x3D;”菜”)<br>之前构造的过滤器里的多个条件的关系都是 and，如果需要执行更复杂的查询（例如 or 语句），就可以使用 Q 。</p>\n<p>Q 对象可以使用 &amp; | ~ （与 或 非）操作符进行组合。</p>\n<p>优先级从高到低：~ &amp; |。</p>\n<p>可以混合使用 Q 对象和关键字参数，Q 对象和关键字参数是用”and”拼在一起的（即将逗号看成 and ），但是 Q 对象必须位于所有关键字参数的前面。</p>\n<p>查询价格大于 350 或者名称以菜开头的书籍的名称和价格。</p>\n<p>from django.db.models import Q<br>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">...\nres&#x3D;models.Book.objects.filter(Q(price__gt&#x3D;350)|Q(title__startswith&#x3D;&quot;菜&quot;)).values(&quot;title&quot;,&quot;price&quot;)\nprint(res)\n...</code></pre>\n\n<p>查询以”菜”结尾或者不是 2010 年 10 月份的书籍:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.filter(Q(title__endswith&#x3D;&quot;菜&quot;) | ~Q(Q(pub_date__year&#x3D;2010) &amp; Q(pub_date__month&#x3D;10)))\nprint(res)  </code></pre>\n\n<p>查询出版日期是 2004 或者 1999 年，并且书名中包含有”菜”的书籍。</p>\n<p>Q 对象和关键字混合使用，Q 对象要在所有关键字的前面:</p>\n<p>实例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; models.Book.objects.filter(Q(pub_date__year&#x3D;2004) | Q(pub_date__year&#x3D;1999), title__contains&#x3D;&quot;菜&quot;)\nprint(res) </code></pre>\n\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><p>  <a href=\"https://blog.csdn.net/weixin_34049948/article/details/92688433#:~:text=%E9%83%BD%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5-,%E8%87%AA%E5%B7%B1%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5,-%E5%88%9B%E5%BB%BA%E8%B7%AF%E7%94%B1\" target=\"_blank\" >见django中orm分页功能（内置分页）</a></p>\n  <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\nfrom django.core.paginator import Paginator,Page#导入模块\n\n\ndef custom(request):\n  #获取当前页\n  current_page &#x3D; request.GET.get(&#39;page&#39;)\n  current_page &#x3D; int(current_page)\n  #每页显示10条\n  per_page &#x3D; 10\n  #1,0-10\n  #2，10-20\n  #3,20-30\n  start_page &#x3D; (current_page -1) * per_page\n  end_page &#x3D; current_page * per_page\n  user_list &#x3D; models.Uinfo.objects.all()[start_page:end_page]\n  return render(request,&#39;custom.html&#39;,&#123;&#39;user_list&#39;:user_list&#125;)\n</code></pre>\n\n<h2 id=\"接口文档\"><a href=\"#接口文档\" class=\"headerlink\" title=\"接口文档\"></a>接口文档</h2><ul>\n<li>不支持knif4j</li>\n<li>swagger不维护了</li>\n<li>drf-yasg 不好用，而且还有bug（仅仅点了几下就发现bug,不能忍～）</li>\n</ul>\n<h2 id=\"个人感受\"><a href=\"#个人感受\" class=\"headerlink\" title=\"个人感受\"></a>个人感受</h2><p>生态不全：经过两天学习，觉得python 生态没想象中的那么优秀，Django也没有想象中的那么好，生态最起码比不上java和nodejs</p>\n<p>语言简化：java强语言，nodejs有typescipt夹持，看起来Django优点弱鸡，python更像是脚本语言</p>\n<p>不好理解：Django ORM用起来没有Typeorm或者mybatis那么好理解，有些单划线&#x2F;双划线的东西，为了简化而简化，失去语义话</p>\n<p><em>有个问题：怎么就语言排行榜排到第一了，费解～</em></p>\n","text":"Python3 升级$ python --version Python 2.7.15 $ python3 --version Python 3.7.2 $ brew upgrade python@3.10 大概是2019年安装的python 3.7.2版本，看了下文档，有少数内容...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"Python3","slug":"Python3","count":1,"path":"api/categories/Python3.json"}],"tags":[{"name":"Python3","slug":"Python3","count":1,"path":"api/tags/Python3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python3-%E5%8D%87%E7%BA%A7\"><span class=\"toc-text\">Python3 升级</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python%E5%AE%98%E7%BD%91\"><span class=\"toc-text\">python官网</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python-web%E6%A1%86%E6%9E%B6%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">python web框架选择</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E6%84%9F%E5%8F%97\"><span class=\"toc-text\">我的感受</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pip\"><span class=\"toc-text\">pip</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Django\"><span class=\"toc-text\">安装 Django</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BE%8B\"><span class=\"toc-text\">事例</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Django-ORM\"><span class=\"toc-text\">Django ORM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Models\"><span class=\"toc-text\">Models</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">表结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">表关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">插入数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM-%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">ORM - 添加数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A-%E5%A4%96%E9%94%AE-ForeignKey\"><span class=\"toc-text\">一对多(外键 ForeignKey)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A-ManyToManyField-%EF%BC%9A%E5%9C%A8%E7%AC%AC%E4%B8%89%E5%BC%A0%E5%85%B3%E7%B3%BB%E8%A1%A8%E4%B8%AD%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">多对多(ManyToManyField)：在第三张关系表中新增数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E7%AE%A1%E7%90%86%E5%99%A8-%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">关联管理器(对象调用)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%EF%BC%88%E5%8F%8C%E5%90%91%E5%9D%87%E6%9C%89%E5%85%B3%E8%81%94%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">多对多（双向均有关联管理器）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%EF%BC%88%E5%8F%AA%E6%9C%89%E5%A4%9A%E7%9A%84%E9%82%A3%E4%B8%AA%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%85%B3%E8%81%94%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%8C%E5%8D%B3%E5%8F%8D%E5%90%91%E6%89%8D%E6%9C%89%EF%BC%89\"><span class=\"toc-text\">一对多（只有多的那个类的对象有关联管理器，即反向才有）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A%E4%BC%A0%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">方式一：传对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A%E4%BC%A0%E5%AF%B9%E8%B1%A1-id\"><span class=\"toc-text\">方式二：传对象 id</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM-%E6%9F%A5%E8%AF%A2-set%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">ORM 查询 _set语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">一对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91\"><span class=\"toc-text\">反向</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">一对一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91-1\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91-1\"><span class=\"toc-text\">反向</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">多对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91-2\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91-2\"><span class=\"toc-text\">反向</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM%E6%9F%A5%E8%AF%A2-%E5%9F%BA%E4%BA%8E%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E8%B7%A8%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">ORM查询 基于双下划线的跨表查询 语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A-1\"><span class=\"toc-text\">一对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91-3\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91-3\"><span class=\"toc-text\">反向</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A-1\"><span class=\"toc-text\">多对多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91-4\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91-4\"><span class=\"toc-text\">反向</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80-1\"><span class=\"toc-text\">一对一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91-5\"><span class=\"toc-text\">正向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91-5\"><span class=\"toc-text\">反向</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM-%E2%80%93-%E5%A4%9A%E8%A1%A8%E5%AE%9E%E4%BE%8B%EF%BC%88%E8%81%9A%E5%90%88%E4%B8%8E%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%EF%BC%89\"><span class=\"toc-text\">ORM – 多表实例（聚合与分组查询）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2%EF%BC%88aggregate%EF%BC%89\"><span class=\"toc-text\">聚合查询（aggregate）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%EF%BC%88annotate%EF%BC%89\"><span class=\"toc-text\">分组查询（annotate）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#F-%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">F() 查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Q-%E6%9F%A5%E8%AF%A2-%EF%BC%88%E4%B8%8E-%E6%88%96-%E9%9D%9E%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">Q() 查询 （与 或 非）操作符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">分页查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">接口文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AA%E4%BA%BA%E6%84%9F%E5%8F%97\"><span class=\"toc-text\">个人感受</span></a></li></ol></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React TS 范型组件","uid":"f3f72853c8b7c10482dbb43fb811bec2","slug":"2022-09-25react范型","date":"2022-09-25T11:24:31.000Z","updated":"2022-09-25T12:06:21.355Z","comments":true,"path":"api/articles/2022-09-25react范型.json","keywords":null,"cover":null,"text":"泛型类型TypeScript 中，类型（interface, type）是可以声明成泛型的，这很常见。 interface Props&lt;T&gt; &#123; content: T; &#125; 这表明 Props 接口定义了这么一种类型： 它是包含一个 content...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"React","slug":"React","count":20,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":14,"path":"api/tags/React.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React中的术语","uid":"4cfbb91d77b5df4256b735640b2a3f88","slug":"2022-09-19react","date":"2022-09-19T12:42:20.000Z","updated":"2022-09-20T12:57:05.700Z","comments":true,"path":"api/articles/2022-09-19react.json","keywords":null,"cover":null,"text":"浅合并this.setState 会进行浅合并 falsyfalsy 表达式 MDN 8 个 falsy 值 &#x2F;&#x2F; | 值 | 说明 | &#x2F;&#x2F; | :-------- | :---------------------------------...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"React","slug":"React","count":20,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":14,"path":"api/tags/React.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}