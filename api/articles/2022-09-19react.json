{"title":"React中的术语","uid":"4cfbb91d77b5df4256b735640b2a3f88","slug":"2022-09-19react","date":"2022-09-19T12:42:20.000Z","updated":"2022-09-20T12:57:05.700Z","comments":true,"path":"api/articles/2022-09-19react.json","keywords":null,"cover":null,"content":"<h2 id=\"浅合并\"><a href=\"#浅合并\" class=\"headerlink\" title=\"浅合并\"></a>浅合并</h2><p><a href=\"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#:~:text=)%3B%0A%20%20%7D-,%E8%BF%99%E9%87%8C%E7%9A%84%E5%90%88%E5%B9%B6%E6%98%AF%E6%B5%85%E5%90%88%E5%B9%B6,-%EF%BC%8C%E6%89%80%E4%BB%A5%20this.setState\" target=\"_blank\" >this.setState 会进行浅合并</a></p>\n<h2 id=\"falsy\"><a href=\"#falsy\" class=\"headerlink\" title=\"falsy\"></a>falsy</h2><p><a href=\"https://zh-hans.reactjs.org/docs/conditional-rendering.html#:~:text=%E8%B7%B3%E8%BF%87%E5%AE%83%E3%80%82-,%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8Cfalsy%20%E8%A1%A8%E8%BE%BE%E5%BC%8F,-%E4%BC%9A%E4%BD%BF%20%26%26\" target=\"_blank\" >falsy 表达式 </a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\" target=\"_blank\" >MDN 8 个 falsy 值</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; | 值        | 说明                                                                                                      |\n&#x2F;&#x2F; | :-------- | :-------------------------------------------------------------------------------------------------------- |\n&#x2F;&#x2F; | 0         | 数值 zero                                                                                                 |\n&#x2F;&#x2F; | -0        | 数值 负 zero                                                                                              |\n&#x2F;&#x2F; | 0n        | 当 BigInt 作为布尔值使用时，遵从其作为数值的规则. 0n 是 falsy 值。                                        |\n&#x2F;&#x2F; | false     | false 关键字                                                                                              |\n&#x2F;&#x2F; | undefined | undefined - 原始值                                                                                        |\n&#x2F;&#x2F; | null      | null - 缺少值                                                                                             |\n&#x2F;&#x2F; | &quot;&quot;, &#39;&#39;, &#96; | 这是一个空字符串 (字符串的长度为零). JavaScript 中的字符串可用双引号 &quot;&quot;, 单引号 &#39;&#39;, 或 模板字面量&#96; 定义。 |\n&#x2F;&#x2F; | NaN       | NaN - 非数值 |</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>rn 中 尽量先转 boolean 类型，否则 falsy 很有可能渲染到 View 组件中，引起崩溃\n</div>\n<h2 id=\"key-会传递信息给-React-，但不会传递给你的组件\"><a href=\"#key-会传递信息给-React-，但不会传递给你的组件\" class=\"headerlink\" title=\"key 会传递信息给 React ，但不会传递给你的组件\"></a>key 会传递信息给 React ，但不会传递给你的组件</h2><p><a href=\"https://zh-hans.reactjs.org/docs/lists-and-keys.html#:~:text=key%20%E4%BC%9A%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF%E7%BB%99%20React%20%EF%BC%8C%E4%BD%86%E4%B8%8D%E4%BC%9A%E4%BC%A0%E9%80%92%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BB%84%E4%BB%B6\" target=\"_blank\" >key 会传递信息给 React ，但不会传递给你的组件</a></p>\n<h2 id=\"ES6-计算属性名称\"><a href=\"#ES6-计算属性名称\" class=\"headerlink\" title=\"ES6 计算属性名称\"></a>ES6 计算属性名称</h2><p><a href=\"https://zh-hans.reactjs.org/docs/forms.html#:~:text=%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E4%BA%86-,ES6%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%90%8D%E7%A7%B0,-%E7%9A%84%E8%AF%AD%E6%B3%95%E6%9B%B4%E6%96%B0\" target=\"_blank\" >计算属性名称</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.setState(&#123;\n  [name]: value,\n&#125;);</code></pre>\n\n<h2 id=\"formik\"><a href=\"#formik\" class=\"headerlink\" title=\"formik\"></a>formik</h2><p><a href=\"https://formik.org/\" target=\"_blank\" >formik</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Build forms in React, without the tears\nFormik is the world&#39;s most popular open source form library for React and React Native.</code></pre>\n\n<h2 id=\"启发式算法\"><a href=\"#启发式算法\" class=\"headerlink\" title=\"启发式算法\"></a>启发式算法</h2><p>这个玩意在实现 React 的 “diffing” 算法过程中所作出的设计决策，</p>\n<ul>\n<li>以保证组件更新可预测，</li>\n<li>且在繁杂业务场景下依然保持应用的高性能</li>\n</ul>\n<p>动机：</p>\n<p>在某一时间节点调用 React 的 render() 方法，会创建一棵由 React 元素组成的树。<br>在下一次 state 或 props 更新时，相同的 render() 方法会返回一棵不同的树。<br>React 需要基于这两棵树之间的差别来判断如何高效的更新 UI，以保证当前 UI 与最新的树保持同步。</p>\n<p>此算法有一些通用的解决方案，即生成将一棵树转换成另一棵树的最小操作次数。<br>然而，即使使用最优的算法，该算法的复杂程度仍为 O(n 3 )，其中 n 是树中元素的数量。</p>\n<p>如果在 React 中使用该算法，那么展示 1000 个元素则需要 10 亿次的比较。这个开销实在是太过高昂。<br>于是 React 在以下两个假设的基础之上提出了一套 O(n) 的<em>启发式算法</em>：</p>\n<ul>\n<li>两个不同类型的元素会产生出不同的树；</li>\n<li>开发者可以使用 key 属性标识哪些子元素，在不同的渲染中可能是不变的。</li>\n</ul>\n<p>在实践中，我们发现以上假设在几乎所有实用的场景下都成立。</p>\n<h2 id=\"diffing-算法\"><a href=\"#diffing-算法\" class=\"headerlink\" title=\"diffing 算法\"></a>diffing 算法</h2><ul>\n<li>对比不同类型的元素</li>\n<li>对比同一类型的元素 ， React 会保留 DOM 节点，仅比对及更新有改变的属性。</li>\n<li>对比同类型的组件元素， 当一个组件更新时，组件实例会保持不变，因此可以在不同的渲染时保持 state 一致。React 将更新该组件实例的 props 以保证与最新的元素保持一致</li>\n<li>对子节点进行递归，默认情况下，当递归 DOM 节点的子元素时，React 会同时遍历两个子元素的列表；当产生差异时，生成一个 mutation。</li>\n<li>Keys ， 为了解决上述问题，React 引入了 key 属性。当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素。以下示例在新增 key 之后，使得树的转换效率得以提高</li>\n</ul>\n","text":"浅合并this.setState 会进行浅合并 falsyfalsy 表达式 MDN 8 个 falsy 值 &#x2F;&#x2F; | 值 | 说明 | &#x2F;&#x2F; | :-------- | :---------------------------------...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"React","slug":"React","count":19,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":13,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%85%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">浅合并</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#falsy\"><span class=\"toc-text\">falsy</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#key-%E4%BC%9A%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF%E7%BB%99-React-%EF%BC%8C%E4%BD%86%E4%B8%8D%E4%BC%9A%E4%BC%A0%E9%80%92%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">key 会传递信息给 React ，但不会传递给你的组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES6-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%90%8D%E7%A7%B0\"><span class=\"toc-text\">ES6 计算属性名称</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#formik\"><span class=\"toc-text\">formik</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">启发式算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#diffing-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">diffing 算法</span></a></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python3 干就完了～","uid":"1ff7bc15a19101d81a6f563025053eaf","slug":"2022-09-24python","date":"2022-09-24T10:21:22.000Z","updated":"2022-09-25T11:16:17.894Z","comments":true,"path":"api/articles/2022-09-24python.json","keywords":null,"cover":[],"text":"Python3 升级$ python --version Python 2.7.15 $ python3 --version Python 3.7.2 $ brew upgrade python@3.10 大概是2019年安装的python 3.7.2版本，看了下文档，有少数内容...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"Python3","slug":"Python3","count":1,"path":"api/categories/Python3.json"}],"tags":[{"name":"Python3","slug":"Python3","count":1,"path":"api/tags/Python3.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-qa","uid":"d55ac1d91034293bfc294fd694ca97c4","slug":"2022-09-19qa","date":"2022-09-18T09:13:05.000Z","updated":"2022-09-20T13:37:06.279Z","comments":true,"path":"api/articles/2022-09-19qa.json","keywords":null,"cover":[],"text":"var let const 区别： 版本： var 是 es6 之前， const、let es6 之后， 分类： 在 es6 之前只有全局作用域和函数作用域， const、let 块级作用域 提升：三者都会有变量提升，但是 let const 有暂时性死区，没执行声明出，提前使...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":31,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":18,"path":"api/tags/面试.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}