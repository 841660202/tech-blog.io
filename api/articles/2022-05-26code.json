{"title":"js 代码注释","uid":"5df43a7a7d0a76be0dcfbc13fca3f3d6","slug":"2022-05-26code","date":"2022-05-26T07:31:20.000Z","updated":"2023-07-31T06:42:49.718Z","comments":true,"path":"api/articles/2022-05-26code.json","keywords":null,"cover":[],"content":"<h2 id=\"代码注释\"><a href=\"#代码注释\" class=\"headerlink\" title=\"代码注释\"></a>代码注释</h2><p><code>//</code>这种 js 注释代码在 vscode 其他地方引用时候，没有提示， 如果需要有提示，需要写成<code>/** 提示 **/</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">写法1;\nexport enum ELeaveType &#123;\n  MATERNITY_ &#x3D; 17, &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),\n&#125;\n写法2;\nexport enum ELeaveType &#123;\n  &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),\n  MATERNITY_ &#x3D; 17,\n&#125;</code></pre>\n\n<p><img src=\"http://t-blog-images.aijs.top/img/20220526153244.webp\"></p>\n<h2 id=\"有提示注释写法\"><a href=\"#有提示注释写法\" class=\"headerlink\" title=\"有提示注释写法\"></a>有提示注释写法</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export enum ELeaveType &#123;\n...\n  &#x2F;**&quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),**&#x2F;\n  MATERNITY_ &#x3D; 17,\n...\n&#125;\n</code></pre>\n\n<p><img src=\"http://t-blog-images.aijs.top/img/20220526153709.webp\"></p>\n<h2 id=\"函数编程、面向对象编程、面向过程编程\"><a href=\"#函数编程、面向对象编程、面向过程编程\" class=\"headerlink\" title=\"函数编程、面向对象编程、面向过程编程\"></a>函数编程、面向对象编程、面向过程编程</h2><p>函数编程、面向对象编程和面向过程编程是三种不同的编程范式，每种范式都有其独特的特点和适用场景。</p>\n<p><strong>面向过程编程</strong> (Procedural Programming) 是一种以过程为中心的编程范式。在面向过程编程中，程序被分解为一系列的过程或函数。这些过程按照特定的顺序调用，每个过程接受输入参数，并产生相应的输出结果。面向过程编程强调程序的执行顺序和步骤，适用于简单的、直线型的问题解决。C 语言就是一个典型的面向过程编程语言。</p>\n<p><strong>面向对象编程</strong> (Object-Oriented Programming，简称 OOP) 是一种以对象为中心的编程范式。在面向对象编程中，程序被组织成对象的集合，每个对象具有自己的状态和行为。对象之间通过消息传递进行交互，对象的行为则由其所属的类所定义。面向对象编程提供了封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）等特性，能够更好地模拟现实世界的问题，并使代码更易于理解、拓展和维护。Java、Python 和 C++都是以面向对象编程为基础的编程语言。</p>\n<p><strong>函数编程</strong> (Functional Programming) 是一种将计算视为函数求值的编程范式。它强调使用无副作用的纯函数进行计算。在函数编程中，函数被视为第一类对象，可以作为参数传递、赋值给变量以及作为返回值。函数编程主要使用高阶函数（Higher-order Functions）和函数组合（Function Composition）等技术，让代码更加模块化、可复用和容易测试。函数编程语言如 Haskell、Scala 和 JavaScript（一部分）提供了对函数式编程的直接支持。</p>\n<p>尽管函数编程、面向对象编程和面向过程编程在概念和方法上有所不同，但实际的编程问题中，往往会综合运用它们的特点和技巧，选择最适合当前问题的编程范式来解决。</p>\n<h2 id=\"函数编程的特点\"><a href=\"#函数编程的特点\" class=\"headerlink\" title=\"函数编程的特点\"></a>函数编程的特点</h2><p>函数编程具有以下特点：</p>\n<ol>\n<li><p><strong>纯函数：</strong> 函数编程强调使用纯函数，即函数的输出只取决于输入，不依赖于其他因素。纯函数没有副作用，不会改变函数外部的状态，也不会访问全局变量。这种纯净性使得函数易于理解、测试和调试。</p>\n</li>\n<li><p><strong>不可变性：</strong> 函数编程倾向于使用不可变数据结构。不可变对象在创建之后不能被修改，任何对它的操作都会返回一个新的对象。这种不可变性确保了数据的安全性和一致性，并且使得并发编程更加容易。</p>\n</li>\n<li><p><strong>高阶函数：</strong> 函数是函数编程的核心。在函数编程中，函数可以作为参数传递给其他函数，也可以作为返回值。这种特性被称为高阶函数，它使得函数可以被组合、抽象和重用，提高了代码的模块化性和灵活性。</p>\n</li>\n<li><p><strong>函数组合：</strong> 函数编程鼓励通过函数组合来构建更复杂的功能。函数组合是将多个函数连续调用，将一个函数的输出作为另一个函数的输入。通过函数组合，可以将程序划分为多个小的、可复用的函数，提高代码的可读性和可维护性。</p>\n</li>\n<li><p><strong>惰性求值：</strong> 函数编程中的表达式是惰性求值的。这意味着表达式只在需要的时候才会被计算，而不是立即计算。惰性求值可以提供更高的性能和更灵活的控制，避免了不必要的计算。</p>\n</li>\n<li><p><strong>递归：</strong> 函数编程常常使用递归来解决问题，而不是通过循环迭代。递归可以使问题的解决过程更加简洁和优雅，同时也提供了更高层次的抽象。</p>\n</li>\n</ol>\n<p>这些特点使得函数编程适用于处理复杂、可组合的问题，并且具有良好的可读性和可维护性。函数编程被广泛应用于数据处理、并发编程、函数库设计等领域。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li>高阶函数</li>\n<li>闭包</li>\n<li>纯函数</li>\n<li>柯里化</li>\n<li>组合函数</li>\n</ol>\n","text":"代码注释//这种 js 注释代码在 vscode 其他地方引用时候，没有提示， 如果需要有提示，需要写成/** 提示 **/ 写法1; export enum ELeaveType &#123; MATERNITY_ &#x3D; 17, &#x2F;&#x2F; &quot;产...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"code","slug":"code","count":1,"path":"api/categories/code.json"}],"tags":[{"name":"code","slug":"code","count":1,"path":"api/tags/code.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">代码注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%8F%90%E7%A4%BA%E6%B3%A8%E9%87%8A%E5%86%99%E6%B3%95\"><span class=\"toc-text\">有提示注释写法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E3%80%81%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">函数编程、面向对象编程、面向过程编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">函数编程的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"redux-thunk源码","uid":"ef136ce7ac94dd6f9c2f35712eef1e47","slug":"2022-05-27redux-thunk","date":"2022-05-27T01:21:50.000Z","updated":"2022-09-16T14:58:11.419Z","comments":true,"path":"api/articles/2022-05-27redux-thunk.json","keywords":null,"cover":null,"text":"源码版本v2.4.1 用途 通过redux源码applyMiddleware了解到，是对store.dispatch进行增强 可以接受一个返回函数的action creator。如果这个action creator 返回的是一个函数，就执行它，如果不是，就按照原来的next(ac...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":39,"path":"api/categories/React.json"}],"tags":[{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"},{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"},{"name":"redux-thunk","slug":"redux-thunk","count":1,"path":"api/tags/redux-thunk.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"redux 源码 2","uid":"da6549350c9a9d927d67bdb10bc76a3c","slug":"2022-05-25.redux2","date":"2022-05-25T13:32:54.000Z","updated":"2023-02-20T21:20:56.460Z","comments":true,"path":"api/articles/2022-05-25.redux2.json","keywords":null,"cover":[],"text":"redux 简介Predictable state container for JavaScript apps 字面意思 js 应用可预测状态容器 怎么用，为什么用看官网。。。 createStore代码注释如下 redux store 持有 state 树，唯一可以改变 sto...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"React","slug":"React","count":39,"path":"api/categories/React.json"}],"tags":[{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"},{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}