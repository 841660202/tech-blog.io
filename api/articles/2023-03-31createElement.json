{"title":"React jsx -> fiber -> dom 的转化","uid":"1a2c0f92af01c15fc4932e397caca413","slug":"2023-03-31createElement","date":"2023-03-13T05:57:13.000Z","updated":"2023-04-18T15:54:59.596Z","comments":true,"path":"api/articles/2023-03-31createElement.json","keywords":null,"cover":[],"content":"<h2 id=\"读源码基础\"><a href=\"#读源码基础\" class=\"headerlink\" title=\"读源码基础\"></a>读源码基础</h2><ol>\n<li>位运算</li>\n<li>call、apply、bind 原理</li>\n<li>链表相关知识(单链表、双链表、循环链表)</li>\n<li>节流、防抖原理 <code>ensureRootIsScheduled: if (existingCallbackNode !== null) &#123;</code></li>\n<li>设计模式相关知识</li>\n<li>安全相关知识</li>\n<li>栈（数组） <code>pushProvider</code></li>\n<li>Set <code>合成事件</code>存储注册</li>\n</ol>\n<h2 id=\"jsx-gt-React-createElement\"><a href=\"#jsx-gt-React-createElement\" class=\"headerlink\" title=\"jsx -&gt; React.createElement\"></a>jsx -&gt; React.createElement</h2><img src=\"http://t-blog-images.aijs.top/img/202303131356155.webp\" />\n\n<h2 id=\"React-createElement-gt-ReactElment-树\"><a href=\"#React-createElement-gt-ReactElment-树\" class=\"headerlink\" title=\"React.createElement -&gt; ReactElment 树\"></a>React.createElement -&gt; ReactElment 树</h2><img src=\"https://7kms.github.io/react-illustration-series/static/reactelement-tree.31feb14c.png\" style=\"width:500px;max-width:100%\" />\n\n<h2 id=\"ReactElment-gt-update-gt-updateQueue-gt-fiber\"><a href=\"#ReactElment-gt-update-gt-updateQueue-gt-fiber\" class=\"headerlink\" title=\"ReactElment -&gt; update -&gt; updateQueue -&gt; fiber\"></a>ReactElment -&gt; update -&gt; updateQueue -&gt; fiber</h2><img src=\"http://t-blog-images.aijs.top/img/202303131435472.webp\" />\n\n<h2 id=\"ReactElment-树-gt-fiber-树-gt-dom-树\"><a href=\"#ReactElment-树-gt-fiber-树-gt-dom-树\" class=\"headerlink\" title=\"ReactElment 树 -&gt; fiber 树 -&gt; dom 树\"></a>ReactElment 树 -&gt; fiber 树 -&gt; dom 树</h2><img src=\"https://7kms.github.io/react-illustration-series/static/code2dom.91f1b68b.png\" />\n\n<p><strong>见下文 jsx 代码经 babel 到 ReactElment 树</strong></p>\n<h2 id=\"jsx-代码经-babel-到-ReactElment-树\"><a href=\"#jsx-代码经-babel-到-ReactElment-树\" class=\"headerlink\" title=\"jsx 代码经 babel 到 ReactElment 树\"></a>jsx 代码经 babel 到 ReactElment 树</h2><img src=\"http://t-blog-images.aijs.top/img/202303131503939.webp\" />\n\n<h2 id=\"this-setState-gt-fiber\"><a href=\"#this-setState-gt-fiber\" class=\"headerlink\" title=\"this.setState -&gt; fiber\"></a>this.setState -&gt; fiber</h2><img src=\"http://t-blog-images.aijs.top/img/202303131647078.webp\" />\n\n<h2 id=\"补-React-图解\"><a href=\"#补-React-图解\" class=\"headerlink\" title=\"补 React 图解\"></a>补 React 图解</h2><h3 id=\"processUpdateQueue-源码解析\"><a href=\"#processUpdateQueue-源码解析\" class=\"headerlink\" title=\"processUpdateQueue 源码解析\"></a>processUpdateQueue 源码解析</h3><p><a href=\"https://juejin.cn/post/7088149898389880863\" target=\"_blank\" >processUpdateQueue 源码解析</a></p>\n<p><a href=\"https://github.com/facebook/react/blob/cd20376f03212c91057c003bcb640ca9568e87e6/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#LL466-L667C2\" target=\"_blank\" >见 processUpdateQueue 源码</a></p>\n<h3 id=\"如何计算新的-state\"><a href=\"#如何计算新的-state\" class=\"headerlink\" title=\"如何计算新的 state\"></a>如何计算新的 state</h3><p><a href=\"https://github.com/facebook/react/blob/cd20376f03212c91057c003bcb640ca9568e87e6/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#LL383-L464C2\" target=\"_blank\" >见 getStateFromUpdate 源码</a></p>\n<img src=\"http://t-blog-images.aijs.top/img/202303131913820.webp\" />\n\n<p><a href=\"https://7kms.github.io/react-illustration-series/main/fibertree-create#%E6%8E%A2%E5%AF%BB%E9%98%B6%E6%AE%B5-beginwork:~:text=%E7%8A%B6%E6%80%81%20workInProgress.memoizedState-,processUpdateQueue,-(workInProgress%2C\" target=\"_blank\" >到这里了</a></p>\n<h3 id=\"nextProps-怎么会有-ReactElement-对象\"><a href=\"#nextProps-怎么会有-ReactElement-对象\" class=\"headerlink\" title=\"nextProps 怎么会有 ReactElement 对象\"></a>nextProps 怎么会有 ReactElement 对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 2. 获取下级&#96;ReactElement&#96;对象\nlet nextChildren &#x3D; nextProps.children; &#x2F;&#x2F; 利用jsx的特点？</code></pre>\n\n<p><a href=\"https://7kms.github.io/react-illustration-series/main/fibertree-create#:~:text=%3A%20null%3B-,//%202.%20%E8%8E%B7%E5%8F%96%E4%B8%8B%E7%BA%A7%60ReactElement%60%E5%AF%B9%E8%B1%A1,let%20nextChildren%20%3D%20nextProps.children%3B,-const%20isDirectTextChild%20%3D\" target=\"_blank\" >见</a></p>\n<img src=\"http://t-blog-images.aijs.top/img/202303132215856.webp\" />\n\n<h3 id=\"beginwork\"><a href=\"#beginwork\" class=\"headerlink\" title=\"beginwork\"></a>beginwork</h3><h3 id=\"stateNode-类组件的-stateNode-是怎样的，hostElement-的-stateNode-是怎样的？\"><a href=\"#stateNode-类组件的-stateNode-是怎样的，hostElement-的-stateNode-是怎样的？\" class=\"headerlink\" title=\"stateNode: 类组件的 stateNode 是怎样的，hostElement 的 stateNode 是怎样的？\"></a>stateNode: 类组件的 stateNode 是怎样的，hostElement 的 stateNode 是怎样的？</h3><img src=\"http://t-blog-images.aijs.top/img/202303132230243.webp\" />\n\n<h3 id=\"父子组件的副作用-这个与执行顺序有关，父子组件的顺序问题\"><a href=\"#父子组件的副作用-这个与执行顺序有关，父子组件的顺序问题\" class=\"headerlink\" title=\"父子组件的副作用, 这个与执行顺序有关，父子组件的顺序问题\"></a>父子组件的副作用, 这个与执行顺序有关，父子组件的顺序问题</h3><img src=\"http://t-blog-images.aijs.top/img/202303132232294.webp\" />\n\n<h3 id=\"bubbleProperties\"><a href=\"#bubbleProperties\" class=\"headerlink\" title=\"bubbleProperties\"></a>bubbleProperties</h3><img src=\"http://t-blog-images.aijs.top/img/202303141032048.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202303141038197.webp\" />\n\n<p><a href=\"https://github.com/facebook/react/blob/6bd53a5bdfe24d9a70819c4eba40b488e62900cd/packages/react-reconciler/src/ReactFiberCompleteWork.js#LL607-L728C2\" target=\"_blank\" >bubbleProperties 源码</a></p>\n<ol>\n<li>bubbleProperties 根据 fiber.child 及 fiber.child.sibling 更新 subtreeFlags 和 childLanes, 主要是为了标记子树有没有更新,</li>\n<li>这样可以通过 fiber.subtreeFlags 快速判断子树是否有副作用钩子，不需要深度遍历.</li>\n<li>在 React17 版本后使用 subtreeFlags 替换了 finishWork.firstEffect 的副作用链表, 操作主要发生在 bubbleProperties 函数中, 核心代码如下</li>\n</ol>\n<p>作者：王八吉吉<br>链接：<a href=\"https://juejin.cn/post/6977203911799406628\">https://juejin.cn/post/6977203911799406628</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303140938435.webp\" style=\"width:600px;max-width:100%\" />\n\n<h3 id=\"classInstance-的-render\"><a href=\"#classInstance-的-render\" class=\"headerlink\" title=\"classInstance 的 render()\"></a>classInstance 的 render()</h3><img src=\"http://t-blog-images.aijs.top/img/202303140944164.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202303141000464.webp\" />\n\n<h3 id=\"如何取到次级节点第一个-fiber-的？\"><a href=\"#如何取到次级节点第一个-fiber-的？\" class=\"headerlink\" title=\"如何取到次级节点第一个 fiber 的？\"></a>如何取到次级节点第一个 fiber 的？</h3><p>reconcileChildren 用来向下构建 fiber 节点</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303141020235.webp\" />\n\n<h3 id=\"markUpdateLaneFromFiberToRoot-的-sourceFiber-不理解这个-sourceFiber-是如何取哪个作为-sourceFiber\"><a href=\"#markUpdateLaneFromFiberToRoot-的-sourceFiber-不理解这个-sourceFiber-是如何取哪个作为-sourceFiber\" class=\"headerlink\" title=\"markUpdateLaneFromFiberToRoot 的 sourceFiber 不理解这个 sourceFiber 是如何取哪个作为 sourceFiber\"></a>markUpdateLaneFromFiberToRoot 的 sourceFiber 不理解这个 sourceFiber 是如何取哪个作为 sourceFiber</h3><h3 id=\"更新过程中，DOM-属性变化，不创建-DOM-对象，仅标记，commit-阶段会处理\"><a href=\"#更新过程中，DOM-属性变化，不创建-DOM-对象，仅标记，commit-阶段会处理\" class=\"headerlink\" title=\"更新过程中，DOM 属性变化，不创建 DOM 对象，仅标记，commit 阶段会处理\"></a>更新过程中，DOM 属性变化，不创建 DOM 对象，仅标记，commit 阶段会处理</h3><img src=\"http://t-blog-images.aijs.top/img/202303141053033.webp\" />\n\n<h3 id=\"fiber-lanes\"><a href=\"#fiber-lanes\" class=\"headerlink\" title=\"fiber.lanes\"></a>fiber.lanes</h3><ol>\n<li>如何区别 fiber.lanes 有没有渲染优先级？</li>\n<li>渲染优先级什么时候加到 fiber 上的？ markUpdateLaneFromFiberToRoot</li>\n</ol>\n<p><a href=\"https://7kms.github.io/react-illustration-series/main/fibertree-update#markupdatelanefromfibertoroot\" target=\"_blank\" >markUpdateLaneFromFiberToRoot</a></p>\n<img src=\"http://t-blog-images.aijs.top/img/202303141056621.webp\" />\n\n<h3 id=\"props-中有节点的标签信息？buton-变成-a-会怎样？\"><a href=\"#props-中有节点的标签信息？buton-变成-a-会怎样？\" class=\"headerlink\" title=\"props 中有节点的标签信息？buton 变成 a 会怎样？\"></a>props 中有节点的标签信息？buton 变成 a 会怎样？</h3><img src=\"http://t-blog-images.aijs.top/img/202303141105782.webp\" />\n\n<h3 id=\"fiber-的-flags-属性，什么时候赋值的，这里有用-fiber-flags-x3D-0-判断有没有副作用\"><a href=\"#fiber-的-flags-属性，什么时候赋值的，这里有用-fiber-flags-x3D-0-判断有没有副作用\" class=\"headerlink\" title=\"fiber 的 flags 属性，什么时候赋值的，这里有用 fiber.flags &#x3D; 0 判断有没有副作用\"></a>fiber 的 flags 属性，什么时候赋值的，这里有用 fiber.flags &#x3D; 0 判断有没有副作用</h3><ol>\n<li><p><code>markUpdate</code></p>\n<img src=\"http://t-blog-images.aijs.top/img/202303141122731.webp\" /></li>\n<li><p><code>markRef</code> <code>if (current.ref !== workInProgress.ref) &#123;  markRef(workInProgress);&#125;</code></p>\n</li>\n<li><p><code>调和函数</code>会给增、删、移动节点设置 fiber.flags</p>\n</li>\n</ol>\n<h3 id=\"为什么-lastEffect-指针不变呢？\"><a href=\"#为什么-lastEffect-指针不变呢？\" class=\"headerlink\" title=\"为什么 lastEffect 指针不变呢？\"></a>为什么 lastEffect 指针不变呢？</h3><img src=\"http://t-blog-images.aijs.top/img/202303141150467.webp\" />\n\n<h3 id=\"闭包和类的原始性能只有在极端场景下才会有明显的差别，极端情况是什么情况？\"><a href=\"#闭包和类的原始性能只有在极端场景下才会有明显的差别，极端情况是什么情况？\" class=\"headerlink\" title=\"闭包和类的原始性能只有在极端场景下才会有明显的差别，极端情况是什么情况？\"></a>闭包和类的原始性能只有在极端场景下才会有明显的差别，极端情况是什么情况？</h3><h3 id=\"Hook-什么时候与-fiber-关联的？\"><a href=\"#Hook-什么时候与-fiber-关联的？\" class=\"headerlink\" title=\"Hook 什么时候与 fiber 关联的？\"></a>Hook 什么时候与 fiber 关联的？</h3><img src=\"http://t-blog-images.aijs.top/img/202303151129459.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202303141453053.webp\" />\n\n<h3 id=\"副作用-hook-如何转化成-fiber-flags-的？\"><a href=\"#副作用-hook-如何转化成-fiber-flags-的？\" class=\"headerlink\" title=\"副作用 hook 如何转化成 fiber.flags 的？\"></a>副作用 hook 如何转化成 fiber.flags 的？</h3><img src=\"http://t-blog-images.aijs.top/img/202303141519615.webp\" />\n\n<h3 id=\"hook-的-effect-什么时候形成链表的，如何形成的？\"><a href=\"#hook-的-effect-什么时候形成链表的，如何形成的？\" class=\"headerlink\" title=\"hook 的 effect 什么时候形成链表的，如何形成的？\"></a>hook 的 effect 什么时候形成链表的，如何形成的？</h3><h3 id=\"TODO-补充到自定义-ahooks（暂时不记得是哪篇需要的）\"><a href=\"#TODO-补充到自定义-ahooks（暂时不记得是哪篇需要的）\" class=\"headerlink\" title=\"TODO: 补充到自定义 ahooks（暂时不记得是哪篇需要的）\"></a>TODO: 补充到自定义 ahooks（暂时不记得是哪篇需要的）</h3><img src=\"http://t-blog-images.aijs.top/img/202303150927644.webp\" />\n\n<h3 id=\"updateWorkInProgressHook-为什么是单步克隆，怎么不直接\"><a href=\"#updateWorkInProgressHook-为什么是单步克隆，怎么不直接\" class=\"headerlink\" title=\"updateWorkInProgressHook 为什么是单步克隆，怎么不直接\"></a>updateWorkInProgressHook 为什么是单步克隆，怎么不直接</h3><p>每次取一个 hook 用，所以不需要一次克隆所有</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303151143229.webp\" />\n\n<h3 id=\"mountState-mountReducer-gt-dispatch-gt-dispatchAction-bind-进行-scheduleUpdateOnFiber\"><a href=\"#mountState-mountReducer-gt-dispatch-gt-dispatchAction-bind-进行-scheduleUpdateOnFiber\" class=\"headerlink\" title=\"mountState,mountReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber\"></a>mountState,mountReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber</h3><h3 id=\"updateState-updateReducer-gt-dispatch-gt-dispatchAction-bind-进行-scheduleUpdateOnFiber\"><a href=\"#updateState-updateReducer-gt-dispatch-gt-dispatchAction-bind-进行-scheduleUpdateOnFiber\" class=\"headerlink\" title=\"updateState,updateReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber\"></a>updateState,updateReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber</h3><img src=\"http://t-blog-images.aijs.top/img/202303151336472.webp\" />\n\n<h3 id=\"queue-pending-是环形链表？-1-为什用环形链表？2-如何找环形链表的入口？\"><a href=\"#queue-pending-是环形链表？-1-为什用环形链表？2-如何找环形链表的入口？\" class=\"headerlink\" title=\"queue.pending 是环形链表？ 1. 为什用环形链表？2. 如何找环形链表的入口？\"></a>queue.pending 是环形链表？ 1. 为什用环形链表？2. 如何找环形链表的入口？</h3><img src=\"http://t-blog-images.aijs.top/img/202303151405480.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202303151431163.webp\" />\n\n<h3 id=\"pending-gt-新状态\"><a href=\"#pending-gt-新状态\" class=\"headerlink\" title=\"pending -&gt; 新状态\"></a>pending -&gt; 新状态</h3><p>updateReducer 调用 basicStateReducer</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303151449905.webp\" />\n\n<h3 id=\"优先级如何产生-requestUpdateLane\"><a href=\"#优先级如何产生-requestUpdateLane\" class=\"headerlink\" title=\"优先级如何产生 requestUpdateLane\"></a>优先级如何产生 requestUpdateLane</h3><img src=\"http://t-blog-images.aijs.top/img/202303151536389.webp\" />\n\n<p>getEventPriority 代码因长，放链接<br><a href=\"https://github.com/facebook/react/blob/cfc1274e3be5a93a4c93f8fb87f2109993afe1dd/packages/react-dom-bindings/src/events/ReactDOMEventListener.js#LL411-L517C2\" target=\"_blank\" >getEventPriority 源码</a></p>\n<ol>\n<li><code>DiscreteEventPriority</code> 直接触发</li>\n<li><code>ContinuousEventPriority</code> 可能会继续触发</li>\n<li><code>case &#39;message&#39;:</code> 是 React 内部调度通过消息传递的调度优先级，会转化成事件优先级？</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">case &#39;message&#39;: &#123;\n      &#x2F;&#x2F; We might be in the Scheduler callback.\n      &#x2F;&#x2F; Eventually this mechanism will be replaced by a check\n      &#x2F;&#x2F; of the current priority on the native scheduler.\n      const schedulerPriority &#x3D; getCurrentSchedulerPriorityLevel();\n      switch (schedulerPriority) &#123;\n        case ImmediateSchedulerPriority:\n          return DiscreteEventPriority;\n        case UserBlockingSchedulerPriority:\n          return ContinuousEventPriority;\n        case NormalSchedulerPriority:\n        case LowSchedulerPriority:\n          &#x2F;&#x2F; TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n          return DefaultEventPriority;\n        case IdleSchedulerPriority:\n          return IdleEventPriority;\n        default:\n          return DefaultEventPriority;\n      &#125;\n&#125;\ndefault:\n      return DefaultEventPriority;</code></pre>\n\n<h3 id=\"这个是异步的\"><a href=\"#这个是异步的\" class=\"headerlink\" title=\"这个是异步的\"></a>这个是异步的</h3><img src=\"http://t-blog-images.aijs.top/img/202303160919293.webp\" />\n\n<p><a href=\"https://7kms.github.io/react-illustration-series/main/hook-state#异步更新\" target=\"_blank\" >异步更新</a></p>\n<ol>\n<li>低优先级之前的高优先级被计算，放置到 baseState</li>\n<li>所有高优先级被计算，放置到 memoizedState</li>\n<li>第一个地优先级之前的高优先级，被干掉，其他的不变</li>\n</ol>\n<h3 id=\"Hook-的-state-计算有点复杂-baseQueue-gt-newBaseState-newState-【未理解】\"><a href=\"#Hook-的-state-计算有点复杂-baseQueue-gt-newBaseState-newState-【未理解】\" class=\"headerlink\" title=\"Hook 的 state 计算有点复杂: baseQueue -&gt; newBaseState,newState 【未理解】\"></a>Hook 的 state 计算有点复杂: baseQueue -&gt; newBaseState,newState 【未理解】</h3><p>QUES: <span style=\"color: red; font-size: 32px\">未理解</span></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">hook.memoizedState &#x3D; newState; &#x2F;&#x2F; 搞不清楚这个newState的计算\nhook.baseState &#x3D; newBaseState; &#x2F;&#x2F;\nhook.baseQueue &#x3D; newBaseQueueLast;\nqueue.lastRenderedState &#x3D; newState; &#x2F;&#x2F;</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202303151742009.webp\" />\n\n<h3 id=\"Hook-baseQueue-变化\"><a href=\"#Hook-baseQueue-变化\" class=\"headerlink\" title=\"Hook baseQueue 变化\"></a>Hook baseQueue 变化</h3><img src=\"https://7kms.github.io/react-illustration-series/static/before-basequeue-combine.aa99bd25.png\" />\n\n<div style=\"height: 4px; width: 100%\"></div>\n\n<img src=\"https://7kms.github.io/react-illustration-series/static/after-basequeue-combine.1f0a9771.png\" />\n\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"$$typeof\"></a>$$typeof</h3><img src=\"http://t-blog-images.aijs.top/img/202303161024652.webp\" />\n\n<p><a href=\"https://overreacted.io/zh-hans/why-do-react-elements-have-typeof-property/\" target=\"_blank\" >为什么 React 元素有一个$$typeof 属性？</a></p>\n<p>动机： 验证一些不安全的可能性</p>\n<ol>\n<li>React 元素（elements）是设计好的 plain object</li>\n<li>服务端没有办法存储 Symbol 类型的值，也无法添加。所以当原本的数据被替换成恶意的对象时，这个对象是不包含$$typeof 属性的</li>\n<li>React 会检测合法的$$typeof 属性，不符合条件 React 就不会处理这个元素</li>\n<li>不支持 symbol 的浏览器会使用 <code>0xeac7</code> (至于为什么选用<code>0xeac7</code>这个数字，Dan 给出的答案是，它很像 React)</li>\n<li>大意就是 Symbol.for()是可以在像类似 iframe 或者 worker 这种全局环境中都能独立标识一个值。所以$$typeof属性就不会影响到一些可以在全局环境中传递的React Element。或者当界面有多个副本存在时，也能agree到正确的$$typeof。</li>\n</ol>\n<p><a href=\"https://hanqizheng.github.io/2020/07/26/$$typeof.html\" target=\"_blank\" >React 元素的$$typeof 属性</a></p>\n<p>验证：$$typeof</p>\n<p><a href=\"https://reactjs.org/docs/react-api.html#isvalidelement\" target=\"_blank\" >isValidElement</a></p>\n<h2 id=\"reconciliation\"><a href=\"#reconciliation\" class=\"headerlink\" title=\"reconciliation\"></a>reconciliation</h2><h3 id=\"兴趣与生活的冲突\"><a href=\"#兴趣与生活的冲突\" class=\"headerlink\" title=\"兴趣与生活的冲突\"></a>兴趣与生活的冲突</h3><p>今天在思考一件非技术的事，之前在学 go 语言，后来一直在忙于“生活”，算是向生活妥协</p>\n<p>前些天看到有之前的同事也在朋友圈发 go 语言的代码，又勾起我的兴趣</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303161034838.webp\" style=\"width:800px;max-width:100%\" />\n\n<h3 id=\"回归理性\"><a href=\"#回归理性\" class=\"headerlink\" title=\"回归理性\"></a>回归理性</h3><ol>\n<li>go 语言好是好，相比于 java 来讲，“优雅知性”</li>\n<li>有多少家公司需要用（当然不谈云原生，没意义，因为很多公司在用 k8s，贡献的人却不多）</li>\n<li>除了某些巨头公司、新的创业公司，剩下的占比很大的是 java</li>\n<li>即使掌握了 go 语言，去创业公司？去巨头公司？可能性都不是很大，那剩下的就是自娱了，但时间和生活并不允许</li>\n<li>这时候就要向生活妥协了，做出让步，除了兴趣外，更重要的是生活</li>\n</ol>\n<h3 id=\"妥协-和解\"><a href=\"#妥协-和解\" class=\"headerlink\" title=\"妥协 和解\"></a>妥协 和解</h3><p><a href=\"https://zhidao.baidu.com/question/2147937715158868028.html\" target=\"_blank\" >妥协近义词</a></p>\n<p><code>reconciliation:</code> 百度翻译为：<code>调解;和解;协调;和谐一致</code></p>\n<p>哎～，这不就扯到 react reconciliation 了吗？(真的没想聊技术)</p>\n<h3 id=\"react-为什么对算法进行妥协（or-和解-or-做出让步）？\"><a href=\"#react-为什么对算法进行妥协（or-和解-or-做出让步）？\" class=\"headerlink\" title=\"react 为什么对算法进行妥协（or 和解 or 做出让步）？\"></a>react 为什么对算法进行妥协（or 和解 or 做出让步）？</h3><p><strong>原因：计算量大，谁受得了</strong></p>\n<ol>\n<li>即使使用最优的算法，该算法的复杂程度仍为 O(n 3 )，其中 n 是树中元素的数量。</li>\n<li>如果在 React 中使用该算法，那么展示 1000 个元素则需要 10 亿次的比较。这个开销实在是太过高昂</li>\n</ol>\n<h3 id=\"如何妥协？启发式算法\"><a href=\"#如何妥协？启发式算法\" class=\"headerlink\" title=\"如何妥协？启发式算法\"></a>如何妥协？启发式算法</h3><ol>\n<li>两个不同类型的元素会产生出不同的树；</li>\n<li>开发者可以使用 key 属性标识哪些子元素在不同的渲染中可能是不变的</li>\n</ol>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>😄 拉你回现实：技术源于生活, 服务生活</p>\n<h2 id=\"vscode-折叠策略\"><a href=\"#vscode-折叠策略\" class=\"headerlink\" title=\"vscode 折叠策略\"></a>vscode 折叠策略</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;editor.foldingStrategy&quot;: &quot;indentation&quot;, &#x2F;&#x2F; 折叠策略，按照缩紧</code></pre>\n\n<p><a href=\"https://blog.csdn.net/Maybe_ss/article/details/122577167\" target=\"_blank\" >vsCode 代码块无法折叠收起问题&amp;代码块折叠&#x2F;展开快捷键</a></p>\n<h3 id=\"为什么叫合成事件，如何合成，合成到什么样子？\"><a href=\"#为什么叫合成事件，如何合成，合成到什么样子？\" class=\"headerlink\" title=\"为什么叫合成事件，如何合成，合成到什么样子？\"></a>为什么叫合成事件，如何合成，合成到什么样子？</h3><p>既然是合成事件</p>\n<ol>\n<li>肯定不是一一映射，如果一一映射叫：“映射事件”不是更好</li>\n<li>肯定不是仅作兼容，如果兼容叫：“adapt 事件”不是更好</li>\n</ol>\n<p><a href=\"https://juejin.cn/post/6991645668934680584\" target=\"_blank\" >浅谈 React 合成事件</a></p>\n<p><a href=\"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L89-L93\" target=\"_blank\" >DOMPluginEventSystem.js</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">SimpleEventPlugin.registerEvents();\n&#x2F;&#x2F; 下面4组是合成事件，上面一组是事件一对一的映射\nEnterLeaveEventPlugin.registerEvents();\nChangeEventPlugin.registerEvents();\nSelectEventPlugin.registerEvents();\nBeforeInputEventPlugin.registerEvents();</code></pre>\n\n<p><a href=\"https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/events/plugins/BeforeInputEventPlugin.js#LL57-L88C2\" target=\"_blank\" >BeforeInputEventPlugin.js</a></p>\n<p><a href=\"https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/events/plugins/ChangeEventPlugin.js#LL33-L44C2\" target=\"_blank\" >ChangeEventPlugin.js</a></p>\n<p><a href=\"https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/events/plugins/EnterLeaveEventPlugin.js#LL29-L34C2\" target=\"_blank\" >EnterLeaveEventPlugin.js</a></p>\n<p><strong>SimpleEventPlugin</strong><br><a href=\"https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/events/DOMEventProperties.js#LL216-L230C2\" target=\"_blank\" >DOMEventProperties.js</a></p>\n<h3 id=\"合成事件具体表现\"><a href=\"#合成事件具体表现\" class=\"headerlink\" title=\"合成事件具体表现\"></a>合成事件具体表现</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; BeforeInputEventPlugin.js\nfunction registerEvents() &#123;\n  registerTwoPhaseEvent(&#39;onBeforeInput&#39;, [&#39;compositionend&#39;, &#39;keypress&#39;, &#39;textInput&#39;, &#39;paste&#39;]);\n  registerTwoPhaseEvent(&#39;onCompositionEnd&#39;, [&#39;compositionend&#39;, &#39;focusout&#39;, &#39;keydown&#39;, &#39;keypress&#39;, &#39;keyup&#39;, &#39;mousedown&#39;]);\n  registerTwoPhaseEvent(&#39;onCompositionStart&#39;, [&#39;compositionstart&#39;, &#39;focusout&#39;, &#39;keydown&#39;, &#39;keypress&#39;, &#39;keyup&#39;, &#39;mousedown&#39;]);\n  registerTwoPhaseEvent(&#39;onCompositionUpdate&#39;, [&#39;compositionupdate&#39;, &#39;focusout&#39;, &#39;keydown&#39;, &#39;keypress&#39;, &#39;keyup&#39;, &#39;mousedown&#39;]);\n&#125;\n&#x2F;&#x2F; ChangeEventPlugin.js\nfunction registerEvents() &#123;\n  registerTwoPhaseEvent(&#39;onChange&#39;, [&#39;change&#39;, &#39;click&#39;, &#39;focusin&#39;, &#39;focusout&#39;, &#39;input&#39;, &#39;keydown&#39;, &#39;keyup&#39;, &#39;selectionchange&#39;]);\n&#125;\n&#x2F;&#x2F; EnterLeaveEventPlugin.js\nfunction registerEvents() &#123;\n  registerDirectEvent(&#39;onMouseEnter&#39;, [&#39;mouseout&#39;, &#39;mouseover&#39;]);\n  registerDirectEvent(&#39;onMouseLeave&#39;, [&#39;mouseout&#39;, &#39;mouseover&#39;]);\n  registerDirectEvent(&#39;onPointerEnter&#39;, [&#39;pointerout&#39;, &#39;pointerover&#39;]);\n  registerDirectEvent(&#39;onPointerLeave&#39;, [&#39;pointerout&#39;, &#39;pointerover&#39;]);\n&#125;\n&#x2F;&#x2F; SelectEventPlugin.js\nfunction registerEvents() &#123;\n  registerTwoPhaseEvent(&#39;onSelect&#39;, [\n    &#39;focusout&#39;,\n    &#39;contextmenu&#39;,\n    &#39;dragend&#39;,\n    &#39;focusin&#39;,\n    &#39;keydown&#39;,\n    &#39;keyup&#39;,\n    &#39;mousedown&#39;,\n    &#39;mouseup&#39;,\n    &#39;selectionchange&#39;,\n  ]);\n&#125;\n\n&#x2F;&#x2F; SimpleEventPlugin.js\n\n&#x2F;&#x2F; registerSimpleEvents -&gt;\nimport &#123; registerSimpleEvents &#125; from &#39;..&#x2F;DOMEventProperties&#39;;\nexport &#123; registerSimpleEvents as registerEvents, extractEvents &#125;;\n&#x2F;&#x2F; DOMEventProperties.js\nexport function registerSimpleEvents() &#123;\n  registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent &#x2F;*事件优先级 *&#x2F;);\n  registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent &#x2F;*事件优先级 *&#x2F;);\n  registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent &#x2F;*事件优先级 *&#x2F;);\n  setEventPriorities(otherDiscreteEvents, DiscreteEvent &#x2F;*事件优先级 *&#x2F;);\n&#125;\n\n&#x2F;*事件优先级： 见上文： getEventPriority *&#x2F;</code></pre>\n\n<p><a href=\"https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/events/DOMEventProperties.js#LL147-L178C2\" target=\"_blank\" >registerSimplePluginEventsAndSetTheirPriorities</a></p>\n<p>注释说：给转化成二维数组放到 map 里面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * Turns\n * [&#39;abort&#39;, ...]\n *\n * into\n *\n * topLevelEventsToReactNames &#x3D; new Map([\n *   [&#39;abort&#39;, &#39;onAbort&#39;],\n * ]);\n *\n * and registers them.\n *&#x2F;\n\nfunction registerSimplePluginEventsAndSetTheirPriorities(eventTypes: Array&lt;DOMEventName | string&gt;, priority: EventPriority): void &#123;\n  &#x2F;&#x2F; 使用二维数组的好处，数据成对出现，不需要用3个数组来处理\n  for (let i &#x3D; 0; i &lt; eventTypes.length; i +&#x3D; 2) &#123;\n    const topEvent &#x3D; ((eventTypes[i]: any): DOMEventName); &#x2F;&#x2F; 见下图\n    const event &#x3D; ((eventTypes[i + 1]: any): string); &#x2F;&#x2F; 见下图\n    const capitalizedEvent &#x3D; event[0].toUpperCase() + event.slice(1);\n    const reactName &#x3D; &#39;on&#39; + capitalizedEvent; &#x2F;&#x2F; react的事件名\n    eventPriorities.set(topEvent, priority); &#x2F;&#x2F; 设置事件优先级\n    topLevelEventsToReactNames.set(topEvent, reactName);\n    registerTwoPhaseEvent(reactName, [topEvent]);\n  &#125;\n&#125;</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202303161412805.webp\" />\n\n<h3 id=\"这个-nativeEvent-怎么搞进来？没发现呢\"><a href=\"#这个-nativeEvent-怎么搞进来？没发现呢\" class=\"headerlink\" title=\"这个 nativeEvent 怎么搞进来？没发现呢\"></a>这个 nativeEvent 怎么搞进来？没发现呢</h3><p>bind 返回的 listener 被调用时候传进来的 <code>nativeEvent</code>?</p>\n<img src=\"http://t-blog-images.aijs.top/img/202303161448135.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202303161539967.webp\" />\n\n<h3 id=\"合成事件怎么晓得我操作哪个元素，进行回调？\"><a href=\"#合成事件怎么晓得我操作哪个元素，进行回调？\" class=\"headerlink\" title=\"合成事件怎么晓得我操作哪个元素，进行回调？\"></a>合成事件怎么晓得我操作哪个元素，进行回调？</h3><p>如果是 A、B 两个按钮：在使用的时候，点击 A 按钮，事件到达 根 DOM 容器，react 如何识别，使用调用了 A 按钮的 onClick,而不是 B 的 onClick</p>\n<!-- 事件代理：不需要考虑谁触发的，回调就在那 -->\n\n<ol>\n<li>AB 平级，假设也传递了其他数据的情况，怎么晓得是 A 还是 B 的回调</li>\n<li>A 内，B 外 嵌套，都会触发</li>\n</ol>\n<img src=\"http://t-blog-images.aijs.top/img/202303161918293.webp\" />\n","text":"读源码基础 位运算 call、apply、bind 原理 链表相关知识(单链表、双链表、循环链表) 节流、防抖原理 ensureRootIsScheduled: if (existingCallbackNode !== null) &#123; 设计模式相关知识 安全相关知识 栈...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"React","slug":"React","count":38,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":32,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E6%BA%90%E7%A0%81%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">读源码基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jsx-gt-React-createElement\"><span class=\"toc-text\">jsx -&gt; React.createElement</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-createElement-gt-ReactElment-%E6%A0%91\"><span class=\"toc-text\">React.createElement -&gt; ReactElment 树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ReactElment-gt-update-gt-updateQueue-gt-fiber\"><span class=\"toc-text\">ReactElment -&gt; update -&gt; updateQueue -&gt; fiber</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ReactElment-%E6%A0%91-gt-fiber-%E6%A0%91-gt-dom-%E6%A0%91\"><span class=\"toc-text\">ReactElment 树 -&gt; fiber 树 -&gt; dom 树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jsx-%E4%BB%A3%E7%A0%81%E7%BB%8F-babel-%E5%88%B0-ReactElment-%E6%A0%91\"><span class=\"toc-text\">jsx 代码经 babel 到 ReactElment 树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this-setState-gt-fiber\"><span class=\"toc-text\">this.setState -&gt; fiber</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5-React-%E5%9B%BE%E8%A7%A3\"><span class=\"toc-text\">补 React 图解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#processUpdateQueue-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">processUpdateQueue 源码解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E6%96%B0%E7%9A%84-state\"><span class=\"toc-text\">如何计算新的 state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nextProps-%E6%80%8E%E4%B9%88%E4%BC%9A%E6%9C%89-ReactElement-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">nextProps 怎么会有 ReactElement 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#beginwork\"><span class=\"toc-text\">beginwork</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#stateNode-%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84-stateNode-%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%8ChostElement-%E7%9A%84-stateNode-%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">stateNode: 类组件的 stateNode 是怎样的，hostElement 的 stateNode 是怎样的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8-%E8%BF%99%E4%B8%AA%E4%B8%8E%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%9C%89%E5%85%B3%EF%BC%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">父子组件的副作用, 这个与执行顺序有关，父子组件的顺序问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bubbleProperties\"><span class=\"toc-text\">bubbleProperties</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#classInstance-%E7%9A%84-render\"><span class=\"toc-text\">classInstance 的 render()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%8F%96%E5%88%B0%E6%AC%A1%E7%BA%A7%E8%8A%82%E7%82%B9%E7%AC%AC%E4%B8%80%E4%B8%AA-fiber-%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">如何取到次级节点第一个 fiber 的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#markUpdateLaneFromFiberToRoot-%E7%9A%84-sourceFiber-%E4%B8%8D%E7%90%86%E8%A7%A3%E8%BF%99%E4%B8%AA-sourceFiber-%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%96%E5%93%AA%E4%B8%AA%E4%BD%9C%E4%B8%BA-sourceFiber\"><span class=\"toc-text\">markUpdateLaneFromFiberToRoot 的 sourceFiber 不理解这个 sourceFiber 是如何取哪个作为 sourceFiber</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8CDOM-%E5%B1%9E%E6%80%A7%E5%8F%98%E5%8C%96%EF%BC%8C%E4%B8%8D%E5%88%9B%E5%BB%BA-DOM-%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%85%E6%A0%87%E8%AE%B0%EF%BC%8Ccommit-%E9%98%B6%E6%AE%B5%E4%BC%9A%E5%A4%84%E7%90%86\"><span class=\"toc-text\">更新过程中，DOM 属性变化，不创建 DOM 对象，仅标记，commit 阶段会处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fiber-lanes\"><span class=\"toc-text\">fiber.lanes</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#props-%E4%B8%AD%E6%9C%89%E8%8A%82%E7%82%B9%E7%9A%84%E6%A0%87%E7%AD%BE%E4%BF%A1%E6%81%AF%EF%BC%9Fbuton-%E5%8F%98%E6%88%90-a-%E4%BC%9A%E6%80%8E%E6%A0%B7%EF%BC%9F\"><span class=\"toc-text\">props 中有节点的标签信息？buton 变成 a 会怎样？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fiber-%E7%9A%84-flags-%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%B5%8B%E5%80%BC%E7%9A%84%EF%BC%8C%E8%BF%99%E9%87%8C%E6%9C%89%E7%94%A8-fiber-flags-x3D-0-%E5%88%A4%E6%96%AD%E6%9C%89%E6%B2%A1%E6%9C%89%E5%89%AF%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">fiber 的 flags 属性，什么时候赋值的，这里有用 fiber.flags &#x3D; 0 判断有没有副作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-lastEffect-%E6%8C%87%E9%92%88%E4%B8%8D%E5%8F%98%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">为什么 lastEffect 指针不变呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E5%92%8C%E7%B1%BB%E7%9A%84%E5%8E%9F%E5%A7%8B%E6%80%A7%E8%83%BD%E5%8F%AA%E6%9C%89%E5%9C%A8%E6%9E%81%E7%AB%AF%E5%9C%BA%E6%99%AF%E4%B8%8B%E6%89%8D%E4%BC%9A%E6%9C%89%E6%98%8E%E6%98%BE%E7%9A%84%E5%B7%AE%E5%88%AB%EF%BC%8C%E6%9E%81%E7%AB%AF%E6%83%85%E5%86%B5%E6%98%AF%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%EF%BC%9F\"><span class=\"toc-text\">闭包和类的原始性能只有在极端场景下才会有明显的差别，极端情况是什么情况？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hook-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%B8%8E-fiber-%E5%85%B3%E8%81%94%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">Hook 什么时候与 fiber 关联的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%AF%E4%BD%9C%E7%94%A8-hook-%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E6%88%90-fiber-flags-%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">副作用 hook 如何转化成 fiber.flags 的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hook-%E7%9A%84-effect-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%BD%A2%E6%88%90%E9%93%BE%E8%A1%A8%E7%9A%84%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BD%A2%E6%88%90%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">hook 的 effect 什么时候形成链表的，如何形成的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TODO-%E8%A1%A5%E5%85%85%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89-ahooks%EF%BC%88%E6%9A%82%E6%97%B6%E4%B8%8D%E8%AE%B0%E5%BE%97%E6%98%AF%E5%93%AA%E7%AF%87%E9%9C%80%E8%A6%81%E7%9A%84%EF%BC%89\"><span class=\"toc-text\">TODO: 补充到自定义 ahooks（暂时不记得是哪篇需要的）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#updateWorkInProgressHook-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E6%AD%A5%E5%85%8B%E9%9A%86%EF%BC%8C%E6%80%8E%E4%B9%88%E4%B8%8D%E7%9B%B4%E6%8E%A5\"><span class=\"toc-text\">updateWorkInProgressHook 为什么是单步克隆，怎么不直接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mountState-mountReducer-gt-dispatch-gt-dispatchAction-bind-%E8%BF%9B%E8%A1%8C-scheduleUpdateOnFiber\"><span class=\"toc-text\">mountState,mountReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#updateState-updateReducer-gt-dispatch-gt-dispatchAction-bind-%E8%BF%9B%E8%A1%8C-scheduleUpdateOnFiber\"><span class=\"toc-text\">updateState,updateReducer -&gt; dispatch -&gt; dispatchAction bind 进行 scheduleUpdateOnFiber</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#queue-pending-%E6%98%AF%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%EF%BC%9F-1-%E4%B8%BA%E4%BB%80%E7%94%A8%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%EF%BC%9F2-%E5%A6%82%E4%BD%95%E6%89%BE%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E7%9A%84%E5%85%A5%E5%8F%A3%EF%BC%9F\"><span class=\"toc-text\">queue.pending 是环形链表？ 1. 为什用环形链表？2. 如何找环形链表的入口？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pending-gt-%E6%96%B0%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">pending -&gt; 新状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F-requestUpdateLane\"><span class=\"toc-text\">优先级如何产生 requestUpdateLane</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%99%E4%B8%AA%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84\"><span class=\"toc-text\">这个是异步的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hook-%E7%9A%84-state-%E8%AE%A1%E7%AE%97%E6%9C%89%E7%82%B9%E5%A4%8D%E6%9D%82-baseQueue-gt-newBaseState-newState-%E3%80%90%E6%9C%AA%E7%90%86%E8%A7%A3%E3%80%91\"><span class=\"toc-text\">Hook 的 state 计算有点复杂: baseQueue -&gt; newBaseState,newState 【未理解】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hook-baseQueue-%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">Hook baseQueue 变化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#typeof\"><span class=\"toc-text\">$$typeof</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reconciliation\"><span class=\"toc-text\">reconciliation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B4%E8%B6%A3%E4%B8%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">兴趣与生活的冲突</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E5%BD%92%E7%90%86%E6%80%A7\"><span class=\"toc-text\">回归理性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%A5%E5%8D%8F-%E5%92%8C%E8%A7%A3\"><span class=\"toc-text\">妥协 和解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#react-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AF%B9%E7%AE%97%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%A6%A5%E5%8D%8F%EF%BC%88or-%E5%92%8C%E8%A7%A3-or-%E5%81%9A%E5%87%BA%E8%AE%A9%E6%AD%A5%EF%BC%89%EF%BC%9F\"><span class=\"toc-text\">react 为什么对算法进行妥协（or 和解 or 做出让步）？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%A6%A5%E5%8D%8F%EF%BC%9F%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">如何妥协？启发式算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vscode-%E6%8A%98%E5%8F%A0%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">vscode 折叠策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AB%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E5%90%88%E6%88%90%EF%BC%8C%E5%90%88%E6%88%90%E5%88%B0%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%EF%BC%9F\"><span class=\"toc-text\">为什么叫合成事件，如何合成，合成到什么样子？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E5%85%B7%E4%BD%93%E8%A1%A8%E7%8E%B0\"><span class=\"toc-text\">合成事件具体表现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%99%E4%B8%AA-nativeEvent-%E6%80%8E%E4%B9%88%E6%90%9E%E8%BF%9B%E6%9D%A5%EF%BC%9F%E6%B2%A1%E5%8F%91%E7%8E%B0%E5%91%A2\"><span class=\"toc-text\">这个 nativeEvent 怎么搞进来？没发现呢</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%80%8E%E4%B9%88%E6%99%93%E5%BE%97%E6%88%91%E6%93%8D%E4%BD%9C%E5%93%AA%E4%B8%AA%E5%85%83%E7%B4%A0%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%9B%9E%E8%B0%83%EF%BC%9F\"><span class=\"toc-text\">合成事件怎么晓得我操作哪个元素，进行回调？</span></a></li></ol></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ossutil","uid":"a48730f893eb3d8564a6e41f516078f2","slug":"2023-03-17ossutil","date":"2023-03-17T01:12:02.000Z","updated":"2023-05-15T13:17:32.987Z","comments":true,"path":"api/articles/2023-03-17ossutil.json","keywords":null,"cover":[],"text":"动机 之前单张图使用 PicGo 进行上传，这次需要批量多目录处理 阿里云 OSS 网页上传，会丢失目录层级关系 批量将目录下的图片，及文件对应关系上传到阿里云 OSS,博客在线资源使用 批量图片压缩，保留文件关系 批量图片压缩ChatGPT 生成 pngquant 压缩工具pn...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"阿里云","slug":"阿里云","count":1,"path":"api/categories/阿里云.json"}],"tags":[{"name":"阿里云","slug":"阿里云","count":1,"path":"api/tags/阿里云.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React StrictMode","uid":"072284d75a6848b3baf49e71f53b2857","slug":"2023-03-10babel","date":"2023-03-10T09:14:04.000Z","updated":"2023-03-13T13:39:28.233Z","comments":true,"path":"api/articles/2023-03-10babel.json","keywords":null,"cover":[],"text":"动机 React StrictMode 的源码长什么样子？ 执行过成是什么？为什么是标签，难道 React 内部实现了这个组件？ 查资料搜到的资料都是官网文档 和 React 官方博客 18 版本更新内容 的搬运 翻源码clone react 源码， vscode 搜索一搜 😓，...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"React","slug":"React","count":38,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":32,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}