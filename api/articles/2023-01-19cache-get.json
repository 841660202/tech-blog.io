{"title":"有时效性的get请求缓存","uid":"b4cbd5b4715b471baee9e1ca3749d21c","slug":"2023-01-19cache-get","date":"2023-01-19T07:53:50.000Z","updated":"2023-02-20T21:20:56.485Z","comments":true,"path":"api/articles/2023-01-19cache-get.json","keywords":null,"cover":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ol>\n<li>避免相同 GET 请求重复发送，占用网络资源</li>\n<li>将数据在 service 曾进行缓存</li>\n</ol>\n<h2 id=\"为什么是-service-层\"><a href=\"#为什么是-service-层\" class=\"headerlink\" title=\"为什么是 service 层\"></a>为什么是 service 层</h2><p>原因： 在 store 或者 context 进行缓存，处理起来麻烦，比较分散，不易维护</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>闭包进行缓存</li>\n<li><code>相同get请求</code>、<code>有效时间</code>内不发起请求,<code>非 get 请求缓存没有意义</code></li>\n<li>有缓存用缓存，无缓存发请求，更新缓存</li>\n</ol>\n<h2 id=\"ts-源码\"><a href=\"#ts-源码\" class=\"headerlink\" title=\"ts 源码\"></a>ts 源码</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type IParams &#x3D; Record&lt;string, any&gt;;\n\ninterface IGetOption &#123;\n  method: &quot;Get&quot;;\n  api: string;\n  params?: IParams;\n&#125;\n&#x2F;**\n * 使用method、api、params 生成唯一key,作为缓存的键\n * @param options\n * @returns\n *&#x2F;\nfunction genGetApiCacheKey(options: IGetOption) &#123;\n  const paramsPath &#x3D; formGetQueryParams(options.params || &#123;&#125;);\n\n  let _paramsPath &#x3D; paramsPath ? &#96;?$&#123;paramsPath&#125;&#96; : &quot;&quot;;\n\n  return &#96;$&#123;options.method || &quot;Get&quot;&#125; $&#123;options.api&#125;$&#123;_paramsPath&#125;&#96;;\n&#125;\n&#x2F;**\n *  格式get请求的查询数据\n * @param params\n * @returns\n *&#x2F;\nfunction formGetQueryParams(params: IParams) &#123;\n  const queryParams &#x3D; Object.keys(params)\n    .map((key) &#x3D;&gt; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&#96;)\n    .join(&quot;&amp;&quot;);\n  return queryParams;\n&#125;\n&#x2F;**\n * 扩展Date方法 TODO 有点问题\n *&#x2F;\ninterface Date &#123;\n  add: (n: number, type: &quot;s&quot; | &quot;m&quot; | &quot;h&quot;) &#x3D;&gt; any;\n&#125;\n&#x2F;&#x2F; @ts-ignore\nDate.prototype.add &#x3D; function (n, type) &#123;\n  let timestamp &#x3D; this.getTime();\n\n  switch (type) &#123;\n    case &quot;s&quot;:\n      timestamp &#x3D; timestamp + n * 1000;\n      break;\n\n    case &quot;m&quot;:\n      timestamp &#x3D; timestamp + n * 60 * 1000;\n      break;\n\n    case &quot;h&quot;:\n      timestamp &#x3D; timestamp + n * 60 * 60 * 1000;\n      break;\n\n    default:\n      throw new Error(&quot;need type&quot;);\n  &#125;\n  return timestamp;\n&#125;;\n&#x2F;**\n * 检测时间是否有效\n * @param expire\n * @param now\n * @returns\n *&#x2F;\nfunction isValid(\n  lastTimeStamp,\n  diff &#x3D; 3.5,\n  type &#x3D; &quot;s&quot;,\n  now &#x3D; new Date().getTime()\n) &#123;\n  const valid &#x3D;\n    &#x2F;&#x2F; @ts-ignore\n    lastTimeStamp &amp;&amp; new Date(lastTimeStamp).add(diff, type).valueOf() &gt; now;\n\n  console.log(&quot;valid&quot;, valid);\n  return valid;\n&#125;\n&#x2F;**\n * 模拟请求数据\n * @param params\n * @returns\n *&#x2F;\nfunction mockApiBack(params: any) &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&#123; success: true, result: params &#125;);\n    &#125;, 500);\n  &#125;);\n&#125;\n&#x2F;**\n * 使用闭包进行数据缓存，刷新后缓存会销毁重建\n * @returns\n *&#x2F;\nexport const getCacheFunc &#x3D; () &#x3D;&gt; &#123;\n  const CACHEOBJ &#x3D; &#123;&#125;;\n\n  return (options: IGetOption) &#x3D;&gt; &#123;\n    console.log(&quot;options&quot;, options);\n\n    const cacheKey &#x3D; genGetApiCacheKey(options);\n\n    let result &#x3D; CACHEOBJ[cacheKey];\n    console.log(&quot;CACHEOBJ&quot;, CACHEOBJ);\n    if (!result || !isValid(result.timestamp)) &#123;\n      console.log(&quot;缓存失效，接口获取&#x3D;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;, cacheKey);\n      return mockApiBack(options).then((res: any) &#x3D;&gt; &#123;\n        CACHEOBJ[cacheKey] &#x3D; &#123;\n          ...res,\n          timestamp: new Date().getTime(),\n        &#125;;\n        result &#x3D; CACHEOBJ[cacheKey];\n        return result;\n      &#125;);\n    &#125; else &#123;\n      console.log(&quot;读缓存数据&quot;);\n      return new Promise((resolve) &#x3D;&gt; resolve(result));\n    &#125;\n  &#125;;\n&#125;;\n\nexport const getApiWithCache &#x3D; getCacheFunc();\n\n&#x2F;&#x2F; 测试数据\ngetApiWithCache(&#123; method: &quot;Get&quot;, api: &quot;&#x2F;hello&quot; &#125;);\ngetApiWithCache(&#123; method: &quot;Get&quot;, api: &quot;&#x2F;hello&#x2F;world&quot; &#125;);\n\nlet h &#x3D; setInterval(async () &#x3D;&gt; &#123;\n  const d &#x3D; await getApiWithCache(&#123;\n    method: &quot;Get&quot;,\n    api: &quot;&#x2F;hello&quot;,\n    params: &#123; name: 1, age: 2 &#125;,\n  &#125;);\n  console.log(&quot;d&quot;, d);\n&#125;, 1000 * 1);\n\nsetTimeout(() &#x3D;&gt; &#123;\n  clearInterval(h);\n&#125;, 1000 * 4);</code></pre>\n\n<h2 id=\"编译产出-js\"><a href=\"#编译产出-js\" class=\"headerlink\" title=\"编译产出 js\"></a>编译产出 js</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nvar __awaiter &#x3D;\n  (this &amp;&amp; this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) &#123;\n    function adopt(value) &#123;\n      return value instanceof P\n        ? value\n        : new P(function (resolve) &#123;\n            resolve(value);\n          &#125;);\n    &#125;\n    return new (P || (P &#x3D; Promise))(function (resolve, reject) &#123;\n      function fulfilled(value) &#123;\n        try &#123;\n          step(generator.next(value));\n        &#125; catch (e) &#123;\n          reject(e);\n        &#125;\n      &#125;\n      function rejected(value) &#123;\n        try &#123;\n          step(generator[&quot;throw&quot;](value));\n        &#125; catch (e) &#123;\n          reject(e);\n        &#125;\n      &#125;\n      function step(result) &#123;\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      &#125;\n      step((generator &#x3D; generator.apply(thisArg, _arguments || [])).next());\n    &#125;);\n  &#125;;\nObject.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;);\nexports.getApiWithCache &#x3D; exports.getCacheFunc &#x3D; void 0;\n&#x2F;**\n * 使用method、api、params 生成唯一key,作为缓存的键\n * @param options\n * @returns\n *&#x2F;\nfunction genGetApiCacheKey(options) &#123;\n  const paramsPath &#x3D; formGetQueryParams(options.params || &#123;&#125;);\n  let _paramsPath &#x3D; paramsPath ? &#96;?$&#123;paramsPath&#125;&#96; : &quot;&quot;;\n  return &#96;$&#123;options.method || &quot;Get&quot;&#125; $&#123;options.api&#125;$&#123;_paramsPath&#125;&#96;;\n&#125;\n&#x2F;**\n *  格式get请求的查询数据\n * @param params\n * @returns\n *&#x2F;\nfunction formGetQueryParams(params) &#123;\n  const queryParams &#x3D; Object.keys(params)\n    .map((key) &#x3D;&gt; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&#96;)\n    .join(&quot;&amp;&quot;);\n  return queryParams;\n&#125;\n&#x2F;&#x2F; @ts-ignore\nDate.prototype.add &#x3D; function (n, type) &#123;\n  let timestamp &#x3D; this.getTime();\n  switch (type) &#123;\n    case &quot;s&quot;:\n      timestamp &#x3D; timestamp + n * 1000;\n      break;\n    case &quot;m&quot;:\n      timestamp &#x3D; timestamp + n * 60 * 1000;\n      break;\n    case &quot;h&quot;:\n      timestamp &#x3D; timestamp + n * 60 * 60 * 1000;\n      break;\n    default:\n      throw new Error(&quot;need type&quot;);\n  &#125;\n  return timestamp;\n&#125;;\n&#x2F;**\n * 检测时间是否有效\n * @param expire\n * @param now\n * @returns\n *&#x2F;\nfunction isValid(\n  lastTimeStamp,\n  diff &#x3D; 3.5,\n  type &#x3D; &quot;s&quot;,\n  now &#x3D; new Date().getTime()\n) &#123;\n  const valid &#x3D;\n    &#x2F;&#x2F; @ts-ignore\n    lastTimeStamp &amp;&amp; new Date(lastTimeStamp).add(diff, type).valueOf() &gt; now;\n  console.log(&quot;valid&quot;, valid);\n  return valid;\n&#125;\n&#x2F;**\n * 模拟请求数据\n * @param params\n * @returns\n *&#x2F;\nfunction mockApiBack(params) &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&#123; success: true, result: params &#125;);\n    &#125;, 500);\n  &#125;);\n&#125;\n&#x2F;**\n * 使用闭包进行数据缓存，刷新后缓存会销毁重建\n * @returns\n *&#x2F;\nconst getCacheFunc &#x3D; () &#x3D;&gt; &#123;\n  const CACHEOBJ &#x3D; &#123;&#125;;\n  return (options) &#x3D;&gt; &#123;\n    console.log(&quot;options&quot;, options);\n    const cacheKey &#x3D; genGetApiCacheKey(options);\n    let result &#x3D; CACHEOBJ[cacheKey];\n    console.log(&quot;CACHEOBJ&quot;, CACHEOBJ);\n    if (!result || !isValid(result.timestamp)) &#123;\n      console.log(&quot;缓存失效，接口获取&#x3D;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;, cacheKey);\n      return mockApiBack(options).then((res) &#x3D;&gt; &#123;\n        CACHEOBJ[cacheKey] &#x3D; Object.assign(Object.assign(&#123;&#125;, res), &#123;\n          timestamp: new Date().getTime(),\n        &#125;);\n        result &#x3D; CACHEOBJ[cacheKey];\n        return result;\n      &#125;);\n    &#125; else &#123;\n      console.log(&quot;读缓存数据&quot;);\n      return new Promise((resolve) &#x3D;&gt; resolve(result));\n    &#125;\n  &#125;;\n&#125;;\nexports.getCacheFunc &#x3D; getCacheFunc;\nexports.getApiWithCache &#x3D; (0, exports.getCacheFunc)();\n&#x2F;&#x2F; 测试数据\n(0, exports.getApiWithCache)(&#123; method: &quot;Get&quot;, api: &quot;&#x2F;hello&quot; &#125;);\n(0, exports.getApiWithCache)(&#123; method: &quot;Get&quot;, api: &quot;&#x2F;hello&#x2F;world&quot; &#125;);\nlet h &#x3D; setInterval(\n  () &#x3D;&gt;\n    __awaiter(void 0, void 0, void 0, function* () &#123;\n      const d &#x3D; yield (0, exports.getApiWithCache)(&#123;\n        method: &quot;Get&quot;,\n        api: &quot;&#x2F;hello&quot;,\n        params: &#123; name: 1, age: 2 &#125;,\n      &#125;);\n      console.log(&quot;d&quot;, d);\n    &#125;),\n  1000 * 1\n);\nsetTimeout(() &#x3D;&gt; &#123;\n  clearInterval(h);\n&#125;, 1000 * 4);</code></pre>\n\n<h2 id=\"测试数据\"><a href=\"#测试数据\" class=\"headerlink\" title=\"测试数据\"></a>测试数据</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;*\noptions &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39; &#125;\nCACHEOBJ &#123;&#125;\n缓存失效，接口获取&#x3D;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Get &#x2F;hello\noptions &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#x2F;world&#39; &#125;\nCACHEOBJ &#123;&#125;\n缓存失效，接口获取&#x3D;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Get &#x2F;hello&#x2F;world\noptions &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;\nCACHEOBJ &#123;\n  &#39;Get &#x2F;hello&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;,\n  &#39;Get &#x2F;hello&#x2F;world&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#x2F;world&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;\n&#125;\n缓存失效，接口获取&#x3D;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Get &#x2F;hello?name&#x3D;1&amp;age&#x3D;2\nd &#123;\n  success: true,\n  result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;,\n  timestamp: 1674116759431\n&#125;\noptions &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;\nCACHEOBJ &#123;\n  &#39;Get &#x2F;hello&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;,\n  &#39;Get &#x2F;hello&#x2F;world&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#x2F;world&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;,\n  &#39;Get &#x2F;hello?name&#x3D;1&amp;age&#x3D;2&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: [Object] &#125;,\n    timestamp: 1674116759431\n  &#125;\n&#125;\nvalid true\n读缓存数据\nd &#123;\n  success: true,\n  result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;,\n  timestamp: 1674116759431\n&#125;\noptions &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;\nCACHEOBJ &#123;\n  &#39;Get &#x2F;hello&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;,\n  &#39;Get &#x2F;hello&#x2F;world&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#x2F;world&#39; &#125;,\n    timestamp: 1674116758429\n  &#125;,\n  &#39;Get &#x2F;hello?name&#x3D;1&amp;age&#x3D;2&#39;: &#123;\n    success: true,\n    result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: [Object] &#125;,\n    timestamp: 1674116759431\n  &#125;\n&#125;\nvalid true\n读缓存数据\nd &#123;\n  success: true,\n  result: &#123; method: &#39;Get&#39;, api: &#39;&#x2F;hello&#39;, params: &#123; name: 1, age: 2 &#125; &#125;,\n  timestamp: 1674116759431\n&#125;\n*&#x2F;</code></pre>\n\n<h2 id=\"编译指令\"><a href=\"#编译指令\" class=\"headerlink\" title=\"编译指令\"></a>编译指令</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">tsc --module commonjs --target es2015 -w getCacheApi.ts</code></pre>\n\n<h2 id=\"执行指令\"><a href=\"#执行指令\" class=\"headerlink\" title=\"执行指令\"></a>执行指令</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">node getCacheApi.js</code></pre>\n\n<h2 id=\"other-柯里化缓存\"><a href=\"#other-柯里化缓存\" class=\"headerlink\" title=\"other 柯里化缓存\"></a>other 柯里化缓存</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export function cacheRequestHelper&lt;T &#x3D; any&gt;(): (\n  api: (...e: any) &#x3D;&gt; Promise&lt;T&gt;\n) &#x3D;&gt; (...e: any) &#x3D;&gt; Promise&lt;T&gt; &#123;\n  const fnMapper &#x3D; new Map();\n  const observer &#x3D; &#123;\n    subscribe: (key: any, fn) &#x3D;&gt; &#123;\n      const e &#x3D; fnMapper.get(key);\n      if (e) &#123;\n        e.push(fn);\n      &#125; else &#123;\n        fnMapper.set(key, [fn]);\n      &#125;\n    &#125;,\n    publish: (key: any, res) &#x3D;&gt; &#123;\n      const e &#x3D; fnMapper.get(key) || [];\n      e.map((fn) &#x3D;&gt; &#123;\n        fn.call(null, res);\n      &#125;);\n    &#125;,\n  &#125;;\n\n  const mapper &#x3D; new Map&lt;\n    any,\n    &#123;\n      result?: any;\n      fetched: boolean;\n      key: any;\n      expire?: number;\n    &#125;\n  &gt;();\n\n  function getInfo(args) &#123;\n    const keys &#x3D; Array.from(mapper.keys());\n    const key &#x3D; keys.find((item) &#x3D;&gt; &#123;\n      if (isEqual(item, args)) &#123;\n        return true;\n      &#125;\n    &#125;);\n    return mapper.get(key);\n  &#125;\n\n  return (api) &#x3D;&gt; &#123;\n    return (...args) &#x3D;&gt; &#123;\n      const info &#x3D; getInfo(args);\n      &#x2F;&#x2F; 有缓存数据\n      if (info?.result) &#123;\n        return Promise.resolve(info.result);\n      &#125;\n      &#x2F;&#x2F; 无缓存数据\n      if (!info) &#123;\n        mapper.set(args, &#123;\n          fetched: true,\n          key: args,\n        &#125;);\n        return api.apply(null, args).then((res) &#x3D;&gt; &#123;\n          const v &#x3D; mapper.get(args);\n          if (v) &#123;\n            v.result &#x3D; res;\n          &#125; else &#123;\n            mapper.set(args, &#123;\n              fetched: true,\n              result: res,\n              key: args,\n            &#125;);\n          &#125;\n          observer.publish(args, res);\n          return res;\n        &#125;);\n      &#125; else &#123;\n        return new Promise((resolve, reject) &#x3D;&gt; &#123;\n          observer.subscribe(info.key, (res) &#x3D;&gt; &#123;\n            resolve(res);\n          &#125;);\n        &#125;);\n      &#125;\n    &#125;;\n  &#125;;\n&#125;</code></pre>\n","text":"背景 避免相同 GET 请求重复发送，占用网络资源 将数据在 service 曾进行缓存 为什么是 service 层原因： 在 store 或者 context 进行缓存，处理起来麻烦，比较分散，不易维护 思路 闭包进行缓存 相同get请求、有效时间内不发起请求,非 get 请...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":4,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-service-%E5%B1%82\"><span class=\"toc-text\">为什么是 service 层</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ts-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">ts 源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E4%BA%A7%E5%87%BA-js\"><span class=\"toc-text\">编译产出 js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">测试数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">编译指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">执行指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#other-%E6%9F%AF%E9%87%8C%E5%8C%96%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">other 柯里化缓存</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"position sticky 失效了","uid":"8a2b4fbe9c65dfb47fc690fa692de0b8","slug":"2023-01-19sticky","date":"2023-01-19T09:22:16.000Z","updated":"2023-02-20T21:20:56.485Z","comments":true,"path":"api/articles/2023-01-19sticky.json","keywords":null,"cover":[],"text":"原理sticky 元素根据正常文档流进行定位， 然后相对它的最近滚动祖先（nearest scrolling ancestor）和 containing block（最近块级祖先 nearest block-level ancestor），包括 table-related 元素，...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"CSS","slug":"CSS","count":4,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"unsafe when doing server-side rendering","uid":"d8a5a38f56ece9e327645046d92ea7a7","slug":"2023-01-19","date":"2023-01-19T02:29:52.000Z","updated":"2023-02-20T21:20:56.484Z","comments":true,"path":"api/articles/2023-01-19.json","keywords":null,"cover":null,"text":"The pseudo class &quot;:first-child&quot; is potentially unsafe when doing server-side rendering. Try changing it to &quot;:first-of-type&qu...","link":"","photos":[],"count_time":{"symbolsCount":145,"symbolsTime":"1 mins."},"categories":[{"name":"Bug","slug":"Bug","count":1,"path":"api/categories/Bug.json"}],"tags":[{"name":"Bug","slug":"Bug","count":1,"path":"api/tags/Bug.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}