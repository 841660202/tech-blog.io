{"title":"前端基础-TCP","uid":"ca603a006bae6531fc585f1adf1fac4c","slug":"2022-07-15TCP","date":"2022-07-15T07:23:46.000Z","updated":"2023-02-20T21:20:56.465Z","comments":true,"path":"api/articles/2022-07-15TCP.json","keywords":null,"cover":[],"content":"<h2 id=\"TCP-的特性\"><a href=\"#TCP-的特性\" class=\"headerlink\" title=\"TCP 的特性\"></a>TCP 的特性</h2><ol>\n<li>TCP 提供⼀种<code>⾯向连接的</code>、<code>可靠的</code>、<code>字节流 </code>服务</li>\n<li>在⼀个 TCP 连接中，<code>仅双⽅进⾏彼此通信</code>。⼴播和多播不能⽤于 TCP</li>\n<li>TCP 使⽤<code>校验</code>、<code>确认</code>和<code>重传机制</code>来保证可靠传输</li>\n<li>TCP 使用<code>分节排序</code>和<code>累积确认</code>，来保证数据的顺序不变, 和⾮重复</li>\n<li>TCP 使⽤<code>滑动窗⼝</code>来实现流量控制，通过动态改变窗⼝的⼤⼩，进⾏拥塞控制</li>\n</ol>\n<h2 id=\"TCP、UDP-的区别\"><a href=\"#TCP、UDP-的区别\" class=\"headerlink\" title=\"TCP、UDP 的区别\"></a>TCP、UDP 的区别</h2><!-- <img src=\"http://t-blog-images.aijs.top/img/202302031618179.webp\" style=\"object-fit: cover\" /> -->\n\n<ol>\n<li>TCP 是一种面向连接的单播协议,在 TCP 中,并不存在多播、广播的这种行为，<code>因为 TCP 报文段中能明确发送方和接受方的 IP 地址</code>。</li>\n<li>UDP 是无连接的 ,因为使用 UDP 协议的发送者和接受者之间不必存在任何长期的关系。它们没有建立连接过程，简单来说就是<code>发送即结束</code></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><small>协议</small></th>\n<th align=\"left\"><small>可靠性</small></th>\n<th align=\"left\"><small>双⼯性</small></th>\n<th align=\"left\"><small>连接性</small></th>\n<th align=\"left\"><small>有序性</small></th>\n<th align=\"left\"><small>有界性</small></th>\n<th align=\"left\"><small>拥塞控制</small></th>\n<th align=\"left\"><small>传输速度</small></th>\n<th align=\"left\"><small>量级</small></th>\n<th align=\"left\"><small>头部⼤⼩</small></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><small>TCP</small></td>\n<td align=\"left\"><small>可靠(重传机 制)</small></td>\n<td align=\"left\"><small>全双⼯(1:1)</small></td>\n<td align=\"left\"><small>⾯向连接</small></td>\n<td align=\"left\"><small>有序</br>(通过 SYN 排 序)</small></td>\n<td align=\"left\"><small>⽆,</br> 有粘包情况</small></td>\n<td align=\"left\"><small>有</small></td>\n<td align=\"left\"><small>慢</small></td>\n<td align=\"left\"><small>低</small></td>\n<td align=\"left\"><small>20~60 字节</small></td>\n</tr>\n<tr>\n<td align=\"left\"><small>UDP</small></td>\n<td align=\"left\"><small>不可靠</br>(丢包后 数据丢 失)</small></td>\n<td align=\"left\"><small>n:m</small></td>\n<td align=\"left\"><small>⽆连接</small></td>\n<td align=\"left\"><small>⽆序</small></td>\n<td align=\"left\"><small>有</br> ⽆粘包</small></td>\n<td align=\"left\"><small>⽆</small></td>\n<td align=\"left\"><small>快</small></td>\n<td align=\"left\"><small>⾼</small></td>\n<td align=\"left\"><small>8 字节</small></td>\n</tr>\n</tbody></table>\n<p><strong>意义不同</strong></p>\n<ol>\n<li>TCP: <code>Transmission Control Protocol</code>,传输控制协议</li>\n<li>UDP: <code>User Datagram Protocol</code>,用户数据报协议</li>\n</ol>\n<p><strong>双工、连接、可靠</strong></p>\n<ol>\n<li><code>双⼯性</code>：TCP 全双工（1:1），UDP(n:m)</li>\n<li><code>连接性</code>：TCP 面向连接，UDP 无链接</li>\n<li><code>可靠性</code>：TCP 可靠，有重传机制，UDP 不可靠，丢了就丢了</li>\n</ol>\n<p><strong>有序、有界、有控制</strong></p>\n<ol>\n<li><code>有序性</code>：TCP 有序，通过 SYN 排序，UDP 无序</li>\n<li><code>有界性</code>：TCP 无界，有粘包情况，UDP 有消息边界，无粘包</li>\n<li><code>有控制</code>：TCP 有拥塞控制，UDP 没有拥塞控制</li>\n</ol>\n<p><strong>有内容，也要有速度</strong></p>\n<ol>\n<li><code>头⼤</code>：TCP 头部大小 20-60 字节，UDP 头部大小 8 个字节</li>\n<li><code>量小</code>：TCP 传输量级低于 UDP</li>\n<li><code>传的慢</code>：TCP 相对于 UDP 而言要慢</li>\n</ol>\n<h2 id=\"如何理解-UDP-的“无连接”特性？\"><a href=\"#如何理解-UDP-的“无连接”特性？\" class=\"headerlink\" title=\"如何理解 UDP 的“无连接”特性？\"></a>如何理解 UDP 的“无连接”特性？</h2><p><a href=\"https://www.dandelioncloud.cn/article/details/1505563355480944641\" target=\"_blank\" >如何理解 UDP 的“无连接”特性？</a></p>\n<h2 id=\"TCP-粘包是怎么回事，如何处理\"><a href=\"#TCP-粘包是怎么回事，如何处理\" class=\"headerlink\" title=\"TCP 粘包是怎么回事，如何处理?\"></a>TCP 粘包是怎么回事，如何处理?</h2><h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>可以参⻅⽹上流传⽐较⼴的⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:</p>\n<ol>\n<li>先接收到 data1, 然后接收到 data2 .</li>\n<li>先接收到 <code>data1 的部分数据</code>, 然后接收到 <code>data1 余下的部分</code>以及 <code>data2 的全部</code>.</li>\n<li>先接收到了 <code>data1 的全部数据</code>和 <code>data2 的部分数据</code>, 然后接收到了 <code>data2 的余下的数据</code>.</li>\n<li>⼀次性接收到了 data1 和 data2 的全部数据.</li>\n</ol>\n<p><code>其中的 2,3,4 就是我们常⻅的粘包的情况</code>.</p>\n<h3 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h3><ol>\n<li>默认情况下, TCP 连接会<code>启⽤延迟传送算法</code> (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有<code>多个数据</code>发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), <code>这样可以减少 IO 消耗提⾼性能</code>.</li>\n<li>如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了.</li>\n<li>但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.</li>\n</ol>\n<h3 id=\"对于处理粘包的问题-常⻅的解决⽅案有\"><a href=\"#对于处理粘包的问题-常⻅的解决⽅案有\" class=\"headerlink\" title=\"对于处理粘包的问题, 常⻅的解决⽅案有:\"></a>对于处理粘包的问题, 常⻅的解决⽅案有:</h3><ol>\n<li>关闭 Nagle 算法 （<code>场景：数据较大，频率不是特别高的场景</code>）</li>\n<li>多次发送之前间隔⼀个等待时间 （<code>场景：交互频率低的场景</code>）</li>\n<li>进⾏封包&#x2F;拆包（<code>场景：发送特征数据，收到后按特征数据进行分割</code>）</li>\n</ol>\n<h2 id=\"为什么-udp-不会粘包？\"><a href=\"#为什么-udp-不会粘包？\" class=\"headerlink\" title=\"为什么 udp 不会粘包？\"></a>为什么 udp 不会粘包？</h2><ol>\n<li><code>消息提取位</code> <code>TCP 协议是⾯向流的协议</code>，<code>UDP 是⾯向消息的协议 UDP 段都是⼀条消息</code>，应⽤程序必须<code>以消息为单位提取数据</code>，不能⼀次提取任意字节的数据</li>\n<li><code>消息边界</code> UDP<code>具有保护消息边界</code>，在每个 UDP 包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易 进⾏区分处理了。</li>\n<li><code>数据丢了不管</code> <code>传输协议</code>把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息&#96;。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收</li>\n</ol>\n<h2 id=\"TCP-三次握手\"><a href=\"#TCP-三次握手\" class=\"headerlink\" title=\"TCP 三次握手\"></a>TCP 三次握手</h2><p>所谓三次握⼿(Three-way Handshake)，是指建⽴⼀个 TCP 连接时，<code>需要客户端和服务器总共发送3个包</code>。</p>\n<p>三次握⼿的⽬的是连接服务器指定端⼝，建⽴ TCP 连接，并同步连接双⽅的序列号和确认号，交换 TCP 窗⼝⼤⼩信息。</p>\n<ol>\n<li>客户端：<code>SYN标志+序列号</code>,进入<code>SYN_SEND</code>状态</li>\n<li>服务端：<code>SYN标志+序列号+确认标识+确认序号</code>, 进入<code>SYN_RCVD</code>状态</li>\n<li>客户端：<code>确认标识+确认序号</code>，进入<code>ESTABLISHED</code>状态</li>\n</ol>\n<details class=\"custom-details\">\n<summary>点击查看更多</summary>\n<p><p>在 socket 编程中，客户端执⾏ connect() 时。将触发三次握⼿。</p>\n<ol>\n<li><p><code>第⼀次握⼿(SYN=1, seq=x)</code>: 客户端发送⼀个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端⼝，以及初始序号 X,保存在包头 的序列号(Sequence Number)字段⾥。 发送完毕后，客户端进⼊ SYN_SEND 状态。 <code>SYN标志+序列号+SYN_SEND</code></p>\n</li>\n<li><p><code>第⼆次握⼿(SYN=1, ACK=1, seq=y, ACKnum=x+1)</code>: 服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择⾃⼰ ISN 序列号，放到 Seq 域 ⾥，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进⼊ SYN_RCVD 状态。</p>\n</li>\n<li><p><code>第三次握⼿(ACK=1，ACKnum=y+1) 客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段+1，放在确 定字段中发送给对⽅</code>，并且在数据段放写 ISN 的+1 发送完毕后，客户端进⼊ ESTABLISHED 状态，当服务器端接收到这个包时，也进⼊ ESTABLISHED 状态，TCP 握⼿ 结束。 三次握⼿的过程的示意图如下：</p>\n</li>\n</ol>\n<img src=\"http://t-blog-images.aijs.top/img/20220715170016.webp\" />\n\n</p>\n</details>\n<h2 id=\"TCP-四次握手\"><a href=\"#TCP-四次握手\" class=\"headerlink\" title=\"TCP 四次握手\"></a>TCP 四次握手</h2><p>✨ TCP 的连接的拆除需要发送四个包，因此称为四次挥⼿(Four-way handshake)，也叫做改进的三次握⼿。<code>客户端或服务器均可主动发起挥⼿动作</code>，在 socket 编程中，任何⼀⽅执⾏ close() 操作即可产⽣挥⼿操作。</p>\n<ol>\n<li>客户端：<code>结束标识+序列号</code>,进⼊ <code>FIN_WAIT_1</code> 状态</li>\n<li>服务端：<code>确认标识+确认序号</code>,进⼊ <code>FIN_WAIT_1</code> 状态</li>\n<li>服务端：<code>结束标识+序列号</code>,进⼊ <code>FIN_WAIT_2</code> 状态</li>\n<li>客户端：<code>确认标识+确认序号</code>,进⼊ <code>TIME_WAIT</code> 状态</li>\n<li>后 续：服务端：进⼊ <code>CLOSED</code> 状态，客户端：<code>两个最⼤段⽣命周期</code>, 进⼊ <code>CLOSED</code> 状态</li>\n</ol>\n<details class=\"custom-details\">\n<summary>点击查看更多</summary>\n<ol>\n<li><code>第⼀次挥⼿(FIN=1，seq=x)</code> 假设客户端想要关闭连接，客户端发送⼀个 FIN 标志位置为 1 的包，表示⾃⼰已经没有数据可以发送了，但是仍然 可以接受数据。 发送完毕后，客户端进⼊ FIN_WAIT_1 状态。</li>\n<li><code>第⼆次挥⼿(ACK=1，ACKnum=x+1)</code> 服务器端确认客户端的 FIN 包，发送⼀个确认包，表明⾃⼰接受到了客户端关闭连接的请求，但还没有准备好关闭 连接。 发送完毕后，服务器端进⼊ CLOSE_WAIT 状态，客户端接收到这个确认包之后，进⼊ FIN_WAIT_2 状态，等待服务 器端关闭连接。</li>\n<li><code>第三次挥⼿(FIN=1，seq=y)</code> 服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。 TCP ⾯试题 54 发送完毕后，服务器端进⼊ LAST_ACK 状态，等待来⾃客户端的最后⼀个 ACK。</li>\n<li><code>第四次挥⼿(ACK=1，ACKnum=y+1)</code> 客户端接收到来⾃服务器端的关闭请求，发送⼀个确认包，并进⼊ TIME_WAIT 状态，等待可能出现的要求重传的 ACK 包。 服务器端接收到这个确认包之后，关闭连接，进⼊ CLOSED 状态。</li>\n<li>客户端等待了某个固定时间（两个最⼤段⽣命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是⾃⼰也关闭连接，进⼊ CLOSED 状态。 四次挥⼿的示意图如下：</li>\n</ol>\n<img src=\"http://t-blog-images.aijs.top/img/20220715170027.webp\" />\n\n\n</details>\n<h2 id=\"请求连接是三次，断开连接是四次\"><a href=\"#请求连接是三次，断开连接是四次\" class=\"headerlink\" title=\"请求连接是三次，断开连接是四次\"></a>请求连接是三次，断开连接是四次</h2><p><strong>简言之：收到后的确认应答，和结束应答是分开的</strong></p>\n<ol>\n<li>服务端：<code>确认标识+确认序号</code>,进⼊ <code>FIN_WAIT_1</code> 状态</li>\n<li>服务端：<code>结束标识+序列号</code>,进⼊ <code>FIN_WAIT_2</code> 状态</li>\n</ol>\n<p>分为两个，目的是在服务端发送完数据后，然后进行发送关闭信号</p>\n<h2 id=\"三次握手改为两次\"><a href=\"#三次握手改为两次\" class=\"headerlink\" title=\"三次握手改为两次\"></a>三次握手改为两次</h2><p>采用三次握手是为了<code>防止失效的连接请求报文段突然又传送到主机B，因而产生错误</code>。</p>\n<p>失效的连接请求报文段是指：主机 A 发出的连接请求没有收到主机 B 的确认，于是经过一段时间后，主机 A 又重新向主机 B 发送连接请求，且建立成功，顺序完成数据传输。</p>\n<p>考虑这样一种特殊情况：<code>主机 A 第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机 B，主机 B 以为是主机 A 又发起的新连接，于是主机 B 同意连接，并向主机 A 发回确认，但是此时主机 A 根本不会理会，主机 B 就一直在等待主机 A 发送数据，导致主机 B 的资源浪费。</code></p>\n<p>采用两次握手不行，原因就是上面说的<code>失效的连接请求</code>的特殊情况。</p>\n<p><strong>不是很恰当的例子</strong></p>\n<ol>\n<li>例子 1（3 次握手）：朋友：来吃饭 -&gt; 你：好咧，等我哈 -&gt; 朋友：👌。</li>\n<li>例子 2（2 次握手）：朋友：来吃饭 -&gt; 你（第二天你看到了）：好咧，等我哈。 朋友不在家（吃闭门羹）</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/nk298120/article/details/116596086\" target=\"_blank\" >TCP 三次握手如果使用二次握手代替则会出现的问题</a></p>\n","text":"TCP 的特性 TCP 提供⼀种⾯向连接的、可靠的、字节流 服务 在⼀个 TCP 连接中，仅双⽅进⾏彼此通信。⼴播和多播不能⽤于 TCP TCP 使⽤校验、确认和重传机制来保证可靠传输 TCP 使用分节排序和累积确认，来保证数据的顺序不变, 和⾮重复 TCP 使⽤滑动窗⼝来实现流...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":47,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":19,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP-%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">TCP 的特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP%E3%80%81UDP-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">TCP、UDP 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3-UDP-%E7%9A%84%E2%80%9C%E6%97%A0%E8%BF%9E%E6%8E%A5%E2%80%9D%E7%89%B9%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">如何理解 UDP 的“无连接”特性？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP-%E7%B2%98%E5%8C%85%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">TCP 粘包是怎么回事，如何处理?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">为什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BA%8E%E5%A4%84%E7%90%86%E7%B2%98%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98-%E5%B8%B8%E2%BB%85%E7%9A%84%E8%A7%A3%E5%86%B3%E2%BD%85%E6%A1%88%E6%9C%89\"><span class=\"toc-text\">对于处理粘包的问题, 常⻅的解决⽅案有:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-udp-%E4%B8%8D%E4%BC%9A%E7%B2%98%E5%8C%85%EF%BC%9F\"><span class=\"toc-text\">为什么 udp 不会粘包？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">TCP 三次握手</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP-%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">TCP 四次握手</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%BF%9E%E6%8E%A5%E6%98%AF%E4%B8%89%E6%AC%A1%EF%BC%8C%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E6%98%AF%E5%9B%9B%E6%AC%A1\"><span class=\"toc-text\">请求连接是三次，断开连接是四次</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%94%B9%E4%B8%BA%E4%B8%A4%E6%AC%A1\"><span class=\"toc-text\">三次握手改为两次</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-http","uid":"2467747971f59a01619a9d5abd6f99a3","slug":"2022-07-16http","date":"2022-07-16T04:47:18.000Z","updated":"2023-02-20T21:20:56.467Z","comments":true,"path":"api/articles/2022-07-16http.json","keywords":null,"cover":[],"text":"HTTP ⽅法HTTP1.0 定义了三种请求⽅法： GET, POST 和 HEAD ⽅法HTTP1.1 新增了五种请求⽅法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT HTTP ⽅法的理论作⽤ GET: 通常⽤于请求服务器发送某些资源 HEAD:...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":47,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":19,"path":"api/tags/面试.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-安全","uid":"63e60c5ff1f2bb6bee35b8ec5818fb3b","slug":"2022-07-15安全","date":"2022-07-15T06:32:30.000Z","updated":"2023-02-20T21:20:56.466Z","comments":true,"path":"api/articles/2022-07-15安全.json","keywords":null,"cover":null,"text":"前端安全问题? 跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS. 早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚ ⾯, 其...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":47,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}