{"title":"nextjs useSearchParams","uid":"9a1d323e88658104fe9c4ac04b72ebe7","slug":"2022-10-14useSearchParams","date":"2022-10-14T08:57:11.000Z","updated":"2022-10-17T11:18:29.861Z","comments":true,"path":"api/articles/2022-10-14useSearchParams.json","keywords":null,"cover":[],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><strong>需求</strong></p>\n<p>列表切换详情，返回列表，要求查询表单参数不丢失，</p>\n<p><strong>思路</strong></p>\n<ul>\n<li>记录参数到 url 上，在记录的过程中，列表页面不刷新</li>\n<li>返回时候列表页只作为一个 history 栈中的一个记录</li>\n</ul>\n<p><strong>MDN</strong></p>\n<p>直接点：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API#replacestate_%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B\" target=\"_blank\" >history.replaceState</a></p>\n<p><strong>history.replaceState</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">history.replaceState(stateObj, &quot;page 3&quot;, &quot;bar2.html&quot;);\n&#x2F;&#x2F; 注意点 history.replaceState, 会向url追加第三个参数，即使是相同的id,也会被追加。\n&#x2F;&#x2F; 例如：\n&#x2F;&#x2F; 初始 location.query 为 &#39;?time&#x3D;123456789&#39;\n&#x2F;&#x2F; history.replaceState(null, &quot;page 3&quot;, &quot;&amp;id&#x3D;1&quot;); &#x2F;&#x2F; 第一次调用\n\n&#x2F;&#x2F; location.query 为 &#39;?time&#x3D;123456789&amp;id&#x3D;1&#39;\n\n&#x2F;&#x2F; history.replaceState(null, &quot;page 3&quot;, &quot;&amp;id&#x3D;1&quot;); &#x2F;&#x2F; 第二次调用\n\n&#x2F;&#x2F; location.query 为 &#39;?time&#x3D;123456789&amp;id&#x3D;1&amp;id&#x3D;1&#39;\n\n&#x2F;&#x2F; history.replaceState(null, &quot;page 3&quot;, &quot;&amp;id&#x3D;1&quot;); &#x2F;&#x2F; 第三次调用\n\n&#x2F;&#x2F; location.query 为 &#39;?time&#x3D;123456789&amp;id&#x3D;1&amp;id&#x3D;1&amp;id&#x3D;1&#39;</code></pre>\n\n<h2 id=\"nextjs\"><a href=\"#nextjs\" class=\"headerlink\" title=\"nextjs\"></a>nextjs</h2><p>在 nextjs 中没有提供类似 react-router-dom 中 <code>useSearchParams</code>这样的勾子</p>\n<p><a href=\"https://reactrouter.com/en/main/hooks/use-search-params#usesearchparams\" target=\"_blank\" >useSearchParams</a></p>\n<h2 id=\"假装我们不知道-replaceState\"><a href=\"#假装我们不知道-replaceState\" class=\"headerlink\" title=\"假装我们不知道 replaceState\"></a>假装我们不知道 replaceState</h2><p>如果要在 nextjs 中实现 <code>useSearchParams</code> 如何做呢？</p>\n<p>会想到参考 <code>useSearchParams</code> 的源码实现</p>\n<h2 id=\"下载源码搜下实现\"><a href=\"#下载源码搜下实现\" class=\"headerlink\" title=\"下载源码搜下实现\"></a>下载源码搜下实现</h2><h2 id=\"useSearchParams\"><a href=\"#useSearchParams\" class=\"headerlink\" title=\"useSearchParams\"></a>useSearchParams</h2><img src=\"http://t-blog-images.aijs.top/img/202210141716968.webp\" />\n\n<!-- <img src=\"http://t-blog-images.aijs.top/img/202210141713394.webp\" /> -->\n<!-- <img src=\"http://t-blog-images.aijs.top/img/202210141714671.webp\" /> -->\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; packages&#x2F;react-router-dom&#x2F;index.tsx\n&#x2F;&#x2F; 调用 &#96;setSearchParams&#96; -&gt;  &#96;navigate&#96;-&gt;  &#96;let navigate &#x3D; useNavigate()&#96; -&gt; &#96;import &#123;  useNavigate&#125; from &quot;react-router&quot;;&#96;;</code></pre>\n\n<p>到这里，要去找 <code>react-router 包中的 useNavigate</code>， 同一个代码仓库，不用切换项目</p>\n<h2 id=\"useNavigate\"><a href=\"#useNavigate\" class=\"headerlink\" title=\"useNavigate\"></a>useNavigate</h2><p>同样方式，找到如下内容</p>\n<img src=\"http://t-blog-images.aijs.top/img/202210141723899.webp\" />\n\n<p>要去找下<code>NavigationContext</code>, React 的 context，我们了解到，是<code>NavigationContext.Provider</code>提供的数据</p>\n<h2 id=\"NavigationContext-Provider\"><a href=\"#NavigationContext-Provider\" class=\"headerlink\" title=\"NavigationContext.Provider\"></a>NavigationContext.Provider</h2><p>同样方式，找到如下内容</p>\n<img src=\"http://t-blog-images.aijs.top/img/202210141727222.webp\" />\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; packages&#x2F;react-router&#x2F;lib&#x2F;components.tsx\n\n&#x2F;&#x2F; 这里要注意，这是一个组件，再找下去要找 &lt;Router了，由React-router-dom包暴露的组件，可知道暴露了几个组件：</code></pre>\n\n<h2 id=\"react-router-dom-暴露的组件\"><a href=\"#react-router-dom-暴露的组件\" class=\"headerlink\" title=\"react-router-dom 暴露的组件\"></a>react-router-dom 暴露的组件</h2><img src=\"http://t-blog-images.aijs.top/img/202210141735213.webp\" />\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import &#123; createBrowserHistory, createHashHistory &#125; from &quot;history&quot;; &#x2F;&#x2F; 这里 4\n&#x2F;&#x2F; ...\nexport function BrowserRouter(&#123;\n  basename,\n  children,\n  window,\n&#125;: BrowserRouterProps) &#123;\n  let historyRef &#x3D; React.useRef&lt;BrowserHistory&gt;();\n  if (historyRef.current &#x3D;&#x3D; null) &#123;\n    historyRef.current &#x3D; createBrowserHistory(&#123; window &#125;); &#x2F;&#x2F; 这里 3\n  &#125;\n\n  let history &#x3D; historyRef.current; &#x2F;&#x2F; 这里 2\n  let [state, setState] &#x3D; React.useState(&#123;\n    action: history.action,\n    location: history.location,\n  &#125;);\n\n  React.useLayoutEffect(() &#x3D;&gt; history.listen(setState), [history]);\n\n  return (\n    &lt;Router\n      basename&#x3D;&#123;basename&#125;\n      children&#x3D;&#123;children&#125;\n      location&#x3D;&#123;state.location&#125;\n      navigationType&#x3D;&#123;state.action&#125;\n      navigator&#x3D;&#123;history&#125; &#x2F;&#x2F; 这里 1\n    &#x2F;&gt;\n  );\n&#125;</code></pre>\n\n<p>最终发现到了 <code>history</code>库中</p>\n<h2 id=\"createBrowserHistory\"><a href=\"#createBrowserHistory\" class=\"headerlink\" title=\"createBrowserHistory\"></a>createBrowserHistory</h2><p>同样方式，找到如下内容</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export function createBrowserHistory(&#123; window &#x3D; document.defaultView &#125; &#x3D; &#123;&#125;) &#123;\n  let globalHistory &#x3D; window.history; &#x2F;&#x2F; &#x2F;&#x2F; 这里 4\n  &#x2F;&#x2F; 获取第几个，和 location 信息\n  &#x2F;&#x2F; ...\n  function replace(to, state) &#123;\n    &#x2F;&#x2F; 这里 2\n    let nextAction &#x3D; ReplaceAction;\n    let nextLocation &#x3D; getNextLocation(to, state);\n    function retry() &#123;\n      replace(to, state);\n    &#125;\n\n    if (allowTx(nextAction, nextLocation, retry)) &#123;\n      let [historyState, url] &#x3D; getHistoryStateAndUrl(nextLocation, index);\n\n      &#x2F;&#x2F; TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url); &#x2F;&#x2F; 这里 3\n\n      applyTx(nextAction);\n    &#125;\n  &#125;\n\n  function go(n) &#123;\n    globalHistory.go(n);\n  &#125;\n\n  let history &#x3D; &#123;\n    get action() &#123;\n      return action;\n    &#125;,\n    get location() &#123;\n      return location;\n    &#125;,\n    createHref,\n    push,\n    replace, &#x2F;&#x2F; 这里 1\n    go,\n    back() &#123;\n      go(-1);\n    &#125;,\n    forward() &#123;\n      go(1);\n    &#125;,\n    listen(fn) &#123;\n      return listeners.push(fn);\n    &#125;,\n    block(fn) &#123;\n      let unblock &#x3D; blockers.push(fn);\n\n      if (blockers.length &#x3D;&#x3D;&#x3D; 1) &#123;\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      &#125;\n\n      return function () &#123;\n        unblock();\n\n        &#x2F;&#x2F; Remove the beforeunload listener so the document may\n        &#x2F;&#x2F; still be salvageable in the pagehide event.\n        &#x2F;&#x2F; See https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;#unloading-documents\n        if (!blockers.length) &#123;\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        &#125;\n      &#125;;\n    &#125;,\n  &#125;;\n\n  return history;\n&#125;</code></pre>\n\n<p>最终发现调用的是 <code> window.history.replaceState(historyState, null, url)</code></p>\n<h2 id=\"假装我们刚知道\"><a href=\"#假装我们刚知道\" class=\"headerlink\" title=\"假装我们刚知道\"></a>假装我们刚知道</h2><p>Oh~,原来如此呀</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><code>useNavigate</code></p>\n<p>这个 hook 内部获取了 <code> let &#123; basename, navigator &#125; = React.useContext(NavigationContext);</code>,</p>\n<p><code>NavigationContext.Provider</code>是最外层提供的，所以，在其他地方使用 <code>useNavigate</code> 直接能拿到 <code>navigator</code>,不需要通过<code>React.useContext(NavigationContext)</code>的方式获取</p>\n<h2 id=\"最后，实现-nextjs-中该勾子\"><a href=\"#最后，实现-nextjs-中该勾子\" class=\"headerlink\" title=\"最后，实现 nextjs 中该勾子\"></a>最后，实现 nextjs 中该勾子</h2><h2 id=\"useSearchParams-1\"><a href=\"#useSearchParams-1\" class=\"headerlink\" title=\"useSearchParams\"></a>useSearchParams</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; hooks&#x2F;useSearchParams.tsx\nimport &#123; useRouter &#125; from &quot;next&#x2F;router&quot;;\nimport React from &quot;react&quot;;\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;remix-run&#x2F;react-router&#x2F;blob&#x2F;main&#x2F;packages&#x2F;react-router-dom&#x2F;index.tsx\n\nexport type ParamKeyValuePair &#x3D; [string, string];\nexport type URLSearchParamsInit &#x3D;\n  | string\n  | ParamKeyValuePair[]\n  | Record&lt;string, string | string[]&gt;\n  | URLSearchParams;\n\ntype SetURLSearchParams &#x3D; (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) &#x3D;&gt; URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) &#x3D;&gt; void;\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;remix-run&#x2F;react-router&#x2F;blob&#x2F;d9d233c7fbb6f712915e8b0a7c916a69064bfdb9&#x2F;packages&#x2F;react-router&#x2F;lib&#x2F;context.ts#L92\nexport interface NavigateOptions &#123;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n&#125;\n\nexport type RelativeRoutingType &#x3D; &quot;route&quot; | &quot;path&quot;;\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;remix-run&#x2F;react-router&#x2F;blob&#x2F;main&#x2F;packages&#x2F;react-router-dom&#x2F;dom.ts\n&#x2F;**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to &#96;new URLSearchParams(init)&#96; except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don&#39;t want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams &#x3D; new URLSearchParams([\n *     [&#39;sort&#39;, &#39;name&#39;],\n *     [&#39;sort&#39;, &#39;price&#39;]\n *   ]);\n *\n * you can do:\n *\n *   let searchParams &#x3D; createSearchParams(&#123;\n *     sort: [&#39;name&#39;, &#39;price&#39;]\n *   &#125;);\n *&#x2F;\n\nexport function createSearchParams(\n  init: URLSearchParamsInit &#x3D; &quot;&quot;\n): URLSearchParams &#123;\n  return new URLSearchParams(\n    typeof init &#x3D;&#x3D;&#x3D; &quot;string&quot; ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) &#x3D;&gt; &#123;\n          const value &#x3D; init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) &#x3D;&gt; [key, v]) : [[key, value]]\n          );\n        &#125;, [] as ParamKeyValuePair[])\n  );\n&#125;\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams\n) &#123;\n  const searchParams &#x3D; createSearchParams(locationSearch);\n  &#x2F;&#x2F; @ts-ignore\n  for (const key of defaultSearchParams.keys()) &#123;\n    if (!searchParams.has(key)) &#123;\n      defaultSearchParams.getAll(key).forEach((value) &#x3D;&gt; &#123;\n        searchParams.append(key, value);\n      &#125;);\n    &#125;\n  &#125;\n\n  return searchParams;\n&#125;\n\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] &#123;\n  const defaultSearchParamsRef &#x3D; React.useRef(createSearchParams(defaultInit));\n  const router &#x3D; useRouter();\n  let searchParams &#x3D;\n    typeof window &#x3D;&#x3D;&#x3D; &quot;undefined&quot;\n      ? defaultSearchParamsRef.current\n      : getSearchParamsForLocation(\n          &#x2F;&#x2F; 参数\n          window?.location?.search || &quot;&quot;,\n          defaultSearchParamsRef.current\n        );\n\n  const setSearchParams &#x3D; React.useCallback&lt;SetURLSearchParams&gt;(\n    (nextInit, navigateOptions) &#x3D;&gt; &#123;\n      const newSearchParams &#x3D; createSearchParams(\n        typeof nextInit &#x3D;&#x3D;&#x3D; &quot;function&quot; ? nextInit(searchParams) : nextInit\n      );\n      window.history.replaceState(null, &quot;&quot;, &#96;?$&#123;newSearchParams&#125;&#96;);\n    &#125;,\n    [searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n&#125;</code></pre>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&#x2F;&#x2F; pages&#x2F;test&#x2F;replacestate.tsx\nimport React, &#123; useCallback, useEffect, useState &#125; from &quot;react&quot;;\nimport &#123; useSearchParams &#125; from &quot;..&#x2F;..&#x2F;hooks&#x2F;useSearchParams&quot;;\ninterface IProps &#123;&#125;\nconst TestReplaceState: React.FC&lt;IProps&gt; &#x3D; (props) &#x3D;&gt; &#123;\n  const [count, setCount] &#x3D; useState(0);\n  const [searchParams, setSearchParams] &#x3D; useSearchParams();\n\n  &#x2F;&#x2F; url数据放到state（数据恢复）\n  useEffect(() &#x3D;&gt; &#123;\n    setCount(Number(searchParams.get(&quot;id&quot;)));\n  &#125;, []);\n\n  &#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;URLSearchParams\n  if (typeof window !&#x3D;&#x3D; &quot;undefined&quot;) &#123;\n    const searchParams &#x3D; new URLSearchParams(location.href);\n    &#x2F;&#x2F; @ts-ignore\n    for (let p of searchParams) &#123;\n      console.log(p);\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 模拟查询表单提交\n  const handleSubmitQuery &#x3D; useCallback(() &#x3D;&gt; &#123;\n    const newValue &#x3D; count + 1;\n    &#x2F;&#x2F; 更新url数据，不刷新页面\n    setSearchParams(&#123; id: &#96;$&#123;newValue&#125;&#96; &#125;);\n    setCount(newValue);\n  &#125;, [count, setSearchParams]);\n\n  return (\n    &lt;div style&#x3D;&#123;&#123; padding: 50 &#125;&#125;&gt;\n      &lt;span\n        style&#x3D;&#123;&#123;\n          cursor: &quot;pointer&quot;,\n          background: &quot;#1980ff&quot;,\n          color: &quot;#fff&quot;,\n          padding: &quot;4px 6px&quot;,\n          borderRadius: 4,\n        &#125;&#125;\n        onClick&#x3D;&#123;handleSubmitQuery&#125;\n      &gt;\n        模拟查询表单提交数据 &#123;count&#125;\n      &lt;&#x2F;span&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;;\n\nexport default TestReplaceState;</code></pre>\n\n<h2 id=\"效果演示\"><a href=\"#效果演示\" class=\"headerlink\" title=\"效果演示\"></a>效果演示</h2><img src=\"http://t-blog-images.aijs.top/img/202210141848635.gif\" />\n\n<h2 id=\"详情-gt-列表-在-nextjs-上有时候不能被检测到\"><a href=\"#详情-gt-列表-在-nextjs-上有时候不能被检测到\" class=\"headerlink\" title=\"详情-&gt;列表, 在 nextjs 上有时候不能被检测到\"></a>详情-&gt;列表, 在 nextjs 上有时候不能被检测到</h2><p>url 切换成功，但是 nextjs 有时候检测不到 偶现</p>\n<p>之后看下源码，到底是什么原因</p>\n<h2 id=\"nextjs-提供了浅路由\"><a href=\"#nextjs-提供了浅路由\" class=\"headerlink\" title=\"nextjs 提供了浅路由\"></a>nextjs 提供了浅路由</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; ....\n&#x2F;&#x2F; 需要有顺序的加载，否则 antd table pagination current当前页数存在问题，\n&#x2F;&#x2F; 原因是： pagination被封装到一个hook中，与table不在一个地方，table的，更新不及时\nuseEffect(() &#x3D;&gt; &#123;\n  if (router.pathname &#x3D;&#x3D;&#x3D; &quot;&#x2F;my&#x2F;list&quot;) &#123;\n    setShowCreator(false);\n    refShowCreator.current &#x3D; false;\n  &#125; else &#123;\n    setShowCreator(true);\n    refShowCreator.current &#x3D; true;\n  &#125;\n  const urlparam &#x3D; router.query;\n  form.setFieldsValue(&#123;\n    ...urlparam,\n    states: (urlparam.states || [])?.map((item) &#x3D;&gt; Number(item)),\n  &#125;);\n\n  fetchCurrentData(+urlparam.pageIndex, +urlparam.limit);\n  &#x2F;&#x2F; eslint-disable-next-line react-hooks&#x2F;exhaustive-deps\n&#125;, [router.query.activeTab, pageOption, router.pathname, form]);\n&#x2F;&#x2F; ....\n&#x2F;&#x2F; 更新 queryparams\nconst handleReplaceState &#x3D; (_params) &#x3D;&gt; &#123;\n  const urlparams &#x3D; qs.stringify(\n    filterEmptyVal(_params, &#123; cleanKeys: [], emptyString: true &#125;)\n  );\n  if (countref.current) &#123;\n    const _path &#x3D;\n      router.query.activeTab !&#x3D;&#x3D; undefined\n        ? &#96;$&#123;router.pathname&#125;?activeTab&#x3D;$&#123;router.query.activeTab&#125;&amp;$&#123;urlparams&#125;&#96;\n        : &#96;$&#123;router.pathname&#125;?$&#123;urlparams&#125;&#96;;\n    router?.push(_path, undefined, &#123; shallow: true &#125;);\n  &#125;\n  countref.current &#x3D; countref.current + 1;\n  return getProblems(_params);\n&#125;;</code></pre>\n","text":"背景需求 列表切换详情，返回列表，要求查询表单参数不丢失， 思路 记录参数到 url 上，在记录的过程中，列表页面不刷新 返回时候列表页只作为一个 history 栈中的一个记录 MDN 直接点：history.replaceState history.replaceState ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"React","slug":"React","count":28,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":22,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nextjs\"><span class=\"toc-text\">nextjs</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%81%87%E8%A3%85%E6%88%91%E4%BB%AC%E4%B8%8D%E7%9F%A5%E9%81%93-replaceState\"><span class=\"toc-text\">假装我们不知道 replaceState</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E6%90%9C%E4%B8%8B%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">下载源码搜下实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useSearchParams\"><span class=\"toc-text\">useSearchParams</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useNavigate\"><span class=\"toc-text\">useNavigate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NavigationContext-Provider\"><span class=\"toc-text\">NavigationContext.Provider</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#react-router-dom-%E6%9A%B4%E9%9C%B2%E7%9A%84%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">react-router-dom 暴露的组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#createBrowserHistory\"><span class=\"toc-text\">createBrowserHistory</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%81%87%E8%A3%85%E6%88%91%E4%BB%AC%E5%88%9A%E7%9F%A5%E9%81%93\"><span class=\"toc-text\">假装我们刚知道</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E%EF%BC%8C%E5%AE%9E%E7%8E%B0-nextjs-%E4%B8%AD%E8%AF%A5%E5%8B%BE%E5%AD%90\"><span class=\"toc-text\">最后，实现 nextjs 中该勾子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useSearchParams-1\"><span class=\"toc-text\">useSearchParams</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Demo\"><span class=\"toc-text\">Demo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">效果演示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E6%83%85-gt-%E5%88%97%E8%A1%A8-%E5%9C%A8-nextjs-%E4%B8%8A%E6%9C%89%E6%97%B6%E5%80%99%E4%B8%8D%E8%83%BD%E8%A2%AB%E6%A3%80%E6%B5%8B%E5%88%B0\"><span class=\"toc-text\">详情-&gt;列表, 在 nextjs 上有时候不能被检测到</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nextjs-%E6%8F%90%E4%BE%9B%E4%BA%86%E6%B5%85%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">nextjs 提供了浅路由</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go 语言 特殊语法","uid":"cc6337a39cba986d99843e70d56686e5","slug":"2022-10-15go","date":"2022-10-15T01:54:03.000Z","updated":"2022-10-31T15:10:22.861Z","comments":true,"path":"api/articles/2022-10-15go.json","keywords":null,"cover":[],"text":"目前所遇到最好的教程go 教程 https://studygolang.com/pkgdoc 🤔 下载安装 go官方安装包地址 ♠ &#x2F;Users&#x2F;chenhailong&#x2F;Desktop&#x2F;841660202.github.io $ go ve...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"Go","slug":"Go","count":9,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":9,"path":"api/tags/Go.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React Cache","uid":"e9f36f04acce2f8eb8772b8cbe654522","slug":"2022-10-14react-cache","date":"2022-10-14T08:42:18.000Z","updated":"2022-10-15T02:11:29.159Z","comments":true,"path":"api/articles/2022-10-14react-cache.json","keywords":null,"cover":null,"text":"暂时没空看，先记录react-router saveScrollPositionsaveScrollPosition react-router-cache-routehttps://github.com/CJY0208/react-router-cache-route react...","link":"","photos":[],"count_time":{"symbolsCount":220,"symbolsTime":"1 mins."},"categories":[{"name":"React","slug":"React","count":28,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":22,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}