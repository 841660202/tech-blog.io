{"title":"前端基础-js算法","uid":"b6eefb99ab4e0f88e52602483fde65dd","slug":"2022-07-04js","date":"2022-07-04T07:31:24.000Z","updated":"2023-05-15T13:17:32.949Z","comments":true,"path":"api/articles/2022-07-04js.json","keywords":null,"cover":[],"content":"<h2 id=\"实现单例\"><a href=\"#实现单例\" class=\"headerlink\" title=\"实现单例\"></a>实现单例</h2><h3 id=\"通过构造函数\"><a href=\"#通过构造函数\" class=\"headerlink\" title=\"通过构造函数\"></a>通过构造函数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Singleton &#123;\n  constructor() &#123;\n    console.log(&#39;this&#39;, this);\n    if (!Singleton.instance) &#123;\n      &#x2F;&#x2F; 将 this 挂载到单例上\n      Singleton.instance &#x3D; this;\n    &#125;\n    return Singleton.instance;\n  &#125;\n&#125;\nconst a &#x3D; new Singleton();\nconst b &#x3D; new Singleton();\nconsole.log(a &#x3D;&#x3D;&#x3D; b);</code></pre>\n\n<h3 id=\"通过静态方法\"><a href=\"#通过静态方法\" class=\"headerlink\" title=\"通过静态方法\"></a>通过静态方法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Singleton &#123;\n  static instance &#x3D; null;\n\n  static getInstance() &#123;\n    if (!Singleton.instance) &#123;\n      Singleton.instance &#x3D; new Singleton();\n    &#125;\n    return Singleton.instance;\n  &#125;\n&#125;\nconst a &#x3D; Singleton.getInstance();\nconst b &#x3D; Singleton.getInstance();\nconsole.log(a &#x3D;&#x3D;&#x3D; b);</code></pre>\n\n<h2 id=\"字符串相关\"><a href=\"#字符串相关\" class=\"headerlink\" title=\"字符串相关\"></a>字符串相关</h2><p><a href=\"/#/post/2022-05-03string\" target=\"_blank\" >见：2022-05-03string</a></p>\n<h2 id=\"深度操作\"><a href=\"#深度操作\" class=\"headerlink\" title=\"深度操作\"></a>深度操作</h2><h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><h4 id=\"structuredClone\"><a href=\"#structuredClone\" class=\"headerlink\" title=\"structuredClone\"></a>structuredClone</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/web/api/structuredClone\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; Create an object with a value and a circular reference to itself.\nconst original &#x3D; &#123; name: &quot;MDN&quot; , hello: &#123;world: true&#125;&#125;;\noriginal.itself &#x3D; original;\n\n&#x2F;&#x2F; Clone it\nconst clone &#x3D; structuredClone(original);\n\nconsole.log(clone !&#x3D;&#x3D; original); &#x2F;&#x2F;  true  the objects are not the same (not same identity)\nconsole.log(clone.name &#x3D;&#x3D;&#x3D; &quot;MDN&quot;); &#x2F;&#x2F; true  they do have the same values\nconsole.log(clone.itself &#x3D;&#x3D;&#x3D; clone); &#x2F;&#x2F; true and the circular reference is preserved\nconsole.log(clone.hello &#x3D;&#x3D;&#x3D; original.hello) false</code></pre>\n\n<h4 id=\"深度克隆\"><a href=\"#深度克隆\" class=\"headerlink\" title=\"深度克隆\"></a>深度克隆</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function isBase &#x3D; (val) &#x3D;&gt; &#123;\n  return val &#x3D;&#x3D;&#x3D; null || typeof val !&#x3D;&#x3D; &quot;object&quot;\n&#125;\n\nfunction isObject(obj) &#123;\n  return Object.prototype.toString.call(obj) &#x3D;&#x3D; &quot;[object Object]&quot;;\n&#125;\n\nfunction isArray(obj) &#123;\n  return Object.prototype.toString.call(obj) &#x3D;&#x3D; &quot;[object Array]&quot;;\n&#125;\n\nfunction deepClone(obj) &#123;\n  let result;\n  if (isBase(obj)) &#123;\n    &#x2F;&#x2F;基本数据类型，直接赋值\n    result &#x3D; obj;\n  &#125; else &#123;\n    &#x2F;&#x2F; 非基本数据类型，遍历赋值\n    result &#x3D; isArray(obj) ? [] : &#123;&#125;; &#x2F;&#x2F; 空对象接收\n    for (let i in obj) &#123;\n      &#x2F;&#x2F; prettier-ignore\n      result[i] &#x3D; isObject(obj[i]) || isArray(obj[i]) ? deepClone(obj[i]) : obj[i];\n    &#125;\n  &#125;\n  return result;\n&#125;</code></pre>\n\n<h4 id=\"深比较\"><a href=\"#深比较\" class=\"headerlink\" title=\"深比较\"></a>深比较</h4><p>实现一个 compare 函数，比较两个对象是否相同<a href=\"https://www.jianshu.com/p/0828ded57b19#:~:text=%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AF%94%E8%BE%83-,%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9A,-//%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%B7%B1%E5%BA%A6\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 原理：\n * 1. 基本数据类型比较\n * 2. 复合类型，递归每个值依次比较\n **&#x2F;\n&#x2F;&#x2F; 基础类型&#x2F;null的数据类型，可以直接比较\nconst isBase &#x3D; (val) &#x3D;&gt; val &#x3D;&#x3D;&#x3D; null || typeof val !&#x3D;&#x3D; &#39;object&#39;;\n\nfunction deepCompare(a, b) &#123;\n  &#x2F;&#x2F; 基本数据类型\n  if (isBase(a) || isBase(b)) &#123;\n    return a &#x3D;&#x3D;&#x3D; b || (isNaN(a) &amp;&amp; isNaN(b));\n  &#125;\n  &#x2F;&#x2F; Object.getOwnPropertyDescriptors() 方法用来获取一个对象的所有自身属性的描述符。\n  const propsA &#x3D; Object.getOwnPropertyDescriptors(a);\n  const propsB &#x3D; Object.getOwnPropertyDescriptors(b);\n  &#x2F;&#x2F; 键是否长度一致\n  if (Object.keys(propsA).length !&#x3D;&#x3D; Object.keys(propsB).length) &#123;\n    return false;\n  &#125;\n  &#x2F;&#x2F; 键对应相等\n  return Object.keys(propsA).every((key) &#x3D;&gt; deepCompare(a[key], b[key]));\n&#125;</code></pre>\n\n<h4 id=\"深度获取差异化\"><a href=\"#深度获取差异化\" class=\"headerlink\" title=\"深度获取差异化\"></a>深度获取差异化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 是否为基础数据类型\nconst isBase &#x3D; (val) &#x3D;&gt; val &#x3D;&#x3D;&#x3D; null || typeof val !&#x3D;&#x3D; &#39;object&#39;;\nconst isNumber &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &#39;[object Number]&#39;;\n&#x2F;&#x2F; 深度比较两个对象的差异\nfunction deepDiffCompare(a, b, diffResult, k &#x3D; &#39;root&#39;) &#123;\n  &#x2F;&#x2F; 基本数据类型\n  if (isBase(a) || isBase(b)) &#123;\n    &#x2F;&#x2F; return a &#x3D;&#x3D;&#x3D; b;\n    if (a !&#x3D;&#x3D; b) &#123;\n      diffResult[k] &#x3D; b;\n    &#125; else &#123;\n      &#x2F;&#x2F; console.log(&quot;数据一致忽略&quot;);\n    &#125;\n  &#125; else &#123;\n    const propsA &#x3D; Object.keys(a);\n    const propsB &#x3D; Object.keys(b);\n    const uukeys &#x3D; new Set([...propsA, ...propsB]);\n    &#x2F;&#x2F; 键对应相等\n    uukeys.forEach((key) &#x3D;&gt; deepDiffCompare(a[key], b[key], diffResult, key));\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 必填数据\nconst requireds &#x3D; [&#39;sex&#39;];\n&#x2F;&#x2F; 模拟数据\nconst old &#x3D; &#123; name: 1, age: 2, dog: &#123; name: &#39;小狗&#39;, do: &#39;汪汪叫&#39; &#125; &#125;;\nconst newValue &#x3D; &#123; name: 1, age: 2, sex: 1 &#125;;\n&#x2F;&#x2F; 执行比较测试\nhandleCompare(old, newValue);\n\n&#x2F;&#x2F; 这里涉及到函数声明提升，写在后面不影响使用\nfunction handleCompare(old, newValue, onChange) &#123;\n  let diffResult &#x3D; &#123;&#125;;\n\n  deepDiffCompare(old, newValue, diffResult);\n\n  &#x2F;&#x2F; console.log(&quot;diffResult&quot;, diffResult);\n  &#x2F;&#x2F; 变化的数据，在必填数据中，则hasChange为true, 否则为false\n  const hasChange &#x3D; Object.keys(diffResult).some((k) &#x3D;&gt; requireds.includes(k));\n\n  &#x2F;&#x2F; console.log(&quot;hasChange&quot;, hasChange);\n  hasChange &amp;&amp; onChange?.();\n&#125;\n\n&#x2F;&#x2F; vue中使用\n&#x2F;&#x2F; watch: &#123;\n&#x2F;&#x2F;   &#39;submitForm&#39;: &#123;\n&#x2F;&#x2F;      handler(val, oldVal) &#123;\n&#x2F;&#x2F;       console.log(&#39;c changed&#39;)\n&#x2F;&#x2F;       handleCompare(oldVal, val, ()&#x3D;&gt;&#123;\n&#x2F;&#x2F;         this.clearTableData()\n&#x2F;&#x2F;       &#125;)\n&#x2F;&#x2F;     &#125;,\n&#x2F;&#x2F;     deep: true\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F;  &#125;</code></pre>\n\n<h4 id=\"深度拼接\"><a href=\"#深度拼接\" class=\"headerlink\" title=\"深度拼接\"></a>深度拼接</h4><p>实现 <code>json.stringify</code></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON#polyfill\" target=\"_blank\" >MDN JSON.stringify js 实现</a></p>\n<p><a href=\"/#/post/2023-02-27json\" target=\"_blank\" >见：2023-02-27json</a></p>\n<h4 id=\"深度解析\"><a href=\"#深度解析\" class=\"headerlink\" title=\"深度解析\"></a>深度解析</h4><p>实现 <code>json.parse</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function parse(sJSON) &#123;\n  return eval(&#39;(&#39; + sJSON + &#39;)&#39;);\n&#125;</code></pre>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const getUniqueID &#x3D; ((id) &#x3D;&gt; () &#x3D;&gt; &#123;\n  id +&#x3D; 1;\n  return id;\n&#125;)(-1);\n\n&#x2F;&#x2F; getUniqueID\n&#x2F;&#x2F; () &#x3D;&gt; &#123;\n&#x2F;&#x2F;   id +&#x3D; 1;\n&#x2F;&#x2F;   return id;\n&#x2F;&#x2F; &#125;</code></pre>\n\n<h3 id=\"操作后防抖\"><a href=\"#操作后防抖\" class=\"headerlink\" title=\"操作后防抖\"></a>操作后防抖</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 去抖动原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时.\n&#x2F;&#x2F; 方法1\nconst debounce &#x3D; function (fn, delay) &#123;\n  let timer &#x3D; null; &#x2F;&#x2F; 闭包维护一个timer\n  return (...args) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 柯里化\n    clearTimeout(timer);\n    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;\n      fn?.apply(this, args); &#x2F;&#x2F; this指向window\n    &#125;, delay);\n  &#125;;\n&#125;;\n\n&#x2F;&#x2F; 测试\n\nlet biu &#x3D; function () &#123;\n  console.log(&#39;biu biu biu&#39;, new Date().getTime());\n&#125;;\nlet boom &#x3D; function () &#123;\n  console.log(&#39;boom boom boom&#39;, new Date().getTime());\n&#125;;\n\nvar a &#x3D; setInterval(debounce(biu, 500), 1000);\nvar b &#x3D; setInterval(debounce(boom, 2000), 1000);\nsetTimeout(() &#x3D;&gt; &#123;\n  clearInterval(a);\n  clearInterval(b);\n&#125;, 10000);</code></pre>\n\n<h3 id=\"执行一次后防抖\"><a href=\"#执行一次后防抖\" class=\"headerlink\" title=\"执行一次后防抖\"></a>执行一次后防抖</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function debounceStart(fn, delay &#x3D; 0) &#123;\n  let immediate &#x3D; true;\n  let timerId &#x3D; null;\n  return function (...args) &#123;\n    if (immediate) &#123;\n      fn.apply(this, args);\n      immediate &#x3D; false;\n    &#125;\n    clearTimeout(timerId);\n    timerId &#x3D; setTimeout(() &#x3D;&gt; &#123;\n      immediate &#x3D; true;\n    &#125;, delay);\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const throttle &#x3D; (fn, delay &#x3D; 500) &#x3D;&gt; &#123;\n  let allow &#x3D; true; &#x2F;&#x2F; 守门员，delay秒钟放进去一个球\n\n  return (...args) &#x3D;&gt; &#123;\n    if (!allow) return;\n    allow &#x3D; false;\n\n    setTimeout(() &#x3D;&gt; &#123;\n      fn.apply(this, args);\n      allow &#x3D; true;\n    &#125;, delay);\n  &#125;;\n&#125;;</code></pre>\n\n<h3 id=\"接口数据缓存\"><a href=\"#接口数据缓存\" class=\"headerlink\" title=\"接口数据缓存\"></a>接口数据缓存</h3><h2 id=\"this-指向\"><a href=\"#this-指向\" class=\"headerlink\" title=\"this 指向\"></a>this 指向</h2><p><a href=\"https://juejin.cn/post/6977563249650696206\" target=\"_blank\" >https://juejin.cn/post/6977563249650696206</a></p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function.call(thisArg, arg1, arg2, ...)\n</code></pre>\n\n<p>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。 即：可以改变当前函数的 this 指向；还会让当前函数执行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 给函数原型添加mycall方法，创建一个上下文对象context，如果传入的对象不存在时，将指向全局window。\n&#x2F;&#x2F; 2. 通过给context添加fn属性，context的fn引用调用该方法的函数fun，并执行fun。\n&#x2F;&#x2F; 3. 执行完成之后删除该属性fn。\nFunction.prototype.mycall &#x3D; function (context, ...args) &#123;\n  &#x2F;&#x2F; prettier-ignore\n  context &#x3D; context &#x3D;&#x3D; null || context &#x3D;&#x3D; undefined ? window : new Object(context);\n  context.fn &#x3D; this;\n  let r &#x3D; context.fn(...args);\n  delete context.fn;\n  return r;\n&#125;;\n\nfunction fun() &#123;\n  console.log(this.name, arguments);\n&#125;\nlet obj &#x3D; &#123; name: &#39;clying&#39; &#125;;\nfun.mycall(obj, &#39;deng&#39;, &#39;deng&#39;);</code></pre>\n\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><ul>\n<li>语法</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">apply(thisArg);\napply(thisArg, argsArray);</code></pre>\n\n<ol>\n<li>与 call 方法类似，call 方法接收的是一个参数列表，而 apply 方法接收的是一个包含多个参数的数组。</li>\n<li>用法 将函数中的 this 指向传入的第一个参数，第二个参数为数组</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myapply &#x3D; function (context, args) &#123;\n  &#x2F;&#x2F; prettier-ignore\n  context &#x3D; context &#x3D;&#x3D; null || context &#x3D;&#x3D; undefined ? window : new Object(context);\n\n  context.fn &#x3D; this;\n\n  if (!args) return context.fn();\n  &#x2F;&#x2F; args 数组被转化成字符串\n  let r &#x3D; eval(&#39;context.fn(&#39; + args + &#39;)&#39;);\n  delete context.fn;\n  return r;\n&#125;;</code></pre>\n\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p><strong>更像是数据收集，通过柯里化，减少参数，方便后续调用</strong></p>\n<ol>\n<li>bind() 方法<code>创建一个新的函数，不自动执行，需要手动调用 bind()</code> 。</li>\n<li>这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用</li>\n<li>用法将 obj 绑定到 fun 函数的 this 上，函数 fun 可以使用 obj 内部的属性，和传入的变量。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 应用于curry，要理解\nFunction.prototype.mybind &#x3D; function (context) &#123;\n  let that &#x3D; this;\n  let bindargs &#x3D; Array.prototype.slice.call(arguments, 1);\n  &#x2F;&#x2F; 产生闭包\n  function fBind() &#123;\n    let args &#x3D; Array.prototype.slice.call(arguments);\n    &#x2F;&#x2F; 1. 如果使用的是new，那么this会指向fBind实例，this作为当前实例传入\n    &#x2F;&#x2F; 2. 不是new的话，使用context上下文对象\n    &#x2F;&#x2F; prettier-ignore\n    return that.apply( this instanceof fBind ? this : context, bindargs.concat(args)) &#x2F;&#x2F; 通过闭包获取更多的参数;\n  &#125;\n\n  return fBind;\n&#125;;\n\n&#x2F;&#x2F; 测试1\n\nfunction fun() &#123;\n  console.log(this.name, arguments);\n&#125;\nlet obj &#x3D; &#123;\n  name: &#39;clying&#39;,\n&#125;;\nlet b &#x3D; fun.mybind(obj, 2);\nb(3);\n&#x2F;&#x2F; clying Arguments(2) [2, 3]\n&#x2F;&#x2F;\n&#x2F;&#x2F;\n&#x2F;&#x2F;\n&#x2F;&#x2F;\n&#x2F;&#x2F; 测试2\nfunction fun() &#123;\n  console.log(this.name, arguments);\n&#125;\nlet obj &#x3D; &#123;\n  name: &#39;clying&#39;,\n&#125;;\nfun.prototype.age &#x3D; 23;\nlet b &#x3D; fun.mybind(obj, 3);\nlet instance &#x3D; new b(4);\nconsole.log(instance.age);\n&#x2F;&#x2F;undefined Arguments(2) [3, 4]\n&#x2F;&#x2F; 23</code></pre>\n\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p><a href=\"https://blog.csdn.net/weixin_45774485/article/details/122462081\" target=\"_blank\" >手写 promise 的方法（all、race、allSettled、any、finally）</a></p>\n<h3 id=\"手写-promise\"><a href=\"#手写-promise\" class=\"headerlink\" title=\"手写 promise\"></a>手写 promise</h3><p><a href=\"https://juejin.cn/post/7194257890893365308\" target=\"_blank\" >5K 字 由浅入深聊聊 Promise 实现原理</a></p>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><ul>\n<li>要么返回全部 resolve 结果，要么返回一个 reject</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.myAll &#x3D; function (promises) &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    if (!isArray(promises)) &#123;\n      return reject(new TypeError(&#39;arguments must be an array&#39;));\n    &#125;\n\n    let res &#x3D; [];\n    var resolvedCounter &#x3D; 0;\n    var promiseNum &#x3D; promises.length;\n\n    promises.forEach((promise, index) &#x3D;&gt; &#123;\n      Promise.resolve(promise) &#x2F;&#x2F; 防止你不是一个promise\n        &#x2F;&#x2F; 如果参数是一个原始值,或者是一个不具有then方法的对象,则Promise.resolve方法返回一个新的 Promise 对象,状态为resolved\n        &#x2F;&#x2F; @link https:&#x2F;&#x2F;wenku.baidu.com&#x2F;view&#x2F;8bf2d73451d380eb6294dd88d0d233d4b14e3fef.html\n        .then((data) &#x3D;&gt; &#123;\n          resolvedCounter++;\n          res.push(data);\n          &#x2F;&#x2F; 所有的都没有异常\n          promiseNum &#x3D;&#x3D;&#x3D; resolvedCounter &amp;&amp; resolve(res);\n        &#125;)\n        .catch((err) &#x3D;&gt; &#123;\n          &#x2F;&#x2F; 捕获，直接返回\n          reject(err);\n        &#125;);\n    &#125;);\n  &#125;);\n&#125;;</code></pre>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><ul>\n<li>不管 resolve, reject，见到就返回</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.myRace &#x3D; (promises) &#x3D;&gt;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    promises?.forEach((promise) &#x3D;&gt; &#123;\n      promise.then(resolve, reject);\n    &#125;);\n  &#125;);</code></pre>\n\n<h3 id=\"Promise-allSettle\"><a href=\"#Promise-allSettle\" class=\"headerlink\" title=\"Promise.allSettle\"></a>Promise.allSettle</h3><ul>\n<li>全部结果，resolve, reject 都要</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.myAllSettled &#x3D; function (promises) &#123;\n  let len &#x3D; promises.length;\n  let count &#x3D; 0;\n  let result &#x3D; new Array(len);\n\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    for (let p of promises) &#123;\n      Promise.resolve(p).then(\n        (res) &#x3D;&gt; &#123;\n          &#x2F;&#x2F;成功：加入装状态列表\n          result[count] &#x3D; &#123;\n            &#x2F;&#x2F;记录当前promise信息\n            status: &#39;fullfilled&#39;,\n            result: res,\n          &#125;;\n          if (++count &#x3D;&#x3D; len) &#123;\n            &#x2F;&#x2F;遍历完，走resolve\n            resolve(result);\n          &#125;\n        &#125;,\n        (err) &#x3D;&gt; &#123;\n          &#x2F;&#x2F;失败：加入状态列表\n          result[count] &#x3D; &#123;\n            &#x2F;&#x2F;记录当前promise状态信息\n            status: &#39;rejected&#39;,\n            result: err,\n          &#125;;\n          if (++count &#x3D;&#x3D; len) &#123;\n            &#x2F;&#x2F;遍历完依然走resolve\n            reject(result);\n          &#125;\n        &#125;\n      );\n    &#125;\n  &#125;);\n&#125;;</code></pre>\n\n<h3 id=\"Promise-any\"><a href=\"#Promise-any\" class=\"headerlink\" title=\"Promise.any\"></a>Promise.any</h3><ul>\n<li>要么没有 resolve 的,返回全部 reject 结果，要么有一个 resolve 的返回 resolve 结果(看上去和<code>Promise.all</code>刚好反过来了)</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.myAny &#x3D; function (promises) &#123;\n  let res &#x3D; [],\n    count &#x3D; 0,\n    len &#x3D; promises.length;\n\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    for (let p of promises) &#123;\n      Promise.resolve(p).then(\n        (res) &#x3D;&gt; &#123;\n          resolve(res); &#x2F;&#x2F; 只要有一个成功，就走resolve\n        &#125;,\n        (err) &#x3D;&gt; &#123;\n          res[count] &#x3D; err; &#x2F;&#x2F; 遇到错误先不管，继续检查\n          if (++count &#x3D;&#x3D; len) &#123;\n            &#x2F;&#x2F; 直到遇到成功的或检查完\n            reject(res);\n          &#125;\n        &#125;\n      );\n    &#125;\n  &#125;);\n&#125;;</code></pre>\n\n<h3 id=\"Promise-finally\"><a href=\"#Promise-finally\" class=\"headerlink\" title=\"Promise.finally\"></a>Promise.finally</h3><ul>\n<li>无论哪个执行完，回调下</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.prototype.myFinally &#x3D; function (cb) &#123;\n  &#x2F;&#x2F;cb就是要共同执行的逻辑\n  return this.then(\n    &#x2F;&#x2F;谁调用finally，this就是谁\n    (value) &#x3D;&gt; Promise.resolve(cb()), &#x2F;&#x2F;不管调用finally的promise是什么状态都会执行这个cb\n    (error) &#x3D;&gt; Promise.resolve(cb()) &#x2F;&#x2F;不管调用finally的promise是什么状态都会执行这个cb\n  );\n&#125;;</code></pre>\n\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><p><a href=\"https://wenku.baidu.com/view/8bf2d73451d380eb6294dd88d0d233d4b14e3fef.html\" target=\"_blank\" >见 Promise.resolve（）详解</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.prototype.myResolve &#x3D; function (params) &#123;\n  return new Promise((resolve) &#x3D;&gt; resolve(params));\n&#125;;</code></pre>\n\n<h3 id=\"阻断-resolve-x2F-reject-后面代码还会执行\"><a href=\"#阻断-resolve-x2F-reject-后面代码还会执行\" class=\"headerlink\" title=\"阻断 resolve&#x2F;reject 后面代码还会执行\"></a>阻断 resolve&#x2F;reject 后面代码还会执行</h3><p><a href=\"https://www.freesion.com/article/68121031859/\" target=\"_blank\" >使用 Promise 过程中 resolve 或 reject 后，后面代码还会执行，默认加 return 较妥</a></p>\n<h3 id=\"限制并发数量\"><a href=\"#限制并发数量\" class=\"headerlink\" title=\"限制并发数量\"></a>限制并发数量</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 原理：将在用数量，限制在最大数量内的异步直接发，\n&#x2F;&#x2F; 限制外的现存到数组中，当在用数量减少时一个一个取出来运行\nexport class LimitPromise &#123;\n  private limit: number;        &#x2F;&#x2F; 最大限制数\n  private runningcount: number;        &#x2F;&#x2F; 目前并发的数量\n  private taskQueue: any[];     &#x2F;&#x2F; 如果并发数等于最大限制，则把新加的异步操作用数组存起来\n\n  constructor(limit: number) &#123;\n    this.limit &#x3D; limit;\n    this.runningcount &#x3D; 0;\n    this.taskQueue &#x3D; [];\n  &#125;\n  &#x2F;&#x2F; 出队列\n  private createTask(\n    asyncFn: Function,\n    args: any[],\n    resolve: (value: unknown) &#x3D;&gt; void,\n    reject: (reason?: any) &#x3D;&gt; void,\n  ) &#123;\n    return () &#x3D;&gt; &#123;\n      asyncFn(...args)\n        .then(resolve)\n        .catch(reject)\n        .finally(() &#x3D;&gt; &#123;\n          this.runningcount--; &#x2F;&#x2F; 任务结束后，对任务队列进行出列，执行\n          if (this.taskQueue.length) &#123;\n            let task &#x3D; this.taskQueue.shift();\n            task();\n          &#125;\n        &#125;);\n\n      this.runningcount++; &#x2F;&#x2F; 在执行的数量\n    &#125;;\n  &#125;\n  &#x2F;&#x2F; 入队列\n  public call(asyncFn: Function, ...args: any[]) &#123;\n    &#x2F;&#x2F; 这层promise令人费解，主要是为了提供resolve和reject给 limitP.call，\n    &#x2F;&#x2F; 这样limitP可以做些其他的事情，理论上没有必要\n    return new Promise((resolve, reject) &#x3D;&gt; &#123;\n      const task &#x3D; this.createTask(asyncFn, args, resolve, reject); &#x2F;&#x2F; 创建任务\n      if (this.runningcount &gt;&#x3D; this.limit) &#123; &#x2F;&#x2F; 大于限制的存起来\n        this.taskQueue.push(task);\n      &#125; else &#123; &#x2F;&#x2F; 否则直接执行\n        task();\n      &#125;\n    &#125;);\n  &#125;\n&#125;\n\nlet limitP &#x3D; new LimitPromise(3)\n\n\n\n&#x2F;&#x2F; 测试\nfunction sleep(sec: number) &#123;\n  console.log(&#39;..............&#39;);\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      console.log(&#39;等待了&#39; + sec + &#39;秒&#39;);\n      resolve(&#39;&#39;);\n    &#125;, sec * 1000);\n  &#125;);\n&#125;\n\nlimitP.call(sleep, 1);\nlimitP.call(sleep, 2);\nlimitP.call(sleep, 3);\nlimitP.call(sleep, 4);\nlimitP.call(sleep, 5);\nlimitP.call(sleep, 6);\n&#x2F;&#x2F; https:&#x2F;&#x2F;stackblitz.com&#x2F;edit&#x2F;typescript-sdhev3?file&#x3D;index.ts</code></pre>\n\n<h3 id=\"PromiseQueue\"><a href=\"#PromiseQueue\" class=\"headerlink\" title=\"PromiseQueue\"></a>PromiseQueue</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 入队列\n&#x2F;&#x2F; 出队列\nclass PromiseQueue &#123;\n  constructor(tasks, limit &#x3D; 1) &#123;\n    this.tasks &#x3D; tasks;\n    this.limit &#x3D; limit;\n    this.running &#x3D; [];\n  &#125;\n  next() &#123;\n    return this.running.length &lt; this.limit &amp;&amp; this.tasks.length;\n  &#125;\n\n  run() &#123;\n    while (this.next()) &#123;\n      let promise &#x3D; this.tasks.shift(); &#x2F;&#x2F; 更改tasks数组长度\n\n      promise.then((data) &#x3D;&gt; &#123;\n        this.run();\n      &#125;);\n\n      this.running.push(promise); &#x2F;&#x2F; 更改running数组长度\n    &#125;\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 接收一个promise数组，并发限制为3\nconst taskQueue &#x3D; new PromiseQueue(tasks, 3);\ntaskQueue.run();\n\n&#x2F;&#x2F; 清理\n&#x2F;&#x2F; taskQueue &#x3D; undefined</code></pre>\n\n<h3 id=\"async-await-原理实现\"><a href=\"#async-await-原理实现\" class=\"headerlink\" title=\"async await 原理实现\"></a>async await 原理实现</h3><p><a href=\"https://juejin.cn/post/7007031572238958629#heading-15\" target=\"_blank\" >见</a></p>\n<p><a href=\"https://juejin.cn/post/7195358576364224568\" target=\"_blank\" >仅“2k”字就能理解的 async&#x2F;await 原理，摸个鱼的时间搞定它</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; function* 这种声明方式 (function关键字后跟一个星号）会定义一个生成器函数 (generator function)，\n&#x2F;&#x2F; 它返回一个 Generator 对象\n&#x2F;&#x2F; generator对象由生成器函数生成\n\n&#x2F;&#x2F;接受一个Generator函数作为参数\nfunction myAsync(gen) &#123;\n  &#x2F;&#x2F; 返回一个函数\n  return function () &#123;\n    &#x2F;&#x2F; 返回一个promise\n    return new Promise((resolve, reject) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 执行Generator函数\n      &#x2F;&#x2F; generator返回什么\n      let g &#x3D; gen();\n\n      const next &#x3D; (context) &#x3D;&gt; &#123;\n        let res;\n        try &#123;\n          res &#x3D; g.next(context);\n        &#125; catch (error) &#123;\n          reject(error);\n        &#125;\n        if (res.done) &#123;\n          &#x2F;&#x2F; 这时候说明已经是完成了，需要返回结果\n          resolve(res.value);\n        &#125; else &#123;\n          &#x2F;&#x2F; 继续执行next函数,传入执行结果\n          return Promise.resolve(res.value).then(\n            (val) &#x3D;&gt; next(val),\n            (err) &#x3D;&gt; next(err)\n          );\n        &#125;\n      &#125;;\n      next();\n    &#125;);\n  &#125;;\n&#125;\n\n&#x2F;&#x2F; prettier-ignore\nconst getFetch &#x3D; (nums) &#x3D;&gt; new Promise((resolve) &#x3D;&gt; &#123;\n  setTimeout(() &#x3D;&gt; &#123;\n    resolve(nums + 1);\n  &#125;, 1000);\n&#125;);\n\nfunction* gen() &#123;\n  let res1 &#x3D; yield getFetch(1);\n  let res2 &#x3D; yield getFetch(res1);\n  let res3 &#x3D; yield getFetch(res2);\n  return res3;\n&#125;\n\nconst asyncGen &#x3D; myAsync(gen &#x2F;*传入generator *&#x2F;);\n\nasyncGen().then((res) &#x3D;&gt; &#123;\n  console.log(res);\n&#125;); &#x2F;&#x2F; 4</code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p><a href=\"https://blog.csdn.net/weixin_45663702/article/details/123504807\" target=\"_blank\" >常见前端面试题–数组去重</a></p>\n<p>方案 1:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function unique(arr) &#123;\n  return Array.from(new Set(arr));\n&#125;\n\n&#x2F;&#x2F; prettier-ignore\nlet arr &#x3D; [ 1, 1, &quot;true&quot;, true, true, 15, 15, false, false, undefined, undefined, null, null, NaN, NaN, &quot;NaN&quot;, 0, 0, &quot;a&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;,];\n\nconsole.log(unique(arr));\n&#x2F;&#x2F; [&#39;1&#39;, &#39;true&#39;, true, 15, undefined, null, null, NaN, &#39;NaN&#39;, 0, &#39;a&#39;, &#123;&#125;, &#123;&#125;]\n&#x2F;&#x2F;无法去掉&#39;&#123;&#125;&#39;空对象</code></pre>\n\n<p>方案 2:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function unique(arr) &#123;\n  return arr.filter(function (item, index, arr) &#123;\n    &#x2F;&#x2F; 当前元素，在原始数组中的第一个索引&#x3D;&#x3D;当前索引值，否则返回当前元素\n    return arr.indexOf(item, 0) &#x3D;&#x3D;&#x3D; index;\n  &#125;);\n&#125;\n&#x2F;&#x2F; prettier-ignore\nlet arr &#x3D; [ 1, 1, &quot;true&quot;, true, true, 15, 15, false, false, undefined, undefined, null, null, NaN, NaN, &quot;NaN&quot;, 0, 0, &quot;a&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;,];\n\nconsole.log(unique(arr));\n&#x2F;&#x2F; [1, &#39;true&#39;, true, 15, false, undefined, null, &#39;NaN&#39;, 0, &#39;a&#39;, &#123;&#125;, &#123;&#125;]\n&#x2F;&#x2F; &#123;&#125;不能去重</code></pre>\n\n<p>方案 3:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function unique(arr) &#123;\n  return arr.reduce((prev, cur) &#x3D;&gt; (prev.includes(cur) ? prev : [...prev, cur]), []);\n&#125;\n\n&#x2F;&#x2F; prettier-ignore\nlet arr &#x3D; [ 1, 1, &quot;true&quot;, true, true, 15, 15, false, false, undefined, undefined, null, null, NaN, NaN, &quot;NaN&quot;, 0, 0, &quot;a&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;,];\n\nconsole.log(unique(arr));\n&#x2F;&#x2F; [1, &#39;true&#39;, true, 15, false, undefined, null, NaN, &#39;NaN&#39;, 0, &#39;a&#39;, &#123;&#125;, &#123;&#125;]</code></pre>\n\n<h3 id=\"将奇数排在前面，偶数排在后面\"><a href=\"#将奇数排在前面，偶数排在后面\" class=\"headerlink\" title=\"将奇数排在前面，偶数排在后面\"></a>将奇数排在前面，偶数排在后面</h3><p>要求时间复杂度 O(n)。空间复杂度 O(1)（不能用 splice）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var testAry &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar newAry &#x3D; [];\n\ntestAry.forEach((item, i) &#x3D;&gt; &#123;\n  let n &#x3D; Number(item);\n  if (n % 2 &#x3D;&#x3D; 0) &#123;\n    newAry.push(n);\n  &#125; else &#123;\n    newAry.unshift(n);\n  &#125;\n&#125;);\n\nconsole.log(newAry); &#x2F;&#x2F;[&quot;9&quot;,&quot;7&quot;,&quot;5&quot;,&quot;3&quot;,&quot;1&quot;,&quot;2&quot;,&quot;4&quot;,&quot;6&quot;]</code></pre>\n\n<h3 id=\"数组转树结构\"><a href=\"#数组转树结构\" class=\"headerlink\" title=\"数组转树结构\"></a>数组转树结构</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [\n    &#123; id: 1, pid: 0 &#125;,\n    &#123; id: 2, pid: 1 &#125;,\n    &#123; id: 3, pid: 1 &#125;,\n    &#123; id: 4, pid: 2 &#125;,\n    &#123; id: 5, pid: 2 &#125;,\n    &#123; id: 6, pid: 3 &#125;,\n];\n&#x2F;&#x2F; 要求编写一个函数 arr2tree(arr)，得到输出结果如下：\n\n&#123;\n    &quot;id&quot;: 0,\n    &quot;children&quot;: [\n        &#123;\n            &quot;id&quot;: 1,\n            &quot;children&quot;: [\n                &#123;\n                    &quot;id&quot;: 2,\n                    &quot;children&quot;: [\n                        &#123;\n                            &quot;id&quot;: 4\n                        &#125;,\n                        &#123;\n                            &quot;id&quot;: 5\n                        &#125;\n                    ]\n                &#125;,\n                &#123;\n                    &quot;id&quot;: 3,\n                    &quot;children&quot;: [\n                        &#123;\n                            &quot;id&quot;: 6\n                        &#125;\n                    ]\n                &#125;\n            ]\n        &#125;\n    ]\n&#125;</code></pre>\n\n<p><strong>实现</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function arr2tree(arr) &#123;\n  let hash &#x3D; &#123;&#125;;\n  const result &#x3D; [];\n  &#x2F;&#x2F; 放到对象中\n  for (let item of arr) &#123;\n    hash[item.id] &#x3D; item;\n  &#125;\n\n  for (let item of arr) &#123;\n    const parent &#x3D; hash[item.pid];\n    if (parent) &#123;\n      if (!parent.children) &#123;\n        parent.children &#x3D; [];\n      &#125;\n      delete item.pid; &#x2F;&#x2F; 比结果多的字段删除\n      parent.children.push(item); &#x2F;&#x2F; 之所以能够实现，原因：使用了数组引用\n    &#125; else &#123;\n      delete item.pid; &#x2F;&#x2F; 比结果多的字段删除\n      result.push(item); &#x2F;&#x2F; 只有第一次pid &#x3D; 0的时候，树根节点才走这里\n    &#125;\n  &#125;\n  hash &#x3D; undefined; &#x2F;&#x2F; 这里记得回收\n  return result;\n&#125;\n\nconst res &#x3D; arr2tree(arr);\nconsole.log(&#39;res&#39;, JSON.stringify(res, null, 2));</code></pre>\n\n<h3 id=\"地址数据处理\"><a href=\"#地址数据处理\" class=\"headerlink\" title=\"地址数据处理\"></a>地址数据处理</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; input &#x3D; [\n&#x2F;&#x2F;   &#123;id:1,city:&#39;北京&#39;,pid:0&#125;,\n&#x2F;&#x2F;   &#123;id:2,city:&#39;河南&#39;,pid:0&#125;,\n&#x2F;&#x2F;   &#123;id:3,city:&#39;山西&#39;,pid:0&#125;,\n&#x2F;&#x2F;   &#123;id:4,city:&#39;洛阳&#39;,pid:2&#125;,\n&#x2F;&#x2F;   &#123;id:5,city:&#39;晋中&#39;,pid:3&#125;,\n&#x2F;&#x2F;   &#123;id:6,city:&#39;榆次&#39;,pid:5&#125;,\n&#x2F;&#x2F; ]\n&#x2F;&#x2F; result &#x3D; [\n&#x2F;&#x2F;   &#123;id:1,city:&#39;北京&#39;,pid:0&#125;,\n&#x2F;&#x2F;   &#123;id:2,city:&#39;河南&#39;,pid:0,\n&#x2F;&#x2F;     children:[&#123;id:4,city:&#39;洛阳&#39;,pid:2&#125;]\n&#x2F;&#x2F;   &#125;,\n&#x2F;&#x2F;   &#123;id:3,city:&#39;山西&#39;,pid:0,\n&#x2F;&#x2F;      children:[\n&#x2F;&#x2F;        &#123;id:5,city:&#39;晋中&#39;,pid:3,\n&#x2F;&#x2F;          children:[&#123;id:6,city:&#39;榆次&#39;,pid:5&#125;]\n&#x2F;&#x2F;       &#125;\n&#x2F;&#x2F;      ]\n&#x2F;&#x2F;   &#125;,\n&#x2F;&#x2F; ]\n&#x2F;&#x2F; 1. 转hash\n&#x2F;&#x2F; 2. 利用引用数据类型的特点，直接在原数据上操作\nfunction toTree(arr) &#123;\n  arr.forEach(function (it) &#123;\n    delete it.children;\n  &#125;);\n  &#x2F;&#x2F; 定义map&#x2F;\n  let map &#x3D; &#123;&#125;;\n  &#x2F;&#x2F; 这里可以重构数据类型，放回字段值\n  arr.forEach(function (item) &#123;\n    map[item.id] &#x3D; item;\n  &#125;);\n\n  &#x2F;&#x2F; 定义返回集合\n  let val &#x3D; [];\n  arr.forEach(function (item) &#123;\n    let parent &#x3D; map[item.pid];\n    if (parent) &#123;\n      &#x2F;&#x2F; 有数据说明不是顶级节点，将数据放到该 children 子节点下\n      (parent.children || (parent.children &#x3D; [])).push(item);\n    &#125; else &#123;\n      &#x2F;&#x2F; 没有数据说明是顶级节点放到val中\n      val.push(item);\n    &#125;\n  &#125;);\n  return val;\n&#125;</code></pre>\n\n<h3 id=\"如何找到数组中出现次数最多的字符串\"><a href=\"#如何找到数组中出现次数最多的字符串\" class=\"headerlink\" title=\"如何找到数组中出现次数最多的字符串\"></a>如何找到数组中出现次数最多的字符串</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const findCountMax &#x3D; (arr) &#x3D;&gt; &#123;\n  let obj &#x3D; &#123;&#125;;\n  &#x2F;&#x2F; 转hash\n  arr.forEach((item) &#x3D;&gt; &#123;\n    if (obj[item]) &#123;\n      obj[item]++;\n    &#125; else &#123;\n      obj[item] &#x3D; 1;\n    &#125;\n  &#125;);\n  &#x2F;&#x2F; 遍历找最大值\n  let result &#x3D; &#123; count: 0, str: &#39;&#39; &#125;;\n  for (let item in obj) &#123;\n    if (obj[item] &gt; result.count) &#123;\n      result.count &#x3D; obj[item];\n      result.str &#x3D; item;\n    &#125;\n  &#125;\n  return result.str;\n&#125;;</code></pre>\n\n<h3 id=\"数组扁平化\"><a href=\"#数组扁平化\" class=\"headerlink\" title=\"数组扁平化\"></a>数组扁平化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 没有深度控制的，不好\n&#x2F;&#x2F; 1. 对数组进行遍历，元素是数组的，递归遍历\nconst flattenArr &#x3D; (arr) &#x3D;&gt; &#123;\n  let result &#x3D; [];\n  &#x2F;&#x2F; iife ，直接执行，不用下面再写调用了\n  (function helper(arr) &#123;\n    arr.forEach((item) &#x3D;&gt; &#123;\n      if (Array.isArray(item)) &#123;\n        helper(item);\n      &#125; else &#123;\n        result.push(item);\n      &#125;\n    &#125;);\n  &#125;)(arr);\n  return result;\n&#125;;</code></pre>\n\n<h3 id=\"指定展开-N-层\"><a href=\"#指定展开-N-层\" class=\"headerlink\" title=\"指定展开 N 层\"></a>指定展开 N 层</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const flattenArrN &#x3D; (arr, depth &#x3D; 1) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 这里可以看作是闭包，将result进行缓存\n  let result &#x3D; [];\n  &#x2F;&#x2F; iife 立即执行，传入多个参数\n  (function helper(arr, depth) &#123;\n    arr.forEach((item) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 限制在某一层级\n      if (Array.isArray(item) &amp;&amp; depth &gt; 0) &#123;\n        &#x2F;&#x2F; 这里每次depth都会递减\n        helper(item, depth - 1);\n      &#125; else &#123;\n        result.push(item);\n      &#125;\n    &#125;);\n  &#125;)(arr, depth);\n\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  a: 1,\n  b: [1, 2, &#123; c: true &#125;],\n  c: &#123; e: 2, f: 3 &#125;,\n  g: null,\n&#125;;\n\nconst result &#x3D; &#123;\n  a: 1,\n  &#39;b[0]&#39;: 1,\n  &#39;b[1]&#39;: 2,\n  &#39;b[2].c&#39;: true,\n  &#39;c.e&#39;: 2,\n  &#39;c.f&#39;: 3,\n  g: null,\n&#125;;\n\n&#x2F;&#x2F; 实现\nconst isArray &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &#39;[object Array]&#39;;\nconst isObject &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;;\nfunction ObjFlat(obj) &#123;\n  let result &#x3D; &#123;&#125;;\n  (function helper(obj, prekey &#x2F;*利用闭包进行传递 *&#x2F;) &#123;\n    if (!obj) return;\n\n    Object.entries(obj)?.forEach(([key, value]) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 重点是合成key\n      const keyStr &#x3D; isArray(obj) ? &#96;$&#123;prekey&#125;[$&#123;key&#125;]&#96; : &#96;$&#123;prekey&#125;$&#123;key&#125;&#96;;\n\n      if (isArray(value)) &#123;\n        helper(value, keyStr);\n      &#125; else if (isObject(value)) &#123;\n        helper(value, &#96;$&#123;keyStr&#125;.&#96;);\n      &#125; else &#123;\n        &#x2F;&#x2F; 直接给keyStr赋值\n        result[keyStr] &#x3D; value;\n      &#125;\n    &#125;);\n  &#125;)(obj, &#39;&#39;);\n  console.log(&#39;result&#39;, result);\n  return result;\n&#125;\nconst obj &#x3D; &#123;\n  a: 1,\n  b: [1, 2, &#123; c: true &#125;],\n  c: &#123; e: 2, f: 3 &#125;,\n  g: null,\n&#125;;\n\nObjFlat(obj);</code></pre>\n\n<h3 id=\"对象扁平化\"><a href=\"#对象扁平化\" class=\"headerlink\" title=\"对象扁平化\"></a>对象扁平化</h3><h2 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h2><h3 id=\"解析-URL-中所有的部分\"><a href=\"#解析-URL-中所有的部分\" class=\"headerlink\" title=\"解析 URL 中所有的部分\"></a>解析 URL 中所有的部分</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1.  拆分？后面的内容\n&#x2F;&#x2F; 2.  key\n&#x2F;&#x2F;     1.  无 value 转化成 true\n&#x2F;&#x2F;     2.  纯数字的转化成 数值\n&#x2F;&#x2F;     3.  value 是 数组&#x2F;对象\nfunction parseParam(url) &#123;\n  const paramsStr &#x3D; &#x2F;.+\\?(.+)$&#x2F;.exec(url)[1]; &#x2F;&#x2F; ?之后部分截取\n  const paramsArr &#x3D; paramsStr.split(&#39;&amp;&#39;); &#x2F;&#x2F; 拆分kv对\n  let paramsObj &#x3D; &#123;&#125;;\n\n  paramsArr.forEach((param) &#x3D;&gt; &#123;\n    if (&#x2F;&#x3D;&#x2F;.test(param)) &#123;\n      let [key, val] &#x3D; param.split(&#39;&#x3D;&#39;);\n\n      val &#x3D; decodeURIComponent(val); &#x2F;&#x2F; 解码\n\n      val &#x3D; &#x2F;^\\d+$&#x2F;.test(val) ? parseFloat(val) : val; &#x2F;&#x2F; 字符串数值转化\n\n      if (paramsObj.hasOwnProperty(key)) &#123;\n        paramsObj[key] &#x3D; [].concat(paramsObj[key], val); &#x2F;&#x2F; 这个没有直接push, 利用concat特性（数组concat,非数组push）\n      &#125; else &#123;\n        paramsObj[key] &#x3D; val;\n      &#125;\n    &#125; else &#123;\n      &#x2F;&#x2F; 有些没有&#x3D;号\n      paramsObj[param] &#x3D; true;\n    &#125;\n  &#125;);\n  return paramsObj;\n&#125;</code></pre>\n\n<!-- ## 使用 es5 实现 es6 的 let 关键字\n\n<a href=\"https://blog.csdn.net/weixin_44242181/article/details/124340622\" target=\"_blank\" >es5 实现 es6+新特性</a> -->\n\n<h3 id=\"中划线转大写\"><a href=\"#中划线转大写\" class=\"headerlink\" title=\"中划线转大写\"></a>中划线转大写</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var str &#x3D; &#39;get-user-by-id&#39;;\n\nvar f &#x3D; function (s) &#123;\n  return s.replace(&#x2F;-\\w&#x2F;g, function (x) &#123;\n    return x.slice(1).toUpperCase();\n  &#125;);\n&#125;;</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#:~:text=%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0-,%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E4%BB%A5%E6%8F%92%E5%85%A5%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E5%90%8D%EF%BC%9A,-%E5%8F%98%E9%87%8F%E5%90%8D\" target=\"_blank\" >替换字符串可以插入下面的特殊变量名：</a></p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>代表的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$$</code></td>\n<td>插入一个 “$”。</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>插入匹配的子串。</td>\n</tr>\n<tr>\n<td>$&#96;</td>\n<td>插入当前匹配的子串左边的内容。</td>\n</tr>\n<tr>\n<td><code>$&#39;</code></td>\n<td>插入当前匹配的子串右边的内容。</td>\n</tr>\n<tr>\n<td><code>$n</code></td>\n<td>假如第一个参数是 RegExp 对象，并且 n 是个小于 100 的非负整数，那么插入第 n 个括号匹配的字符串。</td>\n</tr>\n<tr>\n<td><code>$&lt;Name&gt;</code></td>\n<td>这里<em>Name</em> 是一个分组名称。</td>\n</tr>\n</tbody></table>\n<ol>\n<li><code>$n</code> : 提示：索引是从 1 开始。如果不存在第 n 个分组，那么将会把匹配到到内容替换为字面量。比如不存在第 3 个分组，就会用“$3”替换匹配到的内容。</li>\n<li><code>$&lt;Name&gt;</code>: 如果在正则表达式中并不存在分组（或者没有匹配），这个变量将被处理为空字符串。只有在支持命名分组捕获的浏览器中才能使用。</li>\n</ol>\n<h3 id=\"金额千分\"><a href=\"#金额千分\" class=\"headerlink\" title=\"金额千分\"></a>金额千分</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function parseToMoney(num) &#123;\n  num &#x3D; parseFloat(num).toFixed(3);\n\n  let [integer, decimal] &#x3D; String.prototype.split.call(num, &#39;.&#39;);\n\n  integer &#x3D; integer.replace(&#x2F;\\d(?&#x3D;(\\d&#123;3&#125;)+$)&#x2F;g, &#39;$&amp;,&#39;);\n  &#x2F;&#x2F; 从右到左“三个数值一组” ?&#x3D; 尽可能多的去匹配\n\n  return &#96;$&#123;integer&#125;.$&#123;decimal&#125;&#96;;\n&#125;\n\nconsole.log(parseToMoney(10000000.0));\n\n&#x2F;&#x2F; $&amp; 与regexp相匹配的子串。 &#x2F;&#x2F; https:&#x2F;&#x2F;q.cnblogs.com&#x2F;q&#x2F;63769&#x2F;</code></pre>\n\n<p><a href=\"https://regexper.com/#%2F%5Cd%28%3F%3D%28%5Cd%7B3%7D%29%2B%24%29%2Fg\" target=\"_blank\" >&#x2F;\\d(?&#x3D;(\\d{3})+$)&#x2F;g</a></p>\n<h3 id=\"Intl-NumberFormat\"><a href=\"#Intl-NumberFormat\" class=\"headerlink\" title=\"Intl.NumberFormat\"></a>Intl.NumberFormat</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; example1\nconst options &#x3D; &#123;\n  style: &#39;currency&#39;,\n  currency: &#39;CNY&#39;,\n&#125;;\nconsole.log((999999.1212).toLocaleString(&#39;zh-CN&#39;, options)); &#x2F;&#x2F; ¥999,999.12\n\n&#x2F;&#x2F; example2\nvar val &#x3D; Intl.NumberFormat(&#39;zh-CN&#39;, &#123; maximumSignificantDigits: 18 &#125;).format(999999.1212);\n\nconsole.log(&#39;val&#39;, val); &#x2F;&#x2F; val 999,999.1212</code></pre>\n\n<h2 id=\"原理实现\"><a href=\"#原理实现\" class=\"headerlink\" title=\"原理实现\"></a>原理实现</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p><a href=\"/#/post/2022-06-16interview#:~:text=new%20%E5%92%8C%20Object.create%20%E9%83%BD%E6%98%AF%E5%88%9B%E9%80%A0%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%84%8F%E6%80%9D%EF%BC%8C%E4%BA%8C%E8%80%85%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB%E5%91%A2%EF%BC%9F\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @link: https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Operators&#x2F;new\n&#x2F;&#x2F; 1. 创建一个空的简单 JavaScript 对象（即 &#123;&#125;）；\n&#x2F;&#x2F; 2. 为步骤 1 新创建的对象, 添加属性 __proto__，将该属性链接至构造函数的原型对象；\n&#x2F;&#x2F; 3. 将步骤 1 新创建的对象, 作为 this 的上下文；\n&#x2F;&#x2F; 4. 如果该函数没有返回对象，则返回 this。\nfunction myNew() &#123;\n  &#x2F;&#x2F; 1. 创建一个空的简单 JavaScript 对象（即 &#123;&#125;）；\n  let obj &#x3D; &#123;&#125;;\n  &#x2F;&#x2F; 2. 为步骤 1 新创建的对象, 添加属性 __proto__，将该属性链接至构造函数的原型对象；\n  let func &#x3D; [].shift.call(arguments); &#x2F;&#x2F;出列，获取第一个参数\n  obj.__proto__ &#x3D; func.prototype; &#x2F;&#x2F;proto指向原型\n  &#x2F;&#x2F; 3. 将步骤 1 新创建的对象, 作为 this 的上下文；\n  const result &#x3D; func.apply(obj, arguments); &#x2F;&#x2F;让obj执行func函数\n  &#x2F;&#x2F; 4. 如果该函数没有返回对象，则返回 this。\n  return result intanceof Object ? result :  obj;\n&#125;</code></pre>\n\n<h3 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object.myCreate &#x3D; function (proto, propertyObj &#x3D; undefined) &#123;\n  &#x2F;&#x2F; propertyObj 不可以时null，因为 Object.Create规定第二参数不可以时undefined和 null\n  if (propertyObj &#x3D;&#x3D;&#x3D; null) throw &quot;TypeError&quot;;\n  &#x2F;&#x2F; 23模式-原型模式，使用寄生继承，用现有对象作为新创建对象的原型\n  let F &#x3D; function () &#123;&#125;;\n  F.prototype &#x3D; proto;\n  let obj &#x3D; new F();\n  &#x2F;&#x2F; 对象的自有可枚举属性，将为新创建的对象添加指定的属性值和对应的属性描述符\n  if (propertyObj !&#x3D;&#x3D; undefined) &#123;\n    Object.defineProperties(obj, propertyObj);\n  &#125;\n  &#x2F;&#x2F; null创建无原型的对象\n  if (proto &#x3D;&#x3D;&#x3D; null) &#123;\n    obj.__proto__ &#x3D; null;\n  &#125;\n  &#x2F;&#x2F; 一个新对象，带着指定的原型对象及其属性\n  return obj;\n&#125;;\n\n\n\n&#x2F;&#x2F; 示例\n&#x2F;&#x2F; 第二个参数为null时，抛出TypeError\n&#x2F;&#x2F; const throwErr &#x3D; Object.myCreate(&#123;a: &#39;aa&#39;&#125;, null)  &#x2F;&#x2F; Uncaught TypeError\n&#x2F;&#x2F; 构建一个以\nconst obj1 &#x3D; Object.myCreate(&#123;a: &#39;aa&#39;&#125;)\nconsole.log(obj1)  &#x2F;&#x2F; &#123;&#125;, obj1的构造函数的原型对象是&#123;a: &#39;aa&#39;&#125;\nconst obj2 &#x3D; Object.myCreate(&#123;a: &#39;aa&#39;&#125;, &#123;\n  b: &#123;\n    value: &#39;bb&#39;,\n    enumerable: true\n  &#125;\n&#125;)\nconsole.log(obj2)  &#x2F;&#x2F; &#123;b: &#39;bb&#39;&#125;, obj2的构造函数的原型对象是&#123;a: &#39;aa&#39;&#125;\n\n作者：李永宁\n链接：https:&#x2F;&#x2F;juejin.cn&#x2F;post&#x2F;6844904174983872519\n来源：稀土掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>instanceof 运算符用于检测<code>构造函数的 prototype 属性</code>是否出现在某个<code>实例对象的原型链</code>上</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function instance_of(L, R) &#123;\n  var O &#x3D; R.prototype; &#x2F;&#x2F; 取R的显示原型\n  L &#x3D; L.__proto__; &#x2F;&#x2F; 取L的隐式原型\n\n  while (true) &#123;\n    &#x2F;&#x2F; 死循环，结束条件：要么找到，要么没找到\n    if (L &#x3D;&#x3D;&#x3D; null) return false;\n\n    &#x2F;&#x2F; 这里重点：当O严格等于L时，返回true\n    if (O &#x3D;&#x3D;&#x3D; L) return true;\n\n    L &#x3D; L.__proto__;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>本质是一个 hack,利用<code>&lt;script&gt;</code>标签不受同源侧露限制的特性进行跨域操作</p>\n<p><a href=\"https://blog.csdn.net/weixin_42371354/article/details/104651961\" target=\"_blank\" >参考链接</a><br><a href=\"https://blog.csdn.net/qq_38800316/article/details/120440865\" target=\"_blank\" >jsonp 函数封装</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 生成个函数名\n&#x2F;&#x2F; 2. 整理参数，生成请求url\n&#x2F;&#x2F; 3. 动态创建script标签，并挂载\n&#x2F;&#x2F; 4. 加载完成后移除script标签\nfunction jsonP(&#123; url, params, success &#125;) &#123;\n  &#x2F;&#x2F; 在参数里制定callback的名字\n  params &#x3D; params || &#123;&#125;;\n  &#x2F;&#x2F; 预留callback\n  const funcName &#x3D; &#39;func&#39; + Math.random().toString().replace(&#39;.&#39;, &#39;&#39;);\n  &#x2F;&#x2F; 这样依赖，服务器端一个req.query.callback就可以获取到动态的函数名\n  params.callback &#x3D; funcName;\n  window[funcName] &#x3D; success;\n\n  &#x2F;&#x2F; 拼接参数字符串\n  const paramKeys &#x3D; Object.keys(params);\n  const paramString &#x3D; paramKeys.map((key) &#x3D;&gt; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&#96;).join(&#39;&amp;&#39;);\n\n  &#x2F;&#x2F; 插入dom元素\n  const script &#x3D; document.createElement(&#39;script&#39;);\n\n  script.setAttribute(&#39;src&#39;, &#96;$&#123;url&#125;?$&#123;paramString&#125;&#96;);\n\n  document.body.appendChild(script);\n  &#x2F;&#x2F; 监听script标签的onload事件，当script标签执行后将其删除，避免代码结构的冗余\n  script.onload &#x3D; function () &#123;\n    &#x2F;&#x2F; 从body的删除掉添加的script标签\n    document.body.removeChild(script);\n    delete window[funcName];\n  &#125;;\n&#125;\n\n&#x2F;&#x2F; 使用\n\njsonP(&#123;\n  url: &#39;https:&#x2F;&#x2F;example.com&#x2F;ajax&#x2F;jsonp&#x2F;suggestion&#39;,\n  params: &#123;\n    key: &#39;test&#39;,\n  &#125;,\n  success(result) &#123;\n    console.log(result.data);\n  &#125;,\n&#125;);</code></pre>\n\n<h3 id=\"实现-event-bus\"><a href=\"#实现-event-bus\" class=\"headerlink\" title=\"实现 event bus\"></a>实现 event bus</h3><p>作用：</p>\n<p><strong>1. 简化了应用程序内各个组件之间进行通信的复杂度，尤其是碎片之间进行通信的问题，可以避免由于使用广播通信而带来的诸多不便</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 监听收集（on&#x2F;once）\n&#x2F;&#x2F; 2. 触发监听(emit)\n&#x2F;&#x2F; 3. 解除监听(off)\n&#x2F;&#x2F; 4. 清空监听(clear)\nclass EventBus &#123;\n  constructor() &#123;\n    this.events &#x3D; &#123;&#125;;\n  &#125;\n  &#x2F;&#x2F; 监听，给对象添加方法\n  on(name, callback) &#123;\n    const &#123; events &#125; &#x3D; this;\n    if (!events[name]) &#123;\n      events[name] &#x3D; [];\n    &#125;\n    events[name].push(callback);\n  &#125;\n  &#x2F;&#x2F; 取出来执行\n  emit(name, ...args) &#123;\n    const handlers &#x3D; this.events[name];\n    handlers?.forEach((fn) &#x3D;&gt; &#123;\n      fn.apply(this, args);\n    &#125;);\n  &#125;\n  &#x2F;&#x2F; 解除\n  off(name, callback) &#123;\n    const &#123; events &#125; &#x3D; this;\n    if (!events[name]) return;\n    events[name] &#x3D; events[name].filter((fn) &#x3D;&gt; fn !&#x3D;&#x3D; callback); &#x2F;&#x2F; 引用，指向对象，直接改kv键值对\n  &#125;\n  &#x2F;&#x2F;  用完立马、解除\n  once(name, callback) &#123;\n    const handler &#x3D; function () &#123;\n      callback.apply(this, arguments); &#x2F;&#x2F; 普通函数参数\n      this.off(name, handler);\n    &#125;;\n    this.on(name, handler);\n  &#125;\n  &#x2F;&#x2F; 事件清空\n  clear() &#123;\n    this.events &#x3D; &#123;&#125;;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"实现发布订阅\"><a href=\"#实现发布订阅\" class=\"headerlink\" title=\"实现发布订阅\"></a>实现发布订阅</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Observer &#123;\n  caches &#x3D; &#123;&#125;; &#x2F;&#x2F; 事件中心\n\n  &#x2F;&#x2F; eventName事件名-独一无二, fn订阅后执行的自定义行为\n  on(eventName, fn) &#123;\n    this.caches[eventName] &#x3D; this.caches[eventName] || [];\n    this.caches[eventName].push(fn);\n  &#125;\n\n  &#x2F;&#x2F; 发布 &#x3D;&gt; 将订阅的事件进行统一执行\n  emit(eventName, data) &#123;\n    if (this.caches[eventName]) &#123;\n      this.caches[eventName].forEach((fn) &#x3D;&gt; fn(data));\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 取消订阅 &#x3D;&gt; 若fn不传, 直接取消该事件所有订阅信息\n  off(eventName, fn) &#123;\n    if (this.caches[eventName]) &#123;\n      const newCaches &#x3D; fn ? this.caches[eventName].filter((e) &#x3D;&gt; e !&#x3D;&#x3D; fn) : [];\n      this.caches[eventName] &#x3D; newCaches;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"Object-defineProperties-实现原理\"><a href=\"#Object-defineProperties-实现原理\" class=\"headerlink\" title=\"Object.defineProperties 实现原理\"></a>Object.defineProperties 实现原理</h3><p><code>Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象</code><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties#polyfill\" target=\"_blank\" >见</a></p>\n<p><a href=\"/#/post/2023-03-09defineProperty\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-03-09defineProperty</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function defineProperties(obj, properties) &#123;\n  function convertToDescriptor(desc) &#123;\n    &#x2F;&#x2F; 是否有这个属性\n    function hasProperty(obj, prop) &#123;\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    &#125;\n    &#x2F;&#x2F; 是否可以被调用\n    function isCallable(v) &#123;\n      &#x2F;&#x2F; NB: modify as necessary if other values than functions are callable.\n      return typeof v &#x3D;&#x3D;&#x3D; &#39;function&#39;;\n    &#125;\n    &#x2F;&#x2F; 基本数据类型\n    if (typeof desc !&#x3D;&#x3D; &#39;object&#39; || desc &#x3D;&#x3D;&#x3D; null) throw new TypeError(&#39;bad desc&#39;);\n\n    var d &#x3D; &#123;&#125;;\n\n    &#x2F;*数据描述：可枚举、可配置、值、可改写*&#x2F;\n    if (hasProperty(desc, &#39;enumerable&#39;)) d.enumerable &#x3D; !!desc.enumerable;\n    if (hasProperty(desc, &#39;configurable&#39;)) d.configurable &#x3D; !!desc.configurable;\n    if (hasProperty(desc, &#39;value&#39;)) d.value &#x3D; desc.value;\n    if (hasProperty(desc, &#39;writable&#39;)) d.writable &#x3D; !!desc.writable;\n\n    &#x2F;*存储描述 *&#x2F;\n    function storeDesc(desc, key) &#123;\n      var g &#x3D; desc[key];\n      if (!isCallable(g) &amp;&amp; typeof g !&#x3D;&#x3D; &#39;undefined&#39;) throw new TypeError(&#96;bad $&#123;key&#125;&#96;);\n      d[key] &#x3D; g;\n    &#125;\n    &#x2F;&#x2F; 不再进一步封装\n    if (hasProperty(desc, &#39;get&#39;)) storeDesc(desc, &#39;get&#39;);\n    if (hasProperty(desc, &#39;set&#39;)) storeDesc(desc, &#39;set&#39;);\n\n    &#x2F;&#x2F; 描述符冲突\n    &#x2F;&#x2F; @link https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Object&#x2F;defineProperty#:~:text&#x3D;%E4%B8%BA%20undefined%E3%80%82-,%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%8F%AF%E6%8B%A5%E6%9C%89%E7%9A%84%E9%94%AE%E5%80%BC,-configurable\n    &#x2F;&#x2F; 1. 如果一个描述符不具有 value、writable、get 和 set 中的任意一个键，那么它将被认为是一个数据描述符。\n    &#x2F;&#x2F; 2. 如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。\n    if ((&#39;get&#39; in d || &#39;set&#39; in d) &amp;&amp; (&#39;value&#39; in d || &#39;writable&#39; in d)) throw new TypeError(&#39;identity-confused descriptor&#39;);\n\n    return d;\n  &#125;\n  &#x2F;&#x2F; 被扩展的必须是对象\n  &#x2F;&#x2F; 会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象\n  if (typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D;&#x3D; null) throw new TypeError(&#39;bad obj&#39;);\n  &#x2F;&#x2F; 转化成对象, Object是一个构造函数\n  properties &#x3D; Object(properties);\n  &#x2F;&#x2F; 遍历key\n  var keys &#x3D; Object.keys(properties);\n  var descs &#x3D; [];\n\n  for (var i &#x3D; 0; i &lt; keys.length; i++) &#123;\n    Object.defineProperty(obj, keys[i], convertToDescriptor(properties[keys[i]]));\n  &#125;\n\n  &#x2F;&#x2F; 返回原对象\n  return obj;\n&#125;</code></pre>\n\n<h2 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h2><h3 id=\"柯里化是什么\"><a href=\"#柯里化是什么\" class=\"headerlink\" title=\"柯里化是什么\"></a>柯里化是什么</h3><p><a href=\"https://article.itxueyuan.com/46m5K2\" target=\"_blank\" >见</a><br>在计算机科学中，柯里化（Currying）<code>是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术</code>。这个技术以逻辑学家 Haskell Curry 命名的。</p>\n<ol>\n<li>柯里化突出一种重要思想：<code>降低适用范围</code>，<code>提高适用性</code></li>\n<li>柯里化的三个作用和特点：<code>参数复用</code>、<code>提前返回</code>、<code>延迟执行</code></li>\n<li>柯里化是闭包的一个典型应用:<ol>\n<li><code>利用闭包形成了一个保存在内存中的作用域，把接收到的部分参数保存在这个作用域中，等待后续使用</code>。</li>\n<li>并且返回一个新函数接收剩余参数</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://juejin.cn/post/6844903814139478030\" target=\"_blank\" >函数柯里化和偏函数应用</a></p>\n<ul>\n<li><p>柯里化和偏函数都是用于将多个参数函数，转化为接受更少参数函数的方法。传入部分参数后，处于中间状态的函数可以作为固定值进行复用。但是其中不同之处在于：</p>\n</li>\n<li><p><code>柯里化</code>是将函数转化为多个嵌套的一元函数，也就是每个函数只接受一个参数。</p>\n</li>\n<li><p><code>偏函数</code>可以接受不只一个参数，它被固定了部分参数作为预设，并可以接受剩余的参数</p>\n</li>\n</ul>\n<p>作者：LanceT<br>链接：<a href=\"https://juejin.cn/post/6844903814139478030\">https://juejin.cn/post/6844903814139478030</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h3 id=\"实现柯里化\"><a href=\"#实现柯里化\" class=\"headerlink\" title=\"实现柯里化\"></a>实现柯里化</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(a, b, c, d, e) &#123;\n  return a + b + c + d + e;\n&#125;\n\nlet resFunc &#x3D; curry(sum);\nconsole.log(resFunc(1, 3, 4)(1)(23));\n&#x2F;&#x2F; 方式2，利用bind的数据积累特性\nfunction curry(fn, ...args) &#123;\n  if (args.length &gt;&#x3D; fn.length) &#123;\n    return fn(...args);\n  &#125; else &#123;\n    &#x2F;&#x2F; bind绑定，不执行，\n    &#x2F;&#x2F; bind返回一个函数\n    &#x2F;&#x2F; bind会将之前的参数和之后的参数进行合并\n    &#x2F;&#x2F; 这里涉及bind和apply的实现原理\n    return curry.bind(null, fn, ...args);\n  &#125;\n  &#x2F;&#x2F; return fn.length &#x3D;&#x3D; args.length ? fn(...args) : curry.bind(null, fn, ...args);\n&#125;</code></pre>\n\n<h3 id=\"洋葱模型\"><a href=\"#洋葱模型\" class=\"headerlink\" title=\"洋葱模型\"></a>洋葱模型</h3><p><a href=\"https://github.com/841660202/redux/blob/2edd0363271af46e327e118f3d92e78e258bf0cd/src/compose.ts#L46\" target=\"_blank\" >redux compose 源码</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 1. 无函数\n&#x2F;&#x2F; 2. 1个函数\n&#x2F;&#x2F; 3. 多个函数\nexport default function compose(...funcs: Function[]) &#123;\n  if (funcs.length &#x3D;&#x3D;&#x3D; 0) &#123;\n    &#x2F;&#x2F; infer the argument type so it is usable in inference down the line\n    return &lt;T&gt;(arg: T) &#x3D;&gt; arg;\n  &#125;\n\n  if (funcs.length &#x3D;&#x3D;&#x3D; 1) &#123;\n    return funcs[0];\n  &#125;\n  &#x2F;&#x2F; prettier-ignore\n  return funcs.reduce((a, b) &#x3D;&gt; (...args: any) &#x3D;&gt; a(b(...args)));\n&#125;</code></pre>\n\n<h2 id=\"数据代理-x2F-劫持\"><a href=\"#数据代理-x2F-劫持\" class=\"headerlink\" title=\"数据代理&#x2F;劫持\"></a>数据代理&#x2F;劫持</h2><p><a href=\"https://www.freesion.com/article/47611264830/\" target=\"_blank\" >数据劫持|数据代理</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" >MDN</a></p>\n<h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><p><a href=\"https://blog.csdn.net/xgangzai/article/details/128489924\" target=\"_blank\" >Proxy &amp; Reflect </a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; Proxy\n&#x2F;&#x2F;  数据对象\nlet obj &#x3D; &#123;\n  name: &#39;Eason&#39;,\n  age: 30,\n&#125;;\n&#x2F;&#x2F; 处理\nlet handler &#x3D; &#123;\n  get(target, key, receiver) &#123;\n    console.log(&#39;get&#39;, key);\n    return Reflect.get(target, key, receiver);\n  &#125;,\n  set(target, key, value, receiver) &#123;\n    console.log(&#39;set&#39;, key, value);\n    return Reflect.set(target, key, value, receiver);\n  &#125;,\n&#125;;\n\nlet proxy &#x3D; new Proxy(&#123; ...obj &#125;, handler);\n\nproxy.name &#x3D; &#39;Zoe&#39;; &#x2F;&#x2F; set name Zoe\nproxy.age &#x3D; 18; &#x2F;&#x2F; set age 18\n\n&#x2F;&#x2F; defineProperty\n\nlet arr &#x3D; [1, 2, 3];\nlet obj &#x3D; &#123;&#125;;\nObject.defineProperty(obj, &#39;arr&#39;, &#123;\n  get() &#123;\n    console.log(&#39;get arr&#39;);\n    return arr;\n  &#125;,\n  set(newVal) &#123;\n    console.log(&#39;set&#39;, newVal);\n    arr &#x3D; newVal;\n  &#125;,\n&#125;);\nobj.arr.push(4); &#x2F;&#x2F; 只会打印 get arr, 不会打印 set\nobj.arr &#x3D; [1, 2, 3, 4]; &#x2F;&#x2F; 这个能正常 set</code></pre>\n\n<h3 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty\"></a>defineProperty</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; defineProperty\n\nlet arr &#x3D; [1, 2, 3];\nlet obj &#x3D; &#123;&#125;;\nObject.defineProperty(obj, &#39;arr&#39;, &#123;\n  get() &#123;\n    console.log(&#39;get arr&#39;);\n    return arr;\n  &#125;,\n  set(newVal) &#123;\n    console.log(&#39;set&#39;, newVal);\n    arr &#x3D; newVal;\n  &#125;,\n&#125;);\nobj.arr.push(4); &#x2F;&#x2F; 只会打印 get arr, 不会打印 set\nobj.arr &#x3D; [1, 2, 3, 4]; &#x2F;&#x2F; 这个能正常 set</code></pre>\n\n<h3 id=\"a-x3D-x3D-x3D-1-amp-amp-a-x3D-x3D-x3D-2-amp-amp-a-x3D-x3D-x3D-3-x3D-x3D-x3D-true\"><a href=\"#a-x3D-x3D-x3D-1-amp-amp-a-x3D-x3D-x3D-2-amp-amp-a-x3D-x3D-x3D-3-x3D-x3D-x3D-true\" class=\"headerlink\" title=\"(a &#x3D;&#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D;&#x3D; 3) &#x3D;&#x3D;&#x3D; true\"></a>(a &#x3D;&#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D;&#x3D; 3) &#x3D;&#x3D;&#x3D; true</h3><p><a href=\"https://blog.csdn.net/RedaTao/article/details/107170267\" target=\"_blank\" >a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3</a></p>\n<p>什么样的 a 可以满足 (a &#x3D;&#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D;&#x3D; 3) &#x3D;&#x3D;&#x3D; true 呢？(注意是 3 个 &#x3D;，也就是严格相等)???</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let i &#x3D; 1;\nObject.defineProperty(window, &#39;a&#39;, &#123;\n  get: function () &#123;\n    return i++;\n  &#125;,\n&#125;);\n\nconsole.log(a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3);</code></pre>\n\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p><strong>什么是链表</strong></p>\n<p>数据的一种存储结构，一个链表包含若干个节点，每个节点至少包含一个数据域和指针域</p>\n<p><a href=\"https://wenku.baidu.com/view/33d6ed103a68011ca300a6c30c2259010302f35b.html\" target=\"_blank\" >百度文库(收费了，只能看部分)、参考链接</a></p>\n<p><a href=\"https://blog.csdn.net/m0_47109503/article/details/117566907\" target=\"_blank\" >参考链接</a></p>\n<h3 id=\"单向-vs-双向\"><a href=\"#单向-vs-双向\" class=\"headerlink\" title=\"单向 vs 双向\"></a>单向 vs 双向</h3><p>单向链表：只有一个指向下一个节点的指针。</p>\n<ol>\n<li>优点：单向链表增加删除节点简单。遍历时候不会死循环；</li>\n<li>缺点：只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。</li>\n</ol>\n<p>适用于节点的增加删除。</p>\n<p>双向链表：有两个指针，一个指向前一个节点，一个后一个节点。</p>\n<ol>\n<li>优点：可以找到前驱和后继，可进可退；</li>\n<li>缺点：增加删除节点复杂，需要多分配一个指针存储空间。</li>\n</ol>\n<p>适用于需要双向查找节点值的情况</p>\n<p><a href=\"https://blog.csdn.net/qq_36553031/article/details/82885804\" target=\"_blank\" >单向链表和双向链表的优缺点及使用场景</a></p>\n<h3 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3><ol>\n<li>链表的节点为「数据 data、指针 next」的数据接口， 节点通过指针串联起来的数据结构：拥有 节点的增、删、改功能，还可以进行遍历<ol>\n<li>链表的最后一个节点的 next&#x3D;null</li>\n<li></li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 在创建链表时，需要创建两个类：指针类和节点类\nclass Node &#123;\n  constructor(data) &#123;\n    this.data &#x3D; data; &#x2F;&#x2F; 节点的数据域&#x2F;数据成员\n    this.next &#x3D; null; &#x2F;&#x2F; 节点的指针域&#x2F;指针成员\n  &#125;\n&#125;\n&#x2F;&#x2F; 定义一个单向链表类\nclass singleLinked &#123;\n  constructor() &#123;\n    this.size &#x3D; 0; &#x2F;&#x2F; 记录单链表长度或节点个数\n    this.head &#x3D; new Node(&#39;head&#39;); &#x2F;&#x2F; 记录链表的头指针：主要作用记录链表的起始地址\n    this.currentNode &#x3D; &#39;&#39;;\n  &#125;\n  &#x2F;&#x2F; 获取链表的长度\n  getLength() &#123;\n    return this.size;\n  &#125;\n  &#x2F;&#x2F; 判断链表是否为空\n  isEmpty() &#123;\n    return this.size &#x3D;&#x3D;&#x3D; 0;\n  &#125;\n  &#x2F;&#x2F; 遍历链表：不重复访问链表中的每个节点\n  displayList() &#123;\n    var list &#x3D; &#39;&#39;;\n    var currentNode &#x3D; this.head; &#x2F;&#x2F; 指向链表的头指针\n    while (currentNode) &#123;\n      &#x2F;&#x2F; 如果当前节点不为空，则表明当前节点中存在数据\n      list +&#x3D; currentNode.data;\n      &#x2F;&#x2F; 同时让当前节点的指针指向下一个节点\n      currentNode &#x3D; currentNode.next;\n\n      if (currentNode) &#123;\n        &#x2F;&#x2F; 如果当前节点的下一个节点不为空\n        list +&#x3D; &#39;-&gt;&#39;; &#x2F;&#x2F; 拼接后看起来像一个链表\n      &#125;\n    &#125;\n    console.log(list);\n  &#125;\n\n  &#x2F;&#x2F; 获取链表的最后一个节点\n  findLast() &#123;\n    var currentNode &#x3D; this.head;\n    while (currentNode.next) &#123;\n      currentNode &#x3D; currentNode.next;\n    &#125;\n    return currentNode;\n  &#125;\n\n  &#x2F;&#x2F; 采用尾插法在链表尾部添加元素，即创建一个链表\n  appendNode(element) &#123;\n    var currentNode &#x3D; this.findLast(); &#x2F;&#x2F; 找到链表的最后一个节点\n    var newNode &#x3D; new Node(element); &#x2F;&#x2F; 创建一个新节点\n    currentNode.next &#x3D; newNode; &#x2F;&#x2F; 把新的节点放在链表里去（放在最后一个的后面）\n    &#x2F;&#x2F; newNode.next &#x3D; null; &#x2F;&#x2F; 因为新节点已经是链表最后一个节点\n    this.size++; &#x2F;&#x2F; 因为新插入一个节点，让链表的长度+1\n  &#125;\n  &#x2F;&#x2F; 删除一个节点\n  deleteNode(element) &#123;\n    var currentNode &#x3D; this.head;\n    while (currentNode.next.data !&#x3D;&#x3D; element) &#123;\n      currentNode &#x3D; currentNode.next;\n    &#125;\n    &#x2F;&#x2F; 将链的节点与另一个节点连上\n    currentNode.next &#x3D; currentNode.next.next;\n    this.size--;\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 上述链表代码的测试\n&#x2F;&#x2F; 最好使用循环，往里面加数据\nvar slist &#x3D; new singleLinked();\n\nvar arr &#x3D; [1001, 1234, 1006, 7788, 5512, 6129];\nfor (var i &#x3D; 0; i &lt; arr.length; i++) &#123;\n  slist.appendNode(arr[i]);\n&#125;\nslist.displayList();\nslist.deleteNode(1001);\nslist.displayList();</code></pre>\n\n<h3 id=\"双向链表《不是环》\"><a href=\"#双向链表《不是环》\" class=\"headerlink\" title=\"双向链表《不是环》\"></a>双向链表《不是环》</h3><p><a href=\"https://blog.csdn.net/dingshao1114/article/details/105340579\" target=\"_blank\" >js 数据结构之双向链表 doublyLinkedList</a></p>\n<img src=\"https://img-blog.csdnimg.cn/20200406112533896.png#pic_center\" />\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 双向链表节点\n * 包含三个值: 当前节点的值和分别指向前后节点的指针\n *&#x2F;\nclass Node &#123;\n  constructor(element) &#123;\n    this.element &#x3D; element;\n    this.next &#x3D; null;\n    this.prev &#x3D; null;\n  &#125;\n&#125;\n\n&#x2F;** 双向链表 *&#x2F;\nclass DoublyLinkedList &#123;\n  constructor() &#123;\n    this.head &#x3D; null;\n  &#125;\n\n  &#x2F;** 在链表末尾添加一个元素 *&#x2F;\n  add(element) &#123;\n    &#x2F;&#x2F; 链表是否已有节点\n    const node &#x3D; new Node(element);\n    &#x2F;&#x2F; 没有节点\n    if (this.head &#x3D;&#x3D;&#x3D; null) &#123;\n      this.head &#x3D; node;\n      return;\n    &#125;\n    &#x2F;&#x2F; 有节点\n    let current &#x3D; this.head;\n    while (current.next) &#123;\n      current &#x3D; current.next;\n    &#125;\n    current.next &#x3D; node;\n    node.prev &#x3D; current;\n  &#125;\n\n  &#x2F;** 删除 *&#x2F;\n  remove(element) &#123;\n    &#x2F;&#x2F; 链表无数据\n    if (this.head &#x3D;&#x3D;&#x3D; null) &#123;\n      return false;\n    &#125;\n    let current &#x3D; this.head;\n    &#x2F;&#x2F; 链表有数据\n    if (current.element &#x3D;&#x3D;&#x3D; element) &#123;\n      &#x2F;&#x2F; 有2个\n      if (this.head.next) &#123;\n        this.head &#x3D; this.head.next;\n        this.head.prev &#x3D; null;\n      &#x2F;&#x2F; 只有一个\n      &#125; else &#123;\n        this.head &#x3D; null;\n      &#125;\n      return true;\n    &#125;\n    let prev;\n    while (current !&#x3D;&#x3D; null &amp;&amp; current.element !&#x3D;&#x3D; element) &#123;\n      prev &#x3D; current;\n      current &#x3D; current.next;\n    &#125;\n    if (current) &#123;\n      prev.next &#x3D; current.next || null;\n      &#x2F;&#x2F; 与之前的节点建立pre链接\n      if (current.next) &#123;\n        current.next.prev &#x3D; prev;\n      &#125;\n      return true;\n    &#125;\n    return false;\n  &#125;\n\n  &#x2F;** 反向遍历 *&#x2F;\n  reverse() &#123;\n    let current &#x3D; this.head;\n    let prev &#x3D; null;\n    let tail &#x3D; null;\n    &#x2F;&#x2F; step1: 调序重排\n    while (current !&#x3D;&#x3D; null) &#123;\n      prev &#x3D; current.prev;\n      &#x2F;&#x2F; pre 指向后面，next指向前面\n      current.prev &#x3D; current.next;\n      current.next &#x3D; prev;\n\n      tail &#x3D; current;\n      current &#x3D; current.prev;\n    &#125;\n    this.head &#x3D; tail;\n    &#x2F;&#x2F; step2: 正序遍历\n    current &#x3D; this.head;\n    while (current !&#x3D;&#x3D; null) &#123;\n      yield current.element;\n      current &#x3D; current.next;\n    &#125;\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 示例\nconst list &#x3D; new DoublyLinkedList();\nlist.add(&quot;1&quot;);\nlist.add(&quot;2&quot;);\nlist.add(&quot;5&quot;);\nlist.add(&quot;3&quot;);\n\nlist.remove(&quot;5&quot;);\n\nconst reverseList &#x3D; list.reverse();\n\nconsole.log(reverseList.next());\nconsole.log(reverseList.next());\nconsole.log(reverseList.next());</code></pre>\n\n<h3 id=\"链表反转\"><a href=\"#链表反转\" class=\"headerlink\" title=\"链表反转\"></a>链表反转</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function reverseList(head) &#123;\n  &#x2F;&#x2F; 初始化prev&#x2F;cur指针\n  let prev &#x3D; null; &#x2F;&#x2F; pre指针（新链表的头指针）\n  let cur &#x3D; head; &#x2F;&#x2F; cur指针\n  &#x2F;&#x2F; 开始遍历链表\n  while (cur) &#123;\n    let next &#x3D; cur.next; &#x2F;&#x2F; 暂存，之后用于cur指针移动\n    cur.next &#x3D; prev; &#x2F;&#x2F; 建立新的链表关系\n    prev &#x3D; cur; &#x2F;&#x2F; pre 指针移动\n    cur &#x3D; next; &#x2F;&#x2F; cur 指针移动\n  &#125;\n  return prev;\n&#125;</code></pre>\n\n<h3 id=\"链表有环\"><a href=\"#链表有环\" class=\"headerlink\" title=\"链表有环\"></a>链表有环</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 终止条件：\n&#x2F;&#x2F;    有环快慢指针相遇\n&#x2F;&#x2F;    无环遍历结束的时候\nfunction hasCycle(head) &#123;\n  let fast &#x3D; head;\n  let slow &#x3D; head;\n  while (fast &amp;&amp; fast.next) &#123;\n    fast &#x3D; fast.next.next;\n    slow &#x3D; slow.next;\n    &#x2F;&#x2F; 有环终止的条件\n    if (fast &#x3D;&#x3D;&#x3D; slow) return true;\n  &#125;\n  return false;\n&#125;</code></pre>\n\n<h3 id=\"链表中点\"><a href=\"#链表中点\" class=\"headerlink\" title=\"链表中点\"></a>链表中点</h3><p>链表有中点，则链表没有环,快指针式慢指针的两倍速度，快指针到链表尾部时候，慢指针刚好到临近中间位置</p>\n<ol>\n<li>链表<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;null</code>, fast &#x3D;&#x3D;&#x3D; null 结束时, 已完成情况：fast:<code>1,3,5,null</code>, slow: <code>1,2,3</code></li>\n<li>链表<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;null</code>, fast.next &#x3D;&#x3D;&#x3D; null 结束时,已完成情况： fast: <code>1,3,5,7</code>, slow: <code>1,2,3</code>, 这里慢指针并没有到达中间点，还差一步</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function middleNode(head) &#123;\n  &#x2F;&#x2F; body\n  let fast &#x3D; head;\n  let slow &#x3D; head;\n\n  while (fast &amp;&amp; fast.next) &#123;\n    fast &#x3D; fast.next.next;\n    slow &#x3D; slow.next;\n  &#125;\n  &#x2F;&#x2F; 看是fast结束的还是fast.next结束的\n  &#x2F;&#x2F; 处理链表节点为奇数的情况\n  if (fast) &#123;\n    &#x2F;&#x2F; 也就是fast.next &#x3D;&#x3D;&#x3D; null的情况\n    slow &#x3D; slow.next;\n  &#125;\n  return slow;\n&#125;</code></pre>\n\n<h3 id=\"链表中环的入口节点\"><a href=\"#链表中环的入口节点\" class=\"headerlink\" title=\"链表中环的入口节点\"></a>链表中环的入口节点</h3><ol>\n<li>理解：快慢指针相遇点</li>\n<li>理解：什么是环的入口</li>\n</ol>\n<img src=\"http://t-blog-images.aijs.top/img/202303071103119.webp\" />\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/103626709\" target=\"_blank\" >链表中环的入口节点</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 阶段1: 快指针走两步，慢指针走一步，找到相遇点\n&#x2F;&#x2F; 阶段2: 快指针从头一步一步走，慢指针从相遇点一步一步走（为什么成立：因为方程式有解）\nfunction detectCycle(head) &#123;\n  let fast &#x3D; head;\n  let slow &#x3D; head;\n  while (fast &amp;&amp; fast.next) &#123;\n    fast &#x3D; fast.next.next;\n    slow &#x3D; slow.next;\n    &#x2F;&#x2F; prettier-ignore\n    if (fast &#x3D;&#x3D; slow) &#123; &#x2F;&#x2F; 相遇点\n      fast &#x3D; head; &#x2F;&#x2F; 快指针从头走\n      while (fast !&#x3D; slow) &#123;\n        fast &#x3D; fast.next;\n        slow &#x3D; slow.next;\n      &#125;\n      return slow;\n    &#125;\n  &#125;\n  return null;\n&#125;</code></pre>\n\n<h3 id=\"判断链表是否相交\"><a href=\"#判断链表是否相交\" class=\"headerlink\" title=\"判断链表是否相交\"></a>判断链表是否相交</h3><p><a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/intersection-of-two-linked-lists-shuang-zhi-zhen-l/\" target=\"_blank\" > 相交链表（双指针，清晰图解）</a></p>\n<img src=\"https://pic.leetcode-cn.com/1615224578-EBRtwv-Picture1.png\" />\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function intersectionNode(headA, headB) &#123;\n  let [curA, curB] &#x3D; [headA, headB];\n  while (curA !&#x3D;&#x3D; curB) &#123;\n    curA &#x3D; curA.next &#x3D;&#x3D;&#x3D; null ? headB : curA.next;\n    curB &#x3D; curB.next &#x3D;&#x3D;&#x3D; null ? headA : curB.next;\n  &#125;\n  return curA;\n&#125;\n\n&#x2F;&#x2F; 测试----------------------------------\n\nclass Node &#123;\n  constructor(data) &#123;\n    this.data &#x3D; data;\n    this.next &#x3D; null;\n  &#125;\n&#125;\n\nclass SingleLink &#123;\n  constructor() &#123;\n    this.size &#x3D; 0;\n    this.head &#x3D; new Node(&#39;head&#39;);\n  &#125;\n  &#x2F;&#x2F; 找到链表的最后一个节点\n  findLastNode() &#123;\n    let curNode &#x3D; this.head;\n    while (curNode.next) &#123;\n      curNode &#x3D; curNode.next;\n    &#125;\n    return curNode;\n  &#125;\n  &#x2F;&#x2F; 追加节点\n  appendNode(node) &#123;\n    const lastNode &#x3D; this.findLastNode();\n    lastNode.next &#x3D; node;\n    node.next &#x3D; null; &#x2F;&#x2F; 这个必须加，否则有循环\n    this.size++;\n  &#125;\n&#125;\n\nvar a &#x3D; [1, 11];\n\nvar b &#x3D; [0, 2, 3];\n\nvar common &#x3D; [&#39;a&#39;, &#39;b&#39;];\n&#x2F;&#x2F; 链表A\nconst linka &#x3D; new SingleLink();\nfor (let i &#x3D; 0; i &lt; a.length; i++) &#123;\n  linka.appendNode(new Node(a[i]));\n&#125;\n\n&#x2F;&#x2F; 链表B\nconst linkb &#x3D; new SingleLink();\nfor (let i &#x3D; 0; i &lt; b.length; i++) &#123;\n  linkb.appendNode(new Node(b[i]));\n&#125;\n\n&#x2F;&#x2F; 共节点链表\nfor (let i &#x3D; 0; i &lt; common.length; i++) &#123;\n  const cNode &#x3D; new Node(common[i]);\n  linka.appendNode(cNode);\n  linkb.appendNode(cNode);\n&#125;\n\nconsole.log(&#39;linka&#39;, linka);\n\nvar cNodeLink &#x3D; intersectionNode(linka.head, linkb.head);\nconsole.log(&#39;cNodeLink&#39;, JSON.stringify(cNodeLink, null, 2));\n\n&#x2F;&#x2F; cNodeLink &#123;\n&#x2F;&#x2F;   &quot;data&quot;: &quot;a&quot;,\n&#x2F;&#x2F;   &quot;next&quot;: &#123;\n&#x2F;&#x2F;     &quot;data&quot;: &quot;b&quot;,\n&#x2F;&#x2F;     &quot;next&quot;: null\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; &#125;</code></pre>\n\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h3 id=\"最小堆\"><a href=\"#最小堆\" class=\"headerlink\" title=\"最小堆\"></a>最小堆</h3><ol>\n<li><a href=\"https://7kms.github.io/react-illustration-series/algorithm/heapsort\" target=\"_blank\" >见</a></li>\n<li><a href=\"https://juejin.cn/post/6983273957734481933\" target=\"_blank\" >React 的小顶堆排序法</a></li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 最小堆\nlet heap &#x3D; [];\n\nfunction push(heap, node) &#123;\n  const index &#x3D; heap.length; &#x2F;&#x2F; 新的数据放置的位置\n  heap.push(node);\n  siftUp(heap, node, index); &#x2F;&#x2F; 增：自下而上\n&#125;\n\nfunction peek(heap) &#123;\n  return heap.length &#x3D;&#x3D;&#x3D; 0 ? null : heap[0];\n&#125;\n\nfunction pop(heap) &#123;\n  if (heap.length &#x3D;&#x3D;&#x3D; 0) &#123;\n    return null;\n  &#125;\n  const first &#x3D; heap[0]; &#x2F;&#x2F; 取堆顶\n  const last &#x3D; heap.pop(); &#x2F;&#x2F; 取最后一个元素\n  if (last !&#x3D;&#x3D; first) &#123;\n    &#x2F;&#x2F; 两者不等\n    heap[0] &#x3D; last; &#x2F;&#x2F; 换位\n    siftDown(heap, last, 0); &#x2F;&#x2F; 删：自上而下，对于尾部置换过来的数据，进行下沉处理\n  &#125;\n  return first;\n&#125;\n&#x2F;&#x2F; 上浮处理\nfunction siftUp(heap, node &#x2F;*数据 *&#x2F;, i &#x2F;*数据位置 *&#x2F;) &#123;\n  let index &#x3D; i;\n  while (index &gt; 0) &#123;\n    const parentIndex &#x3D; (index - 1) &gt;&gt;&gt; 1; &#x2F;&#x2F; (index-1)&#x2F;2后取整  等价于 &gt;&gt;&gt;无符号右移\n    const parent &#x3D; heap[parentIndex];\n    if (compare(parent, node) &gt; 0) &#123;\n      &#x2F;&#x2F; 如果parent大，交换\n      heap[parentIndex] &#x3D; node;\n      heap[index] &#x3D; parent;\n      index &#x3D; parentIndex;\n    &#125; else &#123;\n      &#x2F;&#x2F; 如果parent小，退出循环\n      return;\n    &#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; 下沉处理\nfunction siftDown(heap, node, i) &#123;\n  let index &#x3D; i;\n  const length &#x3D; heap.length; &#x2F;&#x2F; 堆全长\n  const halfLength &#x3D; length &gt;&gt;&gt; 1; &#x2F;&#x2F; 堆半长\n  while (index &lt; halfLength) &#123;\n    const leftIndex &#x3D; (index + 1) * 2 - 1;\n    const left &#x3D; heap[leftIndex];\n    const rightIndex &#x3D; leftIndex + 1;\n    const right &#x3D; heap[rightIndex];\n\n    &#x2F;&#x2F; 如果左侧或右侧节点较小，请使用其中较小的节点进行交换。\n    &#x2F;&#x2F; left &lt; node\n    if (compare(left, node) &lt; 0) &#123;\n      &#x2F;&#x2F; right &lt; left\n      if (rightIndex &lt; length &amp;&amp; compare(right, left) &lt; 0) &#123;\n        heap[index] &#x3D; right;\n        heap[rightIndex] &#x3D; node;\n        index &#x3D; rightIndex;\n        &#x2F;&#x2F; right &gt; left\n      &#125; else &#123;\n        heap[index] &#x3D; left;\n        heap[leftIndex] &#x3D; node;\n        index &#x3D; leftIndex;\n      &#125;\n      &#x2F;&#x2F; left &gt; node &gt; right\n    &#125; else if (rightIndex &lt; length &amp;&amp; compare(right, node) &lt; 0) &#123;\n      heap[index] &#x3D; right;\n      heap[rightIndex] &#x3D; node;\n      index &#x3D; rightIndex;\n    &#125; else &#123;\n      &#x2F;&#x2F; Neither child is smaller. Exit.\n      return;\n    &#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; a&gt;b\nfunction compare(a, b) &#123;\n  &#x2F;&#x2F; Compare sort index first, then task id.\n  &#x2F;&#x2F; react源码\n  &#x2F;&#x2F; const diff &#x3D; a.sortIndex - b.sortIndex;\n  &#x2F;&#x2F; return diff !&#x3D;&#x3D; 0 ? diff : a.id - b.id;\n  return a - b;\n&#125;\n&#x2F;&#x2F; 循环插入节点\nvar arr &#x3D; [5, 8, 0, 10, 4, 6, 1];\nfor (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n  push(heap, arr[i]);\n&#125;\n\nconsole.log(&#39;heap&#39;, heap);\n&#x2F;&#x2F;      0\n&#x2F;&#x2F;   4    1\n&#x2F;&#x2F; 10 8  6 5\n&#x2F;&#x2F; heap [\n&#x2F;&#x2F;   0, 4, 1, 10, 8, 6, 5\n&#x2F;&#x2F; ]\n&#x2F;&#x2F;\n&#x2F;&#x2F; pop(heap);\nconsole.log(&#39;heap&#39;, heap);\n\n&#x2F;&#x2F;      1\n&#x2F;&#x2F;   4    5\n&#x2F;&#x2F; 10 8  6\n\n&#x2F;&#x2F; heap [ 1, 4, 5, 10, 8, 6 ]\n\nfunction printHeap(heap) &#123;\n  if (!heap.length) &#123;\n    console.log(&#39;Heap is empty&#39;);\n  &#125; else &#123;\n    printHeapRecursively(heap, 0, 0);\n  &#125;\n&#125;\nconsole.log(&#39;---------------------------&#39;);\n&#x2F;&#x2F; 这里有个非常重要的点\n&#x2F;&#x2F; 右子树的根节点下标 &#x3D;  index * 2 + 2\n&#x2F;&#x2F; 当前节点的下标 &#x3D; index\n&#x2F;&#x2F; 左子树的根节点下标 &#x3D;  index * 2 + 1\nfunction printHeapRecursively(heap, index, depth) &#123;\n  if (index &lt; heap.length) &#123;\n    printHeapRecursively(heap, index * 2 + 2, depth + 1); &#x2F;&#x2F; 右子树递归\n    console.log(&#96;$&#123;&#39; &#39;.repeat(depth * 4)&#125;[$&#123;heap[index]&#125;]&#96;); &#x2F;&#x2F; 当前节点打印\n    printHeapRecursively(heap, index * 2 + 1, depth + 1); &#x2F;&#x2F; 左子树递归\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"堆打印\"><a href=\"#堆打印\" class=\"headerlink\" title=\"堆打印\"></a>堆打印</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function printHeap(heap) &#123;\n  if (!heap.length) &#123;\n    console.log(&#39;Heap is empty&#39;);\n  &#125; else &#123;\n    printHeapRecursively(heap, 0, 0);\n  &#125;\n&#125;\nconsole.log(&#39;---------------------------&#39;);\n&#x2F;&#x2F; 这里有个非常重要的点\n&#x2F;&#x2F; 右子树的根节点下标 &#x3D;  index * 2 + 2\n&#x2F;&#x2F; 当前节点的下标 &#x3D; index\n&#x2F;&#x2F; 左子树的根节点下标 &#x3D;  index * 2 + 1\nfunction printHeapRecursively(heap, index, depth) &#123;\n  if (index &lt; heap.length) &#123;\n    printHeapRecursively(heap, index * 2 + 2, depth + 1); &#x2F;&#x2F; 右子树递归\n    console.log(&#96;$&#123;&#39; &#39;.repeat(depth * 4)&#125;[$&#123;heap[index]&#125;]&#96;); &#x2F;&#x2F; 当前节点打印\n    printHeapRecursively(heap, index * 2 + 1, depth + 1); &#x2F;&#x2F; 左子树递归\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/afb80e39ce7684d6330fdc66b0873abd.gif\" width=300 />\n\n<p>总图了解到：冒泡路径越来越短: n n-1 n-2 … 2 1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 解构方式进行赋值\nconst swap &#x3D; (arr, i, j) &#x3D;&gt; ([arr[i], arr[j]] &#x3D; [arr[j], arr[i]]);\n\n&#x2F;&#x2F; 外层遍历负责次数 i&lt;len-1\n&#x2F;&#x2F; 内层遍历处理数据对比 j&#x3D;0 ,j&lt;len-i-1\nfunction BubbleSort(arr) &#123;\n  let len &#x3D; arr.length;\n  if (len &lt; 2) return arr; &#x2F;&#x2F; 没有排序价值\n  for (let i &#x3D; 0; i &lt; len - 1; i++) &#123;\n    for (let j &#x3D; 0; j &lt; len - 1 - i; j++) &#123;\n      &#x2F;&#x2F; 是否需要冒泡，这里的冒泡是冒泡到尾部\n      if (arr[j] &gt; arr[j + 1]) swap(arr, j, j + 1);\n    &#125;\n  &#125;\n  return arr;\n&#125;</code></pre>\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/76339a259488423b03370e381ca5edb0.gif\" width=300/>\n\n<p>总图了解到：冒泡路径越来越短: n n-1 n-2 … 2 1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const swap &#x3D; (arr, i, j) &#x3D;&gt; ([arr[i], arr[j]] &#x3D; [arr[j], arr[i]]);\n\n&#x2F;&#x2F; 同向比较\nconst SelectSort &#x3D; (arr) &#x3D;&gt; &#123;\n  let len &#x3D; arr.length;\n  let i &#x2F;*一重遍历 *&#x2F;, j &#x2F;*二重遍历 *&#x2F;, minIndex &#x2F;*最小元素的下标 *&#x2F;;\n  for (let i &#x3D; 0; i &lt; len; i++) &#123;\n    &#x2F;&#x2F; 每次找最小的进行交换，直至结束\n    minIndex &#x3D; i;\n    for (let j &#x3D; i + 1; j &lt; len; j++) &#123;\n      &#x2F;&#x2F;每次找最小的\n      if (arr[j] &lt; arr[minIndex]) minIndex &#x3D; j;\n    &#125;\n    swap(arr, i, minIndex);\n  &#125;\n  return arr;\n&#125;;</code></pre>\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/c894e22dcc48b03559e3087627e3dbb8.gif\" width=300/>\n\n<p>被遍历元素与前面的元素逐个相比较，前面的元素挪位给它</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; sential &#x3D; arr[i] 外层\n&#x2F;&#x2F; 内存循环条件 j&#x3D;i-1\nfunction insertSort(arr) &#123;\n  if (arr.length &lt;&#x3D; 0) return arr;\n  for (let i &#x3D; 1; i &lt; arr.length; i++) &#123;\n    let temp &#x3D; arr[i];\n    let j &#x3D; i - 1; &#x2F;&#x2F; 取前一个位置元素\n    &#x2F;&#x2F; prettier-ignore\n    for (; j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; temp; j--) &#123;   &#x2F;&#x2F; 挪位置\n      arr[j + 1] &#x3D; arr[j];\n    &#125;\n    &#x2F;&#x2F; 将元素放置到这个位置\n    arr[j + 1] &#x3D; temp;\n  &#125;\n\n  return result;\n&#125;</code></pre>\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><img src=\"https://img-blog.csdnimg.cn/956f63eccd75480791c85edd8ce91658.gif\" width=300/>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [2, 44, 1, 0, -22, 56, -78];\n&#x2F;&#x2F; 分-合过程，分：递 、合：归\nfunction mergeSort(arr) &#123;\n  if (arr.length &lt;&#x3D; 1) return arr;\n\n  const middle &#x3D; Math.floor(arr.length &#x2F; 2);\n  const left &#x3D; arr.slice(0, middle);\n  const right &#x3D; arr.slice(middle);\n  &#x2F;&#x2F; 递\n  return merge(mergeSort(left), mergeSort(right));\n  &#x2F;&#x2F; 归\n  &#x2F;&#x2F; 辅助函数，用于将两个数组合并为一个有序数组，并返回\n  function merge(left, right) &#123;\n    const result &#x3D; [];\n    while (left.length &amp;&amp; right.length) &#123;\n      &#x2F;&#x2F; 放入较小的元素，并从头部移出\n      result.push(left[0] &lt;&#x3D; right[0] ? left.shift() : right.shift());\n    &#125;\n    result.push(...left, ...right); &#x2F;&#x2F; 放入剩余元素\n    return result;\n  &#125;\n&#125;\n\nconsole.log(mergeSort(arr));</code></pre>\n\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><img src=\"http://t-blog-images.aijs.top/img/1940317-acc6c6f16b096794.gif\" />\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><img src=\"https://img-blog.csdnimg.cn/img_convert/4ad3b539bee9bfe9a6acdba476ceed78.gif\" width=300 />\n\n<img src=\"http://t-blog-images.aijs.top/img/20220704153839.webp\" />\n\n<p>找基点，小于的排左侧，大于的排右侧</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;*\n快排是冒泡的一种改进，基于分治思想\n*&#x2F;\nconst arr2 &#x3D; [2, 44, 1, 0, -22, 56, -78];\n\nfunction quickSort(arr) &#123;\n  if (arr.length &lt;&#x3D; 1) return arr;\n\n  const pivot &#x3D; arr.pop(); &#x2F;&#x2F; 使用最后一个元素当作基准数\n  &#x2F;&#x2F; prettier-ignore\n  const left &#x3D; [], right &#x3D; [];\n\n  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n    if (arr[i] &lt; pivot) left.push(arr[i]); &#x2F;&#x2F; 小于基准数则放到left\n    else right.push(arr[i]); &#x2F;&#x2F; 大于基准数则放到right\n  &#125;\n  &#x2F;&#x2F; 合并left的快排结果，基准数和右侧的快排结果\n  return quickSort(left).concat(pivot, quickSort(right));\n&#125;\n\nconsole.log(quickSort(arr2));</code></pre>\n\n<h2 id=\"LRU-算法\"><a href=\"#LRU-算法\" class=\"headerlink\" title=\"LRU 算法\"></a>LRU 算法</h2><p><code>LRU 定义</code>： 是 Least Recently Used 的缩写，即最近最少使用，是一种常用的页面置换算法，选择内存中最近最久未使用的页面予以淘汰。</p>\n<p><code>使用场景</code>：正如定义所说，如果我们想要实现缓存机制 – 满足最近最少使用淘汰原则，我们就可以使用 LRU 算法缓存机制。如：vue 中 keep-alive 中就用到了此算法。</p>\n<p><code>实现思路</code>： – 维护一个数组，提供 get 和 put 两个方法，并且限制数组元素数量（及缓存数量）</p>\n<p><code>实现方法</code>：</p>\n<pre><code>1. get 可以标记某个元素是最新使用的，提升到第一项\n2. put 可以加入一个 key-value 元素，但是需要判断是否已存在，是否超出限额\n</code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 时间复杂度 O(1)，因为 Map 既能保持键值对，还能记住插入顺序。\nvar LRUCache &#x3D; function (capacity) &#123;\n  this.cache &#x3D; new Map();\n  this.capacity &#x3D; capacity;\n&#125;;\n\nLRUCache.prototype.get &#x3D; function (key) &#123;\n  if (this.cache.has(key)) &#123;\n    &#x2F;&#x2F; 存在即更新\n    let temp &#x3D; this.cache.get(key);\n    this.cache.delete(key);\n    this.cache.set(key, temp);\n    return temp;\n  &#125;\n  return -1;\n&#125;;\n\nLRUCache.prototype.put &#x3D; function (key, value) &#123;\n  &#x2F;&#x2F; 存在即更新（删除后加入）,这种情况肯定不会溢出\n  if (this.cache.has(key)) &#123;\n    this.cache.delete(key);\n    &#x2F;&#x2F; 不存在即加入\n    &#x2F;&#x2F; 缓存超过最大值，则移除最近没有使用的\n  &#125; else if (this.cache.size &gt;&#x3D; this.capacity) &#123;\n    &#x2F;&#x2F; new Map().keys() 返回一个新的 Iterator 对象\n    this.cache.delete(this.cache.keys().next().value);\n  &#125;\n  this.cache.set(key, value);\n&#125;;\n\n&#x2F;&#x2F; var map &#x3D; new Map()\n&#x2F;&#x2F; map.set(1,1)\n&#x2F;&#x2F; Map(1) &#123;1 &#x3D;&gt; 1&#125;\n&#x2F;&#x2F; map.set(2,2)\n&#x2F;&#x2F; Map(2) &#123;1 &#x3D;&gt; 1, 2 &#x3D;&gt; 2&#125;\n&#x2F;&#x2F; map.set(3,3)\n&#x2F;&#x2F; Map(3) &#123;1 &#x3D;&gt; 1, 2 &#x3D;&gt; 2, 3 &#x3D;&gt; 3&#125;\n\n&#x2F;&#x2F; map.keys().next()\n&#x2F;&#x2F; &#123;value: 1, done: false&#125;\n\n&#x2F;&#x2F; 类实现\n\nclass LRU &#123;\n  constructor(capacity) &#123;\n    this.capacity &#x3D; capacity;\n    this.cache &#x3D; new Map();\n  &#125;\n  &#x2F;&#x2F; 获取\n  get(key) &#123;\n    if (this.cache.has(key)) &#123;\n      &#x2F;&#x2F; 删除后新增\n      const temp &#x3D; this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, temp);\n      return temp;\n    &#125;\n    return -1;\n  &#125;\n  &#x2F;&#x2F; 设置\n  put(key, value) &#123;\n    if (this.cache.has(key)) &#123;\n      this.cache.delete(key);\n    &#125;else (this.cache.size&gt;&#x3D;this.capacity)&#123;\n      this.cache.delete(this.cache.keys().next().value)\n    &#125;\n\n    this.cache.set(key, value);\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"leecode\"><a href=\"#leecode\" class=\"headerlink\" title=\"leecode\"></a>leecode</h2><h3 id=\"红包算法\"><a href=\"#红包算法\" class=\"headerlink\" title=\"红包算法\"></a>红包算法</h3><h3 id=\"括号匹配\"><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 左匹配进栈\n&#x2F;&#x2F; 右匹配出栈\n&#x2F;&#x2F; 进栈&#x3D;&#x3D;出栈数量\nfunction isValid(s) &#123;\n  let stack &#x3D; new Stack();\n  &#x2F;&#x2F; 遍历 字符串\n  for (let c of s) &#123;\n    &#x2F;&#x2F; 遇到左括号，将与其匹配的右括号入栈处理\n\n    if (c &#x3D;&#x3D;&#x3D; &#39;(&#39;) &#123;\n      stack.push(&#39;)&#39;);\n    &#125; else if (c &#x3D;&#x3D;&#x3D; &#39;[&#39;) &#123;\n      stack.push(&#39;]&#39;);\n    &#125; else if (c &#x3D;&#x3D;&#x3D; &#39;&#123;&#39;) &#123;\n      stack.push(&#39;&#125;&#39;);\n      &#x2F;&#x2F; 遇到右括号\n      &#x2F;&#x2F; 1. 判断栈内是否有括号，如果没有，那说明此时匹配不了\n      &#x2F;&#x2F; 2. 满足①的情况下，判断此时字符是否和栈顶元素匹配\n    &#125; else if (stack.isEmpty() || stack.pop() !&#x3D;&#x3D; c) &#123;\n      return false;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 最后再验证一下，栈是否为空，如果不为空，说明还有未匹配的括号\n  return stack.isEmpty();\n&#125;\n&#x2F;&#x2F; 原理：数组的 push 和 pop\nclass Stack &#123;\n  constructor() &#123;\n    this.items &#x3D; [];\n  &#125;\n  &#x2F;&#x2F; 进栈\n  push(element) &#123;\n    this.items.push(element);\n  &#125;\n  &#x2F;&#x2F; 出栈\n  pop() &#123;\n    return this.items.pop();\n  &#125;\n  &#x2F;&#x2F; 是否为空\n  isEmpty() &#123;\n    return this.items.length &#x3D;&#x3D;&#x3D; 0;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"螺旋矩阵\"><a href=\"#螺旋矩阵\" class=\"headerlink\" title=\"螺旋矩阵\"></a>螺旋矩阵</h3><h3 id=\"大数相加\"><a href=\"#大数相加\" class=\"headerlink\" title=\"大数相加\"></a>大数相加</h3><p><a href=\"https://blog.csdn.net/qq_39816673/article/details/88667505\" target=\"_blank\" >JS 大数相加</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function add(str1, str2) &#123;\n  str1 &#x3D; str1.split(&#39;&#39;); &#x2F;&#x2F; 转化成数组\n  str2 &#x3D; str2.split(&#39;&#39;); &#x2F;&#x2F; 转化成数组\n\n  let result &#x3D; &#39;&#39;; &#x2F;&#x2F; 结果\n  let flag &#x3D; 0; &#x2F;&#x2F; 满10进1标记\n\n  while (str1.length || str2.length || flag) &#123;\n    &#x2F;&#x2F; 计算完\n    const val &#x3D; flag + ~~str1.pop() + ~~str2.pop(); &#x2F;&#x2F; ~~undefined &#x3D; 0, true + 0 &#x3D;1, false + 0 &#x3D; 0\n    &#x2F;&#x2F; 结果\n    result &#x3D; (val % 10) + result;\n    &#x2F;&#x2F; 是否进位\n    flag &#x3D; val &gt; 9 ? val % 10 : 0;\n  &#125;\n  return result.replace(&#x2F;^0+&#x2F;, &#39;&#39;); &#x2F;&#x2F; 首部有0去除\n&#125;\n\nconsole.log(add(&#39;00125&#39;, &#39;0131231231232132136&#39;));</code></pre>\n\n<h3 id=\"找出出现次数最多的英语单词\"><a href=\"#找出出现次数最多的英语单词\" class=\"headerlink\" title=\"找出出现次数最多的英语单词\"></a>找出出现次数最多的英语单词</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var paragraph &#x3D; &#39;Bob hit a ball, the hit BALL flew far after it was hit.&#39;;\n\nfunction findMaxWord(paragraph) &#123;\n  &#x2F;&#x2F; prettier-ignore\n  var p &#x3D; paragraph.replace(&#x2F;[\\W\\s]&#x2F;g, &quot; &quot;).toLowerCase().split(&quot; &quot;);\n  &#x2F;&#x2F; console.log(&quot;p&quot;, p);\n  &#x2F;&#x2F; [&#39;bob&#39;, &#39;hit&#39;, &#39;a&#39;, &#39;ball&#39;, &#39;&#39;, &#39;the&#39;, &#39;hit&#39;, &#39;ball&#39;, &#39;flew&#39;, &#39;far&#39;, &#39;after&#39;, &#39;it&#39;, &#39;was&#39;, &#39;hit&#39;, &#39;&#39;]\n  const obj &#x3D; &#123;&#125;;\n\n  for (const word of p) &#123;\n    if (!word) continue;\n    if (obj[word]) &#123;\n      obj[word]++;\n    &#125; else &#123;\n      obj[word] &#x3D; 1;\n    &#125;\n  &#125;\n\n  let max &#x3D; 0;\n  let word &#x3D; &#39;&#39;;\n  for (const k in obj) &#123;\n    if (obj[k] &gt; max) &#123;\n      max &#x3D; obj[k];\n      word &#x3D; k;\n    &#125;\n  &#125;\n\n  return &#123;\n    count: max,\n    word,\n  &#125;;\n&#125;\n\nconst res &#x3D; findMaxWord(paragraph);\nconsole.log(res);</code></pre>\n\n<h3 id=\"节点倒序（将-ul-id-x3D-list，将-ul-节点下的-10000-个-li-节点倒序。考虑性能。）【待处理】\"><a href=\"#节点倒序（将-ul-id-x3D-list，将-ul-节点下的-10000-个-li-节点倒序。考虑性能。）【待处理】\" class=\"headerlink\" title=\"节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）【待处理】\"></a>节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）【待处理】</h3><h3 id=\"实现一个函数计算-“1-12-31-100-93”【待处理】\"><a href=\"#实现一个函数计算-“1-12-31-100-93”【待处理】\" class=\"headerlink\" title=\"实现一个函数计算 “1+12-31+100-93”【待处理】\"></a>实现一个函数计算 “1+12-31+100-93”【待处理】</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function calc(str) &#123;\n  return eval(str);\n&#125;\n\nfunction calcStr(str) &#123;\n  var newStr &#x3D; a.replace(&#x2F;-\\d+&#x2F;g, (x) &#x3D;&gt; &#123;\n    return &#39;+&#39; + x;\n  &#125;);\n  let result &#x3D; newStr.split(&#39;+&#39;).reduce((pre, crt) &#x3D;&gt; pre + parseFloat(crt), 0);\n  console.log(&#39;eval(a)&#39;, eval(str));\n  console.log(&#39;result&#39;, result);\n  return result;\n&#125;\nvar a &#x3D; &#39;1+12-31+100-93&#39;;\n&#x2F;&#x2F; var a &#x3D; &quot;1+12+(-31)+100+(-93)&quot;;\n\ncalcStr(a);</code></pre>\n\n<h3 id=\"判断链表是否有环\"><a href=\"#判断链表是否有环\" class=\"headerlink\" title=\"判断链表是否有环\"></a>判断链表是否有环</h3><ul>\n<li><p>快慢指针</p>\n<p><a href=\"https://www.zhihu.com/question/23208893\" target=\"_blank\" >为什么用快慢指针找链表的环，快指针和慢指针一定会相遇？</a></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Solution &#123;\n  ...\n  hasCycle() &#123;\n    let fast &#x3D; this.head; &#x2F;&#x2F; 每次走两步\n    let slow &#x3D; this.head; &#x2F;&#x2F; 每次走一步\n    while (fast &amp;&amp; fast.next) &#123;\n      fast &#x3D; fast.next.next\n      &#x2F;&#x2F; 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6\n      &#x2F;&#x2F;               fast\n      &#x2F;&#x2F;               slow\n      slow &#x3D; slow.next\n      &#x2F;&#x2F; 如果最终两人相遇了，则有环\n      if(fast &#x3D;&#x3D;&#x3D; slow)&#123;\n        return true\n      &#125;\n    &#125;\n    &#x2F;&#x2F; 如果结束了，说明无环\n    return false\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"爬楼梯【动态规划】\"><a href=\"#爬楼梯【动态规划】\" class=\"headerlink\" title=\"爬楼梯【动态规划】\"></a>爬楼梯【动态规划】</h3><p><a href=\"https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408\" target=\"_blank\" >百度百科-动态规划</a></p>\n<p><strong>多阶段决策问题</strong></p>\n<ol>\n<li>如果一类活动过程可以分为若干个互相联系的阶段，在每一个阶段都需作出决策（采取措施），一个阶段的决策确定以后，常常影响到下一个阶段的决策，从而就完全确定了一个过程的活动路线，则称它为多阶段决策问题</li>\n<li>各个阶段的决策构成一个决策序列，称为一个策略。每一个阶段都有若干个决策可供选择，因而就有许多策略供我们选取，对应于一个策略可以确定活动的效果，这个效果可以用数量来确定。策略不同，效果也不同，多阶段决策问题，就是要在可以选择的那些策略中间，选取一个最优策略，使在预定的标准下达到最好的效果</li>\n</ol>\n<p><strong>动态规划问题中的术语</strong></p>\n<p><code>阶段</code>：</p>\n<pre><code>1. 把所给求解问题的过程恰当地分成若干个相互联系的阶段，以便于求解，过程不同，阶段数就可能不同．\n2. 描述阶段的变量称为阶段变量。\n3. 在多数情况下，阶段变量是离散的，用 k 表示。此外，也有阶段变量是连续的情形。\n4. 如果过程可以在任何时刻作出决策，且在任意两个不同的时刻之间允许有无穷多个决策时，阶段变量就是连续的\n</code></pre>\n<p><code>状态</code>：</p>\n<pre><code>1. 状态表示每个阶段开始面临的自然状况或客观条件，它不以人们的主观意志为转移，也称为不可控因素。\n2. 在上面的例子中状态就是某阶段的出发位置，它既是该阶段某路的起点，同时又是前一阶段某支路的终点\n</code></pre>\n<p><code>决策</code>：</p>\n<pre><code>1. 一个阶段的状态给定以后，从该状态演变到下一阶段某个状态的一种选择（行动）称为决策。\n2. 在最优控制中，也称为控制。\n3. 在许多问题中，决策可以自然而然地表示为一个数或一组数。不同的决策对应着不同的数值。\n4. 描述决策的变量称决策变量，因状态满足无后效性，故在每个阶段选择决策时只需考虑当前的状态而无须考虑过程的历史\n</code></pre>\n<p><code>最优化原理</code>：作为整个过程的最优策略，它满足：相对前面决策所形成的状态而言，余下的子策略必然构成“最优子策略”<br><code>最优性原理</code>：实际上是要求问题的最优策略的子策略也是最优</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。\n\n&#x2F;&#x2F; 在循环的过程中，不断替换其中的值， 最后的结果，就是所有的方法数\nfunction minCost(cost) &#123;\n  &#x2F;&#x2F; 定义一个变量\n  let len &#x3D; cost.length;\n  &#x2F;&#x2F; 定义两个变量\n  let dp &#x3D; [cost[0], cost[1]];\n\n  for (let i &#x3D; 2; i &lt; len; i++) &#123;\n    &#x2F;&#x2F; 0&#x2F;1 下标数组， 偶数 &amp; 1 &#x3D; 0， 奇数 &amp; 1 &#x3D;1\n    dp[i &amp; 1] &#x3D; Math.min(dp[0], dp[1]) + cost[i];\n    console.log(&#96;dp[$&#123;i &amp; 1&#125;]&#96;, i, dp[i &amp; 1], dp);\n  &#125;\n\n  &#x2F;&#x2F; 循环结束后\n  return Math.min(dp[0], dp[1]);\n&#125;\n\nvar a &#x3D; minCost([1, 2, 3, 4, 5]);\n\nconsole.log(&#39;a&#39;, a);\n\n&#x2F;&#x2F; 作者：前端小魔女\n&#x2F;&#x2F; 链接：https:&#x2F;&#x2F;juejin.cn&#x2F;post&#x2F;7206912311562174523\n&#x2F;&#x2F; 来源：稀土掘金\n&#x2F;&#x2F; 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>\n\n<h3 id=\"什么是时间复杂度-amp-计算\"><a href=\"#什么是时间复杂度-amp-计算\" class=\"headerlink\" title=\"什么是时间复杂度&amp;计算\"></a>什么是时间复杂度&amp;计算</h3><h3 id=\"什么是空间复杂度-amp-计算\"><a href=\"#什么是空间复杂度-amp-计算\" class=\"headerlink\" title=\"什么是空间复杂度&amp;计算\"></a>什么是空间复杂度&amp;计算</h3><h3 id=\"删除单向链表中的某个节点\"><a href=\"#删除单向链表中的某个节点\" class=\"headerlink\" title=\"删除单向链表中的某个节点\"></a>删除单向链表中的某个节点</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 在创建链表时，需要创建两个类：指针类和节点类\nclass Node &#123;\n  constructor(data) &#123;\n    this.data &#x3D; data; &#x2F;&#x2F; 节点的数据域&#x2F;数据成员\n    this.next &#x3D; null; &#x2F;&#x2F; 节点的指针域&#x2F;指针成员\n  &#125;\n&#125;\n&#x2F;&#x2F; 定义一个单向链表类\nclass singleLinked &#123;\n  constructor() &#123;\n    this.size &#x3D; 0; &#x2F;&#x2F; 记录单链表长度或节点个数\n    this.head &#x3D; new Node(&#39;head&#39;); &#x2F;&#x2F; 记录链表的头指针：主要作用记录链表的起始地址\n    this.currentNode &#x3D; &#39;&#39;;\n  &#125;\n  &#x2F;&#x2F; 删除一个节点\n  deleteNode(element) &#123;\n    var currentNode &#x3D; this.head;\n    while (currentNode.next.data !&#x3D;&#x3D; element) &#123;\n      currentNode &#x3D; currentNode.next;\n    &#125;\n    &#x2F;&#x2F; 将链的节点与另一个节点连上\n    currentNode.next &#x3D; currentNode.next.next;\n    this.size--;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"数组中找数之和\"><a href=\"#数组中找数之和\" class=\"headerlink\" title=\"数组中找数之和\"></a>数组中找数之和</h3><h4 id=\"排序数组中的两个数字之和的下标\"><a href=\"#排序数组中的两个数字之和的下标\" class=\"headerlink\" title=\"排序数组中的两个数字之和的下标\"></a>排序数组中的两个数字之和的下标</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 输入一个递增排序的数组和一个值target,在数组中找出两个和为target的数字并返回它们的下标\n&#x2F;&#x2F; 提示：\n&#x2F;&#x2F; 数组中有且只有一对符合要求\n&#x2F;&#x2F; 同时一个数字不能使用两次\n\n&#x2F;&#x2F; 示例：输入数组： [1,2,4,6,10],k的值为8 输出[1,3]\n\nfunction twoSum4SortedArray(nums, target) &#123;\n  &#x2F;&#x2F; prettier-ignore\n  let left &#x3D; 0, right &#x3D; nums.length - 1; &#x2F;&#x2F; 初始化指针left,right\n  while (left &lt; right &amp;&amp; nums[left] + nums[right] !&#x3D; target) &#123;\n    if (nums[left] + nums[right] &lt; target) &#123;\n      left++;\n    &#125; else &#123;\n      right--;\n    &#125;\n  &#125;\n  return [left, right];\n&#125;</code></pre>\n\n<h4 id=\"非排序数组找两数之和\"><a href=\"#非排序数组找两数之和\" class=\"headerlink\" title=\"非排序数组找两数之和\"></a>非排序数组找两数之和</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function twoSum(nums, target) &#123;\n  let map &#x3D; new Map(); &#x2F;&#x2F; 用于，存储[nums[i],i]之间的关系\n  for (let i &#x3D; 0; i &lt; nums.length; i++) &#123;\n    let expectValue &#x3D; target - nums[i];\n    &#x2F;&#x2F; 先从map中找，是否存在指定值\n    if (map.has(expectValue)) &#123;\n      &#x2F;&#x2F; 如果有，直接返回与值相对于的下标\n      return [map.get(expectValue), i];\n    &#125;\n    &#x2F;&#x2F; 存储[nums[i],i]之间的关系\n    &#x2F;&#x2F; 存 值&#x3D;下标\n    map.set(nums[i], i);\n  &#125;\n  return null;\n&#125;</code></pre>\n\n<h4 id=\"数组中和为-target-的-3-个数字【难搞哦】\"><a href=\"#数组中和为-target-的-3-个数字【难搞哦】\" class=\"headerlink\" title=\"数组中和为 target 的 3 个数字【难搞哦】\"></a>数组中和为 target 的 3 个数字【难搞哦】</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 输入一个数组，找出数组中所有和为target的3个数字的三元组\n&#x2F;&#x2F; 提示：\n&#x2F;&#x2F; 返回值不得包含重复的三元组\n\n&#x2F;&#x2F; 示例：输入数组： [-1,0,1,2,-1,-4],target的值为0 输出[[-1,0,1],[-1,-1,2]]\n\nfunction threeSum(nums, target) &#123;\n  let result &#x3D; [];\n  if (nums.length &lt; 3) return [];\n\n  &#x2F;&#x2F; 人工对数据进行排序处理\n  nums.sort((a, b) &#x3D;&gt; a - b);\n\n  let i &#x3D; 0;\n  while (i &lt; nums.length - 2) &#123;\n    twoSum(nums, i, target, result);\n    let temp &#x3D; nums[i];\n    &#x2F;&#x2F; 剔除，重复元祖中第一个数值\n    while (i &lt; nums.length &amp;&amp; nums[i] &#x3D;&#x3D; temp) i++;\n  &#125;\n  return result;\n&#125;\n\nfunction twoSum(nums, i, target, result) &#123;\n  &#x2F;&#x2F; 初始化指针left,right\n  &#x2F;&#x2F; prettier-ignore\n  let left &#x3D; i + 1, right &#x3D; nums.length - 1;\n\n  while (left &lt; right) &#123;\n    &#x2F;&#x2F; 求和\n    let sum &#x3D; nums[i] + nums[left] + nums[right];\n    &#x2F;&#x2F; 指针移动过程 (if&#x2F;else)\n    if (sum &#x3D;&#x3D;&#x3D; target) &#123;\n      result.push([nums[i], num[left], nums[right]]);\n\n      let temp &#x3D; nums[left];\n      &#x2F;&#x2F; 剔除，重复元祖第二个数值\n      while (nums[left] &#x3D;&#x3D;&#x3D; temp &amp;&amp; left &lt; right) left++;\n    &#125; else if (sum &lt; 0) &#123;\n      left++;\n    &#125; else &#123;\n      right--;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"N-进制加法\"><a href=\"#N-进制加法\" class=\"headerlink\" title=\"N 进制加法\"></a>N 进制加法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 二进制加法\n&#x2F;&#x2F; Nsum(&#39;10&#39;,&#39;01&#39;,2)\n&#x2F;&#x2F; 结果为 11\n&#x2F;&#x2F; 十进制加法(十进制大数相加)\n&#x2F;&#x2F; Nsum(&#39;7&#39;,&#39;8&#39;,10)\n&#x2F;&#x2F; 结果为 15\n\n&#x2F;&#x2F; 原理：\n&#x2F;&#x2F; 1. 从数据尾部开始遍历\n&#x2F;&#x2F; 2. 通过字符串减法，获取对应位置的值\n&#x2F;&#x2F; 3. 对应位置数相加，+ 进位\n&#x2F;&#x2F; 4. 当前位置的值，进位的值\n&#x2F;&#x2F; 循环遍历\n&#x2F;&#x2F; 5. 遍历完成后是否还存在进位\nfunction Nsum(a, b, n) &#123;\n  let result &#x3D; &#39;&#39;; &#x2F;&#x2F; 用来存储结果\n  let i &#x3D; a.length - 1; &#x2F;&#x2F; 是为了倒着遍历\n  let j &#x3D; b.length - 1; &#x2F;&#x2F; 是为了倒着遍历\n  let carry &#x3D; 0; &#x2F;&#x2F; 进位\n\n  while (i &gt;&#x3D; 0 || j &gt;&#x3D; 0) &#123;\n    &#x2F;*这个减法有意思，会直接计算出来字符串与字符串的差值后的整数 *&#x2F;\n    let digitA &#x3D; i &gt;&#x3D; 0 ? a[i--] - &#39;0&#39; : 0;\n    let digitB &#x3D; j &gt;&#x3D; 0 ? b[j--] - &#39;0&#39; : 0;\n    let sum &#x3D; digitA + digitB + carry; &#x2F;&#x2F; 对应位数之和 + 进位\n    carry &#x3D; sum &gt;&#x3D; n ? 1 : 0; &#x2F;&#x2F; 是否有进位\n    sum &#x3D; sum &gt;&#x3D; n ? sum - n : sum; &#x2F;&#x2F; 去掉进位后该位置的值\n    result &#x3D; sum + result;\n  &#125;\n  &#x2F;&#x2F; 最后是否有进位\n  if (carry) &#123;\n    result &#x3D; &#39;1&#39; + result;\n  &#125;\n  return result;\n&#125;\n\nNsum(&#39;10&#39;, &#39;01&#39;, 2);</code></pre>\n\n<h3 id=\"只出现一次的数字\"><a href=\"#只出现一次的数字\" class=\"headerlink\" title=\"只出现一次的数字\"></a>只出现一次的数字</h3><h4 id=\"某个元素仅出现-一次-外，其余每个元素都恰出现-N-次-看不懂\"><a href=\"#某个元素仅出现-一次-外，其余每个元素都恰出现-N-次-看不懂\" class=\"headerlink\" title=\"某个元素仅出现 一次 外，其余每个元素都恰出现 N 次(看不懂)\"></a>某个元素仅出现 一次 外，其余每个元素都恰出现 N 次(看不懂)</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 出现2次，找出现一次的 singleNumber([1,1,2,2,3],2); 结果为 3\n&#x2F;&#x2F; 出现3次，找出现一次的 singleNumber([1,1,1,2,2,2,3],3) 结果为 3\n&#x2F;&#x2F; 同理其他\nfunction singleNumber(nums, n) &#123;\n  &#x2F;&#x2F; 构建一个用于存储数组所有数字位数之和的数组\n  let bitSums &#x3D; new Array(32).fill(0);\n  for (let num of nums) &#123;\n    for (let i &#x3D; 0; i &lt; 32; i++) &#123;\n      &#x2F;&#x2F; 求num在i位置的位数，并将其与指定位置的位数相加\n      bitSums[i] +&#x3D; (num &gt;&gt; (31 - i)) &amp; 1;\n    &#125;\n  &#125;\n  let result &#x3D; 0;\n  for (let i &#x3D; 0; i &lt; 32; i++) &#123;\n    &#x2F;&#x2F;从最地位(0)位开始遍历\n    result &#x3D; (result &lt;&lt; 1) + (bitSums[i] % n);\n  &#125;\n  return result;\n&#125;</code></pre>\n\n<h4 id=\"某个元素仅出现-一次-外，其余每个元素都恰出现-2-次的另外解法\"><a href=\"#某个元素仅出现-一次-外，其余每个元素都恰出现-2-次的另外解法\" class=\"headerlink\" title=\"某个元素仅出现 一次 外，其余每个元素都恰出现 2 次的另外解法\"></a>某个元素仅出现 一次 外，其余每个元素都恰出现 2 次的另外解法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function singleNumber(nums) &#123;\n  let result &#x3D; 0;\n  for (let i of nums) &#123;\n    result ^&#x3D; i;\n    console.log(i, result);\n  &#125;\n  return result;\n&#125;\n\nsingleNumber([1, 3, 1, 2, 2], 2);\n\n&#x2F;&#x2F; 过程如下：\n&#x2F;&#x2F; 1 001\n&#x2F;&#x2F; 1 001\n&#x2F;&#x2F; 2 011\n&#x2F;&#x2F; 2 011\n&#x2F;&#x2F; 3 111 -&gt; 111</code></pre>\n\n<h3 id=\"fibonic\"><a href=\"#fibonic\" class=\"headerlink\" title=\"fibonic\"></a>fibonic</h3><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……</p>\n<h4 id=\"常规方式\"><a href=\"#常规方式\" class=\"headerlink\" title=\"常规方式\"></a>常规方式</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fibonacci(n) &#123;\n  if (n &lt;&#x3D; 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n&#125;\n&#x2F;&#x2F; fibonacci(1000) &#x2F;&#x2F;  浏览器卡死</code></pre>\n\n<h4 id=\"尾调用方式\"><a href=\"#尾调用方式\" class=\"headerlink\" title=\"尾调用方式\"></a>尾调用方式</h4><p>原理： 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 执行顺序\n&#x2F;&#x2F; 将 _next的结果作为fibonacci的值\nfunction fibonacci(n, pre &#x3D; 1, next &#x3D; 1) &#123;\n  if (n &lt;&#x3D; 1) return next;\n  const _pre &#x3D; next; &#x2F;&#x2F; 移动位置\n  const _next &#x3D; next + pre;\n  return fibonacci(n - 1, _pre, _next &#x2F;*值放到这里 *&#x2F;);\n  &#x2F;&#x2F; 上面三行等价于下面一行\n  &#x2F;&#x2F; return fibonacci(n - 1, next, next + pre);\n&#125;\n\nfibonacci(4);\n&#x2F;&#x2F; 执行过程分析\n&#x2F;&#x2F; 4 fibonacci(3, 1, 2)\n&#x2F;&#x2F; 3 fibonacci(2, 2, 3)\n&#x2F;&#x2F; 2 fibonacci(1, 3, 5)\n&#x2F;&#x2F; 1 return 5</code></pre>\n\n<h4 id=\"迭代方式\"><a href=\"#迭代方式\" class=\"headerlink\" title=\"迭代方式\"></a>迭代方式</h4><h3 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h3><h4 id=\"普通递归\"><a href=\"#普通递归\" class=\"headerlink\" title=\"普通递归\"></a>普通递归</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function factorial(n) &#123;\n  if (n &#x3D;&#x3D;&#x3D; 1) return 1;\n  return n * factorial(n - 1);\n&#125;\n\nfactorial(5); &#x2F;&#x2F; 120</code></pre>\n\n<h4 id=\"尾调用递归\"><a href=\"#尾调用递归\" class=\"headerlink\" title=\"尾调用递归\"></a>尾调用递归</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 尾调用是倒着处理的\nfunction factorial(n, total) &#123;\n  if (n &#x3D;&#x3D;&#x3D; 1) return total;\n  return factorial(n - 1, n * total &#x2F;*值放到这里，算法在这里 *&#x2F;); &#x2F;&#x2F; 尾部返回函数\n&#125;\n\nfactorial(5, 1); &#x2F;&#x2F; 120</code></pre>\n\n<h2 id=\"五分钟学习算法\"><a href=\"#五分钟学习算法\" class=\"headerlink\" title=\"五分钟学习算法\"></a>五分钟学习算法</h2><p><a href=\"https://www.jianshu.com/p/d13fcada7c2d\" target=\"_blank\" >链接</a></p>\n<h2 id=\"其他算法\"><a href=\"#其他算法\" class=\"headerlink\" title=\"其他算法\"></a>其他算法</h2><p><a href=\"https://juejin.cn/post/7095201687421321224#heading-0\" target=\"_blank\" >待爬取</a></p>\n<h3 id=\"diffTwoDeps\"><a href=\"#diffTwoDeps\" class=\"headerlink\" title=\"diffTwoDeps\"></a>diffTwoDeps</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const diffTwoDeps &#x3D; (deps1?: DependencyList, deps2?: DependencyList) &#x3D;&gt; &#123;\n  &#x2F;&#x2F;Let&#39;s do a reference equality check on 2 dependency list.\n  &#x2F;&#x2F;If deps1 is defined, we iterate over deps1 and do comparison on each element with equivalent element from deps2\n  &#x2F;&#x2F;As this func is used only in this hook, we assume 2 deps always have same length.\n  return deps1\n    ? deps1.map((_ele, idx) &#x3D;&gt; (!Object.is(deps1[idx], deps2?.[idx]) ? idx : -1)).filter((ele) &#x3D;&gt; ele &gt;&#x3D; 0)\n    : &#x2F;&#x2F; prettier-ignore\n    deps2 ? deps2.map((_ele, idx) &#x3D;&gt; idx) : [];\n&#125;;</code></pre>\n\n<h3 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is\"></a>Object.is</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (!Object.is) &#123;\n  Object.defineProperty(Object, &#39;is&#39;, &#123;\n    value: function (x, y) &#123;\n      &#x2F;&#x2F; SameValue algorithm\n      if (x &#x3D;&#x3D;&#x3D; y) &#123;\n        &#x2F;&#x2F; return true if x and y are not 0, OR\n        &#x2F;&#x2F; if x and y are both 0 of the same sign.\n        &#x2F;&#x2F; This checks for cases 1 and 2 above.\n        &#x2F;&#x2F; 相等的情况，需要处理正负零\n        return x !&#x3D;&#x3D; 0 || 1 &#x2F; x &#x3D;&#x3D;&#x3D; 1 &#x2F; y;\n      &#125; else &#123;\n        &#x2F;&#x2F; return true if both x AND y evaluate to NaN.\n        &#x2F;&#x2F; The only possibility for a variable to not be strictly equal to itself\n        &#x2F;&#x2F; is when that variable evaluates to NaN (example: Number.NaN, 0&#x2F;0, NaN).\n        &#x2F;&#x2F; This checks for case 3.\n        &#x2F;&#x2F; 不相等，排除NaN\n        return x !&#x3D;&#x3D; x &amp;&amp; y !&#x3D;&#x3D; y;\n      &#125;\n    &#125;,\n  &#125;);\n&#125;\n\n&#x2F;&#x2F;</code></pre>\n\n<h3 id=\"三点是否共线\"><a href=\"#三点是否共线\" class=\"headerlink\" title=\"三点是否共线\"></a>三点是否共线</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 三点是否共线可以通过判断斜率来判断：\n&#x2F;&#x2F; 设有 p1,p2,q三点，判断三点是否共线:\n&#x2F;&#x2F; 公式：\n\n&#x2F;&#x2F; k1 &#x3D; (p2.y - p1.y)&#x2F;(p2.x - p1.x)\n\n&#x2F;&#x2F; k2 &#x3D; (q.y - p1.y)&#x2F;(q.x - p1.x)\n\n&#x2F;&#x2F; 如果k1 &#x3D;&#x3D;&#x3D; k2就表示三点共线\n\nfunction isOnLine(p1, p2, q) &#123;\n  return (p2.y - p1.y) &#x2F; (p2.x - p1.x) &#x3D;&#x3D;&#x3D; (q.y - p1.y) &#x2F; (q.x - p1.x);\n  &#x2F;&#x2F; 如果，指定q是否在线段内部，还需要判断q的范围大小\n&#125;</code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://www.cnblogs.com/pangqianjin/p/14998643.html\" target=\"_blank\" >JavaScript 手写几种常见的排序算法：冒泡、选择、插入、希尔、归并、快排</a></li>\n<li><a href=\"https://blog.csdn.net/qq_44433261/article/details/117235740\" target=\"_blank\" >排序动画</a></li>\n<li><a href=\"https://wenku.baidu.com/view/7f84552a6f85ec3a87c24028915f804d2b16878c.html\" target=\"_blank\" >分治思想——精选推荐</a></li>\n<li><a href=\"https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%B3%95/9763353?fr=aladdin\" target=\"_blank\" >归并排序法 百度百科</a></li>\n<li><a href=\"https://blog.csdn.net/Sherlook_Holmes/article/details/120584469\" target=\"_blank\" >（含动画演示）搞懂归并排序 一学就会</a></li>\n<li><a href=\"https://www.jianshu.com/u/c6ad3f2ed2d6\" target=\"_blank\" >五分钟学算法(PPT 做的 gif)</a></li>\n<li><a href=\"https://wenku.baidu.com/view/8bf2d73451d380eb6294dd88d0d233d4b14e3fef.html\" target=\"_blank\" >Promise.resolve（）详解</a></li>\n<li><a href=\"https://juejin.cn/post/7206912311562174523#heading-79\" target=\"_blank\" >22023 面试真题之手写&amp;代码运行篇</a></li>\n<li><a href=\"/#/post/2023-03-062023js\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-03-062023js</a></li>\n<li><a href=\"/#/post/2023-03-07按位操作\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-03-07 按位操作</a></li>\n<li><a href=\"/#/post/2023-03-09defineProperty\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-03-09defineProperty</a></li>\n</ol>\n","text":"实现单例通过构造函数class Singleton &#123; constructor() &#123; console.log(&#39;this&#39;, this); if (!Singleton.instance) &#123; &#x2F;&#x2F; 将 this...","link":"","photos":[],"count_time":{"symbolsCount":"77k","symbolsTime":"1:10"},"categories":[{"name":"前端基础","slug":"前端基础","count":53,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":55,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B\"><span class=\"toc-text\">实现单例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">通过构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">通过静态方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">字符串相关</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">深度操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#structuredClone\"><span class=\"toc-text\">structuredClone</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86\"><span class=\"toc-text\">深度克隆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">深比较</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E8%8E%B7%E5%8F%96%E5%B7%AE%E5%BC%82%E5%8C%96\"><span class=\"toc-text\">深度获取差异化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">深度拼接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">深度解析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#uuid\"><span class=\"toc-text\">uuid</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%90%8E%E9%98%B2%E6%8A%96\"><span class=\"toc-text\">操作后防抖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%90%8E%E9%98%B2%E6%8A%96\"><span class=\"toc-text\">执行一次后防抖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">节流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">接口数据缓存</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this-%E6%8C%87%E5%90%91\"><span class=\"toc-text\">this 指向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">call</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#apply\"><span class=\"toc-text\">apply</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bind\"><span class=\"toc-text\">bind</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise\"><span class=\"toc-text\">Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99-promise\"><span class=\"toc-text\">手写 promise</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-all\"><span class=\"toc-text\">Promise.all</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-race\"><span class=\"toc-text\">Promise.race</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-allSettle\"><span class=\"toc-text\">Promise.allSettle</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-any\"><span class=\"toc-text\">Promise.any</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-finally\"><span class=\"toc-text\">Promise.finally</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Promise-resolve\"><span class=\"toc-text\">Promise.resolve</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BB%E6%96%AD-resolve-x2F-reject-%E5%90%8E%E9%9D%A2%E4%BB%A3%E7%A0%81%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">阻断 resolve&#x2F;reject 后面代码还会执行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%90%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">限制并发数量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PromiseQueue\"><span class=\"toc-text\">PromiseQueue</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#async-await-%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">async await 原理实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">数组去重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%A5%87%E6%95%B0%E6%8E%92%E5%9C%A8%E5%89%8D%E9%9D%A2%EF%BC%8C%E5%81%B6%E6%95%B0%E6%8E%92%E5%9C%A8%E5%90%8E%E9%9D%A2\"><span class=\"toc-text\">将奇数排在前面，偶数排在后面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数组转树结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9D%80%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\"><span class=\"toc-text\">地址数据处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">如何找到数组中出现次数最多的字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96\"><span class=\"toc-text\">数组扁平化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9A%E5%B1%95%E5%BC%80-N-%E5%B1%82\"><span class=\"toc-text\">指定展开 N 层</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%89%81%E5%B9%B3%E5%8C%96\"><span class=\"toc-text\">对象扁平化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99\"><span class=\"toc-text\">正则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90-URL-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E9%83%A8%E5%88%86\"><span class=\"toc-text\">解析 URL 中所有的部分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%88%92%E7%BA%BF%E8%BD%AC%E5%A4%A7%E5%86%99\"><span class=\"toc-text\">中划线转大写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%91%E9%A2%9D%E5%8D%83%E5%88%86\"><span class=\"toc-text\">金额千分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Intl-NumberFormat\"><span class=\"toc-text\">Intl.NumberFormat</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">原理实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#new\"><span class=\"toc-text\">new</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-create\"><span class=\"toc-text\">Object.create</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#instanceof\"><span class=\"toc-text\">instanceof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSONP\"><span class=\"toc-text\">JSONP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-event-bus\"><span class=\"toc-text\">实现 event bus</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">实现发布订阅</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-defineProperties-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Object.defineProperties 实现原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">柯里化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%AF%E9%87%8C%E5%8C%96%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">柯里化是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">实现柯里化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">洋葱模型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86-x2F-%E5%8A%AB%E6%8C%81\"><span class=\"toc-text\">数据代理&#x2F;劫持</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#proxy\"><span class=\"toc-text\">proxy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#defineProperty\"><span class=\"toc-text\">defineProperty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-x3D-x3D-x3D-1-amp-amp-a-x3D-x3D-x3D-2-amp-amp-a-x3D-x3D-x3D-3-x3D-x3D-x3D-true\"><span class=\"toc-text\">(a &#x3D;&#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D;&#x3D; 3) &#x3D;&#x3D;&#x3D; true</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%90%91-vs-%E5%8F%8C%E5%90%91\"><span class=\"toc-text\">单向 vs 双向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">单链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E3%80%8A%E4%B8%8D%E6%98%AF%E7%8E%AF%E3%80%8B\"><span class=\"toc-text\">双向链表《不是环》</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC\"><span class=\"toc-text\">链表反转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E6%9C%89%E7%8E%AF\"><span class=\"toc-text\">链表有环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%82%B9\"><span class=\"toc-text\">链表中点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">链表中环的入口节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4\"><span class=\"toc-text\">判断链表是否相交</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E5%A0%86\"><span class=\"toc-text\">最小堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%89%93%E5%8D%B0\"><span class=\"toc-text\">堆打印</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">选择排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">插入排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">归并排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">希尔排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">快速排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LRU-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">LRU 算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#leecode\"><span class=\"toc-text\">leecode</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E5%8C%85%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">红包算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">括号匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5\"><span class=\"toc-text\">螺旋矩阵</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0\"><span class=\"toc-text\">大数相加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%87%BA%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D\"><span class=\"toc-text\">找出出现次数最多的英语单词</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E5%80%92%E5%BA%8F%EF%BC%88%E5%B0%86-ul-id-x3D-list%EF%BC%8C%E5%B0%86-ul-%E8%8A%82%E7%82%B9%E4%B8%8B%E7%9A%84-10000-%E4%B8%AA-li-%E8%8A%82%E7%82%B9%E5%80%92%E5%BA%8F%E3%80%82%E8%80%83%E8%99%91%E6%80%A7%E8%83%BD%E3%80%82%EF%BC%89%E3%80%90%E5%BE%85%E5%A4%84%E7%90%86%E3%80%91\"><span class=\"toc-text\">节点倒序（将 ul.id&#x3D;list，将 ul 节点下的 10000 个 li 节点倒序。考虑性能。）【待处理】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97-%E2%80%9C1-12-31-100-93%E2%80%9D%E3%80%90%E5%BE%85%E5%A4%84%E7%90%86%E3%80%91\"><span class=\"toc-text\">实现一个函数计算 “1+12-31+100-93”【待处理】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF\"><span class=\"toc-text\">判断链表是否有环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%88%AC%E6%A5%BC%E6%A2%AF%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%91\"><span class=\"toc-text\">爬楼梯【动态规划】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-amp-%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">什么是时间复杂度&amp;计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6-amp-%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">什么是空间复杂度&amp;计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">删除单向链表中的某个节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%BE%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">数组中找数之和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%E7%9A%84%E4%B8%8B%E6%A0%87\"><span class=\"toc-text\">排序数组中的两个数字之和的下标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E6%89%BE%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">非排序数组找两数之和</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BA-target-%E7%9A%84-3-%E4%B8%AA%E6%95%B0%E5%AD%97%E3%80%90%E9%9A%BE%E6%90%9E%E5%93%A6%E3%80%91\"><span class=\"toc-text\">数组中和为 target 的 3 个数字【难搞哦】</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#N-%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95\"><span class=\"toc-text\">N 进制加法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">只出现一次的数字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E4%BB%85%E5%87%BA%E7%8E%B0-%E4%B8%80%E6%AC%A1-%E5%A4%96%EF%BC%8C%E5%85%B6%E4%BD%99%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%81%B0%E5%87%BA%E7%8E%B0-N-%E6%AC%A1-%E7%9C%8B%E4%B8%8D%E6%87%82\"><span class=\"toc-text\">某个元素仅出现 一次 外，其余每个元素都恰出现 N 次(看不懂)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E4%BB%85%E5%87%BA%E7%8E%B0-%E4%B8%80%E6%AC%A1-%E5%A4%96%EF%BC%8C%E5%85%B6%E4%BD%99%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%81%B0%E5%87%BA%E7%8E%B0-2-%E6%AC%A1%E7%9A%84%E5%8F%A6%E5%A4%96%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\">某个元素仅出现 一次 外，其余每个元素都恰出现 2 次的另外解法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fibonic\"><span class=\"toc-text\">fibonic</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">常规方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">尾调用方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">迭代方式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%B6%E4%B9%98\"><span class=\"toc-text\">阶乘</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%99%AE%E9%80%9A%E9%80%92%E5%BD%92\"><span class=\"toc-text\">普通递归</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E8%B0%83%E7%94%A8%E9%80%92%E5%BD%92\"><span class=\"toc-text\">尾调用递归</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">五分钟学习算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">其他算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#diffTwoDeps\"><span class=\"toc-text\">diffTwoDeps</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-is\"><span class=\"toc-text\">Object.is</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%82%B9%E6%98%AF%E5%90%A6%E5%85%B1%E7%BA%BF\"><span class=\"toc-text\">三点是否共线</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"企业微信文件预览","uid":"74208bc76768a419347d0ad3e15c33b0","slug":"2022-07-05wxfile","date":"2022-07-05T15:16:30.000Z","updated":"2022-09-16T13:54:56.210Z","comments":true,"path":"api/articles/2022-07-05wxfile.json","keywords":null,"cover":[],"text":"企业微信文件预览试错 1: const fileName &#x3D; &quot;xxxxx.jpeg&quot;; &#x2F;&#x2F; 举个例子 downloadAttachment(downloadUrl).then((res) &#x3D;&gt; &#123; v...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"企业微信","slug":"企业微信","count":5,"path":"api/categories/企业微信.json"}],"tags":[{"name":"企业微信","slug":"企业微信","count":5,"path":"api/tags/企业微信.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"授权与校验场景「简聊」","uid":"22d71efeaa5b73e832334cf42551f026","slug":"2022-07-01auth","date":"2022-07-01T09:12:26.000Z","updated":"2022-09-16T13:54:56.205Z","comments":true,"path":"api/articles/2022-07-01auth.json","keywords":null,"cover":null,"text":"最简单用变量，模拟数据 session + cookie每个用户对应一个会话 SSO 1 session + redis + cookie 觉得有点奇葩，第二份核心项目遇到 jwt + redis第二份非核心项目遇到 以下是一般公司常用的方式，面试的时候，大家都在唠这个 SSO ...","link":"","photos":[],"count_time":{"symbolsCount":914,"symbolsTime":"1 mins."},"categories":[{"name":"auth","slug":"auth","count":1,"path":"api/categories/auth.json"}],"tags":[{"name":"auth","slug":"auth","count":1,"path":"api/tags/auth.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}