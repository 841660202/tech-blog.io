{"title":"golang 的一些疑问","uid":"5c7c230f682d9d5e4199756d8ecfb6e2","slug":"2023-05-04go","date":"2023-05-04T01:30:35.000Z","updated":"2023-05-15T13:17:32.999Z","comments":true,"path":"api/articles/2023-05-04go.json","keywords":null,"cover":[],"content":"<img src=\"http://t-blog-images.aijs.top/img/202304241057941.webp\" style=\"width:500px;max-width:100%\"/>\n\n<h2 id=\"引用类型和值类型\"><a href=\"#引用类型和值类型\" class=\"headerlink\" title=\"引用类型和值类型\"></a>引用类型和值类型</h2><ol>\n<li>Go 中严格区分引用类型和值类型</li>\n</ol>\n<h2 id=\"golang-append\"><a href=\"#golang-append\" class=\"headerlink\" title=\"golang append\"></a>golang append</h2><p><code>append</code> 是 Go 语言中的内置函数，用于向切片中追加元素。其语法为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">append(slice []Type, elems ...Type) []Type</code></pre>\n\n<p>其中，<code>slice</code> 是要追加元素的切片，<code>elems</code> 是要追加的元素，可以是单个元素或一个切片。<code>append</code> 函数会返回一个新的切片，其中包含了原有的元素以及追加的元素。</p>\n<p>如果追加的元素的数量超过了切片的容量，那么 <code>append</code> 函数会重新分配内存，并将原有的元素复制到新的内存中。在重新分配内存后，原有的切片仍然指向旧的内存，而新的切片指向新的内存。</p>\n<p><code>append</code> 函数的返回值是一个新的切片，因此，你需要使用新的变量来存储它。例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 定义一个切片\nslice :&#x3D; []int&#123;1, 2, 3&#125;\n\n&#x2F;&#x2F; 追加元素\nslice &#x3D; append(slice, 4, 5)\n\n&#x2F;&#x2F; 输出新的切片\nfmt.Println(slice) &#x2F;&#x2F; [1 2 3 4 5]</code></pre>\n\n<p>在上面的例子中，我们首先定义了一个包含三个元素的切片，然后使用 <code>append</code> 函数向其中追加两个元素，并将新的切片赋值给原来的变量。最后，我们输出了新的切片，其中包含了原有的元素以及追加的元素。</p>\n<h3 id=\"上述内容中原-slice-会被怎么处理，会不会被垃圾回收\"><a href=\"#上述内容中原-slice-会被怎么处理，会不会被垃圾回收\" class=\"headerlink\" title=\"上述内容中原 slice 会被怎么处理，会不会被垃圾回收\"></a>上述内容中原 slice 会被怎么处理，会不会被垃圾回收</h3><p>在 Go 中，如果 <code>append</code> 函数追加元素后，超出了原有切片的容量，那么 <code>append</code> 函数会重新分配内存，并将原有的元素复制到新的内存中。此时，原有的切片仍然指向旧的内存，而新的切片指向新的内存。</p>\n<p>如果原有的切片不再被使用，那么它会被垃圾回收。垃圾回收器会自动识别不再使用的对象，并将它们从内存中删除。</p>\n<p>需要注意的是，如果原有的切片仍然被其它变量所引用，那么它不会被垃圾回收。只有在所有引用它的变量都被销毁后，垃圾回收器才会将其回收。</p>\n<p>因此，在使用 <code>append</code> 函数时，我们需要注意内存的使用情况，避免产生不必要的内存分配和泄漏。在需要追加元素时，最好提前分配足够的容量，避免频繁的内存分配。同时，当不再需要使用一个切片时，最好将其置为 <code>nil</code>，以便垃圾回收器能够及时回收它所占用的内存。</p>\n<h3 id=\"分析下-append-的源码\"><a href=\"#分析下-append-的源码\" class=\"headerlink\" title=\"分析下 append 的源码\"></a>分析下 append 的源码</h3><p><code>append</code> 是 Go 语言内置函数之一，用于向切片中追加元素。下面是 <code>append</code> 函数的源码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func append(slice []Type, elems ...Type) []Type &#123;\n    &#x2F;&#x2F; 获取切片的容量和长度\n    var (\n        s &#x3D; len(slice)\n        c &#x3D; cap(slice)\n    )\n    &#x2F;&#x2F; 如果追加的元素个数超过了剩余的容量，需要重新分配内存\n    if s+len(elems) &gt; c &#123;\n        &#x2F;&#x2F; 分配新的切片，容量为原切片长度的两倍或者追加元素后的长度，取最大值\n        newCap :&#x3D; max(2*c, s+len(elems))\n        newSlice :&#x3D; makeSlice(len(slice), newCap)\n        &#x2F;&#x2F; 复制原有的元素到新的切片中\n        copy(newSlice, slice)\n        &#x2F;&#x2F; 将新的切片赋值给原变量，以实现扩容\n        slice &#x3D; newSlice\n    &#125;\n    &#x2F;&#x2F; 将新的元素追加到切片中\n    slice &#x3D; slice[:s+len(elems)]\n    for i, x :&#x3D; range elems &#123;\n        slice[s+i] &#x3D; x\n    &#125;\n    return slice\n&#125;\n\nfunc max(x, y int) int &#123;\n    if x &gt; y &#123;\n        return x\n    &#125;\n    return y\n&#125;\n\nfunc makeSlice(oldLen, newCap int) []Type &#123;\n    &#x2F;&#x2F; 分配新的内存\n    newPtr :&#x3D; mallocgc(newCap * sizeof(Type), nil, false)\n    &#x2F;&#x2F; 将原有的元素复制到新的内存中\n    if raceenabled || msanenabled &#123;\n        &#x2F;&#x2F; 开启竞态检测和内存检测\n        typ :&#x3D; sliceType(Type&#123;&#125;)\n        oldPtr :&#x3D; mallocgc(oldLen*int(typ.size), typ, false)\n        memmove(newPtr, oldPtr, uintptr(oldLen)*typ.size)\n        if raceenabled &#123;\n            racewriterangepc(unsafe.Pointer(newPtr), uintptr(oldLen)*typ.size, getcallerpc(), funcPC(append))\n        &#125;\n        if msanenabled &#123;\n            msanwrite(unsafe.Pointer(newPtr), uintptr(oldLen)*typ.size)\n        &#125;\n        typedmemmove(typ, newPtr, unsafe.Pointer(&amp;oldLen), unsafe.Pointer(&amp;newCap))\n        return *(*[]Type)(unsafe.Pointer(&amp;SliceHeader&#123;\n            Data: newPtr,\n            Len:  oldLen,\n            Cap:  newCap,\n        &#125;))\n    &#125;\n    &#x2F;&#x2F; 普通情况下，直接复制元素到新的内存中\n    typ :&#x3D; sliceType(Type&#123;&#125;)\n    newSlice :&#x3D; *(*[]Type)(unsafe.Pointer(&amp;SliceHeader&#123;\n        Data: newPtr,\n        Len:  oldLen,\n        Cap:  newCap,\n    &#125;))\n    if needmem(typ) &#123;\n        &#x2F;&#x2F; 需要进行类型转换\n        for i :&#x3D; range newSlice &#123;\n            typedmemmove(typ, unsafe.Pointer(&amp;newSlice[i]), unsafe.Pointer(&amp;slice[i]), nil)\n        &#125;\n    &#125; else &#123;\n        &#x2F;&#x2F; 直接复制元素\n        memmove(newPtr, data(slice), uintptr(len(slice))*typ.size)\n    &#125;\n    return newSlice\n&#125;\n\nfunc data(slice []Type) unsafe.Pointer &#123;\n    return unsafe.Pointer(&amp;slice[0])\n&#125;\n</code></pre>\n\n<p><code>append</code> 函数的实现比较复杂，主要分为以下几个步骤：</p>\n<ol>\n<li><p>获取切片的长度和容量。</p>\n<p>在函数一开始，通过 <code>len</code> 和 <code>cap</code> 内置函数获取原始切片的长度和容量。</p>\n</li>\n<li><p>判断是否需要扩容。</p>\n<p>如果新的元素个数超过了原切片的剩余容量，则需要扩容。这时会重新分配一个新的切片，容量为原切片长度的两倍或者追加元素后的长度，取两者中的最大值。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">if s+len(elems) &gt; c &#123;\n    &#x2F;&#x2F; 分配新的切片，容量为原切片长度的两倍或者追加元素后的长度，取最大值\n    newCap :&#x3D; max(2*c, s+len(elems))\n    newSlice :&#x3D; makeSlice(len(slice), newCap)\n    &#x2F;&#x2F; 复制原有的元素到新的切片中\n    copy(newSlice, slice)\n    &#x2F;&#x2F; 将新的切片赋值给原变量，以实现扩容\n    slice &#x3D; newSlice\n&#125;</code></pre>\n\n<p>这里调用了 <code>max</code> 函数，用于计算新的容量。然后调用 <code>makeSlice</code> 函数分配新的内存，并将原有元素复制到新的切片中，最后将新的切片赋值给原变量。</p>\n</li>\n<li><p>追加新的元素。</p>\n<p>在新的容量可以满足追加元素的情况下，就可以将新的元素直接追加到切片的尾部。这里使用了 <code>slice</code> 切片的切片操作，将 <code>slice</code> 的长度扩展到 <code>s+len(elems)</code>，然后使用 <code>for</code> 循环将新的元素一个一个追加到切片的尾部。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 将新的元素追加到切片中\nslice &#x3D; slice[:s+len(elems)]\nfor i, x :&#x3D; range elems &#123;\n    slice[s+i] &#x3D; x\n&#125;</code></pre>\n</li>\n<li><p>返回新的切片。</p>\n<p>最后返回的是新的切片，其中包含了追加的新元素。</p>\n</li>\n</ol>\n<p>关于内存分配和释放的问题，Go 语言使用了垃圾回收器来自动管理内存，因此在 <code>append</code> 函数中不需要手动释放旧的切片内存空间。当旧的切片被扩容时，Go 语言的垃圾回收器会自动回收旧的内存空间。</p>\n<h3 id=\"上述源码中为什么要-开启竞态检测和内存检测\"><a href=\"#上述源码中为什么要-开启竞态检测和内存检测\" class=\"headerlink\" title=\"上述源码中为什么要 开启竞态检测和内存检测\"></a>上述源码中为什么要 开启竞态检测和内存检测</h3><p>在 <code>append</code> 函数中，开启了竞态检测和内存检测，是因为这两种检测可以帮助我们在编写程序时发现一些潜在的错误和问题，从而提高程序的健壮性和可靠性。</p>\n<p>竞态检测（Race Detector）是 Go 语言内置的一个工具，它可以用于检测多个 goroutine 之间的竞态条件，比如数据竞态、锁竞争等问题。在 <code>append</code> 函数中，可能存在多个 goroutine 对同一个切片进行并发的追加操作，这时如果不进行竞态检测，就有可能出现数据竞态等问题，导致程序出错或者崩溃。</p>\n<p>内存检测（Memory Sanitizer）是 GCC、Clang 等编译器中的一个功能，它可以用于检测程序中的内存访问越界、未初始化内存、使用已释放内存等问题。在 <code>append</code> 函数中，如果没有开启内存检测，就可能出现一些内存访问越界等问题，导致程序出错或者崩溃。</p>\n<p>因此，在开发过程中，开启竞态检测和内存检测可以帮助我们及时发现这些问题，从而及时修复，提高程序的稳定性和可靠性。当然，开启这些检测也会带来一些性能上的损失，因此在生产环境中一般不会开启这些检测。</p>\n<h2 id=\"零值和空值\"><a href=\"#零值和空值\" class=\"headerlink\" title=\"零值和空值\"></a>零值和空值</h2><p>在 Golang 的 Gin 框架中，可以使用以下方法来处理零值和空值：</p>\n<ol>\n<li>使用指针类型表示空值：在 Go 中，指针类型的零值为 <code>nil</code>，可以用来表示空值。因此，可以将某些变量定义为指针类型，并在需要表示空值的地方将其赋值为 <code>nil</code>。例如：</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var myString *string\n\n&#x2F;&#x2F; 将 myString 赋值为 nil，表示为空值\nmyString &#x3D; nil\n\n&#x2F;&#x2F; 在路由处理函数中检查 myString 是否为空值\nif myString &#x3D;&#x3D; nil &#123;\n    &#x2F;&#x2F; 处理空值的情况\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>使用零值表示默认值：在 Go 中，基本数据类型的零值是其对应类型的默认值，可以用来表示零值。例如，整数类型的零值为 <code>0</code>，布尔类型的零值为 <code>false</code>。可以在定义变量时直接赋值为零值，表示默认值。例如：</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var myInt int\n\n&#x2F;&#x2F; 将 myInt 赋值为 0，表示为零值\nmyInt &#x3D; 0\n\n&#x2F;&#x2F; 在路由处理函数中检查 myInt 是否为零值\nif myInt &#x3D;&#x3D; 0 &#123;\n    &#x2F;&#x2F; 处理零值的情况\n&#125;</code></pre>\n\n<ol start=\"3\">\n<li>使用空字符串表示空值：在 Go 中，空字符串 <code>&quot;&quot;</code> 可以用来表示空值。可以将某些字符串类型的变量初始化为空字符串，表示为空值。例如：</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var myString string\n\n&#x2F;&#x2F; 将 myString 赋值为空字符串，表示为空值\nmyString &#x3D; &quot;&quot;\n\n&#x2F;&#x2F; 在路由处理函数中检查 myString 是否为空值\nif myString &#x3D;&#x3D; &quot;&quot; &#123;\n    &#x2F;&#x2F; 处理空值的情况\n&#125;</code></pre>\n\n<p>需要注意的是，处理零值和空值时，应根据具体的业务逻辑和需求进行判断和处理。以上只是一些示例方法，实际使用时应根据实际情况选择合适的方式。同时，在处理请求参数时，应注意对参数进行合法性校验，以确保代码的健壮性和安全性。</p>\n<h3 id=\"gin-在接收-put-请求时候如何区分-空置和零值\"><a href=\"#gin-在接收-put-请求时候如何区分-空置和零值\" class=\"headerlink\" title=\"gin 在接收 put 请求时候如何区分 空置和零值\"></a>gin 在接收 put 请求时候如何区分 空置和零值</h3><p>在 Golang 的 Gin 框架中，接收 PUT 请求时，如果需要区分空置和零值，可以通过以下方法来实现：</p>\n<ol>\n<li>使用指针类型表示空值：将需要接收的字段定义为指针类型，例如 <code>*string</code>、<code>*int</code> 等。如果请求体中的字段值为空置，则对应的指针将为 <code>nil</code>，如果请求体中的字段值为零值，则对应的指针将为指向零值的指针。例如：</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type MyData struct &#123;\n    MyString *string &#96;json:&quot;my_string&quot;&#96;\n    MyInt    *int    &#96;json:&quot;my_int&quot;&#96;\n&#125;</code></pre>\n\n<p>在路由处理函数中使用 <code>c.ShouldBindJSON()</code> 方法将请求体中的 JSON 数据绑定到 <code>MyData</code> 结构体中，然后可以通过判断指针是否为 <code>nil</code> 或指向零值来区分空置和零值的情况。例如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func UpdateData(c *gin.Context) &#123;\n    var data MyData\n    if err :&#x3D; c.ShouldBindJSON(&amp;data); err !&#x3D; nil &#123;\n        &#x2F;&#x2F; 处理绑定错误\n        c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n        return\n    &#125;\n\n    &#x2F;&#x2F; 判断字段是否为空置\n    if data.MyString &#x3D;&#x3D; nil &#123;\n        &#x2F;&#x2F; 处理空置的情况\n    &#125; else if *data.MyString &#x3D;&#x3D; &quot;&quot; &#123;\n        &#x2F;&#x2F; 处理空字符串的情况\n    &#125;\n\n    &#x2F;&#x2F; 判断字段是否为零值\n    if data.MyInt &#x3D;&#x3D; nil &#123;\n        &#x2F;&#x2F; 处理空置的情况\n    &#125; else if *data.MyInt &#x3D;&#x3D; 0 &#123;\n        &#x2F;&#x2F; 处理零值的情况\n    &#125;\n\n    &#x2F;&#x2F; 处理其他情况\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>使用自定义类型并实现 <code>UnmarshalJSON()</code> 方法：可以自定义一个类型，并为其实现 <code>UnmarshalJSON()</code> 方法，在该方法中判断空置和零值的情况。例如：</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type MyString string\n\nfunc (s *MyString) UnmarshalJSON(data []byte) error &#123;\n    if len(data) &#x3D;&#x3D; 0 || string(data) &#x3D;&#x3D; &#96;&quot;&quot;&#96; &#123;\n        &#x2F;&#x2F; 处理空置的情况\n        *s &#x3D; MyString(&quot;&quot;)\n    &#125; else &#123;\n        &#x2F;&#x2F; 处理其他情况\n        var str string\n        if err :&#x3D; json.Unmarshal(data, &amp;str); err !&#x3D; nil &#123;\n            return err\n        &#125;\n        *s &#x3D; MyString(str)\n    &#125;\n    return nil\n&#125;</code></pre>\n\n<p>在路由处理函数中使用 <code>c.ShouldBindJSON()</code> 方法将请求体中的 JSON 数据绑定到结构体中，其中的自定义类型字段会自动调用 <code>UnmarshalJSON()</code> 方法进行解析，从而可以在其中处理空置和零值的情况。</p>\n<p>需要注意的是，以上只是一些示例方法，实际使用时应根据实际情况选择合适的方式，并根据业务逻辑和需求进行判断和处理。同时，在处理 PUT 请求时，应注意对请求体数据进行合法性校验，以确保代码的健壮性和安全性。</p>\n<h3 id=\"gin-中使用-UnmarshalJSON-处理-put-请求中对象某些字段零值和空置的完整代码例子\"><a href=\"#gin-中使用-UnmarshalJSON-处理-put-请求中对象某些字段零值和空置的完整代码例子\" class=\"headerlink\" title=\"gin 中使用 UnmarshalJSON 处理 put 请求中对象某些字段零值和空置的完整代码例子\"></a>gin 中使用 UnmarshalJSON 处理 put 请求中对象某些字段零值和空置的完整代码例子</h3><p>以下是一个使用 Gin 框架并结合 <code>UnmarshalJSON</code> 方法处理 PUT 请求中对象某些字段零值和空置的完整代码示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;net&#x2F;http&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype MyData struct &#123;\n\tMyString *string &#96;json:&quot;my_string&quot;&#96;\n\tMyInt    *int    &#96;json:&quot;my_int&quot;&#96;\n&#125;\n\nfunc (d *MyData) UnmarshalJSON(b []byte) error &#123;\n\tvar temp struct &#123;\n\t\tMyString *string &#96;json:&quot;my_string&quot;&#96;\n\t\tMyInt    *int    &#96;json:&quot;my_int&quot;&#96;\n\t&#125;\n\n\tif err :&#x3D; json.Unmarshal(b, &amp;temp); err !&#x3D; nil &#123;\n\t\treturn err\n\t&#125;\n\n\tif temp.MyString !&#x3D; nil &amp;&amp; *temp.MyString &#x3D;&#x3D; &quot;&quot; &#123;\n\t\td.MyString &#x3D; nil &#x2F;&#x2F; 处理空字符串的情况，设置为 nil\n\t&#125; else &#123;\n\t\td.MyString &#x3D; temp.MyString\n\t&#125;\n\n\tif temp.MyInt !&#x3D; nil &amp;&amp; *temp.MyInt &#x3D;&#x3D; 0 &#123;\n\t\td.MyInt &#x3D; nil &#x2F;&#x2F; 处理零值的情况，设置为 nil\n\t&#125; else &#123;\n\t\td.MyInt &#x3D; temp.MyInt\n\t&#125;\n\n\treturn nil\n&#125;\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\tr.PUT(&quot;&#x2F;data&quot;, UpdateData)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;\n\nfunc UpdateData(c *gin.Context) &#123;\n\tvar data MyData\n\tif err :&#x3D; c.ShouldBindJSON(&amp;data); err !&#x3D; nil &#123;\n\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\treturn\n\t&#125;\n\n\tif data.MyString &#x3D;&#x3D; nil &#123;\n\t\tfmt.Println(&quot;MyString is empty or not provided&quot;)\n\t&#125; else &#123;\n\t\tfmt.Println(&quot;MyString:&quot;, *data.MyString)\n\t&#125;\n\n\tif data.MyInt &#x3D;&#x3D; nil &#123;\n\t\tfmt.Println(&quot;MyInt is empty or not provided&quot;)\n\t&#125; else &#123;\n\t\tfmt.Println(&quot;MyInt:&quot;, *data.MyInt)\n\t&#125;\n\n\t&#x2F;&#x2F; 处理其他情况\n\t&#x2F;&#x2F; ...\n\n\tc.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;Data updated successfully&quot;&#125;)\n&#125;</code></pre>\n\n<p>在这个示例中，通过自定义的 <code>UnmarshalJSON</code> 方法对 <code>MyString</code> 和 <code>MyInt</code> 进行了处理，可以正确处理 PUT 请求中的零值和空置的情况，并根据业务逻辑进行相应的处理。通过使用这种方式，可以在 Gin 框架中轻松地处理 PUT 请求中对象某些字段的零值和空置，并进行相应的处理。</p>\n<h3 id=\"更好的例子\"><a href=\"#更好的例子\" class=\"headerlink\" title=\"更好的例子\"></a>更好的例子</h3><p>抱歉，之前的例子可能并不是最佳实践。在处理 PUT 请求中对象某些字段零值和空置的情况时，通常可以直接使用 <code>omitempty</code> 标签来简化处理逻辑。以下是一个更为简洁的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;net&#x2F;http&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype MyData struct &#123;\n\tMyString string  &#96;json:&quot;my_string,omitempty&quot;&#96;\n\tMyInt    int     &#96;json:&quot;my_int,omitempty&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\tr.PUT(&quot;&#x2F;data&quot;, UpdateData)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;\n\nfunc UpdateData(c *gin.Context) &#123;\n\tvar data MyData\n\tif err :&#x3D; c.ShouldBindJSON(&amp;data); err !&#x3D; nil &#123;\n\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\treturn\n\t&#125;\n\n\tfmt.Println(&quot;MyString:&quot;, data.MyString)\n\tfmt.Println(&quot;MyInt:&quot;, data.MyInt)\n\n\t&#x2F;&#x2F; 处理其他情况\n\t&#x2F;&#x2F; ...\n\n\tc.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;Data updated successfully&quot;&#125;)\n&#125;</code></pre>\n\n<p>在这个示例中，使用了 <code>omitempty</code> 标签在结构体字段中，它的作用是在序列化时忽略零值和空置字段，从而避免了使用 <code>UnmarshalJSON</code> 方法来处理零值和空置的复杂逻辑。在处理 PUT 请求时，如果请求中未包含某些字段，那么这些字段会被置为其类型的零值，从而方便地处理了零值和空置的情况。这种方式更加简洁、直观，并且符合 Go 语言的最佳实践。</p>\n<h3 id=\"这个事例的请求输入输出的结果\"><a href=\"#这个事例的请求输入输出的结果\" class=\"headerlink\" title=\"这个事例的请求输入输出的结果\"></a>这个事例的请求输入输出的结果</h3><p>假设使用以下请求体作为 PUT 请求的输入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n\t&quot;my_string&quot;: &quot;&quot;,\n\t&quot;my_int&quot;: 0\n&#125;</code></pre>\n\n<p>则上述示例代码的输出结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyString:\nMyInt: 0</code></pre>\n\n<p>可以看到，请求体中的空字符串 <code>&quot;&quot;</code> 会被解析为空字符串 <code>&quot;&quot;</code>，而请求体中的零值 <code>0</code> 会被解析为整型字段的零值 <code>0</code>。这是因为在结构体字段中使用了 <code>omitempty</code> 标签，使得零值和空置字段在序列化时被忽略，因此在处理 PUT 请求时，字段的零值和空置会被正确地反映到结构体中，从而可以根据业务逻辑进行相应的处理。</p>\n<h3 id=\"没传-my-string-字段的情况，输入输出\"><a href=\"#没传-my-string-字段的情况，输入输出\" class=\"headerlink\" title=\"没传 my_string 字段的情况，输入输出\"></a>没传 my_string 字段的情况，输入输出</h3><p>如果 PUT 请求的输入没有包含 <code>my_string</code> 字段，那么示例代码的输出结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyString:\nMyInt: 0</code></pre>\n\n<p>可以看到，<code>my_string</code> 字段被解析为空字符串 <code>&quot;&quot;</code>，因为在请求中并没有提供该字段的值。而 <code>my_int</code> 字段被解析为整型字段的零值 <code>0</code>，因为在请求中未指定该字段的值。这是因为在结构体字段中使用了 <code>omitempty</code> 标签，使得零值和空置字段在序列化时被忽略，从而在处理 PUT 请求时，字段的零值和空置会被正确地反映到结构体中，方便进行后续的业务逻辑处理。</p>\n<h3 id=\"这样就区分不了-my-string-是不是真正的空字符串\"><a href=\"#这样就区分不了-my-string-是不是真正的空字符串\" class=\"headerlink\" title=\"这样就区分不了 my_string 是不是真正的空字符串\"></a>这样就区分不了 my_string 是不是真正的空字符串</h3><p>您是对的，如果请求中传递了空字符串 <code>&quot;&quot;</code>，而不是完全省略了 <code>my_string</code> 字段，那么在使用 <code>omitempty</code> 标签的情况下，无法区分字段的零值和空字符串。</p>\n<p>如果需要明确区分字段的零值和空字符串，在处理 PUT 请求时，可以通过在结构体中使用指针类型来实现，示例如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;net&#x2F;http&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype MyData struct &#123;\n\tMyString *string &#96;json:&quot;my_string,omitempty&quot;&#96;\n\tMyInt    int     &#96;json:&quot;my_int,omitempty&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\tr.PUT(&quot;&#x2F;data&quot;, UpdateData)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;\n\nfunc UpdateData(c *gin.Context) &#123;\n\tvar data MyData\n\tif err :&#x3D; c.ShouldBindJSON(&amp;data); err !&#x3D; nil &#123;\n\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\treturn\n\t&#125;\n\n\tif data.MyString !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;MyString:&quot;, *data.MyString)\n\t&#125; else &#123;\n\t\tfmt.Println(&quot;MyString: nil&quot;)\n\t&#125;\n\tfmt.Println(&quot;MyInt:&quot;, data.MyInt)\n\n\t&#x2F;&#x2F; 处理其他情况\n\t&#x2F;&#x2F; ...\n\n\tc.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;Data updated successfully&quot;&#125;)\n&#125;</code></pre>\n\n<p>在这个示例中，<code>MyString</code> 字段的类型更改为 <code>*string</code>，即指针类型，这样当请求中包含空字符串 <code>&quot;&quot;</code> 时，<code>MyString</code> 字段的值将被设置为指向一个空字符串的指针，而不是直接设置为空字符串 <code>&quot;&quot;</code>。这样在处理 PUT 请求时，就可以通过检查指针是否为 <code>nil</code> 来区分字段的零值和空字符串。需要注意的是，在使用指针类型时，需要额外处理指针的空值和解引用操作，以避免空指针引发的错误。</p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><ol>\n<li>嵌套</li>\n<li>继承</li>\n</ol>\n<p><a href=\"https://juejin.cn/post/6969574358142418975#heading-1\" target=\"_blank\" >见</a></p>\n<h3 id=\"golang-结构体继承\"><a href=\"#golang-结构体继承\" class=\"headerlink\" title=\"golang 结构体继承\"></a>golang 结构体继承</h3><p>在 Go 中，结构体（struct）是一种复合数据类型，用于存储一组相关的字段。但是，Go 不支持传统的面向对象编程中的类继承。Go 语言使用组合（Composition）而不是继承（Inheritance）来实现代码的复用。</p>\n<p>组合（Composition）是指在一个结构体中嵌套其他结构体，从而实现结构体之间的组合关系。被嵌套的结构体可以获得嵌套结构体的字段和方法，从而实现代码的复用。</p>\n<p>下面是一个简单的示例，展示了在 Go 中如何使用结构体组合来实现类似继承的效果：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 父结构体\ntype Person struct &#123;\n\tName string\n\tAge  int\n&#125;\n\n&#x2F;&#x2F; 子结构体，嵌套了父结构体\ntype Employee struct &#123;\n\tPerson   &#x2F;&#x2F; 嵌套 Person 结构体\n\tJobTitle string\n\tSalary   float64\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 创建一个 Employee 实例\n\temp :&#x3D; Employee&#123;\n\t\tPerson: Person&#123;\n\t\t\tName: &quot;John&quot;,\n\t\t\tAge:  30,\n\t\t&#125;,\n\t\tJobTitle: &quot;Software Engineer&quot;,\n\t\tSalary:   5000.0,\n\t&#125;\n\n\t&#x2F;&#x2F; 访问 Employee 的字段\n\tfmt.Println(&quot;Name:&quot;, emp.Name)\n\tfmt.Println(&quot;Age:&quot;, emp.Age)\n\tfmt.Println(&quot;Job Title:&quot;, emp.JobTitle)\n\tfmt.Println(&quot;Salary:&quot;, emp.Salary)\n&#125;</code></pre>\n\n<p>在上面的示例中，<code>Person</code> 结构体被嵌套到 <code>Employee</code> 结构体中，从而实现了类似继承的效果。<code>Employee</code> 结构体可以访问 <code>Person</code> 结构体的字段 <code>Name</code> 和 <code>Age</code>，并且可以定义自己的字段和方法。</p>\n<p>需要注意的是，在使用结构体组合时，如果嵌套的结构体中存在字段或方法与外层结构体中的字段或方法同名，那么在访问这个字段或方法时，需要使用完整的字段或方法名称，包括结构体名称。例如，在上面的示例中，如果 <code>Employee</code> 结构体中也定义了 <code>Name</code> 字段，那么在访问 <code>Person</code> 结构体的 <code>Name</code> 字段时，应该使用 <code>emp.Person.Name</code>。</p>\n<h2 id=\"区分大小写\"><a href=\"#区分大小写\" class=\"headerlink\" title=\"区分大小写\"></a>区分大小写</h2><ol>\n<li>首字母大写的方法可以被引用</li>\n<li>首字母大写的结构体可以被引用</li>\n<li>首字母大写的键可以被转化</li>\n</ol>\n<h2 id=\"打印日志\"><a href=\"#打印日志\" class=\"headerlink\" title=\"打印日志\"></a>打印日志</h2><p><a href=\"https://www.liwenzhou.com/posts/Go/fmt/\">https://www.liwenzhou.com/posts/Go/fmt/</a></p>\n<h2 id=\"方法-中-值-vs-指针\"><a href=\"#方法-中-值-vs-指针\" class=\"headerlink\" title=\"方法 中 值 vs 指针\"></a>方法 中 值 vs 指针</h2><p>区别在于：</p>\n<ol>\n<li>值方法：可通过指针和值调用，</li>\n<li>指针方法：只能通过指针来调用。</li>\n</ol>\n<p><strong>为什么会有这条规则？</strong></p>\n<ol>\n<li>因为指针方法可以修改接收者；通过值调用它们会导致方法接收到该值的副本， 因此任何修改都将被丢弃，因此该语言不允许这种错误。</li>\n<li>若该值是可寻址的， 那么该语言就会自动插入取址操作符来对付一般的通过值调用的指针方法</li>\n</ol>\n<p>如：变量 b 是可寻址的，因此我们只需通过 b.Write 来调用它的 Write 方法，编译器会将它重写为 (&amp;b).Write</p>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p><strong>结构体数据-&gt; string</strong></p>\n<ol>\n<li>大写被转化，小写不被转化</li>\n<li>有标签的用标签，无标签的，用 key 名字</li>\n<li>Channel， complex 以及函数不能被编码 json 字符串, 循环的数据结构也不行，它会导致 marshal 陷入死循环</li>\n<li>有时为了通用性，或使代码简洁，我们希望有一种类型<strong>可以接受各种类型</strong>的数据，并进行 json 编码。这就用到了 interface{}类型</li>\n</ol>\n<p><strong>json 字符串解析</strong></p>\n<ol>\n<li>json 字符串解析时，需要一个“接收体”接受解析后的数据，且 Unmarshal 时接收体必须传递指针。否则解析虽不报错，但数据无法赋值到接受体中。如这里用的是 StuRead{}接收。</li>\n<li>解析时，接收体可自行定义。json 串中的 key 自动在接收体中寻找匹配的项进行赋值。匹配规则是：<ol>\n<li>先查找与 key 一样的 json 标签，找到则赋值给该标签对应的变量(如 Name)。</li>\n<li>没有 json 标签的，就从上往下依次查找变量名与 key 一样的变量，如 Age。或者变量名忽略大小写后与 key 一样的变量。如 HIgh，Class。第一个匹配的就赋值，后面就算有匹配的也忽略。</li>\n<li>(前提是该变量必需是可导出的，即首字母大写)。</li>\n<li>不可导出的变量无法被解析（如 sex 变量，虽然 json 串中有 key 为 sex 的 k-v，解析后其值仍为 nil,即空值）</li>\n<li>当接收体中存在 json 串中匹配不了的项时，解析会自动忽略该项，该项仍保留原值。如变量 Test，保留空值 nil。</li>\n</ol>\n</li>\n<li>你一定会发现，变量 Class 貌似没有解析为我们期待样子。<ol>\n<li>因为此时的 Class 是个 interface{}类型的变量，而 json 串中 key 为 CLASS 的 value 是个复合结构，不是可以直接解析的简单类型数据（如“张三”，18，true 等）。</li>\n<li>所以解析时，由于没有指定变量 Class 的具体类型，json 自动将 value 为复合结构的数据解析为 <code>map[string]interface&#123;&#125;</code>类型的项。</li>\n<li>也就是说，此时的 struct Class 对象与 StuRead 中的 Class 变量没有半毛钱关系，故与这次的 json 解析没有半毛钱关系。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"golang-json-API\"><a href=\"#golang-json-API\" class=\"headerlink\" title=\"golang json API\"></a>golang json API</h3><p>在 Go 语言中，处理 JSON 数据有丰富的标准库（<code>encoding/json</code>）提供的 API。以下是一些常用的 JSON 相关的 API：</p>\n<ol>\n<li><p><code>json.Marshal(v interface&#123;&#125;) ([]byte, error)</code>: 用于将 Go 数据结构转换为 JSON 字节切片。<code>v</code> 参数是要转换的 Go 数据结构，返回值是 JSON 格式的字节切片和可能出现的错误。</p>\n</li>\n<li><p><code>json.Unmarshal(data []byte, v interface&#123;&#125;) error</code>: 用于将 JSON 字节切片解析为 Go 数据结构。<code>data</code> 参数是要解析的 JSON 字节切片，<code>v</code> 参数是目标 Go 数据结构的指针，用于存储解析结果。返回值是可能出现的错误。</p>\n</li>\n<li><p><code>json.NewEncoder(w io.Writer) *json.Encoder</code>: 提供一个用于将 Go 数据结构编码为 JSON 格式并写入 <code>io.Writer</code> 接口的编码器。<code>w</code> 参数是用于写入 JSON 数据的 <code>io.Writer</code> 实例。</p>\n</li>\n<li><p><code>json.NewDecoder(r io.Reader) *json.Decoder</code>: 提供一个用于从 <code>io.Reader</code> 接口读取 JSON 数据并解码为 Go 数据结构的解码器。<code>r</code> 参数是用于读取 JSON 数据的 <code>io.Reader</code> 实例。</p>\n</li>\n<li><p><code>json.UnmarshalJSON(data []byte, v interface&#123;&#125;) error</code>: 类似于 <code>json.Unmarshal</code>，但是可以用于解析包含嵌套 JSON 数据的字段值。</p>\n</li>\n<li><p><code>json.MarshalIndent(v interface&#123;&#125;, prefix, indent string) ([]byte, error)</code>: 类似于 <code>json.Marshal</code>，但是可以为生成的 JSON 数据添加前缀和缩进，以便更好地进行格式化和阅读。</p>\n</li>\n<li><p><code>json.Valid(data []byte) bool</code>: 用于检查 JSON 字节切片是否是有效的 JSON 格式。</p>\n</li>\n</ol>\n<p>这些只是 <code>encoding/json</code> 包提供的一些常用 API，还有其他一些 API 用于处理 JSON 数据的细节操作，例如处理 JSON 数字精度、自定义 JSON 编码&#x2F;解码方法等。在 Go 中，<code>encoding/json</code> 是处理 JSON 数据的标准库，通常情况下足够满足大多数 JSON 数据处理的需求。</p>\n<h3 id=\"每个-API-的例子\"><a href=\"#每个-API-的例子\" class=\"headerlink\" title=\"每个 API 的例子\"></a>每个 API 的例子</h3><p>当然，下面是每个 API 的简单示例：</p>\n<h3 id=\"1-json-Marshal-v-interface-byte-error\"><a href=\"#1-json-Marshal-v-interface-byte-error\" class=\"headerlink\" title=\"1 json.Marshal(v interface{}) ([]byte, error):\"></a>1 <code>json.Marshal(v interface&#123;&#125;) ([]byte, error)</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Age    int    &#96;json:&quot;age&quot;&#96;\n    Gender string &#96;json:&quot;gender&quot;&#96;\n&#125;\n\nperson :&#x3D; Person&#123;\n    Name:   &quot;Alice&quot;,\n    Age:    30,\n    Gender: &quot;Female&quot;,\n&#125;\n\njsonData, err :&#x3D; json.Marshal(person)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Marshal error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(string(jsonData))\n&#x2F;&#x2F; 输出：&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;</code></pre>\n\n<h3 id=\"2-json-Unmarshal-data-byte-v-interface-error\"><a href=\"#2-json-Unmarshal-data-byte-v-interface-error\" class=\"headerlink\" title=\"2 json.Unmarshal(data []byte, v interface{}) error:\"></a>2 <code>json.Unmarshal(data []byte, v interface&#123;&#125;) error</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Age    int    &#96;json:&quot;age&quot;&#96;\n    Gender string &#96;json:&quot;gender&quot;&#96;\n&#125;\n\njsonStr :&#x3D; &#96;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;&#96;\njsonData :&#x3D; []byte(jsonStr)\n\nvar person Person\nerr :&#x3D; json.Unmarshal(jsonData, &amp;person)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Unmarshal error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(person.Name)\nfmt.Println(person.Age)\nfmt.Println(person.Gender)\n&#x2F;&#x2F; 输出：\n&#x2F;&#x2F; Alice\n&#x2F;&#x2F; 30\n&#x2F;&#x2F; Female</code></pre>\n\n<h3 id=\"3-json-NewEncoder-w-io-Writer-json-Encoder\"><a href=\"#3-json-NewEncoder-w-io-Writer-json-Encoder\" class=\"headerlink\" title=\"3 json.NewEncoder(w io.Writer) *json.Encoder:\"></a>3 <code>json.NewEncoder(w io.Writer) *json.Encoder</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Age    int    &#96;json:&quot;age&quot;&#96;\n    Gender string &#96;json:&quot;gender&quot;&#96;\n&#125;\n\nperson :&#x3D; Person&#123;\n    Name:   &quot;Alice&quot;,\n    Age:    30,\n    Gender: &quot;Female&quot;,\n&#125;\n\nfile, err :&#x3D; os.Create(&quot;person.json&quot;)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;Failed to create file:&quot;, err)\n    return\n&#125;\ndefer file.Close()\n\njsonEncoder :&#x3D; json.NewEncoder(file)\nerr &#x3D; jsonEncoder.Encode(person)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Encode error:&quot;, err)\n    return\n&#125;\n\n&#x2F;&#x2F; person.json 文件中将包含编码后的 JSON 数据：\n&#x2F;&#x2F; &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;</code></pre>\n\n<h3 id=\"4-json-NewDecoder-r-io-Reader-json-Decoder\"><a href=\"#4-json-NewDecoder-r-io-Reader-json-Decoder\" class=\"headerlink\" title=\"4 json.NewDecoder(r io.Reader) *json.Decoder:\"></a>4 <code>json.NewDecoder(r io.Reader) *json.Decoder</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Age    int    &#96;json:&quot;age&quot;&#96;\n    Gender string &#96;json:&quot;gender&quot;&#96;\n&#125;\n\nfile, err :&#x3D; os.Open(&quot;person.json&quot;)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;Failed to open file:&quot;, err)\n    return\n&#125;\ndefer file.Close()\n\nvar person Person\njsonDecoder :&#x3D; json.NewDecoder(file)\nerr &#x3D; jsonDecoder.Decode(&amp;person)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Decode error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(person.Name)\nfmt.Println(person.Age)\nfmt.Println(person.Gender)\n&#x2F;&#x2F; 输出：\n&#x2F;&#x2F; Alice\n&#x2F;&#x2F; 30\n&#x2F;&#x2F; Female</code></pre>\n\n<h3 id=\"5-json-UnmarshalJSON-data-byte-v-interface-error-续\"><a href=\"#5-json-UnmarshalJSON-data-byte-v-interface-error-续\" class=\"headerlink\" title=\"5 json.UnmarshalJSON(data []byte, v interface{}) error (续):\"></a>5 <code>json.UnmarshalJSON(data []byte, v interface&#123;&#125;) error</code> (续):</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Person struct &#123;\n    Name   string &#96;json:&quot;name&quot;&#96;\n    Age    int    &#96;json:&quot;age&quot;&#96;\n    Gender string &#96;json:&quot;gender&quot;&#96;\n&#125;\n\ntype Data struct &#123;\n    RawJSON json.RawMessage &#96;json:&quot;raw_json&quot;&#96;\n&#125;\n\njsonStr :&#x3D; &#96;&#123;&quot;raw_json&quot;: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;&#125;&#96;\njsonData :&#x3D; []byte(jsonStr)\n\nvar data Data\nerr :&#x3D; json.Unmarshal(jsonData, &amp;data)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Unmarshal error:&quot;, err)\n    return\n&#125;\n\nvar person Person\nerr &#x3D; person.UnmarshalJSON(data.RawJSON)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Unmarshal error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(person.Name)\nfmt.Println(person.Age)\nfmt.Println(person.Gender)\n&#x2F;&#x2F; 输出：\n&#x2F;&#x2F; Alice\n&#x2F;&#x2F; 30\n&#x2F;&#x2F; Female</code></pre>\n\n<h3 id=\"6-json-Compact-dst-bytes-Buffer-src-byte-error\"><a href=\"#6-json-Compact-dst-bytes-Buffer-src-byte-error\" class=\"headerlink\" title=\"6 json.Compact(dst *bytes.Buffer, src []byte) error:\"></a>6 <code>json.Compact(dst *bytes.Buffer, src []byte) error</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">jsonStr :&#x3D; &#96;&#123;\n    &quot;name&quot;: &quot;Alice&quot;,\n    &quot;age&quot;: 30,\n    &quot;gender&quot;: &quot;Female&quot;\n&#125;&#96;\n\njsonData :&#x3D; []byte(jsonStr)\n\nvar pretty bytes.Buffer\nerr :&#x3D; json.Indent(&amp;pretty, jsonData, &quot;&quot;, &quot;\\t&quot;)\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Indent error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(pretty.String())\n&#x2F;&#x2F; 输出：\n&#x2F;&#x2F; &#123;\n&#x2F;&#x2F; \t&quot;name&quot;: &quot;Alice&quot;,\n&#x2F;&#x2F; \t&quot;age&quot;: 30,\n&#x2F;&#x2F; \t&quot;gender&quot;: &quot;Female&quot;\n&#x2F;&#x2F; &#125;\n\nvar compact bytes.Buffer\nerr &#x3D; json.Compact(&amp;compact, pretty.Bytes())\nif err !&#x3D; nil &#123;\n    fmt.Println(&quot;JSON Compact error:&quot;, err)\n    return\n&#125;\n\nfmt.Println(compact.String())\n&#x2F;&#x2F; 输出：&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;</code></pre>\n\n<h3 id=\"7-json-HTMLEscape-dst-bytes-Buffer-src-byte\"><a href=\"#7-json-HTMLEscape-dst-bytes-Buffer-src-byte\" class=\"headerlink\" title=\"7 json.HTMLEscape(dst *bytes.Buffer, src []byte):\"></a>7 <code>json.HTMLEscape(dst *bytes.Buffer, src []byte)</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">jsonStr :&#x3D; &#96;&#123;&quot;name&quot;:&quot;&lt;Alice&gt;&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;&#96;\njsonData :&#x3D; []byte(jsonStr)\n\nvar escaped bytes.Buffer\njson.HTMLEscape(&amp;escaped, jsonData)\n\nfmt.Println(escaped.String())\n&#x2F;&#x2F; 输出：&#123;&quot;name&quot;:&quot;\\u003cAlice\\u003e&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;</code></pre>\n\n<p>在 Go 语言中，<code>json</code>包中的<code>HTMLEscape</code>函数用于将特殊字符转义为 HTML 实体，以便在生成 JSON 时确保输出的字符串是安全的，不会引发 HTML 注入攻击。</p>\n<p>下面是<code>json</code>包中<code>HTMLEscape</code>函数的基本使用示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n)\n\nfunc main() &#123;\n\tdata :&#x3D; map[string]string&#123;\n\t\t&quot;name&quot;:     &quot;John&quot;,\n\t\t&quot;age&quot;:      &quot;25&quot;,\n\t\t&quot;location&quot;: &quot;&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;&quot;,\n\t&#125;\n\n\t&#x2F;&#x2F; 将数据编码为JSON\n\tencoded, err :&#x3D; json.Marshal(data)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(&quot;JSON encoding failed:&quot;, err)\n\t\tos.Exit(1)\n\t&#125;\n\n\t&#x2F;&#x2F; 输出原始的JSON字符串\n\tfmt.Println(&quot;Original JSON:&quot;, string(encoded))\n\n\t&#x2F;&#x2F; 使用HTMLEscape函数转义特殊字符\n\tescaped :&#x3D; json.HTMLEscape(nil, encoded)\n\n\t&#x2F;&#x2F; 输出转义后的JSON字符串\n\tfmt.Println(&quot;Escaped JSON:&quot;, string(escaped))\n&#125;</code></pre>\n\n<p>在以上示例中，我们定义了一个包含一些特殊字符的 JSON 数据对象，并使用<code>json.Marshal</code>函数将其编码为 JSON 格式的字节数组。然后，我们通过调用<code>json.HTMLEscape</code>函数将这些特殊字符转义为 HTML 实体，返回一个新的字节数组。最后，我们将转义后的 JSON 字符串输出到控制台。</p>\n<p>需要注意的是，<code>json.HTMLEscape</code>函数在原地修改了传入的字节数组，并返回修改后的字节数组，因此在使用时应谨慎处理原始数据。此外，<code>json.HTMLEscape</code>函数只会转义特定的字符，例如<code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&#39;</code>, <code>&quot;</code>等，而不会对所有字符进行转义。因此，在处理用户输入或其他潜在的不受信任的数据时，应该使用其他方法来保护 JSON 数据的安全性，例如使用输入验证和输出编码等措施。</p>\n<h3 id=\"8-json-Valid-data-byte-bool\"><a href=\"#8-json-Valid-data-byte-bool\" class=\"headerlink\" title=\"8 json.Valid(data []byte) bool:\"></a>8 <code>json.Valid(data []byte) bool</code>:</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">jsonStr :&#x3D; &#96;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;:&quot;Female&quot;&#125;&#96;\njsonData :&#x3D; []byte(jsonStr)\n\nisValid :&#x3D; json.Valid(jsonData)\n\nfmt.Println(isValid)\n&#x2F;&#x2F; 输出：true\n\ninvalidJSON :&#x3D; []byte(&#96;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30,&quot;gender&quot;&#125;&#96;)\nisValid &#x3D; json.Valid(invalidJSON)\n\nfmt.Println(isValid)\n&#x2F;&#x2F; 输出：false</code></pre>\n\n<p>这些就是一些常见的 Go JSON API 的简单示例。</p>\n<h2 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h2><p><a href=\"./go程/go模型.md\" target=\"_blank\" >Go 内存模型</a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>Golang（或称为 Go）是一种编程语言，其内存模型描述了程序在运行时如何管理和访问内存。理解 Golang 的内存模型对于编写高效、并发和安全的 Go 程序非常重要。</p>\n<p>Golang 的内存模型基于以下几个主要概念：</p>\n<ol>\n<li><p>堆（Heap）：堆是一块大的内存区域，用于分配和存储程序运行时动态分配的内存。在 Golang 中，通过 <code>new</code>、<code>make</code> 等关键字进行堆上的内存分配。</p>\n</li>\n<li><p>栈（Stack）：栈是一块较小的内存区域，用于存储程序的局部变量和函数调用的上下文信息。在 Golang 中，每个 Goroutine 都有自己的栈空间。</p>\n</li>\n<li><p>Goroutine：Goroutine 是 Go 中的轻量级线程，用于实现并发执行。Goroutine 的创建和销毁由 Go 运行时管理，每个 Goroutine 都可以在一个独立的栈上运行。</p>\n</li>\n<li><p>通道（Channel）：通道是 Goroutine 之间进行通信和同步的一种机制。通道可以用来发送和接收数据，并且在读写时会自动进行同步，从而避免了显式的锁操作。</p>\n</li>\n<li><p>内存模型：Golang 的内存模型规定了 Goroutine 之间的内存访问和同步行为。Golang 使用了基于 happens-before 原则的内存模型，通过同步操作（例如使用通道、互斥锁、原子操作等）来确保 Goroutine 之间的内存一致性。</p>\n</li>\n</ol>\n<p>在 Golang 的内存模型中，Goroutine 之间的通信和同步是通过通道进行的，而不是显式的锁操作。这使得编写并发程序更加简单和安全，避免了传统多线程编程中的许多常见问题，例如竞态条件、死锁等。</p>\n<p>总的来说，理解 Golang 的内存模型对于编写高效、并发和安全的 Go 程序非常重要，需要熟悉堆、栈、Goroutine、通道以及 Golang 的内存模型规定的同步行为。</p>\n<h2 id=\"并发与一致\"><a href=\"#并发与一致\" class=\"headerlink\" title=\"并发与一致\"></a>并发与一致</h2><p><a href=\"https://www.modb.pro/db/65265\" target=\"_blank\" >见</a></p>\n<h2 id=\"Go-Select-详解\"><a href=\"#Go-Select-详解\" class=\"headerlink\" title=\"Go Select 详解\"></a>Go Select 详解</h2><p><strong>GO 为什么引入 select?</strong></p>\n<p>select 是一种 go 可以处理多个通道之间的机制，看起来和 switch 语句很相似，但是 select 其实和 IO 机制中的 select 一样，多路复用通道，随机选取一个进行执行。</p>\n<p>如果说通道(channel)实现了多个 goroutine 之前的同步或者通信，那么 select 则实现了多个通道(channel)的同步或者通信</p>\n<p>select 具有阻塞的特性。</p>\n<p><strong>有怎样的使用场景？</strong></p>\n<p><a href=\"https://www.jianshu.com/p/66edceabd5f6\" target=\"_blank\" >Go Select 详解</a></p>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>设计动机：两点好处：</p>\n<ol>\n<li>第一，它能确保你不会忘记关闭文件。如果你以后又为该函数添加了新的返回路径时， 这种情况往往就会发生。</li>\n<li>第二，它意味着“关闭”离“打开”很近， 这总比将它放在函数结尾处要清晰明了</li>\n</ol>\n<p>使用场景：</p>\n<ol>\n<li>场景：解锁互斥和关闭文件</li>\n</ol>\n<p>特点：</p>\n<ol>\n<li>被推迟的函数按照<code>后进先出（LIFO）</code>的顺序执行</li>\n</ol>\n<h2 id=\"追加\"><a href=\"#追加\" class=\"headerlink\" title=\"追加\"></a>追加</h2><ol>\n<li>append 会在切片末尾追加元素并返回结果</li>\n<li>将一个切片追加到另一个切片，<strong>必须</strong>在调用的地方使用 …</li>\n</ol>\n<pre class=\"line-numbers language-Go\" data-language=\"Go\"><code class=\"language-Go\">x :&#x3D; []int&#123;1,2,3&#125;\ny :&#x3D; []int&#123;4,5,6&#125;\nx &#x3D; append(x, y...) &#x2F;&#x2F; 这里...不可缺少\nfmt.Println(x)</code></pre>\n\n<h2 id=\"区分某项是不存在还是其值为零值\"><a href=\"#区分某项是不存在还是其值为零值\" class=\"headerlink\" title=\"区分某项是不存在还是其值为零值\"></a>区分某项是不存在还是其值为零值</h2><p><strong>提及</strong><br><a href=\"https://go-zh.org/doc/effective_go.html#%E8%BF%BD%E5%8A%A0:~:text=%E6%9C%89%E6%97%B6%E4%BD%A0%E9%9C%80%E8%A6%81-,%E5%8C%BA%E5%88%86%E6%9F%90%E9%A1%B9%E6%98%AF%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%BF%98%E6%98%AF%E5%85%B6%E5%80%BC%E4%B8%BA%E9%9B%B6%E5%80%BC,-%E3%80%82%E5%A6%82%E5%AF%B9%E4%BA%8E%E4%B8%80%E4%B8%AA\" target=\"_blank\" >提及：区分某项是不存在还是其值为零值</a></p>\n<p><strong>应对</strong></p>\n<p><a href=\"https://learnku.com/go/t/49332\" target=\"_blank\" >Golang 中使用 JSON 时如何区分空字段和未设置字段？</a></p>\n<p><a href=\"https://www.cnblogs.com/joyswings/p/9864568.html\" target=\"_blank\" >go 语言的 null 值问题</a></p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><!-- git init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:841660202/go-examples.git\ngit push -u origin main -->\n\n<h2 id=\"改变背景色\"><a href=\"#改变背景色\" class=\"headerlink\" title=\"改变背景色\"></a>改变背景色</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var st &#x3D; document.createElement(&#39;style&#39;);\nst.innerHTML &#x3D; &#96;\n   *&#123;\n      color: #a1a1a1!important;\n      background: #000!important;\n      text-shadow: none!important;\n   &#125;\n&#96;;\ndocument.head.append(st);</code></pre>\n\n<h2 id=\"加密（skip）\"><a href=\"#加密（skip）\" class=\"headerlink\" title=\"加密（skip）\"></a>加密（skip）</h2><h2 id=\"token-x2F-cookie\"><a href=\"#token-x2F-cookie\" class=\"headerlink\" title=\"token&#x2F;cookie\"></a>token&#x2F;cookie</h2><p><a href=\"https://learnku.com/articles/71845\" target=\"_blank\" >见</a></p>\n<p>jwt 库很多了 各有各的优势 有些库是不维护了</p>\n<p>选择了 <code>github.com/golang-jwt/jwt</code> 库</p>\n<p>获取命令：<code>go get -u github.com/golang-jwt/jwt/v4</code></p>\n<h3 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h3><p>header 典型的由两部分组成：token 的类型（“JWT”）和算法名称（比如：HMAC SHA256 或者 RSA 等等</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#123;\n  &#39;typ&#39;: &#39;JWT&#39;,\n  &#39;alg&#39;: &#39;HS256&#39;\n&#125;</code></pre>\n\n<h3 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h3><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>\n<p>标准中注册的声明<br>公共的声明<br>私有的声明</p>\n<p>jwt.StandardClaims 标准中注册的声明 (建议但不强制使用) ：</p>\n<ol>\n<li>iss: jwt 签发者</li>\n<li>sub: jwt 所面向的用户</li>\n<li>aud: 接收 jwt 的一方</li>\n<li>exp: jwt 的过期时间，这个过期时间必须要大于签发时间</li>\n<li>nbf: 定义在什么时间之前，该 jwt 都是不可用的.</li>\n<li>iat: jwt 的签发时间</li>\n<li>jti: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</li>\n</ol>\n<p>私有的声明 ：<br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息</p>\n<p>私有定义的内容根据自己业务需要来，这里简单加了 UID</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type AuthClaim struct &#123;\n    UID int64 &#96;json:&quot;uid&quot;&#96;\n    jwt.StandardClaims\n&#125;</code></pre>\n\n<h3 id=\"Signature-签名\"><a href=\"#Signature-签名\" class=\"headerlink\" title=\"Signature 签名\"></a>Signature 签名</h3><p>secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var Secret &#x3D; &quot;私钥&quot;\nvar hmacSampleSecret &#x3D; []byte(Secret)</code></pre>\n\n<h3 id=\"生成-token\"><a href=\"#生成-token\" class=\"headerlink\" title=\"生成 token\"></a>生成 token</h3><p>生成了两个小时过期时间的 token</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">const TokenExpireDuration &#x3D; 2 * time.Hour &#x2F;&#x2F;过期时间\n\nfunc New(uid int64) (tokenStr string) &#123;\n    var authClaim AuthClaim\n    authClaim.UID &#x3D; uid\n    authClaim.StandardClaims.ExpiresAt &#x3D; time.Now().Add(TokenExpireDuration).Unix()\n    token :&#x3D; jwt.NewWithClaims(jwt.SigningMethodHS256, authClaim)\n    tokenString, _ :&#x3D; token.SignedString(hmacSampleSecret) &#x2F;&#x2F;私钥加密\n    return tokenString\n&#125;</code></pre>\n\n<h3 id=\"解析-token\"><a href=\"#解析-token\" class=\"headerlink\" title=\"解析 token\"></a>解析 token</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func Parse(tokenString string) (auth AuthClaim, Valid bool) &#123;\n    token, _ :&#x3D; jwt.Parse(tokenString, func(token *jwt.Token) (interface&#123;&#125;, error) &#123;\n        &#x2F;&#x2F; Don&#39;t forget to validate the alg is what you expect:\n        if _, ok :&#x3D; token.Method.(*jwt.SigningMethodHMAC); !ok &#123;\n            return nil, fmt.Errorf(&quot;unexpected signing method: %v&quot;, token.Header[&quot;alg&quot;])\n        &#125;\n        &#x2F;&#x2F; hmacSampleSecret is a []byte containing your secret, e.g. []byte(&quot;my_secret_key&quot;)\n        return hmacSampleSecret, nil\n    &#125;)\n    Valid &#x3D; token.Valid&#x2F;&#x2F;token是否有效 true有效  false无效\n    if claims, ok :&#x3D; token.Claims.(jwt.MapClaims); ok &amp;&amp; Valid &#123;\n        auth.UID &#x3D; int64(claims[&quot;uid&quot;].(float64)) &#x2F;&#x2F;自定义的UID\n        auth.ExpiresAt &#x3D; int64(claims[&quot;exp&quot;].(float64)) &#x2F;&#x2F;过期时间\n    &#125;\n    return\n&#125;</code></pre>\n\n<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p><a href=\"https://juejin.cn/post/6871583587062415367\" target=\"_blank\" >见</a></p>\n<h2 id=\"gin\"><a href=\"#gin\" class=\"headerlink\" title=\"gin\"></a>gin</h2><ol>\n<li>中间件开发 <a href=\"https://juejin.cn/post/7034338727883177997#heading-1\">https://juejin.cn/post/7034338727883177997#heading-1</a></li>\n<li>插件开发</li>\n<li>数据绑定</li>\n<li>返回数据</li>\n<li>封装返回</li>\n<li>异常统一处理</li>\n</ol>\n<h3 id=\"gin-中间件\"><a href=\"#gin-中间件\" class=\"headerlink\" title=\"gin 中间件\"></a>gin 中间件</h3><p>Gin 是一个用于构建 Web 应用程序的 Go 语言框架，它提供了一些用于处理 HTTP 请求和响应的功能。Gin 中间件是一种特殊类型的功能，它可以在请求到达路由处理器之前或之后执行一些操作。</p>\n<p>Gin 中间件通常用于以下几个目的：</p>\n<ol>\n<li><p>路由处理前的预处理：可以在路由处理器执行之前进行一些操作，例如身份验证、权限验证、请求参数解析等。这样可以在进入路由处理器之前对请求进行预处理，从而减轻路由处理器的负担。</p>\n</li>\n<li><p>路由处理后的后处理：可以在路由处理器执行完毕之后进行一些操作，例如日志记录、响应结果封装等。这样可以在路由处理器执行完毕后对响应进行后处理，从而实现一些共享的逻辑。</p>\n</li>\n<li><p>错误处理：可以在发生错误时进行处理，例如错误日志记录、错误信息返回等。这样可以统一处理应用程序中可能发生的错误，避免在每个路由处理器中都进行错误处理逻辑的重复。</p>\n</li>\n</ol>\n<p>Gin 中间件通过注册到 Gin 的引擎（Engine）上，并按照注册的顺序依次执行。每个中间件可以通过 Gin 的上下文（Context）对象来访问请求和响应的信息，并在需要时对其进行修改。</p>\n<p>以下是一个使用 Gin 中间件的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 自定义中间件示例\n\tr.Use(func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在请求处理前执行的操作\n\t\tfmt.Println(&quot;执行中间件操作前&quot;)\n\n\t\t&#x2F;&#x2F; 执行下一个中间件或路由处理器\n\t\tc.Next()\n\n\t\t&#x2F;&#x2F; 在请求处理后执行的操作\n\t\tfmt.Println(&quot;执行中间件操作后&quot;)\n\t&#125;)\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中的操作\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在上面的示例中，通过 <code>r.Use()</code> 注册了一个自定义的中间件，它会在每次请求到达时先执行预处理操作，然后调用 <code>c.Next()</code> 继续执行下一个中间件或路由处理器，最后在请求处理完毕后执行后处理操作。这样可以在请求处理前后执行一些共享的操作。注意，中间件的注册顺序很重要，它们会按照注册的顺序依次执行。</p>\n<p>Gin 中间件是一种强大的功能，可以在处理 HTTP 请求和响应时灵活地进行预处理和后处理操作，从而实现一些共享的逻辑和功能。</p>\n<h3 id=\"返回数据-统一处理返回-事例-1\"><a href=\"#返回数据-统一处理返回-事例-1\" class=\"headerlink\" title=\"返回数据 统一处理返回 事例 1\"></a>返回数据 统一处理返回 事例 1</h3><p>在 Gin 中，可以使用中间件来实现对响应数据的统一处理和封装，从而实现一些共享的逻辑，例如格式化响应数据、添加公共响应头、处理错误等。以下是一个简单的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype Response struct &#123;\n\tCode    int         &#96;json:&quot;code&quot;&#96;\n\tMessage string      &#96;json:&quot;message&quot;&#96;\n\tData    interface&#123;&#125; &#96;json:&quot;data&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 自定义中间件示例\n\tr.Use(func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在请求处理前执行的操作\n\t\t&#x2F;&#x2F; ...\n\n\t\t&#x2F;&#x2F; 执行下一个中间件或路由处理器\n\t\tc.Next()\n\n\t\t&#x2F;&#x2F; 在请求处理后执行的操作\n\t\t&#x2F;&#x2F; ...\n\n\t\t&#x2F;&#x2F; 统一处理响应数据\n\t\tcode :&#x3D; c.Writer.Status()\n\t\tmessage :&#x3D; &quot;&quot;\n\t\tdata :&#x3D; c.Keys[&quot;response_data&quot;]\n\t\tif err, ok :&#x3D; data.(error); ok &#123;\n\t\t\t&#x2F;&#x2F; 处理错误信息\n\t\t\tcode &#x3D; 500 &#x2F;&#x2F; 错误状态码\n\t\t\tmessage &#x3D; err.Error() &#x2F;&#x2F; 错误消息\n\t\t\tdata &#x3D; nil &#x2F;&#x2F; 清空数据\n\t\t&#125;\n\t\tresponse :&#x3D; Response&#123;\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tData:    data,\n\t\t&#125;\n\t\tc.JSON(response.Code, response)\n\t&#125;)\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中的操作\n\t\t&#x2F;&#x2F; ...\n\n\t\t&#x2F;&#x2F; 设置响应数据到上下文中\n\t\tc.Set(&quot;response_data&quot;, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\n\t\t&#x2F;&#x2F; 抛出一个错误\n\t\t&#x2F;&#x2F; c.AbortWithError(500, fmt.Errorf(&quot;发生了一个错误&quot;))\n\n\t\tc.Next()\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在上面的示例中，自定义的中间件会在每次请求到达时先执行预处理操作，然后调用 <code>c.Next()</code> 继续执行下一个中间件或路由处理器，最后在请求处理完毕后执行后处理操作。在后处理操作中，根据需要可以统一处理响应数据，例如格式化响应数据、添加公共响应头等。在路由处理器中，可以通过 <code>c.Set()</code> 方法将响应数据存储到 Gin 的上下文中，供后续的中间件和路由处理器使用。</p>\n<p>需要注意的是，如果发生错误，可以通过 <code>c.AbortWithError()</code> 方法终止请求处理，并传递错误信息到后续的中间件和路由处理器，从而实现统一的错误处理。在后处理操作中，可以根据错误信息进行相应的处理，例如设置合适的错误状态码和错误消息。</p>\n<p>这样，通过使用 Gin 中间件来统一处理和封装响应数据，可以实现对响应的格式化、公共头部的添加、错误处理等逻辑的统一管理，从而提高代码的可维护性和可扩展性。</p>\n<h3 id=\"返回数据-统一处理返回-事例-2\"><a href=\"#返回数据-统一处理返回-事例-2\" class=\"headerlink\" title=\"返回数据 统一处理返回 事例 2\"></a>返回数据 统一处理返回 事例 2</h3><p>好的，这里是一个更详细的示例，演示了如何使用 Gin 中间件来统一处理和封装响应数据。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype Response struct &#123;\n\tCode    int         &#96;json:&quot;code&quot;&#96;\n\tMessage string      &#96;json:&quot;message&quot;&#96;\n\tData    interface&#123;&#125; &#96;json:&quot;data&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 自定义中间件示例\n\tr.Use(func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在请求处理前执行的操作\n\t\tfmt.Println(&quot;请求处理前&quot;)\n\n\t\t&#x2F;&#x2F; 执行下一个中间件或路由处理器\n\t\tc.Next()\n\n\t\t&#x2F;&#x2F; 在请求处理后执行的操作\n\t\tfmt.Println(&quot;请求处理后&quot;)\n\n\t\t&#x2F;&#x2F; 统一处理响应数据\n\t\tcode :&#x3D; c.Writer.Status()\n\t\tmessage :&#x3D; &quot;&quot;\n\t\tdata :&#x3D; c.Keys[&quot;response_data&quot;]\n\t\tif err, ok :&#x3D; data.(error); ok &#123;\n\t\t\t&#x2F;&#x2F; 处理错误信息\n\t\t\tcode &#x3D; 500 &#x2F;&#x2F; 错误状态码\n\t\t\tmessage &#x3D; err.Error() &#x2F;&#x2F; 错误消息\n\t\t\tdata &#x3D; nil &#x2F;&#x2F; 清空数据\n\t\t&#125;\n\t\tresponse :&#x3D; Response&#123;\n\t\t\tCode:    code,\n\t\t\tMessage: message,\n\t\t\tData:    data,\n\t\t&#125;\n\t\tc.JSON(response.Code, response)\n\t&#125;)\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中的操作\n\t\tfmt.Println(&quot;处理请求&quot;)\n\n\t\t&#x2F;&#x2F; 设置响应数据到上下文中\n\t\tc.Set(&quot;response_data&quot;, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\n\t\t&#x2F;&#x2F; 抛出一个错误\n\t\t&#x2F;&#x2F; c.AbortWithError(500, fmt.Errorf(&quot;发生了一个错误&quot;))\n\n\t\tc.Next()\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在这个示例中，我们定义了一个自定义的中间件，它会在每次请求到达时先执行预处理操作，然后调用 <code>c.Next()</code> 继续执行下一个中间件或路由处理器，最后在请求处理完毕后执行后处理操作。在后处理操作中，我们根据需要可以统一处理响应数据，例如格式化响应数据、添加公共响应头等。</p>\n<p>在路由处理器中，我们通过 <code>c.Set()</code> 方法将响应数据存储到 Gin 的上下文中，供后续的中间件和路由处理器使用。在这里，我们简单地设置了一个包含 “message” 字段的 map 作为响应数据。</p>\n<p>需要注意的是，如果发生错误，我们可以通过 <code>c.AbortWithError()</code> 方法终止请求处理，并传递错误信息到后续的中间件和路由处理器，从而实现统一的错误处理。在后处理操作中，我们可以根据错误信息进行相应的处理，例如设置合适的错误状态码和错误消息。</p>\n<p>通过这样的方式，我们可以在 Gin 中使用中间件来统一处理和封装响应数据，实现对响应的格式化、公共头部的添加、错误处理等逻辑的统一管理，从而提高代码的可维护性和可扩展性。</p>\n<h3 id=\"token-校验中间件\"><a href=\"#token-校验中间件\" class=\"headerlink\" title=\"token 校验中间件\"></a>token 校验中间件</h3><p>在 Gin 框架中，可以通过自定义中间件来实现 Token 校验功能，用于验证客户端请求中的 Token 是否合法。下面是一个简单的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 自定义 Token 校验中间件示例\n\tr.Use(func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 获取请求中的 Token\n\t\ttoken :&#x3D; c.GetHeader(&quot;Authorization&quot;)\n\n\t\t&#x2F;&#x2F; 进行 Token 校验逻辑\n\t\tif token &#x3D;&#x3D; &quot;&quot; || token !&#x3D; &quot;valid_token&quot; &#123;\n\t\t\t&#x2F;&#x2F; 如果 Token 为空或者不合法，返回错误响应\n\t\t\tc.JSON(401, gin.H&#123;&quot;error&quot;: &quot;Invalid Token&quot;&#125;)\n\t\t\tc.Abort() &#x2F;&#x2F; 终止请求处理\n\t\t\treturn\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; Token 校验通过，继续执行下一个中间件或路由处理器\n\t\tc.Next()\n\t&#125;)\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中的操作\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在这个示例中，我们定义了一个自定义的中间件来进行 Token 校验。在中间件中，我们通过 <code>c.GetHeader()</code> 方法获取请求头中的 “Authorization” 字段，该字段用于携带 Token。然后，我们可以进行自定义的 Token 校验逻辑，例如判断 Token 是否为空、是否合法等。</p>\n<p>如果 Token 校验失败，我们通过 <code>c.JSON()</code> 方法返回错误的 JSON 响应，并通过 <code>c.Abort()</code> 方法终止请求处理，从而避免继续执行后续的中间件或路由处理器。</p>\n<p>如果 Token 校验通过，我们可以调用 <code>c.Next()</code> 方法继续执行下一个中间件或路由处理器。</p>\n<p>通过这种方式，我们可以在 Gin 中使用中间件来实现 Token 校验功能，从而实现对客户端请求中的 Token 进行统一的验证和处理，提高应用的安全性。需要根据实际需求进行相应的定制和扩展，例如可以将 Token 存储在数据库或缓存中，并在中间件中进行查询和验证。</p>\n<h3 id=\"异常统一处理中间件\"><a href=\"#异常统一处理中间件\" class=\"headerlink\" title=\"异常统一处理中间件\"></a>异常统一处理中间件</h3><p>在 Gin 框架中，可以通过自定义中间件来实现异常统一处理功能，用于捕获和处理路由处理器中的异常，从而对异常进行统一的处理和返回错误响应。下面是一个简单的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 自定义异常统一处理中间件示例\n\tr.Use(func(c *gin.Context) &#123;\n\t\tdefer func() &#123;\n\t\t\tif err :&#x3D; recover(); err !&#x3D; nil &#123;\n\t\t\t\t&#x2F;&#x2F; 捕获路由处理器中的异常\n\n\t\t\t\t&#x2F;&#x2F; 可以根据实际需求进行异常处理，例如记录日志、返回错误响应等\n\t\t\t\tfmt.Println(&quot;Recovered error:&quot;, err)\n\n\t\t\t\t&#x2F;&#x2F; 返回错误响应\n\t\t\t\tc.JSON(500, gin.H&#123;&quot;error&quot;: &quot;Internal Server Error&quot;&#125;)\n\t\t\t\tc.Abort() &#x2F;&#x2F; 终止请求处理\n\t\t\t&#125;\n\t\t&#125;()\n\n\t\t&#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t\tc.Next()\n\t&#125;)\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中可能出现的异常\n\t\tpanic(&quot;Some error occurred&quot;)\n\n\t\t&#x2F;&#x2F; 路由处理器中的其他操作\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在这个示例中，我们定义了一个自定义的中间件来进行异常统一处理。在中间件中，我们使用 <code>recover()</code> 函数捕获了路由处理器中的异常，并在 <code>defer</code> 语句中进行了处理。在处理中，我们可以根据实际需求进行异常处理，例如记录日志、返回错误响应等。</p>\n<p>如果发生异常，我们通过 <code>c.JSON()</code> 方法返回错误的 JSON 响应，并通过 <code>c.Abort()</code> 方法终止请求处理，从而避免继续执行后续的中间件或路由处理器。</p>\n<p>通过这种方式，我们可以在 Gin 中使用中间件来实现异常统一处理功能，从而对路由处理器中的异常进行捕获和处理，提高应用的可靠性和稳定性。需要根据实际需求进行相应的定制和扩展，例如可以根据不同类型的异常返回不同的错误响应或执行不同的处理逻辑。</p>\n<h3 id=\"单个中间件管理\"><a href=\"#单个中间件管理\" class=\"headerlink\" title=\"单个中间件管理\"></a>单个中间件管理</h3><p>在 Gin 框架中，可以将中间件单独放置在项目的某个目录中，以便进行组织和管理。下面是一个简单的示例：</p>\n<ol>\n<li><p>创建一个名为 <code>middlewares</code> 的目录，用于存放中间件文件。可以将这个目录放置在项目的任意位置，例如项目的根目录下。</p>\n</li>\n<li><p>在 <code>middlewares</code> 目录中创建一个中间件文件，例如 <code>error_handler.go</code>，用于实现异常统一处理中间件。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package middlewares\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; ErrorHandler 中间件用于捕获和处理路由处理器中的异常\nfunc ErrorHandler() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\tdefer func() &#123;\n\t\t\tif err :&#x3D; recover(); err !&#x3D; nil &#123;\n\t\t\t\t&#x2F;&#x2F; 捕获路由处理器中的异常\n\n\t\t\t\t&#x2F;&#x2F; 可以根据实际需求进行异常处理，例如记录日志、返回错误响应等\n\t\t\t\tfmt.Println(&quot;Recovered error:&quot;, err)\n\n\t\t\t\t&#x2F;&#x2F; 返回错误响应\n\t\t\t\tc.JSON(500, gin.H&#123;&quot;error&quot;: &quot;Internal Server Error&quot;&#125;)\n\t\t\t\tc.Abort() &#x2F;&#x2F; 终止请求处理\n\t\t\t&#125;\n\t\t&#125;()\n\n\t\t&#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t\tc.Next()\n\t&#125;\n&#125;</code></pre>\n\n<ol start=\"3\">\n<li>在项目的主文件（例如 <code>main.go</code>）中引入 <code>middlewares</code> 包，并使用其中的中间件。</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;yourproject&#x2F;middlewares&quot; &#x2F;&#x2F; 引入自定义中间件包\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 使用自定义异常统一处理中间件\n\tr.Use(middlewares.ErrorHandler())\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 在路由处理器中可能出现的异常\n\t\tpanic(&quot;Some error occurred&quot;)\n\n\t\t&#x2F;&#x2F; 路由处理器中的其他操作\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>通过将中间件单独放置在项目的某个目录中，并在需要使用中间件的地方引入和使用，可以更好地组织和管理中间件，使代码更加清晰和可维护。需要根据实际项目结构和需求进行相应的调整和扩展。</p>\n<h3 id=\"多个中间件管理\"><a href=\"#多个中间件管理\" class=\"headerlink\" title=\"多个中间件管理\"></a>多个中间件管理</h3><p>在 Gin 框架中，可以通过以下步骤来管理三个中间件：</p>\n<ol>\n<li><p>创建中间件文件：在项目的某个目录下创建三个中间件文件，例如 <code>middleware1.go</code>、<code>middleware2.go</code> 和 <code>middleware3.go</code>，分别实现三个中间件的逻辑。</p>\n</li>\n<li><p>编写中间件逻辑：在每个中间件文件中，实现对应的中间件逻辑。例如，可以使用 <code>gin.HandlerFunc</code> 函数签名来定义中间件函数，并在其中编写处理逻辑，例如校验 token、异常处理、日志记录等。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; middleware1.go\npackage middlewares\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc Middleware1() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 中间件1的逻辑处理\n\t\t&#x2F;&#x2F; ...\n\t\tc.Next() &#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; middleware2.go\npackage middlewares\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc Middleware2() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 中间件2的逻辑处理\n\t\t&#x2F;&#x2F; ...\n\t\tc.Next() &#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; middleware3.go\npackage middlewares\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc Middleware3() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 中间件3的逻辑处理\n\t\t&#x2F;&#x2F; ...\n\t\tc.Next() &#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t&#125;\n&#125;</code></pre>\n\n<ol start=\"3\">\n<li>在项目中引入和使用中间件：在项目的主文件（例如 <code>main.go</code>）或路由文件中，通过引入中间件文件，并调用其中的中间件函数，将中间件添加到 Gin 引擎中的中间件链中。</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;yourproject&#x2F;middlewares&quot; &#x2F;&#x2F; 引入自定义中间件包\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 添加三个自定义中间件到 Gin 引擎中\n\tr.Use(middlewares.Middleware1())\n\tr.Use(middlewares.Middleware2())\n\tr.Use(middlewares.Middleware3())\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 路由处理器的逻辑\n\t\t&#x2F;&#x2F; ...\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>通过这种方式，可以方便地管理多个中间件，将它们按照需要添加到 Gin 引擎中的中间件链中，实现各自的逻辑处理。需要根据实际项目需求进行中间件的调用顺序、添加位置等设置。</p>\n<h3 id=\"跨域问题处理中间件\"><a href=\"#跨域问题处理中间件\" class=\"headerlink\" title=\"跨域问题处理中间件\"></a>跨域问题处理中间件</h3><p>在 Gin 框架中，解决跨域问题可以通过使用中间件来处理。以下是一个简单的跨域中间件示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package middlewares\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; CorsMiddleware 是处理跨域请求的中间件\nfunc CorsMiddleware() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 设置允许的域名，* 表示允许任何域名访问，也可以设置具体的域名\n\t\tc.Writer.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)\n\t\t&#x2F;&#x2F; 设置允许的请求方法\n\t\tc.Writer.Header().Set(&quot;Access-Control-Allow-Methods&quot;, &quot;OPTIONS, GET, POST, PUT, DELETE&quot;)\n\t\t&#x2F;&#x2F; 设置允许的请求头\n\t\tc.Writer.Header().Set(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, Authorization&quot;)\n\t\t&#x2F;&#x2F; 允许携带跨域请求中的 cookie\n\t\tc.Writer.Header().Set(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;)\n\n\t\t&#x2F;&#x2F; 如果是 OPTIONS 请求，直接返回 200，表示允许该请求\n\t\tif c.Request.Method &#x3D;&#x3D; &quot;OPTIONS&quot; &#123;\n\t\t\tc.AbortWithStatus(200)\n\t\t\treturn\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; 继续执行下一个中间件或路由处理器\n\t\tc.Next()\n\t&#125;\n&#125;</code></pre>\n\n<p>在项目中使用这个跨域中间件：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;yourproject&#x2F;middlewares&quot; &#x2F;&#x2F; 引入自定义中间件包\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 使用自定义的跨域中间件\n\tr.Use(middlewares.CorsMiddleware())\n\n\t&#x2F;&#x2F; 路由处理器示例\n\tr.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 路由处理器的逻辑\n\t\t&#x2F;&#x2F; ...\n\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, Gin!&quot;&#125;)\n\t&#125;)\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>通过将跨域中间件添加到 Gin 引擎中的中间件链中，可以处理来自不同域名的跨域请求，并设置允许的请求方法、请求头等相关参数，解决跨域问题。需要根据实际项目需求进行相关设置，例如设置允许的域名、请求方法、请求头等。</p>\n<h3 id=\"分组路由跨域问题处理中间件\"><a href=\"#分组路由跨域问题处理中间件\" class=\"headerlink\" title=\"分组路由跨域问题处理中间件\"></a>分组路由跨域问题处理中间件</h3><p>在 Gin 框架中，可以通过为不同的路由分组使用中间件来处理跨域问题。以下是一个使用分组路由处理跨域问题的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;yourproject&#x2F;middlewares&quot; &#x2F;&#x2F; 引入自定义中间件包\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 定义路由组\n\tapi :&#x3D; r.Group(&quot;&#x2F;api&quot;)\n\t&#123;\n\t\t&#x2F;&#x2F; 使用自定义的跨域中间件处理 &#x2F;api 下的所有路由跨域问题\n\t\tapi.Use(middlewares.CorsMiddleware())\n\n\t\t&#x2F;&#x2F; 路由处理器示例\n\t\tapi.GET(&quot;&#x2F;users&quot;, func(c *gin.Context) &#123;\n\t\t\t&#x2F;&#x2F; 路由处理器的逻辑\n\t\t\t&#x2F;&#x2F; ...\n\t\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, users!&quot;&#125;)\n\t\t&#125;)\n\n\t\tapi.GET(&quot;&#x2F;posts&quot;, func(c *gin.Context) &#123;\n\t\t\t&#x2F;&#x2F; 路由处理器的逻辑\n\t\t\t&#x2F;&#x2F; ...\n\t\t\tc.JSON(200, gin.H&#123;&quot;message&quot;: &quot;Hello, posts!&quot;&#125;)\n\t\t&#125;)\n\n\t\t&#x2F;&#x2F; 可以在这里添加更多的路由处理器\n\t&#125;\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在这个示例中，我们创建了一个名为 <code>/api</code> 的路由组，并在该路由组中使用了自定义的跨域中间件 <code>middlewares.CorsMiddleware()</code>。这样，该路由组下的所有路由都会经过跨域中间件的处理，从而解决了跨域问题。</p>\n<p>需要注意的是，在使用分组路由处理跨域问题时，中间件的顺序也很重要。例如，如果在路由组中先添加了其他中间件，再添加跨域中间件，可能会导致跨域中间件无法生效。因此，建议将跨域中间件放在路由组的最前面，以确保跨域中间件先于其他中间件执行。</p>\n<h3 id=\"还能做什么\"><a href=\"#还能做什么\" class=\"headerlink\" title=\"还能做什么\"></a>还能做什么</h3><p>中间件是一种在处理 HTTP 请求和响应时插入逻辑处理的机制，可以在 Gin 框架中用于实现各种功能。除了处理跨域问题和异常统一处理之外，中间件还可以用于以下几种情况：</p>\n<ol>\n<li><p>认证和授权：中间件可以用于验证请求的身份信息，例如基于 token 的认证，JWT 鉴权等。可以在中间件中进行身份验证的逻辑，如果验证失败则可以返回错误响应，否则继续处理请求。</p>\n</li>\n<li><p>日志记录：中间件可以用于记录请求和响应的日志，包括请求方法、路径、参数、响应状态码等信息，用于监控和排查问题。</p>\n</li>\n<li><p>参数校验和请求处理：中间件可以用于对请求参数进行校验，例如检查请求参数是否符合要求、是否为空等，可以在中间件中进行参数校验，如果不符合要求则返回错误响应，从而减轻路由处理器的负担。</p>\n</li>\n<li><p>数据处理和转换：中间件可以用于对请求和响应的数据进行处理和转换，例如对请求数据进行解析、对响应数据进行格式化、压缩等操作。</p>\n</li>\n<li><p>缓存和性能优化：中间件可以用于实现缓存策略，例如在中间件中判断请求是否命中缓存，如果命中则直接返回缓存数据，从而提高响应速度和性能。</p>\n</li>\n<li><p>错误处理和异常处理：中间件可以用于捕获和处理应用程序中的错误和异常，例如处理请求过程中发生的错误，并返回相应的错误响应，用于统一的错误处理。</p>\n</li>\n</ol>\n<p>需要注意的是，中间件应该按照业务逻辑的不同进行划分和组织，避免中间件过于复杂和耦合，保持中间件的单一职责和可维护性。在使用中间件时，也应该注意中间件的执行顺序，确保它们按照预期的顺序执行。</p>\n<h3 id=\"日志中间件\"><a href=\"#日志中间件\" class=\"headerlink\" title=\"日志中间件\"></a>日志中间件</h3><p>日志中间件是一种用于记录请求和响应的日志信息的中间件，在 Gin 框架中可以用于记录请求的方法、路径、参数、响应状态码等信息，用于监控和排查问题。以下是一个简单的日志中间件的示例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package middleware\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n&#x2F;&#x2F; LoggerMiddleware 日志中间件\nfunc LoggerMiddleware() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 记录请求开始时间\n\t\tstartTime :&#x3D; time.Now()\n\n\t\t&#x2F;&#x2F; 处理请求\n\t\tc.Next()\n\n\t\t&#x2F;&#x2F; 记录请求结束时间和耗时\n\t\tendTime :&#x3D; time.Now()\n\t\tlatencyTime :&#x3D; endTime.Sub(startTime)\n\n\t\t&#x2F;&#x2F; 获取请求信息\n\t\trequestMethod :&#x3D; c.Request.Method\n\t\trequestURI :&#x3D; c.Request.RequestURI\n\t\tstatusCode :&#x3D; c.Writer.Status()\n\n\t\t&#x2F;&#x2F; 记录日志\n\t\tfmt.Printf(&quot;[GIN] %v | %3d | %12v | %s | %s\\n&quot;,\n\t\t\tendTime.Format(&quot;2006&#x2F;01&#x2F;02 - 15:04:05&quot;),\n\t\t\tstatusCode,\n\t\t\tlatencyTime,\n\t\t\trequestMethod,\n\t\t\trequestURI,\n\t\t)\n\t&#125;\n&#125;</code></pre>\n\n<p>在上面的示例中，<code>LoggerMiddleware</code> 是一个日志中间件，它通过在请求处理前记录请求开始时间，然后在请求处理后记录请求结束时间和耗时，再根据请求方法、请求路径、响应状态码等信息输出日志。在使用该中间件时，只需要在路由组或路由处理器中使用 <code>Use</code> 方法添加该中间件即可，例如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;your-package&#x2F;middleware&quot;\n)\n\nfunc main() &#123;\n\tr :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 添加日志中间件\n\tr.Use(middleware.LoggerMiddleware())\n\n\t&#x2F;&#x2F; 添加路由\n\t&#x2F;&#x2F; ...\n\n\tr.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>这样，每次请求处理时都会通过该日志中间件记录请求和响应的日志信息，便于监控和排查问题。当然，你还可以根据需要对日志中间件进行定制化，例如输出的日志格式、日志存储方式等，以满足项目的具体需求。</p>\n<h3 id=\"next-作用\"><a href=\"#next-作用\" class=\"headerlink\" title=\".next()作用\"></a>.next()作用</h3><p>在 Gin 框架中，<code>.Next()</code> 是一个用于在中间件中传递控制权到下一个中间件或处理器函数的方法。当一个请求经过多个中间件时，每个中间件都可以执行一些操作，然后通过调用 <code>.Next()</code> 方法将请求传递给下一个中间件或处理器函数处理。</p>\n<p>使用 <code>.Next()</code> 方法的主要作用是将控制权传递给链中的下一个中间件或处理器函数，允许后续的中间件或处理器函数继续对请求进行处理。如果不调用 <code>.Next()</code> 方法，请求将被中间件截断，不会传递给后续的中间件或处理器函数，从而导致请求无法继续处理。</p>\n<p>在 Gin 中，中间件是按照添加的顺序执行的，通过 <code>.Next()</code> 方法的调用，Gin 会将请求传递给链中的下一个中间件或处理器函数，直到最后一个中间件或处理器函数处理完请求或调用了 <code>.Next()</code> 方法。这样，每个中间件都可以根据需要进行处理，例如校验、记录日志、修改请求或响应等，然后将请求传递给下一个中间件或处理器函数继续处理。</p>\n<h3 id=\"认证和授权\"><a href=\"#认证和授权\" class=\"headerlink\" title=\"认证和授权\"></a>认证和授权</h3><p>在 Web 应用程序中，认证和授权是两个关键的安全概念，用于确保用户的身份验证和控制用户对资源的访问权限。</p>\n<p>认证（Authentication）是指确认用户的身份是否合法，通常通过用户名和密码进行验证。认证主要用于验证用户是谁，以便在应用程序中标识用户的身份。</p>\n<p>授权（Authorization）是指确定用户是否有权限访问特定资源或执行特定操作。授权主要用于控制用户对应用程序中的资源的访问权限，例如访问某个页面、执行某个操作或访问某个 API 等。</p>\n<p>在 Gin 框架中，可以使用中间件来实现认证和授权的功能。以下是一个简单的示例，展示如何使用中间件进行基于 JWT（JSON Web Token）的认证和授权：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package middleware\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;your-package&#x2F;auth&quot;\n)\n\n&#x2F;&#x2F; AuthMiddleware 认证中间件\nfunc AuthMiddleware() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 获取请求头中的 Authorization\n\t\tauthorizationHeader :&#x3D; c.GetHeader(&quot;Authorization&quot;)\n\n\t\t&#x2F;&#x2F; 验证 Authorization 是否为空\n\t\tif authorizationHeader &#x3D;&#x3D; &quot;&quot; &#123;\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;error&quot;: &quot;Authorization header is required&quot;&#125;)\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; 解析并验证 JWT\n\t\ttoken, err :&#x3D; auth.ParseJWT(authorizationHeader)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;error&quot;: &quot;Invalid token&quot;&#125;)\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; 在上下文中保存解析后的用户信息\n\t\tc.Set(&quot;user&quot;, token.Claims.User)\n\n\t\tc.Next()\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; AuthRequired 授权中间件\nfunc AuthRequired() gin.HandlerFunc &#123;\n\treturn func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 检查上下文中是否存在用户信息\n\t\tuser, exists :&#x3D; c.Get(&quot;user&quot;)\n\t\tif !exists &#123;\n\t\t\tc.JSON(http.StatusForbidden, gin.H&#123;&quot;error&quot;: &quot;Forbidden&quot;&#125;)\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; 进行授权判断，例如检查用户权限、角色等\n\t\t&#x2F;&#x2F; ...\n\n\t\tc.Next()\n\t&#125;\n&#125;</code></pre>\n\n<p>在上面的示例中，<code>AuthMiddleware</code> 是一个认证中间件，它用于验证请求头中的 Authorization 字段中的 JWT，并将解析后的用户信息保存在上下文中，供后续的中间件或处理器函数使用。<code>AuthRequired</code> 是一个授权中间件，它用于检查上下文中是否存在用户信息，并根据具体的授权逻辑判断用户是否有权限访问资源。在使用这两个中间件时，可以根据需要在路由组或路由处理器中使用 <code>Use</code> 方法添加这两个中间件，以实现认证和授权的功能。</p>\n<h3 id=\"认证授权使用\"><a href=\"#认证授权使用\" class=\"headerlink\" title=\"认证授权使用\"></a>认证授权使用</h3><p>在使用 Gin 框架中的中间件时，一般需要按照以下步骤进行：</p>\n<ol>\n<li><p>定义中间件函数：根据需求，编写一个或多个中间件函数，每个中间件函数都应该符合 <code>gin.HandlerFunc</code> 类型的定义，接收一个 <code>*gin.Context</code> 参数，用于处理请求和响应。</p>\n</li>\n<li><p>注册中间件函数：在项目中的合适位置，将中间件函数注册到 Gin 框架中。例如，在应用程序的主函数或初始化函数中，使用 <code>router.Use()</code> 方法将中间件函数注册到 Gin 的路由器（<code>*gin.Engine</code>）中。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;your-package&#x2F;middleware&quot;\n)\n\nfunc main() &#123;\n\trouter :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 注册认证中间件\n\trouter.Use(middleware.AuthMiddleware())\n\n\t&#x2F;&#x2F; 注册授权中间件\n\trouter.Use(middleware.AuthRequired())\n\n\t&#x2F;&#x2F; 添加路由处理器函数\n\trouter.GET(&quot;&#x2F;protected&quot;, func(c *gin.Context) &#123;\n\t\t&#x2F;&#x2F; 这里可以访问到已经经过认证和授权的用户信息\n\t\tuser :&#x3D; c.MustGet(&quot;user&quot;).(string)\n\t\tc.JSON(200, gin.H&#123;&quot;user&quot;: user&#125;)\n\t&#125;)\n\n\trouter.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p>在上面的示例中，<code>middleware.AuthMiddleware()</code> 和 <code>middleware.AuthRequired()</code> 分别是认证和授权中间件函数，通过 <code>router.Use()</code> 方法将它们注册到 Gin 的路由器中。随后，在路由处理器函数中可以通过 <code>c.MustGet()</code> 方法获取中间件函数中设置的上下文值，例如获取已经经过认证和授权的用户信息。</p>\n<p>需要注意的是，中间件的注册顺序会影响它们的执行顺序。在使用多个中间件时，可以通过调整注册的顺序来控制它们的执行顺序，从而满足业务需求。</p>\n<h3 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h3><p>使用 curl 进行请求时，可以通过 <code>-H</code> 参数设置请求头部，将认证令牌放入请求头部进行传递。</p>\n<p>以下是一个使用 curl 发送带认证令牌的请求的示例命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -H &quot;Authorization: my_token&quot; http:&#x2F;&#x2F;localhost:8080&#x2F;protected</code></pre>\n\n<p>上面的命令中，<code>-H</code> 参数用于设置请求头部，将认证令牌 “my_token” 放入请求头部的 “Authorization” 字段中。然后，通过指定请求的 URL “<a href=\"http://localhost:8080/protected&quot;\">http://localhost:8080/protected&quot;</a> 发送请求。如果认证令牌有效，将会收到正常的响应；如果认证令牌无效，将会收到 HTTP 401 错误响应。</p>\n<h2 id=\"gorm\"><a href=\"#gorm\" class=\"headerlink\" title=\"gorm\"></a>gorm</h2><h2 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h2><h2 id=\"如何组织项目\"><a href=\"#如何组织项目\" class=\"headerlink\" title=\"如何组织项目\"></a>如何组织项目</h2>","text":" 引用类型和值类型 Go 中严格区分引用类型和值类型 golang appendappend 是 Go 语言中的内置函数，用于向切片中追加元素。其语法为： append(slice []Type, elems ...Type) []Type 其中，slice 是要追加元素的切片，...","link":"","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"chatGPT2021","slug":"chatGPT2021","count":12,"path":"api/tags/chatGPT2021.json"},{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用类型和值类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#golang-append\"><span class=\"toc-text\">golang append</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E8%BF%B0%E5%86%85%E5%AE%B9%E4%B8%AD%E5%8E%9F-slice-%E4%BC%9A%E8%A2%AB%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%8C%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">上述内容中原 slice 会被怎么处理，会不会被垃圾回收</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E4%B8%8B-append-%E7%9A%84%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">分析下 append 的源码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E8%BF%B0%E6%BA%90%E7%A0%81%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81-%E5%BC%80%E5%90%AF%E7%AB%9E%E6%80%81%E6%A3%80%E6%B5%8B%E5%92%8C%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">上述源码中为什么要 开启竞态检测和内存检测</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E5%80%BC%E5%92%8C%E7%A9%BA%E5%80%BC\"><span class=\"toc-text\">零值和空值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin-%E5%9C%A8%E6%8E%A5%E6%94%B6-put-%E8%AF%B7%E6%B1%82%E6%97%B6%E5%80%99%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-%E7%A9%BA%E7%BD%AE%E5%92%8C%E9%9B%B6%E5%80%BC\"><span class=\"toc-text\">gin 在接收 put 请求时候如何区分 空置和零值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin-%E4%B8%AD%E4%BD%BF%E7%94%A8-UnmarshalJSON-%E5%A4%84%E7%90%86-put-%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%9F%90%E4%BA%9B%E5%AD%97%E6%AE%B5%E9%9B%B6%E5%80%BC%E5%92%8C%E7%A9%BA%E7%BD%AE%E7%9A%84%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">gin 中使用 UnmarshalJSON 处理 put 请求中对象某些字段零值和空置的完整代码例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">更好的例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%99%E4%B8%AA%E4%BA%8B%E4%BE%8B%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">这个事例的请求输入输出的结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E4%BC%A0-my-string-%E5%AD%97%E6%AE%B5%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">没传 my_string 字段的情况，输入输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8C%BA%E5%88%86%E4%B8%8D%E4%BA%86-my-string-%E6%98%AF%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">这样就区分不了 my_string 是不是真正的空字符串</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#golang-%E7%BB%93%E6%9E%84%E4%BD%93%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">golang 结构体继承</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99\"><span class=\"toc-text\">区分大小写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">打印日志</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-%E4%B8%AD-%E5%80%BC-vs-%E6%8C%87%E9%92%88\"><span class=\"toc-text\">方法 中 值 vs 指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON\"><span class=\"toc-text\">JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#golang-json-API\"><span class=\"toc-text\">golang json API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E4%B8%AA-API-%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">每个 API 的例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-json-Marshal-v-interface-byte-error\"><span class=\"toc-text\">1 json.Marshal(v interface{}) ([]byte, error):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-json-Unmarshal-data-byte-v-interface-error\"><span class=\"toc-text\">2 json.Unmarshal(data []byte, v interface{}) error:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-json-NewEncoder-w-io-Writer-json-Encoder\"><span class=\"toc-text\">3 json.NewEncoder(w io.Writer) *json.Encoder:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-json-NewDecoder-r-io-Reader-json-Decoder\"><span class=\"toc-text\">4 json.NewDecoder(r io.Reader) *json.Decoder:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-json-UnmarshalJSON-data-byte-v-interface-error-%E7%BB%AD\"><span class=\"toc-text\">5 json.UnmarshalJSON(data []byte, v interface{}) error (续):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-json-Compact-dst-bytes-Buffer-src-byte-error\"><span class=\"toc-text\">6 json.Compact(dst *bytes.Buffer, src []byte) error:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-json-HTMLEscape-dst-bytes-Buffer-src-byte\"><span class=\"toc-text\">7 json.HTMLEscape(dst *bytes.Buffer, src []byte):</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-json-Valid-data-byte-bool\"><span class=\"toc-text\">8 json.Valid(data []byte) bool:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">内存模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">并发与一致</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-Select-%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Go Select 详解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#defer\"><span class=\"toc-text\">defer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%BD%E5%8A%A0\"><span class=\"toc-text\">追加</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%86%E6%9F%90%E9%A1%B9%E6%98%AF%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%BF%98%E6%98%AF%E5%85%B6%E5%80%BC%E4%B8%BA%E9%9B%B6%E5%80%BC\"><span class=\"toc-text\">区分某项是不存在还是其值为零值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%8F%98%E8%83%8C%E6%99%AF%E8%89%B2\"><span class=\"toc-text\">改变背景色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%EF%BC%88skip%EF%BC%89\"><span class=\"toc-text\">加密（skip）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#token-x2F-cookie\"><span class=\"toc-text\">token&#x2F;cookie</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Header\"><span class=\"toc-text\">Header</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Payload\"><span class=\"toc-text\">Payload</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signature-%E7%AD%BE%E5%90%8D\"><span class=\"toc-text\">Signature 签名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90-token\"><span class=\"toc-text\">生成 token</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90-token\"><span class=\"toc-text\">解析 token</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">跨域问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gin\"><span class=\"toc-text\">gin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gin-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">gin 中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE-%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E-%E4%BA%8B%E4%BE%8B-1\"><span class=\"toc-text\">返回数据 统一处理返回 事例 1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE-%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E-%E4%BA%8B%E4%BE%8B-2\"><span class=\"toc-text\">返回数据 统一处理返回 事例 2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#token-%E6%A0%A1%E9%AA%8C%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">token 校验中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">异常统一处理中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">单个中间件管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">多个中间件管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">跨域问题处理中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E8%B7%AF%E7%94%B1%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">分组路由跨域问题处理中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%98%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">还能做什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">日志中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#next-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">.next()作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">认证和授权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">认证授权使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">发送请求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm\"><span class=\"toc-text\">gorm</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis\"><span class=\"toc-text\">redis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">如何组织项目</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Gorm的一些疑问","uid":"0a2a2b57038aa5719495ef60739019cc","slug":"2023-05-04gorm","date":"2023-05-04T01:31:34.000Z","updated":"2023-05-15T13:17:33.002Z","comments":true,"path":"api/articles/2023-05-04gorm.json","keywords":null,"cover":null,"text":"gormgorm 中文文档 golang gorm 有哪些 APIGolang 的 ORM 库 GORM 是一个流行的数据库操作库，提供了丰富的 API 用于进行数据库操作。以下是 GORM 库的一些常用 API： 创建连接： db, err :&#x3D; gorm.Open(...","link":"","photos":[],"count_time":{"symbolsCount":"120k","symbolsTime":"1:49"},"categories":[{"name":"Gorm","slug":"Gorm","count":1,"path":"api/categories/Gorm.json"}],"tags":[{"name":"chatGPT2021","slug":"chatGPT2021","count":12,"path":"api/tags/chatGPT2021.json"},{"name":"Gorm","slug":"Gorm","count":1,"path":"api/tags/Gorm.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"工具 curl","uid":"92b035fc1ec1b990bc3338018d34636f","slug":"2023-05-04curl","date":"2023-05-04T01:30:00.000Z","updated":"2023-05-15T13:17:32.998Z","comments":true,"path":"api/articles/2023-05-04curl.json","keywords":null,"cover":null,"text":"curl是什么curl 是一个用于发送 HTTP 请求的命令行工具，支持多种协议，包括 HTTP、HTTPS、FTP、SMTP 等。其基本语法如下： curl [options] [URL] 其中，options 是 curl 命令的选项，用于设置请求的各种参数，URL 是目标 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"工具","slug":"工具","count":22,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":16,"path":"api/tags/工具.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}