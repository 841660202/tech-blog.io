{"title":"状态管理工具-mobx","uid":"bda443873131c24fe879383385449e93","slug":"2023-02-18mobx","date":"2023-02-18T01:36:28.000Z","updated":"2023-02-20T22:43:20.284Z","comments":true,"path":"api/articles/2023-02-18mobx.json","keywords":null,"cover":null,"content":"<h2 id=\"mobx-是什么\"><a href=\"#mobx-是什么\" class=\"headerlink\" title=\"mobx 是什么\"></a>mobx 是什么</h2><ol>\n<li>它通过运用<code>透明的函数式响应编程</code>（Transparent Functional Reactive Programming，TFRP）使状态管理变得简单和可扩展</li>\n<li>任何可以从应用状态中派生出来的值都应该被自动派生出来</li>\n</ol>\n<h2 id=\"mobx-有什么特点\"><a href=\"#mobx-有什么特点\" class=\"headerlink\" title=\"mobx 有什么特点\"></a>mobx 有什么特点</h2><ol>\n<li><code>透明函数式响应编程</code></li>\n<li><code>简单无模版</code>,很简单不用写模版代码（redux 也可以自动化生成 reducer、action）</li>\n<li><code>数据追踪</code>：轻松实现最优渲染，对数据的变更和使用都会在运行时被追踪到</li>\n<li><code>架构自由</code>：没有硬性的规定，低耦合、可移植性好，便于测试</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><code>过于自由</code>，MobX 提供的约定及模版代码很少，如果团队不做一些约定，容易导致团队代码风格不统一。</li>\n<li><code>可拓展，可维护性</code>，也许你会担心 Mobx 能不能适应后期项目发展壮大呢？确实 Mobx 更适合用在中小型项目中，但这并不表示其不能支撑大型项目，关键在于大型项目通常需要特别注意可拓展性，可维护性，相比而言，规范的 Redux 更有优势，而 Mobx 更自由，需要我们自己制定一些规则来确保项目后期拓展，维护难易程度；</li>\n</ol>\n<h2 id=\"mobx-能解决什么问题\"><a href=\"#mobx-能解决什么问题\" class=\"headerlink\" title=\"mobx 能解决什么问题\"></a>mobx 能解决什么问题</h2><p>redux 模版代码太多</p>\n<h2 id=\"mobx-它为什么会出现\"><a href=\"#mobx-它为什么会出现\" class=\"headerlink\" title=\"mobx 它为什么会出现\"></a>mobx 它为什么会出现</h2><p>redux 模版代码多，使用起来麻烦</p>\n<h2 id=\"相比于-redux-有什么优势\"><a href=\"#相比于-redux-有什么优势\" class=\"headerlink\" title=\"相比于 redux 有什么优势\"></a>相比于 redux 有什么优势</h2><p>少写了模版代码</p>\n<h2 id=\"mobx-浏览器开发工具\"><a href=\"#mobx-浏览器开发工具\" class=\"headerlink\" title=\"mobx 浏览器开发工具\"></a>mobx 浏览器开发工具</h2><p><a href=\"https://chrome.google.com/webstore/detail/mobx-developer-tools/pfgnfdagidkfgccljigdamigbcnndkod?hl=zh-CN\" target=\"_blank\" >MobX Developer Tools</a></p>\n<h2 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h2><p><strong>1. redux 也可以不写模版代码： 直接用 state 自动生成 action 和 reducer（确实可行，公司内部已经在用）</strong></p>\n<p>如果是这样的话，mobx 还有什么优势？</p>\n<p>观察性能？怎么看上去有点和 react 相背，有点倾向 vue 的感觉</p>\n<p>如果 mobx 真的好，为什么 react 和 flutter 都没有内置 <code>mobx</code>，反而两大框架都内置了 <code>context</code>, react 内置了 <code>useReducer</code></p>\n<p><strong>2. mobx 的一系列操作，很有局限性</strong></p>\n<p><a href=\"https://zh.mobx.js.org/observable-state.html#%E5%B1%80%E9%99%90%E6%80%A7\" target=\"_blank\" >observable-state.html#局限性</a></p>\n<p><a href=\"https://zh.mobx.js.org/actions.html#%E4%BD%BF%E7%94%A8-flow-%E4%BB%A3%E6%9B%BF-async--await-\" target=\"_blank\" >使用-flow-代替-async–await-</a> 像是在倒退</p>\n<p><a href=\"https://zh.mobx.js.org/react-integration.html#:~:text=%E4%BA%86%20observer%EF%BC%8C-,%E4%BD%86%E6%98%AF%E4%B8%8D%E8%A6%81%E6%8B%85%E5%BF%83%EF%BC%8C%20%E5%AE%83%E4%B8%8D%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%80%A7%E8%83%BD%E6%8D%9F%E5%A4%B1,-%E3%80%82%E4%BB%8E%E5%8F%A6%E4%B8%80%E4%B8%AA\" target=\"_blank\" >但是不要担心， 它不会导致性能损失</a>（我抱怀疑态度）</p>\n<p><strong>有违 react 设计</strong></p>\n<ol>\n<li>useState,本身实现了更新，却要在另外系统中实现响应，react + mobx 岂不是存在两套响应在其中</li>\n<li>结合 useEffect 进行清理副作用，结合 react 可知道 useEffect 的返回函数，在每次 effect 执行前都会清理一次，（这不损失性能？）</li>\n<li>如果用 mobx 封装组件，要使用这个组件，就必须要用 mobx，这也不符合程序设计，可移植性差</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>vue 作者尤雨溪如是说：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Mobx 在 React 社区很流行，实际上在 Vue 也采用了几乎相同的反应系统。在有限程度上，React + Mobx 也可以被认为是更繁琐的 Vue，所以如果你习惯组合使用它们，那么选择 Vue 会更合理。</p></blockquote>\n<h2 id=\"可能更加倾向于什么都不用\"><a href=\"#可能更加倾向于什么都不用\" class=\"headerlink\" title=\"可能更加倾向于什么都不用\"></a>可能更加倾向于什么都不用</h2><ol>\n<li>react 只用 react 内置的状态管理</li>\n<li>flutter 只用官方推荐的 provider(记不太清了,getx 也挺不错的)</li>\n</ol>\n","text":"mobx 是什么 它通过运用透明的函数式响应编程（Transparent Functional Reactive Programming，TFRP）使状态管理变得简单和可扩展 任何可以从应用状态中派生出来的值都应该被自动派生出来 mobx 有什么特点 透明函数式响应编程 简单无模...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"状态管理工具","slug":"状态管理工具","count":1,"path":"api/categories/状态管理工具.json"}],"tags":[{"name":"状态管理工具","slug":"状态管理工具","count":1,"path":"api/tags/状态管理工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">mobx 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">mobx 有什么特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-%E8%83%BD%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">mobx 能解决什么问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-%E5%AE%83%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0\"><span class=\"toc-text\">mobx 它为什么会出现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E6%AF%94%E4%BA%8E-redux-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">相比于 redux 有什么优势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">mobx 浏览器开发工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83%EF%BC%9A\"><span class=\"toc-text\">思考：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%83%BD%E6%9B%B4%E5%8A%A0%E5%80%BE%E5%90%91%E4%BA%8E%E4%BB%80%E4%B9%88%E9%83%BD%E4%B8%8D%E7%94%A8\"><span class=\"toc-text\">可能更加倾向于什么都不用</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"技术选型-考虑因素","uid":"6f467a9b3152eb555a0298695fd77d63","slug":"2023-02-18技术选型","date":"2023-02-18T01:52:12.000Z","updated":"2023-05-15T13:17:32.982Z","comments":true,"path":"api/articles/2023-02-18技术选型.json","keywords":null,"cover":null,"text":" 考虑的角度 纵向考虑： 过去 看公司内部：现有技术积累，技术储备，人员配置 现在 学习成本、和收益 将来 看市场份额：市场是否普及，技术是为项目服务的，不能只顾着自己爽了，以后没人维护，或者维护成本很高 横向对比： 看技术本身：易用性、适用场景；能否解决什么痛点问题 看社区生态...","link":"","photos":[],"count_time":{"symbolsCount":281,"symbolsTime":"1 mins."},"categories":[{"name":"复盘","slug":"复盘","count":7,"path":"api/categories/复盘.json"}],"tags":[{"name":"复盘","slug":"复盘","count":7,"path":"api/tags/复盘.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"RN 与原生的通信","uid":"c83d31c32f6ad912ea131cac215fb5d8","slug":"2023-02-17rn-native","date":"2023-02-17T11:12:39.000Z","updated":"2023-05-15T13:17:32.980Z","comments":true,"path":"api/articles/2023-02-17rn-native.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202302171928314.webp","text":"是什么RN 与原生进行数据交换 为什么 访问原生API: 有时候 App 需要访问平台 API，但 React Native 可能还没有相应的模块包装； 复用原生功能: 或者你需要复用一些 Java 代码，而不是用 Javascript 重新实现一遍； 性能和线程: 又或者你需要...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"react-native","slug":"react-native","count":8,"path":"api/categories/react-native.json"}],"tags":[{"name":"react-native","slug":"react-native","count":8,"path":"api/tags/react-native.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}