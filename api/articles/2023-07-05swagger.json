{"title":"Swagger 页面解析","uid":"21f262aa0def51563dca48d4ff6e0e83","slug":"2023-07-05swagger","date":"2023-07-05T07:20:26.000Z","updated":"2023-07-08T01:06:25.368Z","comments":true,"path":"api/articles/2023-07-05swagger.json","keywords":null,"cover":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>后端有些用接口是用 swagger 书写的，CV 操作太累</p>\n<p>以前方案</p>\n<ol>\n<li>用阿里的一个 vscode 插件进行生成，有些生成的比较烂，不能在已有的项目中使用工具</li>\n<li>自己写一个分析 swagger json 工具有一定的工作量，尤其是在处理具有依赖关系的模型时</li>\n<li>改造 knife4j,进行定制化开发</li>\n<li>直接用脚本爬去页面，然后进行脚本化生成代码<ol>\n<li>url</li>\n<li>参数</li>\n<li>响应</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"现在用方案-4-来操作\"><a href=\"#现在用方案-4-来操作\" class=\"headerlink\" title=\"现在用方案 4 来操作\"></a>现在用方案 4 来操作</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; knife4j 多 tab，看不到但是存在,解析当前选中的tab\nvar tabIndex &#x3D; Array.from(document.getElementsByClassName(&#39;ant-tabs-nav ant-tabs-nav-animated&#39;)[0].childNodes[0].childNodes).findIndex(\n  (item) &#x3D;&gt; item.classList.contains(&#39;ant-tabs-tab-active&#39;)\n);\n&#x2F;&#x2F; 打开的tab\nvar tabContentDom &#x3D; document.getElementsByClassName(&#39;ant-tabs-tabpane-active&#39;)[tabIndex];\n\n&#x2F;&#x2F; title\nvar titledom &#x3D; tabContentDom.getElementsByClassName(&#39;knife4j-api-title&#39;);\nvar title &#x3D; titledom[0].firstChild.firstChild.innerHTML;\n&#x2F;&#x2F; method\nvar methoddom &#x3D; tabContentDom.getElementsByClassName(&#39;knife4j-api-summary-method&#39;);\nvar method &#x3D; methoddom[0].innerHTML;\n&#x2F;&#x2F; url\nvar url &#x3D; tabContentDom.getElementsByClassName(&#39;knife4j-api-summary-path&#39;)[0].innerHTML;\n&#x2F;&#x2F; 参数\nvar apilist &#x3D; tabContentDom.getElementsByClassName(&#39;api-title&#39;);\napilist[0].innerHTML;\n&#x2F;&#x2F; (&#39;请求参数&#39;);\n\n&#x2F;&#x2F; java类型映射typescipt类型\nvar EnumType &#x3D; &#123;\n  string: &#39;string&#39;,\n  &#39;integer(int32)&#39;: &#39;number&#39;,\n  bool: &#39;boolean&#39;,\n&#125;;\nvar ParamsStr &#x3D; &#39;&#39;;\nvar paramCount &#x3D; 0;\nArray.from(apilist[0].nextSibling.getElementsByTagName(&#39;tbody&#39;)[0].childNodes).forEach((tr) &#x3D;&gt; &#123;\n  const key &#x3D; tr.childNodes[0].innerHTML;\n  const comment &#x3D; tr.childNodes[1].innerHTML;\n  const required &#x3D; tr.childNodes[3].innerHTML;\n  const type &#x3D; tr.childNodes[4].childNodes[0].childNodes[0].innerHTML;\n  paramCount &#x3D; +1;\n  ParamsStr +&#x3D; &#96;\n  &#x2F;**$&#123;comment&#125; *&#x2F;\n  $&#123;key&#125;$&#123;required ? &#39;?&#39; : &#39;&#39;&#125;: $&#123;EnumType[type]&#125;&#96;;\n&#125;);\n\napilist[1].innerHTML;\n&#x2F;&#x2F; (&#39;响应状态&#39;);\napilist[2].innerHTML;\n&#x2F;&#x2F; (&#39;响应参数&#39;);\napilist[3].innerHTML;\n&#x2F;&#x2F; (&#39;响应示例&#39;);\n\n&#x2F;&#x2F; console.log(&#96;$&#123;title&#125; $&#123;method&#125; $&#123;url&#125;&#96;);\n&#x2F;&#x2F; 名字\nvar TypeName &#x3D; url\n  .slice(1)\n  .split(&#39;&#x2F;&#39;)\n  .map((item, index) &#x3D;&gt; item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n  .join(&#39;&#39;);\n&#x2F;&#x2F; 类型\nvar interfaceStr &#x3D;\n  !ParamsStr &amp;&amp; paramCount &gt; 2\n    ? &#39;&#39;\n    : &#96;export interface I$&#123;TypeName&#125; &#123;\n   $&#123;ParamsStr&#125;\n&#125;&#96;;\n&#x2F;&#x2F; console.log(interfaceStr);\n&#x2F;&#x2F; 方法名前缀枚举\nvar EnameNamePrefix &#x3D; &#123;\n  POST: &#39;save&#39;,\n  GET: &#39;get&#39;,\n  PUT: &#39;update&#39;,\n  DELETE: &#39;del&#39;,\n&#125;;\n&#x2F;&#x2F; 项目中封装的request方法\nvar ProjectMethod &#x3D; &#123;\n  POST: &#39;post&#39;,\n  GET: &#39;get&#39;,\n  PUT: &#39;put&#39;,\n  DELETE: &#39;del&#39;,\n&#125;;\n\nvar apiName &#x3D; EnameNamePrefix[method] + TypeName.charAt(0).toUpperCase() + TypeName.slice(1);\nvar apiFunParamsWithType &#x3D; !ParamsStr ? &#39;&#39; : paramCount &gt; 2 ? &#96;params:$&#123;TypeName&#125;&#96; : &#96;params:&#123;$&#123;ParamsStr&#125;&#125;&#96;;\nvar apiFunParams &#x3D; !ParamsStr ? &#39;&#39; : &#96;params&#96;;\n\nvar apiFun &#x3D; &#96;\n$&#123;paramCount &gt; 2 ? interfaceStr : &#39;&#39;&#125;\n\n&#x2F;**$&#123;title&#125;*&#x2F;\n\n&#x2F;&#x2F; [链接]($&#123;location.href&#125;)\n\nasync function $&#123;apiName&#125;($&#123;apiFunParamsWithType&#125;,  ctx?): IPromiseResultData&lt;any&gt; &#123;\n  return $&#123;ProjectMethod[method]&#125;(&#39;$&#123;url&#125;&#39;, apiFunParams, ctx)\n&#125;\n&#96;;\n\nconsole.log(apiFun);</code></pre>\n\n<h2 id=\"这里要注意下-knife4j\"><a href=\"#这里要注意下-knife4j\" class=\"headerlink\" title=\"这里要注意下 knife4j\"></a>这里要注意下 knife4j</h2><ol>\n<li>多 tab，看不到但是存在，这玩意多了会卡机子</li>\n<li>在上述脚本分析的时候要分析是打开了哪个 tab</li>\n</ol>\n","text":"背景后端有些用接口是用 swagger 书写的，CV 操作太累 以前方案 用阿里的一个 vscode 插件进行生成，有些生成的比较烂，不能在已有的项目中使用工具 自己写一个分析 swagger json 工具有一定的工作量，尤其是在处理具有依赖关系的模型时 改造 knife4j,...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":26,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":20,"path":"api/tags/工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E5%9C%A8%E7%94%A8%E6%96%B9%E6%A1%88-4-%E6%9D%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">现在用方案 4 来操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%99%E9%87%8C%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%8B-knife4j\"><span class=\"toc-text\">这里要注意下 knife4j</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Echarts","uid":"bd8c19e11e91b5a0b7b99bb51502fe91","slug":"2023-07-07echart","date":"2023-07-07T06:47:21.000Z","updated":"2023-07-20T14:58:47.211Z","comments":true,"path":"api/articles/2023-07-07echart.json","keywords":null,"cover":[],"text":" alignTicks: true, 祖父级容器 zoom，导致 echart hover 操作偏移，修复代码import &#123; useModel &#125; from &#39;umi&#39;; import useMemoizedFn from &#39;.&#x...","link":"","photos":[],"count_time":{"symbolsCount":744,"symbolsTime":"1 mins."},"categories":[{"name":"ECharts","slug":"ECharts","count":1,"path":"api/categories/ECharts.json"}],"tags":[{"name":"ECharts","slug":"ECharts","count":1,"path":"api/tags/ECharts.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React ts","uid":"6ab3589fb705488879a93d4f18abc3a2","slug":"2023-07-04react-ts","date":"2023-07-04T08:28:12.000Z","updated":"2023-07-08T01:06:25.368Z","comments":true,"path":"api/articles/2023-07-04react-ts.json","keywords":null,"cover":null,"text":"useImperativeHandle 如何使用 typescript 类型在 TypeScript 中使用 useImperativeHandle 需要定义一个合适的类型以确保类型安全性。以下是使用 useImperativeHandle 的示例代码，包括 TypeScript...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"React","slug":"React","count":38,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":32,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}