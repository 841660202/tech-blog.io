{"title":"前端基础-安全","uid":"63e60c5ff1f2bb6bee35b8ec5818fb3b","slug":"2022-07-15安全","date":"2022-07-15T06:32:30.000Z","updated":"2022-09-15T14:26:10.889Z","comments":true,"path":"api/articles/2022-07-15安全.json","keywords":null,"cover":null,"content":"<h2 id=\"前端安全问题\"><a href=\"#前端安全问题\" class=\"headerlink\" title=\"前端安全问题?\"></a>前端安全问题?</h2><ul>\n<li><code>跨站脚本 (Cross-Site Scripting, XSS)</code>: ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS. 早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚ ⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; VBScript &#x2F; CSS &#x2F; Flash 等</li>\n<li><code>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</code>: 指攻击者通过设置好的陷阱，强制对已完成认证的⽤ 户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击</li>\n<li><code>iframe 的滥⽤</code>: iframe 中的内容是由第三⽅来提供的，默认情况下他们不受我们的控制，他们可以在 iframe 中运⾏ JavaScirpt 脚本、Flash 插件、弹出对话框等等，这可能会破坏前端⽤户体验</li>\n<li><code>恶意第三⽅库</code>: 【<code>这个就需要我们在使用一些库之前，最好能够阅读其源码</code>】⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候我们都是在借助开发框架和各种类库进⾏ 快速开发,⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题,⽐如 event-stream 的恶意代码事件,2018 年 11 ⽉ 21 ⽇， 名为 FallingSnow 的⽤户在知名 JavaScript 应⽤库 event-stream 在 github Issuse 中发布了针对植⼊的恶意代码的疑 问，表示 event-stream 中存在⽤于窃取⽤户数字钱包的恶意代码</li>\n<li>DDoS 攻击， <code>DDos</code>全名<code>Distributed Denial of Service</code>，翻译成中文就是<code>分布式拒绝服务</code></li>\n<li>中间人攻击， (Man-in-the-middle attack, MITM)</li>\n</ul>\n<h2 id=\"XSS-分为哪⼏类\"><a href=\"#XSS-分为哪⼏类\" class=\"headerlink\" title=\"XSS 分为哪⼏类?\"></a>XSS 分为哪⼏类?</h2><p>根据攻击的来源，XSS 攻击可分为<code>存储型</code>、<code>反射型</code>和 <code>DOM型</code>三种。</p>\n<h3 id=\"存储型：\"><a href=\"#存储型：\" class=\"headerlink\" title=\"存储型：\"></a>存储型：</h3><ul>\n<li>恶意代码存放的位置。 插⼊点：由谁取得恶意代码，并插⼊到⽹⻚上。 存储型 XSS 存储型 XSS 的攻击步骤：</li>\n</ul>\n<ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的<code>数据库</code>中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码<code>从数据库取出</code>，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>\n</ol>\n<p><strong>场景</strong></p>\n<p>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>反射型 XSS 的攻击步骤：</p>\n<ol>\n<li>攻击者构<code>造出特殊的 URL</code>，其中包含恶意代码。</li>\n<li>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码<code>从URL中取出</code>，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>\n</ol>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。</p>\n<p><strong>场景</strong></p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n<p>POST 的内容也可以触发反射型 XSS，只不过其触发条件⽐较苛刻（需要构造表单提交⻚⾯，并引导⽤户点击），所 以⾮常少⻅。</p>\n<h3 id=\"DOM-型\"><a href=\"#DOM-型\" class=\"headerlink\" title=\"DOM 型\"></a>DOM 型</h3><p>XSS DOM 型 XSS 的攻击步骤：</p>\n<ol>\n<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>\n<li>⽤户打开带有恶意代码的 URL。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，前端 JavaScript 取出 URL 中的恶意代码并执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>\n</ol>\n<p>DOM 型 XSS 跟前两种 XSS 的区别：</p>\n<p>DOM 型 XSS 攻击中，<code>取出和执⾏恶意代码由浏览器端完成</code>，属于前端 JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n<h2 id=\"如何预防-XSS\"><a href=\"#如何预防-XSS\" class=\"headerlink\" title=\"如何预防 XSS?\"></a>如何预防 XSS?</h2><p>XSS 攻击有两⼤要素：</p>\n<ol>\n<li>攻击者提交恶意代码。</li>\n<li>浏览器执⾏恶意代码。</li>\n</ol>\n<p>针对第⼀个要素：我们是否能够在⽤户输⼊的过程，过滤掉⽤户输⼊的恶意代码呢？</p>\n<h3 id=\"输⼊过滤\"><a href=\"#输⼊过滤\" class=\"headerlink\" title=\"输⼊过滤\"></a>输⼊过滤</h3><ul>\n<li>防⽌ HTML 中出现注⼊</li>\n<li>防⽌ JavaScript 执⾏时，执⾏恶意代码</li>\n</ul>\n<h3 id=\"存储型和反射型-XSS\"><a href=\"#存储型和反射型-XSS\" class=\"headerlink\" title=\"存储型和反射型 XSS\"></a>存储型和反射型 XSS</h3><p>如何产生？</p>\n<p>存储型和反射型 XSS 都是在服务端取出恶意代码后，插⼊到响应 HTML ⾥的，攻击者刻意编写的“数据”被内嵌到“代 码”中，被浏览器所执⾏。</p>\n<p>预防这两种漏洞，有两种常⻅做法：</p>\n<ul>\n<li>改成纯前端渲染，把代码和数据分隔开</li>\n<li>对 HTML 做充分转义。</li>\n</ul>\n<h3 id=\"DOM-型-XSS\"><a href=\"#DOM-型-XSS\" class=\"headerlink\" title=\"DOM 型 XSS\"></a>DOM 型 XSS</h3><p>DOM 型 XSS 攻击，实际上就是⽹站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执⾏了。</p>\n<ul>\n<li><p>在使⽤ <code>.innerHTML</code> 、 <code>.outerHTML</code> 、 <code>document.write()</code> 时要特别⼩⼼，不要把不可信的数据作为 HTML 插到⻚⾯上，⽽应尽量使⽤ <code>.textContent</code> 、 <code>.setAttribute()</code> 等。</p>\n<br/>\n<br/></li>\n<li><p>如果⽤ Vue&#x2F;React 技术栈，并且不使⽤ <code>v-html</code> &#x2F; <code>dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code> 、 <code>outerHTML</code> 的 XSS 隐患。</p>\n<br/>\n<br/>\n</li>\n<li><p>DOM 中的内联事件监听器，如 location 、 onclick 、 onerror 、 onload 、 onmouseover 等，</p>\n<br/>\n<br/></li>\n<li><p><code>&lt;a&gt;</code> 标签的 href 属 性，</p>\n<br/>\n<br/></li>\n<li><p>JavaScript 的 <code>eval()</code> 、 <code>setTimeout()</code> 、 <code>setInterval()</code> 等，都能<code>把字符串作为代码运⾏</code>。</p>\n</li>\n</ul>\n<p>如果不可信的数据拼接 到字符串中传递给这些 API，很容易产⽣安全隐患，请务必避免。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 内联事件监听器中包含恶意代码 --&gt;\n![](https:&#x2F;&#x2F;awps-assets.meituan.net&#x2F;mit-x&#x2F;blog-images-bundle-2018b&#x2F;3e724ce0.data:image&#x2F;png,)\n\n&lt;!-- 链接内包含恶意代码 --&gt;\n&lt;a href&#x3D;&quot;UNTRUSTED&quot;&gt;1&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n  &#x2F;&#x2F; setTimeout()&#x2F;setInterval() 中调⽤恶意代码\n\n  setTimeout(&quot;UNTRUSTED&quot;);\n  setInterval(&quot;UNTRUSTED&quot;);\n\n  &#x2F;&#x2F; location 调⽤恶意代码\n\n  location.href &#x3D; &quot;UNTRUSTED&quot;;\n\n  &#x2F;&#x2F; eval() 中调⽤恶意代码\n  eval(&quot;UNTRUSTED&quot;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"其他-XSS-防范措施\"><a href=\"#其他-XSS-防范措施\" class=\"headerlink\" title=\"其他 XSS 防范措施\"></a>其他 XSS 防范措施</h3><p>虽然在渲染⻚⾯和执⾏ JavaScript 时，通过谨慎的转义可以防⽌ XSS 的发⽣，但完全依靠开发的谨慎仍然是不够的。</p>\n<p>以下介绍⼀些通⽤的⽅案，可以降低 XSS 带来的⻛险和后果。</p>\n<ul>\n<li><p><code>Content Security Policy</code> 严格的 CSP 在 XSS 的防范中可以起到以下的作⽤： 禁⽌加载外域代码，防⽌复杂的攻击逻辑 禁⽌外域提交，⽹站被攻击后，⽤户的数据不会泄露到外域</p>\n</li>\n<li><p><code>禁⽌内联脚本执⾏</code>（规则较严格，⽬前发现 GitHub 使⽤） 禁⽌未授权的脚本执⾏（新特性，Google Map 移动版在使⽤）</p>\n</li>\n<li><p><code>合理使⽤上报</code>可以及时发现 XSS，利于尽快修复问题 输⼊内容⻓度控制 对于不受信任的输⼊，都应该限定⼀个合理的⻓度。虽然⽆法完全防⽌ XSS 发⽣，但可以增加 XSS 攻击的难度。</p>\n</li>\n<li><p>其他安全措施<code> HTTP-only Cookie</code>: 禁⽌ JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注⼊后也⽆法窃取此 Cookie。 验证码：防⽌脚本冒充⽤户提交危险操作。</p>\n</li>\n</ul>\n<h2 id=\"CSRF-是什么\"><a href=\"#CSRF-是什么\" class=\"headerlink\" title=\"CSRF 是什么?\"></a>CSRF 是什么?</h2><p><code>CSRF（Cross-site request forgery）跨站请求伪造</code>：攻击者诱导受害者进⼊第三⽅⽹站，在第三⽅⽹站中，向被攻击⽹ 站发送跨站请求。利⽤受害者在被攻击⽹站已经获取的注册凭证，绕过后台的⽤户验证，达到冒充⽤户对被攻击的⽹站 执⾏某项操作的⽬的。 ⼀个典型的 CSRF 攻击有着如下的流程：</p>\n<ul>\n<li>受害者登录 a.com ，并保留了登录凭证（Cookie）</li>\n<li>攻击者引诱受害者访问了 b.com b.com 向 a.com 发送了⼀个请求： a.com&#x2F;act&#x3D;xx</li>\n<li>浏览器会默认携带 a.com 的 Cookie a.com 接收到请求后，对请求进⾏验证，并确认是受害者的凭证，误以为是受害者⾃⼰发送的请求</li>\n<li>a.com 以受害者的名义执⾏了 act&#x3D;xx</li>\n<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 a.com 执⾏了⾃⼰定义的操作</li>\n</ul>\n<h2 id=\"CSRF-的攻击类型\"><a href=\"#CSRF-的攻击类型\" class=\"headerlink\" title=\"CSRF 的攻击类型?\"></a>CSRF 的攻击类型?</h2><ul>\n<li>GET 类型的 CSRF</li>\n<li>POST 类型的 CSRF</li>\n<li>链接类型的 CSRF</li>\n</ul>\n<h2 id=\"如何预防-CSRF\"><a href=\"#如何预防-CSRF\" class=\"headerlink\" title=\"如何预防 CSRF?\"></a>如何预防 CSRF?</h2><p>CSRF 通常从第三⽅⽹站发起，被攻击的⽹站⽆法防⽌攻击发⽣，只能通过增强⾃⼰⽹站针对 CSRF 的防护能⼒来提升安全性。<br>CSRF 的两个特点：</p>\n<ul>\n<li>CSRF（通常）发⽣在第三⽅域名</li>\n<li>CSRF 攻击者不能获取到 Cookie 等信息，只是使⽤。</li>\n</ul>\n<p>针对这两点，我们可以专⻔制定防护策略，如下：</p>\n<ul>\n<li>阻⽌不明外域的访问<ol>\n<li><code>同源检测</code></li>\n<li><code>Samesite Cookie</code></li>\n</ol>\n</li>\n<li>提交时要求附加本域才能获取的信息<ol>\n<li>CSRF Token</li>\n<li>双重 Cookie 验证</li>\n</ol>\n</li>\n</ul>\n<p>因此我们可以针对性得进⾏预防</p>\n<h3 id=\"同源检测\"><a href=\"#同源检测\" class=\"headerlink\" title=\"同源检测\"></a>同源检测</h3><p>既然 CSRF ⼤多来⾃第三⽅⽹站，那么我们就直接禁⽌外域（或者不受信任的域名）对我们发起请求:</p>\n<ul>\n<li>使⽤ Origin Header 确定来源域名: 在部分与 CSRF 有关的请求中，请求的 Header 中会携带 Origin 字段,如果 Origin 存在，那么直接使⽤ Origin 中的字段确认来源域名就可以</li>\n<li>使⽤ Referer Header 确定来源域名: 根据 HTTP 协议，在 HTTP 头中有⼀个字段叫 Referer，记录了该 HTTP 请求的来 源地址</li>\n</ul>\n<h3 id=\"CSRF-Token\"><a href=\"#CSRF-Token\" class=\"headerlink\" title=\"CSRF Token\"></a>CSRF Token</h3><p>CSRF 的另⼀个特征是，攻击者⽆法直接窃取到⽤户的信息（Cookie，Header，⽹站内容等），仅仅是冒⽤ Cookie 中的 信息。</p>\n<p>⽽ CSRF 攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了⽤户⾃⼰的请求。那么我们可以要求所有的 ⽤户请求都携带⼀个 CSRF 攻击者⽆法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求 和攻击的请求区分开，也可以防范 CSRF 的攻击:</p>\n<p>CSRF Token 的防护策略分为三个步骤：</p>\n<ul>\n<li>将 CSRF Token 输出到⻚⾯中</li>\n<li>⻚⾯提交的请求携带这个 Token</li>\n<li>服务器验证 Token 是否正确</li>\n</ul>\n<h3 id=\"双重-Cookie-验证\"><a href=\"#双重-Cookie-验证\" class=\"headerlink\" title=\"双重 Cookie 验证\"></a>双重 Cookie 验证</h3><p>在会话中存储 CSRF Token ⽐较繁琐，⽽且不能在通⽤的拦截上统⼀处理所有的接⼝ 那么另⼀种防御措施是使⽤双重提交 Cookie。利⽤ CSRF 攻击不能获取到⽤户 Cookie 的特点，我们可以要求 Ajax 和表单 请求携带⼀个 Cookie 中的值</p>\n<p>双重 Cookie 采⽤以下流程：</p>\n<ul>\n<li>在⽤户访问⽹站⻚⾯时，向请求域名注⼊⼀个 Cookie，内容为随机字符串（例如 csrfcookie&#x3D;v8g9e4ksfhw ）。</li>\n<li>在前端向后端发起请求时，取出 Cookie，并添加到 URL 的参数中（接上例 POST <a href=\"https://www.a.com/comment\">https://www.a.com/comment</a>? csrfcookie&#x3D;v8g9e4ksfhw ）。</li>\n<li>后端接⼝验证 Cookie 中的字段与 URL 参数中的字段是否⼀致，不⼀致则拒绝。</li>\n</ul>\n<h3 id=\"Samesite-Cookie-属性\"><a href=\"#Samesite-Cookie-属性\" class=\"headerlink\" title=\"Samesite Cookie 属性\"></a>Samesite Cookie 属性</h3><p>Google 起草了⼀份草案来改进 HTTP 协议，那就是为 Set-Cookie 响应头新增 Samesite 属性，它⽤来标明这个 Cookie 是 个“同站 Cookie”，同站 Cookie 只能作为第⼀⽅ Cookie，不能作为第三⽅ Cookie，Samesite 有两个属性值:</p>\n<ul>\n<li>Samesite&#x3D;Strict: 这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三⽅ Cookie</li>\n<li>Samesite&#x3D;Lax: 这种称为宽松模式，⽐ Strict 放宽了点限制,假如这个请求是这种请求且同时是个 GET 请求，则这个 Cookie 可以作为第三⽅ Cookie</li>\n</ul>\n<h2 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h2><p>⽹络劫持⼀般分为两种:</p>\n<ul>\n<li><code>DNS 劫持</code>: (输⼊京东被强制跳转到淘宝这就属于 dns 劫持) DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li><code>302 跳转的⽅式</code>: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起 302 跳转的回复，引导⽤户获取内容</li>\n<li><code>HTTP 劫持</code>: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于 http 明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ul>\n<h2 id=\"如何应对⽹络劫持\"><a href=\"#如何应对⽹络劫持\" class=\"headerlink\" title=\"如何应对⽹络劫持?\"></a>如何应对⽹络劫持?</h2><ul>\n<li>DNS 劫持由于涉嫌违法,已经被监管起来,现在很少会有 DNS 劫持,⽽ http 劫持依然⾮常盛⾏.</li>\n<li>最有效的办法就是全站 HTTPS,将 HTTP 加密,这使得运营商⽆法获取明⽂,就⽆法劫持你的响应内容.</li>\n</ul>\n<h2 id=\"中间⼈攻击\"><a href=\"#中间⼈攻击\" class=\"headerlink\" title=\"中间⼈攻击\"></a>中间⼈攻击</h2><p>中间⼈ (Man-in-the-middle attack, MITM) 是指<code>攻击者与通讯的两端分别创建独⽴的联系, 并交换其所收到的数据, 使通讯的两端认为他们正在通过⼀个私密的连接与对⽅直接对话</code>, 但事实上整个会话都被攻击者完全控制. 在中间⼈攻击中, 攻击者可以拦截通讯双⽅的通话并插⼊新的内容.</p>\n<p>⼀般的过程如下:</p>\n<ul>\n<li>客户端发送请求到服务端，请求被中间⼈截获服务器向客户端发送公钥中间⼈截获公钥，保留在⾃⼰⼿上。</li>\n<li>然后⾃⼰⽣成⼀个<code>【伪造的】公钥</code>，发给客户端</li>\n<li>客户端收到伪造的公钥后，⽣成加密 hash 值发给服务器</li>\n<li>中间⼈获得加密 hash 值，⽤⾃⼰的私钥解密获得真秘钥,同时⽣成假的加密 hash 值，发给服务器</li>\n<li>服务器⽤私钥解密获得假密钥,然后加密数据传输给客户端</li>\n</ul>\n<h2 id=\"重放攻击\"><a href=\"#重放攻击\" class=\"headerlink\" title=\"重放攻击\"></a>重放攻击</h2><p><a href=\"https://zh.wikipedia.org/zh-cn/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB\" target=\"_blank\" >重放攻击- 中间人攻击的一种</a></p>\n<h2 id=\"DDoS-攻击\"><a href=\"#DDoS-攻击\" class=\"headerlink\" title=\"DDoS 攻击\"></a>DDoS 攻击</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>DDos</code>全名<code>Distributed Denial of Service</code>，翻译成中文就是<code>分布式拒绝服务</code>。指的是处于不同位置的多个攻击者同时向一个或数个目标发动攻击，是一种分布的、协同的大规模攻击方式。单一的 DoS 攻击一般是采用一对一方式的，它利用网络协议和操作系统的一些缺陷，采用欺骗和伪装的策略来进行网络攻击，使网站服务器充斥大量要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷以至于瘫痪而停止提供正常的网络服务。</p></blockquote>\n<p>攻击方式很多，比如<code>UDP Flood</code>、<code>SYN Flood</code>、<code>DNS Query Flood</code>等等。</p>\n<p><strong>下面是 SYN Flood 进行 DDoS 攻击的实现原理</strong></p>\n<p>SYN Flood 是一种利用 TCP 协议缺陷，发送大量伪造的 TCP 连接请求，从而使得被攻击方资源耗尽（CPU 满负荷或内存不足）的攻击方式。</p>\n<p>一次正常的建立 TCP 连接，需要三次握手：客户端发送 SYN 报文，服务端收到请求并返回报文表示接受，客户端也返回确认，完成连接。</p>\n<p>SYN Flood 就是用户向服务器发送报文后突然死机或掉线，那么服务器在发出应答报文后就无法收到客户端的确认报文（第三次握手无法完成），这时服务器端一般会重试并等待一段时间后再丢弃这个未完成的连接。</p>\n<p><code>一个用户出现异常导致服务器的一个线程等待一会儿并不是大问题</code>，但恶意攻击者大量模拟这种情况，服务器端为了维护数以万计的半连接而消耗非常多的资源，结果往往是无暇理睬客户的正常请求，甚至崩溃。从正常客户的角度看来，网站失去了响应，无法访问。</p>\n<h3 id=\"高防服务器\"><a href=\"#高防服务器\" class=\"headerlink\" title=\"高防服务器\"></a>高防服务器</h3><p>还是拿开的重庆火锅店举例，高防服务器就是我给重庆火锅店增加了两名保安，这两名保安可以让保护店铺不受流氓骚扰，并且还会定期在店铺周围巡逻防止流氓骚扰。</p>\n<p>高防服务器主要是指能独立硬防御 50Gbps 以上的服务器，能够帮助网站拒绝服务攻击，定期扫描网络主节点等，这东西是不错，就是贵~</p>\n<h3 id=\"黑名单\"><a href=\"#黑名单\" class=\"headerlink\" title=\"黑名单\"></a>黑名单</h3><p>面对火锅店里面的流氓，我一怒之下将他们拍照入档，并禁止他们踏入店铺，但是有的时候遇到长得像的人也会禁止他进入店铺。这个就是设置黑名单，此方法秉承的就是“错杀一千，也不放一百”的原则，会封锁正常流量，影响到正常业务。</p>\n<h3 id=\"DDoS-清洗\"><a href=\"#DDoS-清洗\" class=\"headerlink\" title=\"DDoS 清洗\"></a>DDoS 清洗</h3><p>DDos 清洗，就是我发现客人进店几分钟以后，但是一直不点餐，我就把他踢出店里。</p>\n<p>DDoS 清洗会对用户请求数据进行实时监控，及时发现 DOS 攻击等异常流量，在不影响正常业务开展的情况下清洗掉这些异常流量。</p>\n<h3 id=\"CDN-加速\"><a href=\"#CDN-加速\" class=\"headerlink\" title=\"CDN 加速\"></a>CDN 加速</h3><p>CDN 加速，我们可以这么理解：为了减少流氓骚扰，我干脆将火锅店开到了线上，承接外卖服务，这样流氓找不到店在哪里，也耍不来流氓了。</p>\n<p>在现实中，CDN 服务将网站访问流量分配到了各个节点中，这样一方面隐藏网站的真实 IP，另一方面即使遭遇 DDoS 攻击，也可以将流量分散到各个节点中，防止源站崩溃。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/weixin_38405253/article/details/114297755\" target=\"_blank\" >DDoS 攻击原理</a></p>\n","text":"前端安全问题? 跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS. 早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚ ⾯, 其...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":27,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">前端安全问题?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS-%E5%88%86%E4%B8%BA%E5%93%AA%E2%BC%8F%E7%B1%BB\"><span class=\"toc-text\">XSS 分为哪⼏类?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">存储型：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E5%9E%8B\"><span class=\"toc-text\">反射型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM-%E5%9E%8B\"><span class=\"toc-text\">DOM 型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2-XSS\"><span class=\"toc-text\">如何预防 XSS?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E2%BC%8A%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">输⼊过滤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%9E%8B%E5%92%8C%E5%8F%8D%E5%B0%84%E5%9E%8B-XSS\"><span class=\"toc-text\">存储型和反射型 XSS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM-%E5%9E%8B-XSS\"><span class=\"toc-text\">DOM 型 XSS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-XSS-%E9%98%B2%E8%8C%83%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">其他 XSS 防范措施</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">CSRF 是什么?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF-%E7%9A%84%E6%94%BB%E5%87%BB%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">CSRF 的攻击类型?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%A2%84%E9%98%B2-CSRF\"><span class=\"toc-text\">如何预防 CSRF?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%BA%90%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">同源检测</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CSRF-Token\"><span class=\"toc-text\">CSRF Token</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E9%87%8D-Cookie-%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">双重 Cookie 验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Samesite-Cookie-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">Samesite Cookie 属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%BD%B9%E7%BB%9C%E5%8A%AB%E6%8C%81\"><span class=\"toc-text\">⽹络劫持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E2%BD%B9%E7%BB%9C%E5%8A%AB%E6%8C%81\"><span class=\"toc-text\">如何应对⽹络劫持?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E2%BC%88%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">中间⼈攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">重放攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DDoS-%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">DDoS 攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B2%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">高防服务器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%91%E5%90%8D%E5%8D%95\"><span class=\"toc-text\">黑名单</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DDoS-%E6%B8%85%E6%B4%97\"><span class=\"toc-text\">DDoS 清洗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CDN-%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">CDN 加速</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-TCP","uid":"ca603a006bae6531fc585f1adf1fac4c","slug":"2022-07-15TCP","date":"2022-07-15T07:23:46.000Z","updated":"2022-09-15T14:26:10.888Z","comments":true,"path":"api/articles/2022-07-15TCP.json","keywords":null,"cover":[],"text":"TCP 的特性 TCP 提供⼀种⾯向连接的、 可靠的、字节流 服务 在⼀个 TCP 连接中，仅双⽅进⾏彼此通信。⼴播和多播不能⽤于 TCP TCP 使⽤校验、确认和重传机制来保证可靠传输 TCP 给数据分节进⾏排序，并使⽤累积确认保证数据的顺序不变和⾮重复 TCP 使⽤滑动窗⼝机...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":27,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":17,"path":"api/tags/面试.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-webpack系列","uid":"1e83d022f4eb1c3b94dc11a21715ce7c","slug":"2022-07-14webpack","date":"2022-07-14T14:19:31.000Z","updated":"2022-09-15T14:26:10.887Z","comments":true,"path":"api/articles/2022-07-14webpack.json","keywords":null,"cover":null,"text":"webpack 与 grunt、gulp 的不同？ Grunt、Gulp 是基于任务运⾏的⼯具： 它们会⾃动执⾏指定的任务，就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活跃的社区，丰富的插 件，能⽅便的打造各种⼯作流。 Webpack 是基于模块化打包的⼯具: ⾃动...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":27,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/tags/前端基础.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}