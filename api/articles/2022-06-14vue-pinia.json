{"title":"pinia源码","uid":"5a6ede004598b1b2a7c46059e37dbd43","slug":"2022-06-14vue-pinia","date":"2022-06-15T02:22:49.000Z","updated":"2022-09-16T13:54:56.143Z","comments":true,"path":"api/articles/2022-06-14vue-pinia.json","keywords":null,"cover":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>了解了 playground，现在我们来看看 pinia 源码，那些 api 和方法。这么用做了什么事情</p>\n<p><code>this.$patch</code><a href=\"https://github.com/vuejs/pinia/blob/2eb123d8114ceb4fad46ac019844a1967d9a9135/packages/playground/src/stores/counter.ts#L49\" target=\"_blank\" >playgound</a></p>\n<p><code>defineStore</code></p>\n<ul>\n<li>第一个参数是唯一字符串，用来标识 store，第二个参数是一个函数，返回一个 store 对象 <a href=\"https://github.com/vuejs/pinia/blob/2eb123d8114ceb4fad46ac019844a1967d9a9135/packages/playground/src/stores/nasa-pod.ts#L6\" target=\"_blank\" >playground</a></li>\n<li>第一个参数直接是配置项 <a href=\"https://github.com/vuejs/pinia/blob/2eb123d8114ceb4fad46ac019844a1967d9a9135/packages/playground/src/stores/jokesUsePromised.ts#L6\" target=\"_blank\" >playgound</a></li>\n</ul>\n<p>组件中直接通过<code>useXXStore获取store</code> <a href=\"https://github.com/vuejs/pinia/blob/2eb123d8114ceb4fad46ac019844a1967d9a9135/packages/playground/src/views/NasaPOD.vue#L52\" target=\"_blank\" >playground</a></p>\n<p><code>state</code>怎么就是个函数，而且这个函数可以让我们自定义 store 的初始值<br><code>$dispose</code> <a href=\"https://github.com/vuejs/pinia/blob/2eb123d8114ceb4fad46ac019844a1967d9a9135/packages/playground/src/views/NasaPOD.vue#L49\" target=\"_blank\" >playgound</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">onUnmounted(() &#x3D;&gt; &#123;\n  userStore.$dispose();\n  cartStore.$dispose();\n  counterStore.$dispose();\n&#125;);</code></pre>\n\n<p><code>import &#123; storeToRefs &#125; from &#39;pinia&#39;</code></p>\n<p>以及 playground 没没有用到的 api</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const partialStore &#x3D; &#123;\n  _p: pinia,\n  &#x2F;&#x2F; _s: scope,\n  $id,\n  $onAction: addSubscription.bind(null, actionSubscriptions),\n  $patch,\n  $reset,\n  $subscribe,\n  $dispose,\n&#125; as _StoreWithState&lt;Id, S, G, A&gt;;\nconst store: Store&lt;Id, S, G, A&gt; &#x3D; reactive(partialStore); &#x2F;&#x2F; 简化了，不考虑中间任何细节\npinia._s.set($id, store);</code></pre>\n\n<ul>\n<li>$reset:该api是$patch的语法糖，只不过传递的参数是初始的state函数的执行结果，源码中<code>const newState = state? state() : &#123;&#125;</code></li>\n<li>$patch：patch就是一次递归对value覆盖的过程</li>\n<li>$subscribe： 有点类似观察者，当调用subscribe时，会将当前的状态信息保存到subscriptions</li>\n</ul>\n<h2 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h2><p><a href=\"https://www.jianshu.com/p/2acc2d043d35\" target=\"_blank\" >pinia源码解读–实现流程</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/2acc2d043d35\" target=\"_blank\" >pinia 源码解读–实现流程</a><br><a href=\"https://github.com/vuejs/pinia\" target=\"_blank\" >pinia</a></p>\n","text":"背景了解了 playground，现在我们来看看 pinia 源码，那些 api 和方法。这么用做了什么事情 this.$patchplaygound defineStore 第一个参数是唯一字符串，用来标识 store，第二个参数是一个函数，返回一个 store 对象 play...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":14,"path":"api/categories/vue.json"}],"tags":[{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"},{"name":"vue","slug":"vue","count":14,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB\"><span class=\"toc-text\">源码解读</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"http错误信息","uid":"5b104c45df830a680c682d4e4b65c048","slug":"2022-06-15http","date":"2022-06-15T06:27:41.000Z","updated":"2022-09-16T13:54:56.144Z","comments":true,"path":"api/articles/2022-06-15http.json","keywords":null,"cover":null,"text":"http 错误信息Request URL: http:&#x2F;&#x2F;localhost:8888&#x2F;api&#x2F;redline&#x2F;content_management&#x2F;api&#x2F;kbs&#x2F;search&#x2F;conte...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"bug","slug":"bug","count":4,"path":"api/categories/bug.json"}],"tags":[{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"pinia中的vue-demi源码","uid":"a2db94377c4f0ef1a22f18cb45800737","slug":"2022-06-15vue-demi","date":"2022-06-15T01:46:31.000Z","updated":"2022-09-16T13:54:56.144Z","comments":true,"path":"api/articles/2022-06-15vue-demi.json","keywords":null,"cover":null,"text":"pinia 中的 vue-demiVue Demi 是一个让你可以开发同时支持 Vue2 和 3 的通用的 Vue 库的开发工具，而无需担心用户安装的版本。 当用户要创建一个 Vue 插件&#x2F;库时，只需将 vue-demi 安装为依赖项并将其导入，然后像之前一样发布你的插...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"vue","slug":"vue","count":14,"path":"api/categories/vue.json"}],"tags":[{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"},{"name":"vue","slug":"vue","count":14,"path":"api/tags/vue.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}