{"title":"tailwindcss","uid":"853c3aaf44fd16a1c74c495f59970a3a","slug":"2022-10-09tailwindcss","date":"2022-10-09T08:30:51.000Z","updated":"2022-10-17T11:18:29.860Z","comments":true,"path":"api/articles/2022-10-09tailwindcss.json","keywords":null,"cover":[],"content":"<h2 id=\"学不动了\"><a href=\"#学不动了\" class=\"headerlink\" title=\"学不动了\"></a>学不动了</h2><p>这次真的学不动了～, 求求你们别学了</p>\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/tailwindlabs/tailwindcss\">https://github.com/tailwindlabs/tailwindcss</a><img src=\"https://img.shields.io/github/stars/tailwindlabs/tailwindcss?style=social\" /></div>\n\n<h2 id=\"CSS-发展\"><a href=\"#CSS-发展\" class=\"headerlink\" title=\"CSS 发展\"></a>CSS 发展</h2><p><strong>第一个阶段，原生写法</strong></p>\n<p>是类似于编程中面向过程的写法，需要什么样式，自己在 css 中写什么样式。对代码有洁癖的程序员会进行简单的 css 复用。但是也只是简单的复用，大多数时候还是需要什么写什么，想怎么写怎么写。</p>\n<p><strong>第二个阶段，CSS 组件化。</strong></p>\n<p>类似于编程中面向对象的写法，将相同视觉的 UI 封装成一个组件。比如一个按钮，整个项目中，这个按钮被多次使用，并且样式一致。那么就可以封装成一个按钮类。使用的时候直接使用这个类名称就 OK。</p>\n<p>这也是的做法。</p>\n<p>这种框架的优势在于，。比如你需要一个表单，，需要一个导航，需要一个弹窗，Card 卡片。有现成的 class。直接拿过来用，就可以快速的完成效果。完全不需要动手写 css。</p>\n<p>这也是目前比较流行的方法。这几年几乎很少有项目是自己一点一点手写样式的了，多多少少都会使用到一些 css 框架。</p>\n<p>对于一些需要快速交付的项目，非常适合使用这种组件化 css 框架。</p>\n<p><strong>第三个阶段，CSS 零件化。</strong></p>\n<p>也叫做。和上面第一个阶段第二个阶段都有类似的地方。依旧是组件，只是每个组件都是一个单一功能的 css 属性。</p>\n<p>上面第一个阶段的时候，我们讲了有些有对代码有追求的人，会开始复用 css。<br>比如页面中大量的用到 float:left。那么就可以封装一个类，比如是这样</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.left &#123;\n  float: left;\n&#125;</code></pre>\n\n<p>然后需要使用 float:left 的时候，直接使用.left 就可以。</p>\n<p>但是我们自己写 css 的时候，仅仅是封装一些常用的简单的类，绝大多数的 css，都需要动手去写 css。比如你要写个宽度 12 像素。你就得老老实实的去写 width:12px，逃避不了，不过估计也没人想过逃避。</p>\n<p>Tailwind CSS 就是第三个阶段的产物，它做了什么呢？<br>它将所有的 css 属性全部封装成语义化的类，比如你想要一个 float:left，它已经帮你封装好了，你直接使用一个 float-left 就可以。<br>需要一个宽度为 12 像素，只需要写 w-3 就可以。</p>\n<h2 id=\"tailwindcss-是什么\"><a href=\"#tailwindcss-是什么\" class=\"headerlink\" title=\"tailwindcss 是什么\"></a>tailwindcss 是什么</h2><p>像是 CSS 行内样式的另一种实现，有自己的语法，又和 CSS 有些关联【如 修饰符速查表、伪类速查表】</p>\n<p>实现了 CSS 行内样式不支持的一些 CSS 属性</p>\n<h2 id=\"tailwindcss-工作原理是什么\"><a href=\"#tailwindcss-工作原理是什么\" class=\"headerlink\" title=\"tailwindcss 工作原理是什么\"></a>tailwindcss 工作原理是什么</h2><p>Tailwind CSS 的工作原理是扫描所有 HTML 文件、JavaScript 组件和任何其他模板以查找类名，生成相应的样式，然后将其写入静态 CSS 文件。</p>\n<p>它快速、灵活、可靠，运行时间为零。</p>\n<h2 id=\"tailwindcss-解决了什么问题\"><a href=\"#tailwindcss-解决了什么问题\" class=\"headerlink\" title=\"tailwindcss 解决了什么问题\"></a>tailwindcss 解决了什么问题</h2><p><a href=\"https://tailwindcss.com/docs/utility-first#:~:text=some%20really%20important-,benefits,-%3A\" target=\"_blank\" >见</a></p>\n<p><a href=\"https://tailwindcss.com/docs/utility-first#:~:text=But%20using%20utility%20classes%20has%20a%20few%20important%20advantages%20over%20inline%20styles%3A\" target=\"_blank\" >见</a></p>\n<h2 id=\"tailwindcss-好乱啊\"><a href=\"#tailwindcss-好乱啊\" class=\"headerlink\" title=\"tailwindcss 好乱啊\"></a>tailwindcss 好乱啊</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>“this is an atrocity, what a horrible mess!”</p></blockquote>\n<p>现在我知道你在想什么了，“这是一场暴行，多么可怕的混乱！”你说得对，它有点丑。事实上，当你第一次看到它时，几乎不可能认为这是一个好主意——你必须真正尝试一下。<br>但一旦你真的以这种方式构建了一些东西，你会很快发现一些真正重要的好处：</p>\n<ul>\n<li><strong>您没有为了给类命名而浪费精力。</strong> 不需要仅仅为了设置一些样式而额外添加一些像 sidebar-inner-wrapper 这样愚蠢的类名，不必再为了一个 flex 容器的完美抽象命名而倍受折磨。</li>\n<li><strong>您的 CSS 停止增长。</strong> 使用传统方法，每次添加新功能时 CSS 文件都会变大。使用功能类，所有内容都是可重用的，因此您几乎不需要编写新的 CSS。</li>\n<li><strong>更改会更安全。</strong> CSS 是全局性的，您永远不知道当您进行更改时会破坏掉什么。您 HTML 中的类是本地的，因此您可以更改它们而不必担心其他问题。</li>\n</ul>\n<h2 id=\"tailwindcss-打包后会不会太大\"><a href=\"#tailwindcss-打包后会不会太大\" class=\"headerlink\" title=\"tailwindcss 打包后会不会太大\"></a>tailwindcss 打包后会不会太大</h2><p><a href=\"https://tailwindcss.com/docs/optimizing-for-production\" target=\"_blank\" >见</a></p>\n<p>Tailwind CSS 非常注重性能，旨在通过只生成项目中实际使用的 CSS 来生成尽可能小的 CSS 文件。</p>\n<p>再加上缩小和网络压缩，这通常会导致 CSS 文件小于 10kB，即使对于大型项目也是如此。例如，Netflix 将 Tailwind 用于 Netflix Top 10，而整个网站仅通过网络提供 6.5kB 的 CSS。</p>\n<p>有了这么小的 CSS 文件，您就不必担心复杂的解决方案，比如代码分割每个页面的 CSS，而只需发送一个小 CSS 文件即可下载并缓存，直到您重新部署站点。</p>\n<p>对于最小的生产版本，我们建议使用 cssnano 之类的工具缩小 CSS，并使用 Brotli 压缩 CSS。</p>\n<h2 id=\"tailwindcss-看起来像是行内，为什么不用行内样式\"><a href=\"#tailwindcss-看起来像是行内，为什么不用行内样式\" class=\"headerlink\" title=\"tailwindcss 看起来像是行内，为什么不用行内样式\"></a>tailwindcss 看起来像是行内，为什么不用行内样式</h2><p>对这种方式的一个普遍反应是, “这不就是内联样式吗？” 在某些方面是 — 您是将样式直接应用于元素，而不是为元素分配一个类，然后在这个类中设置样式。</p>\n<p>但是使用功能类比内联样式具有一些重要的优点：</p>\n<ul>\n<li><strong>基于约束的设计</strong>. 使用内联样式, 每个值都是一个魔术数字。 使用功能类, 您是从预定义的设计系统中选择样式，这使得构建统一的 UI 变得更加容易。</li>\n<li><strong>响应式的设计</strong>. 在内联样式中您不能使用媒体查询, 但您可以使用 Tailwind 的响应式功能类非常容易的构建完全响应式的界面。</li>\n<li><strong>Hover, focus, 以及其它状态</strong>. 内联样式无法设置 hover 或者 focus 这样的状态, 但 Tailwind 的状态变体使用功能类可以非常容易的为这些状态设置样式。</li>\n</ul>\n<h2 id=\"可维护性\"><a href=\"#可维护性\" class=\"headerlink\" title=\"可维护性\"></a>可维护性</h2><p>在使用功能优先的方式时，最大的可维护性问题是管理通用的可重复使用的功能类组合。</p>\n<p>通过提取组件（通常做为模板片断或者组件），可以轻松解决此问题。</p>\n<p>如果您想了解其他人使用此方法的经验，请查看以下资源：</p>\n<p><a href=\"https://tailwindcss.com/docs/utility-first#:~:text=If%20you%E2%80%99d%20like%20to%20hear%20about%20others%E2%80%99%20experiences%20with%20this%20approach%2C%20check%20out%20the%20following%20resources%3A\" target=\"_blank\" >见</a></p>\n<h2 id=\"tailwindcss-修饰速查表\"><a href=\"#tailwindcss-修饰速查表\" class=\"headerlink\" title=\"tailwindcss 修饰速查表\"></a>tailwindcss 修饰速查表</h2><p>默认情况下，Tailwind 中包含的每个修改器的快速 <a href=\"https://tailwindcss.com/docs/hover-focus-and-other-states#quick-reference\" target=\"_blank\" >参考表</a>。</p>\n<h2 id=\"tailwindcss-伪类速查表\"><a href=\"#tailwindcss-伪类速查表\" class=\"headerlink\" title=\"tailwindcss 伪类速查表\"></a>tailwindcss 伪类速查表</h2><p><a href=\"https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference\" target=\"_blank\" >Pseudo-class reference</a></p>\n<h2 id=\"额-主要使用-antd-库，tailwindcss-能混着用？\"><a href=\"#额-主要使用-antd-库，tailwindcss-能混着用？\" class=\"headerlink\" title=\"额 主要使用 antd 库，tailwindcss 能混着用？\"></a>额 主要使用 antd 库，tailwindcss 能混着用？</h2><p>可以混着用，而且还可能有问题 😓</p>\n<p><a href=\"https://www.jianshu.com/p/2162daf865d9\" target=\"_blank\" >见</a></p>\n<h2 id=\"tailwindcss-可能更适合业务不复杂，展示要求高的场景\"><a href=\"#tailwindcss-可能更适合业务不复杂，展示要求高的场景\" class=\"headerlink\" title=\"tailwindcss 可能更适合业务不复杂，展示要求高的场景\"></a>tailwindcss 可能更适合业务不复杂，展示要求高的场景</h2><ul>\n<li><p>如果 B 端系统，不用 antd , 使用 tailwindcss 来开发，要自定义多少组件 😓</p>\n</li>\n<li><p>官网之类偏展示性的到非常适合（移动优先）</p>\n</li>\n<li><p>一些模版引擎需要借助一些插件，如 Django（django-tailwind）<a href=\"https://qa.1r1g.com/sf/ask/4437469851/\" target=\"_blank\" >见</a></p>\n</li>\n<li><p>设计软件支持 tailwindcss 语法的代码吗？</p>\n</li>\n</ul>\n<h2 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h2><p><strong>Responsive Design</strong></p>\n<p>这种方法最让人惊讶的地方是，要为移动设备设计样式，您需要使用未经修改的实用程序版本，而不是 sm:前缀版本。不要把 sm 看作是“在小屏幕上”的意思，而要把它看作“在小断点上”。<br><a href=\"https://tailwindcss.com/docs/responsive-design#targeting-mobile-screens:~:text=Don%E2%80%99t%20think%20of%20sm%3A%20as%20meaning%20%E2%80%9Con%20small%20screens%E2%80%9D%2C%20think%20of%20it%20as%20%E2%80%9Cat%20the%20small%20breakpoint%E2%80%9C.\" target=\"_blank\" >见</a></p>\n<p>请注意，我们不必为 sm 断点或 xl 断点指定背景色-您只需要指定实用程序何时开始生效，而不是何时停止。<br><a href=\"https://tailwindcss.com/docs/responsive-design#:~:text=Notice%20that%20we%20did%20not\" target=\"_blank\" >见</a></p>\n<hr/>\n\n<p>Note that if you’re using Sass&#x2F;SCSS, you’ll need to use Sass’ interpolation feature to get this to work:</p>\n<p><a href=\"https://tailwindcss.com/docs/functions-and-directives#:~:text=important%3B%0A%7D-,Note%20that,-if%20you%E2%80%99re%20using\" target=\"_blank\" >见</a></p>\n<hr/>\n\n<p>在每个组件 CSS 中使用@apply 不生效，要用插件的形式，作者说了，你不要搞这些奇葩的操作 <a href=\"https://tailwindcss.com/docs/functions-and-directives#using-apply-with-per-component-css:~:text=best%20solution%20is%20to%20just%20not%20do%20weird%20stuff%20like%20this%20at%20all\" target=\"_blank\" >见</a></p>\n<p><a href=\"https://tailwindcss.com/docs/functions-and-directives#using-apply-with-per-component-css\" target=\"_blank\" >见</a></p>\n<hr/>\n\n<p>由于 Tailwind 使用嵌套对象语法来定义其默认调色板，因此请确保使用点符号来访问嵌套颜色。</p>\n<p><a href=\"https://tailwindcss.com/docs/functions-and-directives#using-apply-with-per-component-css:~:text=)%3B%0A%7D-,Since,-Tailwind%20uses%20a\" target=\"_blank\" >见</a></p>\n<p><strong>Using with Preprocessors</strong></p>\n<p><a href=\"https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor\" target=\"_blank\" >见</a></p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p><strong>Reusing Styles</strong></p>\n<p>利用编辑器和语言的特点 <a href=\"https://tailwindcss.com/docs/reusing-styles#using-editor-and-language-features\" target=\"_blank\" >见</a></p>\n<p>利用循环，进行组件复用 <a href=\"https://tailwindcss.com/docs/reusing-styles#loops\" target=\"_blank\" >见</a></p>\n<p>提取组件和部分组件 <a href=\"https://tailwindcss.com/docs/reusing-styles#extracting-components-and-partials\" target=\"_blank\" >见</a></p>\n<p>不要依赖 CSS 类来提取复杂组件，使用 js 来处理 <a href=\"https://tailwindcss.com/docs/reusing-styles#compared-to-css-abstractions\" target=\"_blank\" >见</a></p>\n<p>使用@apply 提取类 <a href=\"https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply\" target=\"_blank\" >见</a></p>\n<p>避免过早抽象 <a href=\"https://tailwindcss.com/docs/reusing-styles#avoiding-premature-abstraction\" target=\"_blank\" >见</a> 无论你做什么，不要仅仅为了让事情看起来“干净”而使用@apply。是的，充斥着 Tailwind 类的 HTML 模板有点难看。在拥有大量定制 CSS 的项目中进行更改会更糟糕。</p>\n<p>如果您开始使用@apply 来处理所有事情，那么您基本上只是再次编写 CSS，并抛弃了 Tailwind 为您提供的所有工作流和可维护性优势，例如：</p>\n<ul>\n<li><strong>你必须时时刻刻想出类名</strong>——没有什么比为不值得命名的东西想出类名更能让你慢下来或耗尽你的精力。</li>\n<li><strong>您必须在多个文件之间跳转以进行更改</strong>-这是一个比您在将所有内容放在一起之前想象的更大的工作流杀手。</li>\n<li><strong>改变样式更可怕</strong>——CSS 是全球性的，你确定你可以在不破坏网站其他部分的情况下改变该类的最小宽度值吗？</li>\n<li><strong>你的 CSS 包会更大</strong>。</li>\n</ul>\n<p>如果您打算使用@apply，请将其用于非常小的、高度可重用的东西，如按钮和表单控件，没用组件框架时候，你可以这么搞，甚至只有在您没有使用像 React(组件才是更好的选择)这样的框架时。</p>\n<p>总之@apply 非常不建议用， 少用</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"工具-最基础\"><a href=\"#工具-最基础\" class=\"headerlink\" title=\"工具 -最基础\"></a>工具 -最基础</h3><h3 id=\"伪类伪元素\"><a href=\"#伪类伪元素\" class=\"headerlink\" title=\"伪类伪元素\"></a>伪类伪元素</h3><h3 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h3><h3 id=\"Dark-Mode\"><a href=\"#Dark-Mode\" class=\"headerlink\" title=\"Dark Mode\"></a>Dark Mode</h3><h3 id=\"复用样式\"><a href=\"#复用样式\" class=\"headerlink\" title=\"复用样式\"></a>复用样式</h3><h3 id=\"增加自定义样式\"><a href=\"#增加自定义样式\" class=\"headerlink\" title=\"增加自定义样式\"></a>增加自定义样式</h3><h3 id=\"函数和指令\"><a href=\"#函数和指令\" class=\"headerlink\" title=\"函数和指令\"></a>函数和指令</h3><h2 id=\"看看视频巩固下\"><a href=\"#看看视频巩固下\" class=\"headerlink\" title=\"看看视频巩固下\"></a>看看视频巩固下</h2><p>有时间在继续学吧～，现在也用不到</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.tailwindcss.cn/docs/functions-and-directives\" target=\"_blank\" >tailwindcss 中文文档， 内容不全</a></p>\n<p><a href=\"https://tailwindcss.com/\" target=\"_blank\" >tailwindcss</a></p>\n<p><a href=\"https://blog.csdn.net/qq_43456781/article/details/120269565\" target=\"_blank\" >见</a></p>\n<p><a href=\"http://www.3dwindy.com/article/299521\" target=\"_blank\" >Tailwind CSS v3——核心思想（三）自定义样式</a></p>\n","text":"学不动了这次真的学不动了～, 求求你们别学了 https://github.com/tailwindlabs/tailwindcss CSS 发展第一个阶段，原生写法 是类似于编程中面向过程的写法，需要什么样式，自己在 css 中写什么样式。对代码有洁癖的程序员会进行简单的 cs...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B8%8D%E5%8A%A8%E4%BA%86\"><span class=\"toc-text\">学不动了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E5%8F%91%E5%B1%95\"><span class=\"toc-text\">CSS 发展</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">tailwindcss 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">tailwindcss 工作原理是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">tailwindcss 解决了什么问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E5%A5%BD%E4%B9%B1%E5%95%8A\"><span class=\"toc-text\">tailwindcss 好乱啊</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E6%89%93%E5%8C%85%E5%90%8E%E4%BC%9A%E4%B8%8D%E4%BC%9A%E5%A4%AA%E5%A4%A7\"><span class=\"toc-text\">tailwindcss 打包后会不会太大</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%83%8F%E6%98%AF%E8%A1%8C%E5%86%85%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">tailwindcss 看起来像是行内，为什么不用行内样式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7\"><span class=\"toc-text\">可维护性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E4%BF%AE%E9%A5%B0%E9%80%9F%E6%9F%A5%E8%A1%A8\"><span class=\"toc-text\">tailwindcss 修饰速查表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E4%BC%AA%E7%B1%BB%E9%80%9F%E6%9F%A5%E8%A1%A8\"><span class=\"toc-text\">tailwindcss 伪类速查表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%9D-%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8-antd-%E5%BA%93%EF%BC%8Ctailwindcss-%E8%83%BD%E6%B7%B7%E7%9D%80%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">额 主要使用 antd 库，tailwindcss 能混着用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tailwindcss-%E5%8F%AF%E8%83%BD%E6%9B%B4%E9%80%82%E5%90%88%E4%B8%9A%E5%8A%A1%E4%B8%8D%E5%A4%8D%E6%9D%82%EF%BC%8C%E5%B1%95%E7%A4%BA%E8%A6%81%E6%B1%82%E9%AB%98%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">tailwindcss 可能更适合业务不复杂，展示要求高的场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">注意点：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">最佳实践</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">核心概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7-%E6%9C%80%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">工具 -最基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E7%B1%BB%E4%BC%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">伪类伪元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">响应式设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dark-Mode\"><span class=\"toc-text\">Dark Mode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%94%A8%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">复用样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">增加自定义样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%92%8C%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">函数和指令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9C%8B%E7%9C%8B%E8%A7%86%E9%A2%91%E5%B7%A9%E5%9B%BA%E4%B8%8B\"><span class=\"toc-text\">看看视频巩固下</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Antd Tree drag","uid":"9635a6b254011f1f62378c1d84830a04","slug":"2022-10-10antd-tree-drag","date":"2022-10-10T01:19:14.000Z","updated":"2022-10-15T02:11:29.159Z","comments":true,"path":"api/articles/2022-10-10antd-tree-drag.json","keywords":null,"cover":[],"text":"属性解释dropToGap：boolean类型，true代表拖拽到节点之间的缝隙中，false代表拖拽到节点上，即节点的内容区。dropPosition：拖拽的时候，针对一个节点有三种情况，即拖拽到节点之上，拖拽到节点上，拖拽到节点之下。 三种情况其值有所不同。antd 依赖了 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":26,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":20,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"Chrome Extension","uid":"caa824bced9b699073234ee0cec471c8","slug":"2022-09-27chrome-extension","date":"2022-09-27T14:12:28.000Z","updated":"2022-10-15T02:11:29.158Z","comments":true,"path":"api/articles/2022-09-27chrome-extension.json","keywords":null,"cover":[],"text":"动机ModHeader，交互丑也就罢了，用Cookie还要收费,多大点事～ 还跟我要钱 chrome extension官网chrome extension官网 收集 原生 vite + vue3 vite + react create-react-app 见 原生的优点：是容易...","link":"","photos":[],"count_time":{"symbolsCount":659,"symbolsTime":"1 mins."},"categories":[{"name":"Chrome","slug":"Chrome","count":1,"path":"api/categories/Chrome.json"}],"tags":[{"name":"Chrome","slug":"Chrome","count":2,"path":"api/tags/Chrome.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}