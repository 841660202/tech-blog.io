{"title":"Go Gin","uid":"b21d66657c866de8629862fe6f5e2c48","slug":"2022-10-15gin","date":"2022-10-15T06:57:18.000Z","updated":"2022-12-22T13:36:21.787Z","comments":true,"path":"api/articles/2022-10-15gin.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202212211225570.webp","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>巩固 go 语言学习</li>\n<li>听说很多大公司用 go 来开发服务器，我特来看看</li>\n<li>了解 go web 开发</li>\n</ul>\n<h2 id=\"Gin\"><a href=\"#Gin\" class=\"headerlink\" title=\"Gin\"></a>Gin</h2><p>选这个框架原因如下：</p>\n<p><strong>社区活跃</strong></p>\n<ul>\n<li>Go 官网推荐<a href=\"https://golang.google.cn/doc/tutorial/web-service-gin\" target=\"_blank\" >Tutorial: Developing a RESTful API with Go and Gin</a></li>\n<li>github 上 star 多 <div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/gin-gonic/gin\">https://github.com/gin-gonic/gin</a><img src=\"https://img.shields.io/github/stars/gin-gonic/gin?style=social\" /></div></li>\n<li>Gin 官网支持多语言有中文版的文档，本着爱国，我还是爱看<a href=\"https://gin-gonic.com/zh-cn/\" target=\"_blank\" >中文文档</a>的</li>\n<li>B 站 “七米” <a href=\"https://www.bilibili.com/video/BV1gJ411p7xC\" target=\"_blank\" >视频</a> <a href=\"/#/post/2022-10-16Bplayer-rate\" target=\"_blank\" >播放速度太慢？帮你解决</a></li>\n</ul>\n<p><strong>Gin 官网简介很厉害的样子</strong></p>\n<p>Gin Web Framework</p>\n<p>The fastest full-featured web framework for Go. Crystal clear.</p>\n<p>What is Gin?</p>\n<p>Gin is a web framework written in Golang.</p>\n<p>It features a <a href=\"https://segmentfault.com/q/1010000041982845\" target=\"_blank\" >Martini-like API</a>, but with performance up to 40 times faster than Martini.</p>\n<p>If you need performance and productivity, you will love Gin.</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>快： 基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。 <a href=\"https://github.com/julienschmidt/httprouter\" target=\"_blank\" >httprouter</a></li>\n<li>中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</li>\n<li>Crash 处理： Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</li>\n<li>JSON 验证： Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</li>\n<li>路由组： Gin 帮助您更好地组织您的路由，例如，按照需要授权和不需要授权和不同 API 版本进行分组。此外，路由分组可以无限嵌套而不降低性能。</li>\n<li>错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</li>\n<li>内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</li>\n<li>扩展性好： 新建一个中间件非常简单<small>（不信能比 Django 中间件还简单，你是来捣乱的吧～）</small></li>\n</ul>\n<h2 id=\"参考事例\"><a href=\"#参考事例\" class=\"headerlink\" title=\"参考事例\"></a>参考事例</h2><p><a href=\"https://gin-gonic.com/zh-cn/docs/examples/\" target=\"_blank\" >见</a></p>\n<p>这么直接，也没个 API 文档，害的我找了半天没找到～</p>\n<h2 id=\"web-服务组成\"><a href=\"#web-服务组成\" class=\"headerlink\" title=\"web 服务组成\"></a>web 服务组成</h2><p>根据以往经验服务端涵盖如下内容：</p>\n<ul>\n<li>启动个端口监听请求</li>\n<li>静态资源路径</li>\n<li>GET、POST、Delete、PUT、PATCH、OPTIONS 等请求处理</li>\n<li>参数接收 urlparams、body</li>\n<li>返回渲染 html</li>\n<li>返回 JSON</li>\n<li>用户登录</li>\n<li>登录信息管理 cookie 、 redis 、session</li>\n<li>身份校验、权限校验</li>\n<li>日志信息</li>\n<li>数据持久化 DB 系列、ORM</li>\n</ul>\n<p>还是看<a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" >README.md</a>比较方便，官网要是能好好写写就好了</p>\n<h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><p><a href=\"/#/post/2022-10-15vscode\" target=\"_blank\" >相关配置</a></p>\n<h2 id=\"Gin-API-文档\"><a href=\"#Gin-API-文档\" class=\"headerlink\" title=\"Gin API 文档\"></a>Gin API 文档</h2><p><strong>找不到 API 文档</strong>，有 examples 文档和 examples 项目，不像 nestjs、Django 文档一堆</p>\n<p><strong>这两天学习总结到</strong>：大致了解 gin 的相关东西，真正开发时候会有语法提示，也可以点进去看看源码，这样也就了解了对应接口&#x2F;结构体的 API</p>\n<p><strong>睡了一觉略有所感</strong>：中午看了点视频，又睡了一觉，醒来一想为什么没有 API 文档,或许是作者认为太简单了，根本不需要，我觉得是这样</p>\n<p><strong>闲逛 gorm 发现了 Gin 的 api 文档了</strong>：<a href=\"https://pkg.go.dev/github.com/gin-gonic/gin\" target=\"_blank\" >https://pkg.go.dev/github.com/gin-gonic/gin</a></p>\n<h2 id=\"看下-Gin-Example-带来的-API\"><a href=\"#看下-Gin-Example-带来的-API\" class=\"headerlink\" title=\"看下 Gin Example 带来的 API\"></a>看下 Gin Example 带来的 API</h2><p>将 <a href=\"https://github.com/gin-gonic/examples\">https://github.com/gin-gonic/examples</a> fork 到自己 github ,clone 到本地，对照文档运行起来看看效果</p>\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><h3 id=\"Using-GET-POST-PUT-PATCH-DELETE-and-OPTIONS\"><a href=\"#Using-GET-POST-PUT-PATCH-DELETE-and-OPTIONS\" class=\"headerlink\" title=\"Using GET, POST, PUT, PATCH, DELETE and OPTIONS\"></a>Using GET, POST, PUT, PATCH, DELETE and OPTIONS</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n  &#x2F;&#x2F; Creates a gin router with default middleware:\n  &#x2F;&#x2F; logger and recovery (crash-free) middleware\n  &#x2F;&#x2F; 默认中间件情况下，创建 gin router\n  router :&#x3D; gin.Default()\n\n  router.GET(&quot;&#x2F;someGet&quot;, getting)\n  router.POST(&quot;&#x2F;somePost&quot;, posting)\n  router.PUT(&quot;&#x2F;somePut&quot;, putting)\n  router.DELETE(&quot;&#x2F;someDelete&quot;, deleting)\n  router.PATCH(&quot;&#x2F;somePatch&quot;, patching)\n  router.HEAD(&quot;&#x2F;someHead&quot;, head)\n  router.OPTIONS(&quot;&#x2F;someOptions&quot;, options)\n\n  &#x2F;&#x2F; By default it serves on :8080 unless a\n  &#x2F;&#x2F; PORT environment variable was defined.\n  &#x2F;&#x2F; 运行服务，默认启用的是8080端口\n  router.Run()\n  &#x2F;&#x2F; router.Run(&quot;:3000&quot;) for a hard coded port\n  &#x2F;&#x2F; 可以使用 router.Run(&quot;:3000&quot;)， 硬编码的方式改变端口\n&#125;\n</code></pre>\n\n<h2 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h2><h3 id=\"Parameters-in-path\"><a href=\"#Parameters-in-path\" class=\"headerlink\" title=\"Parameters in path\"></a>Parameters in path</h3><p>获取路径中的参数</p>\n<p><code>Param</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n  router :&#x3D; gin.Default()\n\n  &#x2F;&#x2F; This handler will match &#x2F;user&#x2F;john but will not match &#x2F;user&#x2F; or &#x2F;user\n  &#x2F;&#x2F; 这个处理器会匹配  &#x2F;user&#x2F;john ，但不会匹配  &#x2F;user&#x2F; 或者 &#x2F;user这种\n  router.GET(&quot;&#x2F;user&#x2F;:name&quot;, func(c *gin.Context) &#123;\n    name :&#x3D; c.Param(&quot;name&quot;) &#x2F;&#x2F; 通过指针.Param获取路径中的参数\n    c.String(http.StatusOK, &quot;Hello %s&quot;, name)\n  &#125;)\n\n  &#x2F;&#x2F; However, this one will match &#x2F;user&#x2F;john&#x2F; and also &#x2F;user&#x2F;john&#x2F;send\n  &#x2F;&#x2F; If no other routers match &#x2F;user&#x2F;john, it will redirect to &#x2F;user&#x2F;john&#x2F;\n\n  &#x2F;&#x2F; 这个会匹配到 &#x2F;user&#x2F;john&#x2F; 、  &#x2F;user&#x2F;john&#x2F;send， 对于&#x2F;user&#x2F;john 这样一个路径，如果没有其他路径匹配到，会重定向到 &#x2F;user&#x2F;john&#x2F;\n  router.GET(&quot;&#x2F;user&#x2F;:name&#x2F;*action&quot;, func(c *gin.Context) &#123; &#x2F;&#x2F; 这里的 :name 和 *action 怎么不一样呢？\n    name :&#x3D; c.Param(&quot;name&quot;)\n    action :&#x3D; c.Param(&quot;action&quot;)\n    message :&#x3D; name + &quot; is &quot; + action\n    c.String(http.StatusOK, message)\n  &#125;)\n\n  &#x2F;&#x2F; For each matched request Context will hold the route definition\n  &#x2F;&#x2F; 对于每个匹配的请求，Context将保存路由定义\n  router.POST(&quot;&#x2F;user&#x2F;:name&#x2F;*action&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; FullPath方法可以获取到路由定义\n    b :&#x3D; c.FullPath() &#x3D;&#x3D; &quot;&#x2F;user&#x2F;:name&#x2F;*action&quot; &#x2F;&#x2F; true\n    c.String(http.StatusOK, &quot;%t&quot;, b)\n  &#125;)\n\n  &#x2F;&#x2F; This handler will add a new router for &#x2F;user&#x2F;groups.\n  &#x2F;&#x2F; Exact routes are resolved before param routes, regardless of the order they were defined.\n  &#x2F;&#x2F; Routes starting with &#x2F;user&#x2F;groups are never interpreted as &#x2F;user&#x2F;:name&#x2F;... routes\n\n  &#x2F;&#x2F; 这个处理，会为&#x2F;user&#x2F;groups 增加一个新路径\n  &#x2F;&#x2F; 精确路由在参数路由之前解析，而不管它们的定义顺序如何。\n  &#x2F;&#x2F; 以&#x2F;user&#x2F;groups开头的路由永远不会解释为&#x2F;user&#x2F;:name&#x2F;…路由\n  router.GET(&quot;&#x2F;user&#x2F;groups&quot;, func(c *gin.Context) &#123;\n    c.String(http.StatusOK, &quot;The available groups are [...]&quot;)\n  &#125;)\n\n  router.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Querystring-parameters\"><a href=\"#Querystring-parameters\" class=\"headerlink\" title=\"Querystring parameters\"></a>Querystring parameters</h3><p><code>DefaultQuery</code>、<code>Query</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n  router :&#x3D; gin.Default()\n\n  &#x2F;&#x2F; Query string parameters are parsed using the existing underlying request object.\n  &#x2F;&#x2F; The request responds to a url matching:  &#x2F;welcome?firstname&#x3D;Jane&amp;lastname&#x3D;Doe\n\n  &#x2F;&#x2F; 查询字符串参数使用现有的底层请求对象进行解析。\n  &#x2F;&#x2F; 请求响应一个匹配的url：&#x2F;welcome?firstname&#x3D;Jane&amp;lastname&#x3D;Doe\n  router.GET(&quot;&#x2F;welcome&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; 带有默认值，取参数（如果firstname，没有，则用第二参数Guest）\n    firstname :&#x3D; c.DefaultQuery(&quot;firstname&quot;, &quot;Guest&quot;)\n    &#x2F;&#x2F; 这个是简写\n    lastname :&#x3D; c.Query(&quot;lastname&quot;) &#x2F;&#x2F; shortcut for c.Request.URL.Query().Get(&quot;lastname&quot;)\n\n    c.String(http.StatusOK, &quot;Hello %s %s&quot;, firstname, lastname)\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Multipart-x2F-Urlencoded-Form\"><a href=\"#Multipart-x2F-Urlencoded-Form\" class=\"headerlink\" title=\"Multipart&#x2F;Urlencoded Form\"></a>Multipart&#x2F;Urlencoded Form</h3><p>表单参数</p>\n<p><code>DefaultPostForm</code>、<code>PostForm</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\trouter :&#x3D; gin.Default()\n\n\trouter.POST(&quot;&#x2F;form_post&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; message参数\n\t\tmessage :&#x3D; c.PostForm(&quot;message&quot;)\n    &#x2F;&#x2F; form表单，带有默认值\n\t\tnick :&#x3D; c.DefaultPostForm(&quot;nick&quot;, &quot;anonymous&quot;)\n\n\t\tc.JSON(http.StatusOK, gin.H&#123;\n\t\t\t&quot;status&quot;:  &quot;posted&quot;,\n\t\t\t&quot;message&quot;: message,\n\t\t\t&quot;nick&quot;:    nick,\n\t\t&#125;)\n\n\t&#125;)\n\trouter.Run(&quot;:8080&quot;)\n&#125;\n</code></pre>\n\n<h3 id=\"query-post-form\"><a href=\"#query-post-form\" class=\"headerlink\" title=\"query + post form\"></a>query + post form</h3><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">POST &#x2F;post?id&#x3D;1234&amp;page&#x3D;1 HTTP&#x2F;1.1\nContent-Type: application&#x2F;x-www-form-urlencoded\n\nname&#x3D;manu&amp;message&#x3D;this_is_great</code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n\n  router.POST(&quot;&#x2F;post&quot;, func(c *gin.Context) &#123;\n      &#x2F;&#x2F; query参数\n      id :&#x3D; c.Query(&quot;id&quot;)\n      page :&#x3D; c.DefaultQuery(&quot;page&quot;, &quot;0&quot;)\n      &#x2F;&#x2F; form参数\n      name :&#x3D; c.PostForm(&quot;name&quot;)\n      message :&#x3D; c.PostForm(&quot;message&quot;)\n\n      fmt.Printf(&quot;id: %s; page: %s; name: %s; message: %s&quot;, id, page, name, message)\n\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;\n&#x2F;&#x2F; id: 1234; page: 1; name: manu; message: this_is_great</code></pre>\n\n<h3 id=\"Map-as-querystring-or-postform-parameters\"><a href=\"#Map-as-querystring-or-postform-parameters\" class=\"headerlink\" title=\"Map as querystring or postform parameters\"></a>Map as querystring or postform parameters</h3><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">POST &#x2F;post?ids[a]&#x3D;1234&amp;ids[b]&#x3D;hello HTTP&#x2F;1.1\nContent-Type: application&#x2F;x-www-form-urlencoded\n\nnames[first]&#x3D;thinkerou&amp;names[second]&#x3D;tianou</code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nfunc main() &#123;\n  router :&#x3D; gin.Default()\n\n  router.POST(&quot;&#x2F;post&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; query map\n    ids :&#x3D; c.QueryMap(&quot;ids&quot;)\n    &#x2F;&#x2F; form map\n    names :&#x3D; c.PostFormMap(&quot;names&quot;)\n\n    fmt.Printf(&quot;ids: %v; names: %v&quot;, ids, names)\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;\n&#x2F;&#x2F; ids: map[b:hello a:1234]; names: map[second:tianou first:thinkerou]\n</code></pre>\n\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"Single-file-upload\"><a href=\"#Single-file-upload\" class=\"headerlink\" title=\"Single file upload\"></a>Single file upload</h3><p><code>file.Filename</code> 获取的文件名不可信</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nfunc main() &#123;\n  router :&#x3D; gin.Default()\n  &#x2F;&#x2F; Set a lower memory limit for multipart forms (default is 32 MiB)\n  &#x2F;&#x2F; 默认 multipart forms  是 32MB, 设个低点的值的8M，是缓存不是上传大小限制\n  router.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20  &#x2F;&#x2F; 8 MiB\n  router.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; Single file\n    file, _ :&#x3D; c.FormFile(&quot;file&quot;)\n    log.Println(file.Filename)\n\n    &#x2F;&#x2F; Upload the file to specific dst.\n    &#x2F;&#x2F; 上传文件到具体的目的地\n    c.SaveUploadedFile(file, dst)\n\n    c.String(http.StatusOK, fmt.Sprintf(&quot;&#39;%s&#39; uploaded!&quot;, file.Filename))\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;\n\n&#x2F;&#x2F; curl -X POST http:&#x2F;&#x2F;localhost:8080&#x2F;upload \\\n&#x2F;&#x2F;   -F &quot;file&#x3D;@&#x2F;Users&#x2F;appleboy&#x2F;test.zip&quot; \\\n&#x2F;&#x2F;   -H &quot;Content-Type: multipart&#x2F;form-data&quot;</code></pre>\n\n<h3 id=\"Multiple-files\"><a href=\"#Multiple-files\" class=\"headerlink\" title=\"Multiple files\"></a>Multiple files</h3><p>See the detail example code.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n  &#x2F;&#x2F; Set a lower memory limit for multipart forms (default is 32 MiB)\n  &#x2F;&#x2F; 默认 multipart forms  是 32MB, 设个低点的值的8M\n  router.MaxMultipartMemory &#x3D; 8 &lt;&lt; 20 &#x2F;&#x2F; 8 MiB\n\n  router.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;\n\n  &#x2F;&#x2F; Multipart form\n  form, _ :&#x3D; c.MultipartForm()\n\n  &#x2F;&#x2F; 多文件上传\n  files :&#x3D; form.File[&quot;upload[]&quot;]\n\n      for _, file :&#x3D; range files &#123;\n        log.Println(file.Filename)\n        &#x2F;&#x2F; Upload the file to specific dst.\n        c.SaveUploadedFile(file, dst)\n      &#125;\n\n      c.String(http.StatusOK, fmt.Sprintf(&quot;%d files uploaded!&quot;, len(files)))\n\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;\n\n\n&#x2F;&#x2F; How to curl:\n\n&#x2F;&#x2F; curl -X POST http:&#x2F;&#x2F;localhost:8080&#x2F;upload \\\n&#x2F;&#x2F;  -F &quot;upload[]&#x3D;@&#x2F;Users&#x2F;appleboy&#x2F;test1.zip&quot; \\\n&#x2F;&#x2F;  -F &quot;upload[]&#x3D;@&#x2F;Users&#x2F;appleboy&#x2F;test2.zip&quot; \\\n&#x2F;&#x2F;  -H &quot;Content-Type: multipart&#x2F;form-data&quot;</code></pre>\n\n<h2 id=\"路由分组\"><a href=\"#路由分组\" class=\"headerlink\" title=\"路由分组\"></a>路由分组</h2><h3 id=\"Grouping-routes\"><a href=\"#Grouping-routes\" class=\"headerlink\" title=\"Grouping routes\"></a>Grouping routes</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n    &#x2F;&#x2F; 以版本分组，也就移动端用的到，我记得java,有个包可以自动降级处理接口版本\n  &#x2F;&#x2F; Simple group: v1\n  v1 :&#x3D; router.Group(&quot;&#x2F;v1&quot;)\n  &#123;\n    v1.POST(&quot;&#x2F;login&quot;, loginEndpoint)\n    v1.POST(&quot;&#x2F;submit&quot;, submitEndpoint)\n    v1.POST(&quot;&#x2F;read&quot;, readEndpoint)\n  &#125;\n\n  &#x2F;&#x2F; Simple group: v2\n  v2 :&#x3D; router.Group(&quot;&#x2F;v2&quot;)\n  &#123;\n    v2.POST(&quot;&#x2F;login&quot;, loginEndpoint)\n    v2.POST(&quot;&#x2F;submit&quot;, submitEndpoint)\n    v2.POST(&quot;&#x2F;read&quot;, readEndpoint)\n  &#125;\n\n  router.Run(&quot;:8080&quot;)\n&#125;\n</code></pre>\n\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"Blank-Gin-without-middleware-by-default\"><a href=\"#Blank-Gin-without-middleware-by-default\" class=\"headerlink\" title=\"Blank Gin without middleware by default\"></a>Blank Gin without middleware by default</h3><p>只是用默认的中间件，无其他中间件</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r :&#x3D; gin.New() &#x2F;&#x2F; 不使用任何中间件\n\n&#x2F;&#x2F; Default With the Logger and Recovery middleware already attached\nr :&#x3D; gin.Default() &#x2F;&#x2F; 使用默认中间件</code></pre>\n\n<h3 id=\"Using-middleware\"><a href=\"#Using-middleware\" class=\"headerlink\" title=\"Using middleware\"></a>Using middleware</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  &#x2F;&#x2F; Creates a router without any middleware by default\n  r :&#x3D; gin.New() &#x2F;&#x2F; 创建无中间件的路由\n\n  &#x2F;&#x2F; Global middleware\n  &#x2F;&#x2F; Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE&#x3D;release.\n  &#x2F;&#x2F; 记录器中间件将日志写入gin。即使您使用GIN_MODE&#x3D;release设置了DefaultWriter。\n  &#x2F;&#x2F; By default gin.DefaultWriter &#x3D; os.Stdout\n  &#x2F;&#x2F; 默认情况，只是打印\n\n  &#x2F;&#x2F; 全局中间件\n  r.Use(gin.Logger())\n\n  &#x2F;&#x2F; Recovery middleware recovers from any panics and writes a 500 if there was one.\n  &#x2F;&#x2F; recovery 中间件用于从 panic 中恢复, 并返回 500 响应. 还是不懂啥意思\n  r.Use(gin.Recovery())\n\n  &#x2F;&#x2F; Per route middleware, you can add as many as you desire.\n  &#x2F;&#x2F; 根据路由中间件，您可以添加任意数量的中间件。\n  r.GET(&quot;&#x2F;benchmark&quot;, MyBenchLogger(), benchEndpoint)\n\n  &#x2F;&#x2F; Authorization group\n  &#x2F;&#x2F; authorized :&#x3D; r.Group(&quot;&#x2F;&quot;, AuthRequired())\n  &#x2F;&#x2F; exactly the same as:\n  authorized :&#x3D; r.Group(&quot;&#x2F;&quot;)\n  &#x2F;&#x2F; per group middleware! in this case we use the custom created\n  &#x2F;&#x2F; AuthRequired() middleware just in the &quot;authorized&quot; group.\n\n  &#x2F;&#x2F;每组中间件！在本例中，我们使用自定义创建的\n  &#x2F;&#x2F;AuthRequired（）中间件仅位于“授权”组中。\n  authorized.Use(AuthRequired())\n  &#123;\n    authorized.POST(&quot;&#x2F;login&quot;, loginEndpoint)\n    authorized.POST(&quot;&#x2F;submit&quot;, submitEndpoint)\n    authorized.POST(&quot;&#x2F;read&quot;, readEndpoint)\n\n    &#x2F;&#x2F; nested group\n    &#x2F;&#x2F; 级联分组\n    testing :&#x3D; authorized.Group(&quot;testing&quot;)\n    &#x2F;&#x2F; visit 0.0.0.0:8080&#x2F;testing&#x2F;analytics\n    testing.GET(&quot;&#x2F;analytics&quot;, analyticsEndpoint)\n  &#125;\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;\n</code></pre>\n\n<h3 id=\"Custom-Recovery-behavior\"><a href=\"#Custom-Recovery-behavior\" class=\"headerlink\" title=\"Custom Recovery behavior\"></a>Custom Recovery behavior</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  &#x2F;&#x2F; Creates a router without any middleware by default\n  r :&#x3D; gin.New()\n\n  &#x2F;&#x2F; Global middleware\n  &#x2F;&#x2F; Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE&#x3D;release.\n  &#x2F;&#x2F; By default gin.DefaultWriter &#x3D; os.Stdout\n  r.Use(gin.Logger())\n\n  &#x2F;&#x2F; Recovery middleware recovers from any panics and writes a 500 if there was one.\n  r.Use(gin.CustomRecovery(func(c *gin.Context, recovered interface&#123;&#125;) &#123;\n    if err, ok :&#x3D; recovered.(string); ok &#123; &#x2F;&#x2F; 这个地方怎么是分号？\n      c.String(http.StatusInternalServerError, fmt.Sprintf(&quot;error: %s&quot;, err))\n    &#125;\n    &#x2F;&#x2F; 丢弃\n    c.AbortWithStatus(http.StatusInternalServerError)\n  &#125;))\n\n  r.GET(&quot;&#x2F;panic&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; panic with a string -- the custom middleware could save this to a database or report it to the user\n    &#x2F;&#x2F; 定义中间件，将 panic 保存到数据库。或者是向用户报告问题\n    panic(&quot;foo&quot;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    c.String(http.StatusOK, &quot;ohai&quot;)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"How-to-write-log-file\"><a href=\"#How-to-write-log-file\" class=\"headerlink\" title=\"How to write log file\"></a>How to write log file</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n    &#x2F;&#x2F; Disable Console Color, you don&#39;t need console color when writing the logs to file.\n    &#x2F;&#x2F; 关闭console颜色，向文件中写入日志不需要颜色\n    gin.DisableConsoleColor()\n\n    &#x2F;&#x2F; Logging to a file.\n    f, _ :&#x3D; os.Create(&quot;gin.log&quot;) &#x2F;&#x2F; 创建文件\n\n\n    gin.DefaultWriter &#x3D; io.MultiWriter(f) &#x2F;&#x2F; 写入日志\n    &#x2F;&#x2F; Use the following code if you need to write the logs to file and console at the same time.\n\n    &#x2F;&#x2F; 如果既要写日志到文件，也要打印，就需要用到下面的代码\n    &#x2F;&#x2F; gin.DefaultWriter &#x3D; io.MultiWriter(f, os.Stdout)\n\n    router :&#x3D; gin.Default()\n    router.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n        c.String(http.StatusOK, &quot;pong&quot;)\n    &#125;)\n\n    router.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Custom-Log-Format\"><a href=\"#Custom-Log-Format\" class=\"headerlink\" title=\"Custom Log Format\"></a>Custom Log Format</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.New()\n\n  &#x2F;&#x2F; LoggerWithFormatter middleware will write the logs to gin.DefaultWriter\n  &#x2F;&#x2F; By default gin.DefaultWriter &#x3D; os.Stdout\n  router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string &#123;\n\n    &#x2F;&#x2F; your custom format\n    return fmt.Sprintf(&quot;%s - [%s] \\&quot;%s %s %s %d %s \\&quot;%s\\&quot; %s\\&quot;\\n&quot;,\n        param.ClientIP,\n        param.TimeStamp.Format(time.RFC1123),\n        param.Method,\n        param.Path,\n        param.Request.Proto, &#x2F;&#x2F; HTTP&#x2F;1.1\n        param.StatusCode, &#x2F;&#x2F; 200\n        param.Latency, &#x2F;&#x2F;  122.767µs\n        param.Request.UserAgent(), &#x2F;&#x2F; &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.80 Safari&#x2F;537.36&quot;\n        param.ErrorMessage,\n    )\n  &#125;))\n  router.Use(gin.Recovery())\n\n  router.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n    c.String(http.StatusOK, &quot;pong&quot;)\n  &#125;)\n\n  router.Run(&quot;:8080&quot;)\n&#125;\n\n&#x2F;&#x2F; ::1 - [Fri, 07 Dec 2018 17:04:38 JST] &quot;GET &#x2F;ping HTTP&#x2F;1.1 200 122.767µs &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.80 Safari&#x2F;537.36&quot; &quot;</code></pre>\n\n<h3 id=\"Controlling-Log-output-coloring\"><a href=\"#Controlling-Log-output-coloring\" class=\"headerlink\" title=\"Controlling Log output coloring\"></a>Controlling Log output coloring</h3><p>By default, logs output on console should be colorized depending on the detected TTY.</p>\n<p>默认情况下，控制台上的日志输出应根据检测到的 TTY 进行着色。</p>\n<p><strong>Never colorize logs:</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n&#x2F;&#x2F; Disable log&#39;s color\ngin.DisableConsoleColor()\n\n    &#x2F;&#x2F; Creates a gin router with default middleware:\n    &#x2F;&#x2F; logger and recovery (crash-free) middleware\n    router :&#x3D; gin.Default()\n\n    router.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n        c.String(http.StatusOK, &quot;pong&quot;)\n    &#125;)\n\n    router.Run(&quot;:8080&quot;)\n\n&#125;</code></pre>\n\n<p><strong>Always colorize logs:</strong></p>\n<p>通常会定制颜色</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nfunc main() &#123;\n    &#x2F;&#x2F; Force log&#39;s color\n    gin.ForceConsoleColor()\n\n    &#x2F;&#x2F; Creates a gin router with default middleware:\n    &#x2F;&#x2F; logger and recovery (crash-free) middleware\n    router :&#x3D; gin.Default()\n\n    router.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n        c.String(http.StatusOK, &quot;pong&quot;)\n    &#125;)\n\n    router.Run(&quot;:8080&quot;)\n&#125;\n\n</code></pre>\n\n<h2 id=\"数据校验\"><a href=\"#数据校验\" class=\"headerlink\" title=\"数据校验\"></a>数据校验</h2><h3 id=\"Model-binding-and-validation\"><a href=\"#Model-binding-and-validation\" class=\"headerlink\" title=\"Model binding and validation ?\"></a>Model binding and validation ?</h3><p>要将请求体绑定到结构体中，使用模型绑定。 Gin 目前支持 JSON、XML、YAML 和标准表单值的绑定（foo&#x3D;bar＆boo&#x3D;baz）。</p>\n<p>Gin 使用 go-playground&#x2F;validator&#x2F;v10 进行验证。 查看标签用法的全部文档.</p>\n<p>使用时，需要在要绑定的所有字段上，设置相应的 tag。 例如，使用 JSON 绑定时，设置字段标签为 json:”fieldname”。</p>\n<p>Gin 提供了两类绑定方法：</p>\n<p><strong>Type - Must bind</strong></p>\n<p><code>Methods </code>- Bind, BindJSON, BindXML, BindQuery, BindYAML<br><code>Behavior</code> - 这些方法属于 MustBindWith 的具体调用。 如果发生绑定错误，则请求终止，并触发 c.AbortWithError(400, err).SetType(ErrorTypeBind)。响应状态码被设置为 400 并且 Content-Type 被设置为 text&#x2F;plain; <strong>太死板，不好用</strong>charset&#x3D;utf-8。 如果您在此之后尝试设置响应状态码，Gin 会输出日志 [GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422。 如果您希望更好地控制绑定，考虑使用 ShouldBind 等效方法。</p>\n<p><strong>Type - Should bind</strong></p>\n<p><code>Methods</code> - ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML<br><code>Behavior</code> - 这些方法属于 ShouldBindWith 的具体调用。 <strong>如果发生绑定错误，Gin 会返回错误并由开发者处理错误和请求。</strong></p>\n<p>使用 Bind 方法时，Gin 会尝试根据 Content-Type 推断如何绑定。 如果你明确知道要绑定什么，可以使用 MustBindWith 或 ShouldBindWith。</p>\n<p><strong>你也可以指定必须绑定的字段。 如果一个字段的 tag 加上了 binding:”required”，但绑定时是空值, Gin 会报错。</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 绑定 JSON\ntype Login struct &#123;\n\tUser     string &#96;form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;&#96;\n\tPassword string &#96;form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;&#96;\n&#125;\n\nfunc main() &#123;\n\trouter :&#x3D; gin.Default()\n\n\t&#x2F;&#x2F; 绑定 JSON (&#123;&quot;user&quot;: &quot;manu&quot;, &quot;password&quot;: &quot;123&quot;&#125;)\n\trouter.POST(&quot;&#x2F;loginJSON&quot;, func(c *gin.Context) &#123;\n\n\t\tvar json Login &#x2F;&#x2F; Login结构体\n\n\n    &#x2F;&#x2F; if initialization; condition &#123;\n    &#x2F;&#x2F;     &#x2F;&#x2F; do something\n    &#x2F;&#x2F; &#125;\n\n    &#x2F;&#x2F; 例如:\n\n    &#x2F;&#x2F; val :&#x3D; 10\n    &#x2F;&#x2F; if val &gt; max &#123;\n    &#x2F;&#x2F;     &#x2F;&#x2F; do something\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; 你也可以这样写:\n\n    &#x2F;&#x2F; if val :&#x3D; 10; val &gt; max &#123;\n    &#x2F;&#x2F;     &#x2F;&#x2F; do something\n    &#x2F;&#x2F; &#125;\n\n    &#x2F;&#x2F; ————————————————\n    &#x2F;&#x2F; 原文作者：Go 技术论坛文档：《Go 入门指南（）》\n    &#x2F;&#x2F; 转自链接：https:&#x2F;&#x2F;learnku.com&#x2F;docs&#x2F;the-way-to-go&#x2F;if-else-structure&#x2F;3592\n    &#x2F;&#x2F; 版权声明：翻译文档著作权归译者和 LearnKu 社区所有。转载请保留原文链接\n\t\tif err :&#x3D; c.ShouldBindJSON(&amp;json); err !&#x3D; nil &#123;\n\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tif json.User !&#x3D; &quot;manu&quot; || json.Password !&#x3D; &quot;123&quot; &#123;\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;status&quot;: &quot;unauthorized&quot;&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tc.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;you are logged in&quot;&#125;)\n\t&#125;)\n\n\t&#x2F;&#x2F; 绑定 XML (\n\t&#x2F;&#x2F;\t&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n\t&#x2F;&#x2F;\t&lt;root&gt;\n\t&#x2F;&#x2F;\t\t&lt;user&gt;manu&lt;&#x2F;user&gt;\n\t&#x2F;&#x2F;\t\t&lt;password&gt;123&lt;&#x2F;password&gt;\n\t&#x2F;&#x2F;\t&lt;&#x2F;root&gt;)\n\trouter.POST(&quot;&#x2F;loginXML&quot;, func(c *gin.Context) &#123;\n\t\tvar xml Login\n\t\tif err :&#x3D; c.ShouldBindXML(&amp;xml); err !&#x3D; nil &#123;\n\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tif xml.User !&#x3D; &quot;manu&quot; || xml.Password !&#x3D; &quot;123&quot; &#123;\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;status&quot;: &quot;unauthorized&quot;&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tc.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;you are logged in&quot;&#125;)\n\t&#125;)\n\n\t&#x2F;&#x2F; 绑定 HTML 表单 (user&#x3D;manu&amp;password&#x3D;123)\n\trouter.POST(&quot;&#x2F;loginForm&quot;, func(c *gin.Context) &#123;\n\t\tvar form Login\n\t\t&#x2F;&#x2F; 根据 Content-Type Header 推断使用哪个绑定器。\n\t\tif err :&#x3D; c.ShouldBind(&amp;form); err !&#x3D; nil &#123;\n\t\t\tc.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tif form.User !&#x3D; &quot;manu&quot; || form.Password !&#x3D; &quot;123&quot; &#123;\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H&#123;&quot;status&quot;: &quot;unauthorized&quot;&#125;)\n\t\t\treturn\n\t\t&#125;\n\n\t\tc.JSON(http.StatusOK, gin.H&#123;&quot;status&quot;: &quot;you are logged in&quot;&#125;)\n\t&#125;)\n\n\t&#x2F;&#x2F; 监听并在 0.0.0.0:8080 上启动服务\n\trouter.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<p><strong>请求测试</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n$ curl -v -X POST \\\n  http:&#x2F;&#x2F;localhost:8080&#x2F;loginJSON \\\n  -H &#39;content-type: application&#x2F;json&#39; \\\n  -d &#39;&#123; &quot;user&quot;: &quot;manu&quot; &#125;&#39;\n&gt; POST &#x2F;loginJSON HTTP&#x2F;1.1\n&gt; Host: localhost:8080\n&gt; User-Agent: curl&#x2F;7.51.0\n&gt; Accept: *&#x2F;*\n&gt; content-type: application&#x2F;json\n&gt; Content-Length: 18\n&gt;\n* upload completely sent off: 18 out of 18 bytes\n&lt; HTTP&#x2F;1.1 400 Bad Request\n&lt; Content-Type: application&#x2F;json; charset&#x3D;utf-8\n&lt; Date: Fri, 04 Aug 2017 03:51:31 GMT\n&lt; Content-Length: 100\n&lt;\n&#123;&quot;error&quot;:&quot;Key: &#39;Login.Password&#39; Error:Field validation for &#39;Password&#39; failed on the &#39;required&#39; tag&quot;&#125;</code></pre>\n\n<h3 id=\"Custom-Validators\"><a href=\"#Custom-Validators\" class=\"headerlink\" title=\"Custom Validators\"></a>Custom Validators</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n  &quot;net&#x2F;http&quot;\n  &quot;time&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;binding&quot;\n  &quot;github.com&#x2F;go-playground&#x2F;validator&#x2F;v10&quot;\n)\n\n&#x2F;&#x2F; Booking contains binded and validated data.\ntype Booking struct &#123;\n  CheckIn  time.Time &#96;form:&quot;check_in&quot; binding:&quot;required,bookabledate&quot; time_format:&quot;2006-01-02&quot;&#96;\n  CheckOut time.Time &#96;form:&quot;check_out&quot; binding:&quot;required,gtfield&#x3D;CheckIn&quot; time_format:&quot;2006-01-02&quot;&#96;\n&#125;\n&#x2F;&#x2F; 校验函数\nvar bookableDate validator.Func &#x3D; func(fl validator.FieldLevel) bool &#123;\n  date, ok :&#x3D; fl.Field().Interface().(time.Time)\n  if ok &#123;\n    today :&#x3D; time.Now()\n    if today.After(date) &#123;\n      return false\n    &#125;\n  &#125;\n  return true\n&#125;\n\nfunc main() &#123;\n  route :&#x3D; gin.Default()\n\n  if v, ok :&#x3D; binding.Validator.Engine().(*validator.Validate); ok &#123;\n    &#x2F;&#x2F; 注册校验函数\n    v.RegisterValidation(&quot;bookabledate&quot;, bookableDate)\n  &#125;\n\n  route.GET(&quot;&#x2F;bookable&quot;, getBookable)\n  route.Run(&quot;:8085&quot;)\n&#125;\n\nfunc getBookable(c *gin.Context) &#123;\n  var b Booking\n  if err :&#x3D; c.ShouldBindWith(&amp;b, binding.Query); err &#x3D;&#x3D; nil &#123;\n    c.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;Booking dates are valid!&quot;&#125;)\n  &#125; else &#123;\n    c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)\n  &#125;\n&#125;</code></pre>\n\n<p><strong>测试</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ curl &quot;localhost:8085&#x2F;bookable?check_in&#x3D;2030-04-16&amp;check_out&#x3D;2030-04-17&quot;\n&#123;&quot;message&quot;:&quot;Booking dates are valid!&quot;&#125;\n\n$ curl &quot;localhost:8085&#x2F;bookable?check_in&#x3D;2030-03-10&amp;check_out&#x3D;2030-03-09&quot;\n&#123;&quot;error&quot;:&quot;Key: &#39;Booking.CheckOut&#39; Error:Field validation for &#39;CheckOut&#39; failed on the &#39;gtfield&#39; tag&quot;&#125;\n\n$ curl &quot;localhost:8085&#x2F;bookable?check_in&#x3D;2000-03-09&amp;check_out&#x3D;2000-03-10&quot;\n&#123;&quot;error&quot;:&quot;Key: &#39;Booking.CheckIn&#39; Error:Field validation for &#39;CheckIn&#39; failed on the &#39;bookabledate&#39; tag&quot;&#125;%</code></pre>\n\n<p><strong>忽略验证</strong></p>\n<p>使用上述的 curl 命令运行上面的示例时会返回错误。<br>因为示例中 Password 使用了 <code>binding:&quot;required&quot;</code>。<br>如果 Password 使用 <code>binding:&quot;-&quot;</code>， 再次运行上面的示例就不会返回错误。</p>\n<p>Struct 级别的校验可以用另一种方式来注册 <strong>struct-lvl-validation example</strong></p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><h3 id=\"Only-Bind-Query-String\"><a href=\"#Only-Bind-Query-String\" class=\"headerlink\" title=\"Only Bind Query String\"></a>Only Bind Query String</h3><p>ShouldBindQuery function only binds the query params and not the post data. See the detail information.</p>\n<p>ShouldBindQuery 函数只绑定 url 查询参数而忽略 post 数据。<a href=\"https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017\" target=\"_blank\" >参阅详细信息</a>.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\nimport (\n  &quot;log&quot;\n  &quot;net&#x2F;http&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype Person struct &#123;\n  Name    string &#96;form:&quot;name&quot;&#96;\n  Address string &#96;form:&quot;address&quot;&#96;\n&#125;\n\nfunc main() &#123;\n  route :&#x3D; gin.Default()\n  route.Any(&quot;&#x2F;testing&quot;, startPage)\n  route.Run(&quot;:8085&quot;)\n&#125;\n\nfunc startPage(c *gin.Context) &#123;\n  var person Person\n  if c.ShouldBindQuery(&amp;person) &#x3D;&#x3D; nil &#123;\n    log.Println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Only Bind By Query String &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)\n    log.Println(person.Name)\n    log.Println(person.Address)\n  &#125;\n  c.String(http.StatusOK, &quot;Success&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Bind-Query-String-or-Post-Data\"><a href=\"#Bind-Query-String-or-Post-Data\" class=\"headerlink\" title=\"Bind Query String or Post Data ?\"></a>Bind Query String or Post Data ?</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n  &quot;log&quot;\n  &quot;net&#x2F;http&quot;\n  &quot;time&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype Person struct &#123;\n        Name       string    &#96;form:&quot;name&quot;&#96;\n        Address    string    &#96;form:&quot;address&quot;&#96;\n        Birthday   time.Time &#96;form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;&#96;\n        CreateTime time.Time &#96;form:&quot;createTime&quot; time_format:&quot;unixNano&quot;&#96;\n        UnixTime   time.Time &#96;form:&quot;unixTime&quot; time_format:&quot;unix&quot;&#96;\n&#125;\n\nfunc main() &#123;\n  route :&#x3D; gin.Default()\n  route.GET(&quot;&#x2F;testing&quot;, startPage)\n  route.Run(&quot;:8085&quot;)\n&#125;\n\nfunc startPage(c *gin.Context) &#123;\n  var person Person\n  &#x2F;&#x2F; If &#96;GET&#96;, only &#96;Form&#96; binding engine (&#96;query&#96;) used.\n  &#x2F;&#x2F; If &#96;POST&#96;, first checks the &#96;content-type&#96; for &#96;JSON&#96; or &#96;XML&#96;, then uses &#96;Form&#96; (&#96;form-data&#96;).\n  &#x2F;&#x2F; See more at https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&#x2F;blob&#x2F;master&#x2F;binding&#x2F;binding.go#L88\n  if c.ShouldBind(&amp;person) &#x3D;&#x3D; nil &#123;\n          log.Println(person.Name)\n          log.Println(person.Address)\n          log.Println(person.Birthday)\n          log.Println(person.CreateTime)\n          log.Println(person.UnixTime)\n  &#125;\n\n  c.String(http.StatusOK, &quot;Success&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Bind-Uri\"><a href=\"#Bind-Uri\" class=\"headerlink\" title=\"Bind Uri\"></a>Bind Uri</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n  &quot;net&#x2F;http&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype Person struct &#123;\n  ID string &#96;uri:&quot;id&quot; binding:&quot;required,uuid&quot;&#96; &#x2F;&#x2F; uri:&quot;id&quot; 映射到ID\n  Name string &#96;uri:&quot;name&quot; binding:&quot;required&quot;&#96; &#x2F;&#x2F;  uri:&quot;name&quot; 映射到 Name\n&#125;\n\nfunc main() &#123;\n  route :&#x3D; gin.Default()\n  route.GET(&quot;&#x2F;:name&#x2F;:id&quot;, func(c *gin.Context) &#123;\n    var person Person\n    if err :&#x3D; c.ShouldBindUri(&amp;person); err !&#x3D; nil &#123;\n      c.JSON(http.StatusBadRequest, gin.H&#123;&quot;msg&quot;: err.Error()&#125;)\n      return\n    &#125;\n    c.JSON(http.StatusOK, gin.H&#123;&quot;name&quot;: person.Name, &quot;uuid&quot;: person.ID&#125;)\n  &#125;)\n  route.Run(&quot;:8088&quot;)\n&#125;</code></pre>\n\n<p><strong>test</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v localhost:8088&#x2F;thinkerou&#x2F;987fbc97-4bed-5078-9f07-9141ba07c9f3\ncurl -v localhost:8088&#x2F;thinkerou&#x2F;not-uuid</code></pre>\n\n<h3 id=\"Bind-Header\"><a href=\"#Bind-Header\" class=\"headerlink\" title=\"Bind Header\"></a>Bind Header</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n  &quot;fmt&quot;\n  &quot;net&#x2F;http&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype testHeader struct &#123;\n  Rate   int    &#96;header:&quot;Rate&quot;&#96; &#x2F;&#x2F; header中 Rate字段\n  Domain string &#96;header:&quot;Domain&quot;&#96; &#x2F;&#x2F; header中 Domain字段\n&#125;\n\nfunc main() &#123;\n  r :&#x3D; gin.Default()\n  r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    h :&#x3D; testHeader&#123;&#125;\n\n    if err :&#x3D; c.ShouldBindHeader(&amp;h); err !&#x3D; nil &#123;\n      c.JSON(http.StatusOK, err)\n    &#125;\n\n    fmt.Printf(&quot;%#v\\n&quot;, h)\n    c.JSON(http.StatusOK, gin.H&#123;&quot;Rate&quot;: h.Rate, &quot;Domain&quot;: h.Domain&#125;)\n  &#125;)\n\n  r.Run()\n\n&#x2F;&#x2F; client\n&#x2F;&#x2F; curl -H &quot;rate:300&quot; -H &quot;domain:music&quot; 127.0.0.1:8080&#x2F;\n&#x2F;&#x2F; output\n&#x2F;&#x2F; &#123;&quot;Domain&quot;:&quot;music&quot;,&quot;Rate&quot;:300&#125;\n&#125;</code></pre>\n\n<h3 id=\"Bind-HTML-checkboxes\"><a href=\"#Bind-HTML-checkboxes\" class=\"headerlink\" title=\"Bind HTML checkboxes\"></a>Bind HTML checkboxes</h3><p>参见 <a href=\"https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092\" target=\"_blank\" >详细信息</a></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n    &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\ntype myForm struct &#123;\n    Colors []string &#96;form:&quot;colors[]&quot;&#96; &#x2F;&#x2F; 表单中的colors字段\n&#125;\n\nfunc main() &#123;\n    r :&#x3D; gin.Default()\n\n    r.LoadHTMLGlob(&quot;views&#x2F;*&quot;)\n    r.GET(&quot;&#x2F;&quot;, indexHandler)\n    r.POST(&quot;&#x2F;&quot;, formHandler)\n\n    r.Run(&quot;:8080&quot;)\n&#125;\n\nfunc indexHandler(c *gin.Context) &#123;\n    c.HTML(200, &quot;form.html&quot;, nil)\n&#125;\n\nfunc formHandler(c *gin.Context) &#123;\n    var fakeForm myForm\n    c.Bind(&amp;fakeForm)\n    c.JSON(200, gin.H&#123;&quot;color&quot;: fakeForm.Colors&#125;)\n&#125;\n</code></pre>\n\n<p><strong>And the form (“views&#x2F;form.html”) :</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form action&#x3D;&quot;&#x2F;&quot; method&#x3D;&quot;POST&quot;&gt;\n  &lt;p&gt;Check some colors&lt;&#x2F;p&gt;\n  &lt;label for&#x3D;&quot;red&quot;&gt;Red&lt;&#x2F;label&gt;\n  &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;colors[]&quot; value&#x3D;&quot;red&quot; id&#x3D;&quot;red&quot; &#x2F;&gt;\n  &lt;label for&#x3D;&quot;green&quot;&gt;Green&lt;&#x2F;label&gt;\n  &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;colors[]&quot; value&#x3D;&quot;green&quot; id&#x3D;&quot;green&quot; &#x2F;&gt;\n  &lt;label for&#x3D;&quot;blue&quot;&gt;Blue&lt;&#x2F;label&gt;\n  &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;colors[]&quot; value&#x3D;&quot;blue&quot; id&#x3D;&quot;blue&quot; &#x2F;&gt;\n  &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;color&quot;:[&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;]&#125;</code></pre>\n\n<h2 id=\"返回数据\"><a href=\"#返回数据\" class=\"headerlink\" title=\"返回数据\"></a>返回数据</h2><h3 id=\"XML-JSON-YAML-and-ProtoBuf-rendering\"><a href=\"#XML-JSON-YAML-and-ProtoBuf-rendering\" class=\"headerlink\" title=\"XML, JSON, YAML and ProtoBuf rendering\"></a>XML, JSON, YAML and ProtoBuf rendering</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.Default()\n\n  &#x2F;&#x2F; gin.H is a shortcut for map[string]interface&#123;&#125;\n  r.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hey&quot;, &quot;status&quot;: http.StatusOK&#125;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;moreJSON&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; You also can use a struct\n    var msg struct &#123;\n      Name    string &#96;json:&quot;user&quot;&#96; &#x2F;&#x2F; 前面的会转化成后面的\n      Message string\n      Number  int\n    &#125;\n    msg.Name &#x3D; &quot;Lena&quot;\n    msg.Message &#x3D; &quot;hey&quot;\n    msg.Number &#x3D; 123\n    &#x2F;&#x2F; Note that msg.Name becomes &quot;user&quot; in the JSON\n    &#x2F;&#x2F; Will output  :   &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;\n    c.JSON(http.StatusOK, msg)\n  &#125;)\n\n  r.GET(&quot;&#x2F;someXML&quot;, func(c *gin.Context) &#123;\n    c.XML(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hey&quot;, &quot;status&quot;: http.StatusOK&#125;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;someYAML&quot;, func(c *gin.Context) &#123;\n    c.YAML(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;hey&quot;, &quot;status&quot;: http.StatusOK&#125;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;someProtoBuf&quot;, func(c *gin.Context) &#123;\n    reps :&#x3D; []int64&#123;int64(1), int64(2)&#125;\n    label :&#x3D; &quot;test&quot;\n    &#x2F;&#x2F; The specific definition of protobuf is written in the testdata&#x2F;protoexample file.\n    &#x2F;&#x2F; protobuf的具体定义写在testdata&#x2F;protoexample文件中。\n    data :&#x3D; &amp;protoexample.Test&#123;\n      Label: &amp;label,\n      Reps:  reps,\n    &#125;\n    &#x2F;&#x2F; Note that data becomes binary data in the response\n    &#x2F;&#x2F; Will output protoexample.Test protobuf serialized data\n    &#x2F;&#x2F; 二进制数据返回\n    c.ProtoBuf(http.StatusOK, data)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"JSON-数据大小写问题\"><a href=\"#JSON-数据大小写问题\" class=\"headerlink\" title=\"JSON 数据大小写问题\"></a>JSON 数据大小写问题</h3><img src=\"http://t-blog-images.aijs.top/img/202210161145420.png\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202210161144852.png\" />\n\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><h3 id=\"SecureJSON\"><a href=\"#SecureJSON\" class=\"headerlink\" title=\"SecureJSON ??\"></a>SecureJSON ??</h3><p>Using SecureJSON to prevent json hijacking. Default prepends “while(1),” to response body if the given struct is array values.</p>\n<p>使用 SecureJSON 防止 json 劫持。如果给定的结构是数组值，则默认在响应正文前面加上“while（1）”。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.Default()\n\n  &#x2F;&#x2F; You can also use your own secure json prefix\n  &#x2F;&#x2F; r.SecureJsonPrefix(&quot;)]&#125;&#39;,\\n&quot;)\n\n  r.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;\n    names :&#x3D; []string&#123;&quot;lena&quot;, &quot;austin&quot;, &quot;foo&quot;&#125;\n\n    &#x2F;&#x2F; Will output  :   while(1);[&quot;lena&quot;,&quot;austin&quot;,&quot;foo&quot;]\n    c.SecureJSON(http.StatusOK, names)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>Using JSONP to request data from a server in a different domain.<br>Add callback to response body if the query parameter callback exists.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.Default()\n\n  r.GET(&quot;&#x2F;JSONP&quot;, func(c *gin.Context) &#123;\n    data :&#x3D; gin.H&#123;\n      &quot;foo&quot;: &quot;bar&quot;,\n    &#125;\n\n    &#x2F;&#x2F; callback is x\n    &#x2F;&#x2F; Will output  :   x(&#123;\\&quot;foo\\&quot;:\\&quot;bar\\&quot;&#125;) &#x2F;&#x2F; 回调形式\n    c.JSONP(http.StatusOK, data)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n\n        &#x2F;&#x2F; client\n        &#x2F;&#x2F; curl http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;JSONP?callback&#x3D;x\n&#125;</code></pre>\n\n<h3 id=\"AsciiJSON\"><a href=\"#AsciiJSON\" class=\"headerlink\" title=\"AsciiJSON\"></a>AsciiJSON</h3><p>Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII characters.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.Default()\n\n  r.GET(&quot;&#x2F;someJSON&quot;, func(c *gin.Context) &#123;\n    data :&#x3D; gin.H&#123;\n      &quot;lang&quot;: &quot;GO语言&quot;,\n      &quot;tag&quot;:  &quot;&lt;br&gt;&quot;,\n    &#125;\n\n    &#x2F;&#x2F; will output : &#123;&quot;lang&quot;:&quot;GO\\u8bed\\u8a00&quot;,&quot;tag&quot;:&quot;\\u003cbr\\u003e&quot;&#125;\n    c.AsciiJSON(http.StatusOK, data)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"PureJSON\"><a href=\"#PureJSON\" class=\"headerlink\" title=\"PureJSON\"></a>PureJSON</h3><p>Normally, JSON replaces special HTML characters with their unicode entities, e.g. &lt; becomes \\u003c. If you want to encode such characters literally, you can use PureJSON instead. This feature is unavailable in Go 1.6 and lower.</p>\n<p>通常，JSON 使用 unicode 替换特殊 HTML 字符，例如 &lt; 变为 \\ u003c。</p>\n<p>如果要按字面对这些字符进行编码，则可以使用 PureJSON。Go 1.6 及更低版本无法使用此功能。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.Default()\n\n  &#x2F;&#x2F; Serves unicode entities\n  r.GET(&quot;&#x2F;json&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, gin.H&#123;\n      &quot;html&quot;: &quot;&lt;b&gt;Hello, world!&lt;&#x2F;b&gt;&quot;,\n    &#125;)\n  &#125;)\n\n  &#x2F;&#x2F; Serves literal characters\n  r.GET(&quot;&#x2F;purejson&quot;, func(c *gin.Context) &#123;\n    c.PureJSON(http.StatusOK, gin.H&#123;\n      &quot;html&quot;: &quot;&lt;b&gt;Hello, world!&lt;&#x2F;b&gt;&quot;,\n    &#125;)\n  &#125;)\n\n  &#x2F;&#x2F; listen and serve on 0.0.0.0:8080\n  r.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h2 id=\"文件资源\"><a href=\"#文件资源\" class=\"headerlink\" title=\"文件资源\"></a>文件资源</h2><h3 id=\"Serving-static-files\"><a href=\"#Serving-static-files\" class=\"headerlink\" title=\"Serving static files\"></a>Serving static files</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n  &#x2F;&#x2F; 下面这几个有什么区别\n  &#x2F;&#x2F; router.Static 指定某个目录为静态资源目录，可直接访问这个目录下的资源，url 要具体到资源名称。\n  &#x2F;&#x2F; router.StaticFS 比前面一个多了个功能，当目录下不存 index.html 文件时，会列出该目录下的所有文件。\n  &#x2F;&#x2F; router.StaticFile 指定某个具体的文件作为静态资源访问。\n  &#x2F;&#x2F; router.StaticFileFS 指定某个具体的文件作为静态资源访问,文件不存在，会列出该目录下的所有文件。\n\n\n  &#x2F;&#x2F; 作者：gentyxiao\n  &#x2F;&#x2F; 链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;09175c17419c\n  &#x2F;&#x2F; 来源：简书\n  &#x2F;&#x2F; 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n  router.Static(&quot;&#x2F;assets&quot;, &quot;.&#x2F;assets&quot;)\n  router.StaticFS(&quot;&#x2F;more_static&quot;, http.Dir(&quot;my_file_system&quot;))\n  router.StaticFile(&quot;&#x2F;favicon.ico&quot;, &quot;.&#x2F;resources&#x2F;favicon.ico&quot;)\n  router.StaticFileFS(&quot;&#x2F;more_favicon.ico&quot;, &quot;more_favicon.ico&quot;, http.Dir(&quot;my_file_system&quot;))\n\n  &#x2F;&#x2F; Listen and serve on 0.0.0.0:8080\n  router.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h3 id=\"Serving-data-from-file\"><a href=\"#Serving-data-from-file\" class=\"headerlink\" title=\"Serving data from file\"></a>Serving data from file</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n\n  router.GET(&quot;&#x2F;local&#x2F;file&quot;, func(c *gin.Context) &#123;\n    c.File(&quot;local&#x2F;file.go&quot;)\n  &#125;)\n\n  var fs http.FileSystem &#x3D; &#x2F;&#x2F; ...\n\n  router.GET(&quot;&#x2F;fs&#x2F;file&quot;, func(c *gin.Context) &#123;\n    c.FileFromFS(&quot;fs&#x2F;file.go&quot;, fs)\n  &#125;)\n&#125;\n</code></pre>\n\n<h3 id=\"Serving-data-from-reader\"><a href=\"#Serving-data-from-reader\" class=\"headerlink\" title=\"Serving data from reader\"></a>Serving data from reader</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  router :&#x3D; gin.Default()\n  router.GET(&quot;&#x2F;someDataFromReader&quot;, func(c *gin.Context) &#123;\n    response, err :&#x3D; http.Get(&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;gin-gonic&#x2F;logo&#x2F;master&#x2F;color.png&quot;)\n    if err !&#x3D; nil || response.StatusCode !&#x3D; http.StatusOK &#123;\n      c.Status(http.StatusServiceUnavailable)\n      return\n    &#125;\n\n    reader :&#x3D; response.Body\n     defer reader.Close()\n    contentLength :&#x3D; response.ContentLength\n    contentType :&#x3D; response.Header.Get(&quot;Content-Type&quot;)\n\n    extraHeaders :&#x3D; map[string]string&#123;\n      &quot;Content-Disposition&quot;: &#96;attachment; filename&#x3D;&quot;gopher.png&quot;&#96;,\n    &#125;\n\n    c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)\n  &#125;)\n  router.Run(&quot;:8080&quot;)\n&#125;</code></pre>\n\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><h3 id=\"HTML-rendering\"><a href=\"#HTML-rendering\" class=\"headerlink\" title=\"HTML rendering\"></a>HTML rendering</h3><h3 id=\"Custom-Template-renderer\"><a href=\"#Custom-Template-renderer\" class=\"headerlink\" title=\"Custom Template renderer\"></a>Custom Template renderer</h3><h3 id=\"Custom-Delimiters\"><a href=\"#Custom-Delimiters\" class=\"headerlink\" title=\"Custom Delimiters\"></a>Custom Delimiters</h3><h3 id=\"Custom-Template-Funcs\"><a href=\"#Custom-Template-Funcs\" class=\"headerlink\" title=\"Custom Template Funcs\"></a>Custom Template Funcs</h3><h3 id=\"Multitemplate\"><a href=\"#Multitemplate\" class=\"headerlink\" title=\"Multitemplate\"></a>Multitemplate</h3><h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><h3 id=\"Redirects\"><a href=\"#Redirects\" class=\"headerlink\" title=\"Redirects\"></a>Redirects</h3><p>HTTP 重定向很容易。 内部、外部重定向均支持。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nr.GET(&quot;&#x2F;test&quot;, func(c *gin.Context) &#123;\n  c.Redirect(http.StatusMovedPermanently, &quot;http:&#x2F;&#x2F;www.google.com&#x2F;&quot;)\n&#125;)\n</code></pre>\n\n<p>通过 POST 方法进行 HTTP 重定向。请参考 issue：#444</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r.POST(&quot;&#x2F;test&quot;, func(c *gin.Context) &#123;\n  c.Redirect(http.StatusFound, &quot;&#x2F;foo&quot;)\n&#125;)</code></pre>\n\n<p>路由重定向，使用 HandleContext：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r.GET(&quot;&#x2F;test&quot;, func(c *gin.Context) &#123;\n    c.Request.URL.Path &#x3D; &quot;&#x2F;test2&quot;\n    r.HandleContext(c)\n&#125;)</code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">r.GET(&quot;&#x2F;test2&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, gin.H&#123;&quot;hello&quot;: &quot;world&quot;&#125;)\n&#125;)</code></pre>\n\n<h2 id=\"自定义中间件\"><a href=\"#自定义中间件\" class=\"headerlink\" title=\"自定义中间件\"></a>自定义中间件</h2><p>洋葱模型，不是 koa 原创啊</p>\n<p><strong>图 1： 中间件执行顺序</strong></p>\n<!-- <img src=\"http://t-blog-images.aijs.top/img/202210161100207.png\" /> -->\n<img src=\"http://t-blog-images.aijs.top/img/202210161109664.png\" />\n\n<p><strong>续图 1，图 2: 中间件执行顺序</strong><br><img src=\"http://t-blog-images.aijs.top/img/202210161102580.png\" /></p>\n<p><strong>图 3: 阻止中间件往后执行</strong></p>\n<img src=\"http://t-blog-images.aijs.top/img/202210161106552.png\" />\n\n<p><strong>图 4：阻止中间件往后、往下执行</strong><br><img src=\"http://t-blog-images.aijs.top/img/202210161104024.png\" /></p>\n<h3 id=\"全局中间件\"><a href=\"#全局中间件\" class=\"headerlink\" title=\"全局中间件\"></a>全局中间件</h3><div style=\"display:flex;flex-direction:row; flex-wrap:wrap\">\n  <img src=\"http://t-blog-images.aijs.top/img/202210161113436.png\" style=\"max-width:100%;width: 300px\" />\n  <div style=\"width: 6px\"></div>\n  <img src=\"http://t-blog-images.aijs.top/img/202210161112991.png\"  style=\"max-width:100%; width: 500px\"/>\n</div>\n\n<h3 id=\"跨中间件存取值\"><a href=\"#跨中间件存取值\" class=\"headerlink\" title=\"跨中间件存取值\"></a>跨中间件存取值</h3><h3 id=\"Custom-Middleware\"><a href=\"#Custom-Middleware\" class=\"headerlink\" title=\"Custom Middleware\"></a>Custom Middleware</h3><h3 id=\"Using-BasicAuth-middleware\"><a href=\"#Using-BasicAuth-middleware\" class=\"headerlink\" title=\"Using BasicAuth() middleware\"></a>Using BasicAuth() middleware</h3><h3 id=\"Goroutines-inside-a-middleware\"><a href=\"#Goroutines-inside-a-middleware\" class=\"headerlink\" title=\"Goroutines inside a middleware\"></a>Goroutines inside a middleware</h3><h3 id=\"Custom-HTTP-configuration\"><a href=\"#Custom-HTTP-configuration\" class=\"headerlink\" title=\"Custom HTTP configuration\"></a>Custom HTTP configuration</h3><h2 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h2><h3 id=\"Support-Let’s-Encrypt-没看懂\"><a href=\"#Support-Let’s-Encrypt-没看懂\" class=\"headerlink\" title=\"Support Let’s Encrypt 没看懂\"></a>Support Let’s Encrypt 没看懂</h3><h2 id=\"多服务器\"><a href=\"#多服务器\" class=\"headerlink\" title=\"多服务器\"></a>多服务器</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">See the question and try the following example:\n\npackage main\n\nimport (\n  &quot;log&quot;\n  &quot;net&#x2F;http&quot;\n  &quot;time&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n  &quot;golang.org&#x2F;x&#x2F;sync&#x2F;errgroup&quot;\n)\n\nvar (\n  g errgroup.Group\n)\n&#x2F;&#x2F; 服务器1的路由\nfunc router01() http.Handler &#123;\n  e :&#x3D; gin.New()\n  e.Use(gin.Recovery())\n  e.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    c.JSON(\n      http.StatusOK,\n      gin.H&#123;\n        &quot;code&quot;:  http.StatusOK,\n        &quot;error&quot;: &quot;Welcome server 01&quot;,\n      &#125;,\n    )\n  &#125;)\n\n  return e\n&#125;\n&#x2F;&#x2F; 服务器2的路由\nfunc router02() http.Handler &#123;\n  e :&#x3D; gin.New()\n  e.Use(gin.Recovery())\n  e.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    c.JSON(\n      http.StatusOK,\n      gin.H&#123;\n        &quot;code&quot;:  http.StatusOK,\n        &quot;error&quot;: &quot;Welcome server 02&quot;,\n      &#125;,\n    )\n  &#125;)\n\n  return e\n&#125;\n\nfunc main() &#123;\n  &#x2F;&#x2F; 服务器1\n  server01 :&#x3D; &amp;http.Server&#123;\n    Addr:         &quot;:8080&quot;,\n    Handler:      router01(),\n    ReadTimeout:  5 * time.Second,\n    WriteTimeout: 10 * time.Second,\n  &#125;\n  &#x2F;&#x2F; 服务器2\n  server02 :&#x3D; &amp;http.Server&#123;\n    Addr:         &quot;:8081&quot;,\n    Handler:      router02(),\n    ReadTimeout:  5 * time.Second,\n    WriteTimeout: 10 * time.Second,\n  &#125;\n  &#x2F;&#x2F; 错误监听处理， 启动并发？\n  g.Go(func() error &#123;\n    err :&#x3D; server01.ListenAndServe()\n    if err !&#x3D; nil &amp;&amp; err !&#x3D; http.ErrServerClosed &#123;\n      log.Fatal(err)\n    &#125;\n    return err\n  &#125;)\n\n  g.Go(func() error &#123;\n    err :&#x3D; server02.ListenAndServe()\n    if err !&#x3D; nil &amp;&amp; err !&#x3D; http.ErrServerClosed &#123;\n      log.Fatal(err)\n    &#125;\n    return err\n  &#125;)\n\n  if err :&#x3D; g.Wait(); err !&#x3D; nil &#123;\n    log.Fatal(err)\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"正常关机-x2F-重启-可能在部署时候会用？\"><a href=\"#正常关机-x2F-重启-可能在部署时候会用？\" class=\"headerlink\" title=\"正常关机&#x2F;重启 ? 可能在部署时候会用？\"></a>正常关机&#x2F;重启 ? 可能在部署时候会用？</h2><p>你想优雅地重启或停止 web 服务器吗？有一些方法可以做到这一点。</p>\n<p>我们可以使用 fvbock&#x2F;endless 来替换默认的 ListenAndServe。更多详细信息，请参阅 issue #296。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">router :&#x3D; gin.Default()\nrouter.GET(&quot;&#x2F;&quot;, handler)\n&#x2F;&#x2F; [...]\nendless.ListenAndServe(&quot;:4242&quot;, router)</code></pre>\n\n<p>替代方案:</p>\n<p><strong>manners</strong>：可以优雅关机的 Go Http 服务器。<br><strong>graceful</strong>：Graceful 是一个 Go 扩展包，可以优雅地关闭 http.Handler 服务器。<br><strong>grace</strong>：Go 服务器平滑重启和零停机时间部署。<br>如果你使用的是 Go 1.8，可以不需要这些库！考虑使用 http.Server 内置的 Shutdown() 方法优雅地关机. 请参阅 gin 完整的 graceful-shutdown 示例。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; +build go1.8\npackage main\n\nimport (\n\t&quot;context&quot;\n\t&quot;log&quot;\n\t&quot;net&#x2F;http&quot;\n\t&quot;os&quot;\n\t&quot;os&#x2F;signal&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\trouter :&#x3D; gin.Default()\n\trouter.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n\t\ttime.Sleep(5 * time.Second)\n\t\tc.String(http.StatusOK, &quot;Welcome Gin Server&quot;)\n\t&#125;)\n\n\tsrv :&#x3D; &amp;http.Server&#123;\n\t\tAddr:    &quot;:8080&quot;,\n\t\tHandler: router,\n\t&#125;\n\n\tgo func() &#123;\n\t\t&#x2F;&#x2F; 服务连接\n\t\tif err :&#x3D; srv.ListenAndServe(); err !&#x3D; nil &amp;&amp; err !&#x3D; http.ErrServerClosed &#123;\n\t\t\tlog.Fatalf(&quot;listen: %s\\n&quot;, err)\n\t\t&#125;\n\t&#125;()\n\n\t&#x2F;&#x2F; 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）\n\tquit :&#x3D; make(chan os.Signal)\n\tsignal.Notify(quit, os.Interrupt)\n\t&lt;-quit\n\tlog.Println(&quot;Shutdown Server ...&quot;)\n\n\tctx, cancel :&#x3D; context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err :&#x3D; srv.Shutdown(ctx); err !&#x3D; nil &#123;\n\t\tlog.Fatal(&quot;Server Shutdown:&quot;, err)\n\t&#125;\n\tlog.Println(&quot;Server exiting&quot;)\n&#125;</code></pre>\n\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h2><h3 id=\"Build-a-single-binary-with-templates\"><a href=\"#Build-a-single-binary-with-templates\" class=\"headerlink\" title=\"Build a single binary with templates\"></a>Build a single binary with templates</h3><p>You can build a server into a single binary containing templates by using go-assets.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n  r :&#x3D; gin.New()\n  &#x2F;&#x2F; 加载模版\n  t, err :&#x3D; loadTemplate()\n  if err !&#x3D; nil &#123;\n    panic(err)\n  &#125;\n  &#x2F;&#x2F; 设置模版\n  r.SetHTMLTemplate(t)\n\n  r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    &#x2F;&#x2F; 返回html\n    c.HTML(http.StatusOK, &quot;&#x2F;html&#x2F;index.tmpl&quot;,nil)\n  &#125;)\n  r.Run(&quot;:8080&quot;)\n&#125;\n\n&#x2F;&#x2F; loadTemplate加载go资产生成器嵌入的模板\nfunc loadTemplate() (*template.Template, error) &#123;\n  t :&#x3D; template.New(&quot;&quot;)\n  for name, file :&#x3D; range Assets.Files &#123;\n    defer file.Close()\n    if file.IsDir() || !strings.HasSuffix(name, &quot;.tmpl&quot;) &#123;\n      continue\n    &#125;\n    h, err :&#x3D; ioutil.ReadAll(file)\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n    t, err &#x3D; t.New(name).Parse(string(h))\n    if err !&#x3D; nil &#123;\n      return nil, err\n    &#125;\n  &#125;\n  return t, nil\n&#125;</code></pre>\n\n<p>See a complete example in the <a href=\"https://github.com/gin-gonic/examples/tree/master/assets-in-binary\">https://github.com/gin-gonic/examples/tree/master/assets-in-binary</a> directory.</p>\n<h2 id=\"数据绑定-1\"><a href=\"#数据绑定-1\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><h3 id=\"Bind-form-data-request-with-custom-struct\"><a href=\"#Bind-form-data-request-with-custom-struct\" class=\"headerlink\" title=\"Bind form-data request with custom struct\"></a>Bind form-data request with custom struct</h3><h3 id=\"Try-to-bind-body-into-different-structs\"><a href=\"#Try-to-bind-body-into-different-structs\" class=\"headerlink\" title=\"Try to bind body into different structs\"></a>Try to bind body into different structs</h3><h3 id=\"Bind-form-data-request-with-custom-struct-and-custom-tag\"><a href=\"#Bind-form-data-request-with-custom-struct-and-custom-tag\" class=\"headerlink\" title=\"Bind form-data request with custom struct and custom tag\"></a>Bind form-data request with custom struct and custom tag</h3><h2 id=\"服务端推送\"><a href=\"#服务端推送\" class=\"headerlink\" title=\"服务端推送\"></a>服务端推送</h2><h3 id=\"http2-server-push\"><a href=\"#http2-server-push\" class=\"headerlink\" title=\"http2 server push\"></a>http2 server push</h3><p>实际项目中很少用到</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">http.Pusher is supported only go1.8+. See the golang blog for detail information.\n\npackage main\n\nimport (\n  &quot;html&#x2F;template&quot;\n  &quot;log&quot;\n  &quot;net&#x2F;http&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nvar html &#x3D; template.Must(template.New(&quot;https&quot;).Parse(&#96;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Https Test&lt;&#x2F;title&gt;\n  &lt;script src&#x3D;&quot;&#x2F;assets&#x2F;app.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;h1 style&#x3D;&quot;color:red;&quot;&gt;Welcome, Ginner!&lt;&#x2F;h1&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#96;))\n\nfunc main() &#123;\n  r :&#x3D; gin.Default()\n  &#x2F;&#x2F; 静态文件目录\n  r.Static(&quot;&#x2F;assets&quot;, &quot;.&#x2F;assets&quot;)\n  &#x2F;&#x2F;设置html模版\n  r.SetHTMLTemplate(html)\n\n  r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    if pusher :&#x3D; c.Writer.Pusher(); pusher !&#x3D; nil &#123;\n      &#x2F;&#x2F; use pusher.Push() to do server push\n      if err :&#x3D; pusher.Push(&quot;&#x2F;assets&#x2F;app.js&quot;, nil); err !&#x3D; nil &#123;\n        log.Printf(&quot;Failed to push: %v&quot;, err)\n      &#125;\n    &#125;\n    c.HTML(http.StatusOK, &quot;https&quot;, gin.H&#123;\n      &quot;status&quot;: &quot;success&quot;,\n    &#125;)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and Server in https:&#x2F;&#x2F;127.0.0.1:8080\n  &#x2F;&#x2F; https 证书\n  r.RunTLS(&quot;:8080&quot;, &quot;.&#x2F;testdata&#x2F;server.pem&quot;, &quot;.&#x2F;testdata&#x2F;server.key&quot;)\n&#125;</code></pre>\n\n<h2 id=\"日志-1\"><a href=\"#日志-1\" class=\"headerlink\" title=\"日志\"></a>日志</h2><h3 id=\"Define-format-for-the-log-of-routes\"><a href=\"#Define-format-for-the-log-of-routes\" class=\"headerlink\" title=\"Define format for the log of routes\"></a>Define format for the log of routes</h3><p>The default log of routes is:</p>\n<pre class=\"line-numbers language-s\" data-language=\"s\"><code class=\"language-s\">[GIN-debug] POST &#x2F;foo --&gt; main.main.func1 (3 handlers)\n[GIN-debug] GET &#x2F;bar --&gt; main.main.func2 (3 handlers)\n[GIN-debug] GET &#x2F;status --&gt; main.main.func3 (3 handlers)</code></pre>\n\n<p>If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with gin.DebugPrintRouteFunc. In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">import (\n  &quot;log&quot;\n  &quot;net&#x2F;http&quot;\n\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n  r :&#x3D; gin.Default()\n  gin.DebugPrintRouteFunc &#x3D; func(httpMethod, absolutePath, handlerName string, nuHandlers int) &#123;\n    log.Printf(&quot;endpoint %v %v %v %v\\n&quot;, httpMethod, absolutePath, handlerName, nuHandlers)\n  &#125;\n\n  r.POST(&quot;&#x2F;foo&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, &quot;foo&quot;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;bar&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, &quot;bar&quot;)\n  &#125;)\n\n  r.GET(&quot;&#x2F;status&quot;, func(c *gin.Context) &#123;\n    c.JSON(http.StatusOK, &quot;ok&quot;)\n  &#125;)\n\n  &#x2F;&#x2F; Listen and Server in http:&#x2F;&#x2F;0.0.0.0:8080\n  r.Run()\n&#125;</code></pre>\n\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><h3 id=\"Set-and-get-a-cookie\"><a href=\"#Set-and-get-a-cookie\" class=\"headerlink\" title=\"Set and get a cookie\"></a>Set and get a cookie</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">import (\n    &quot;fmt&quot;\n\n    &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc main() &#123;\n\n    router :&#x3D; gin.Default()\n\n    router.GET(&quot;&#x2F;cookie&quot;, func(c *gin.Context) &#123;\n        &#x2F;&#x2F; 获取cookie, 没设置“gin_cookie”会报错\n        cookie, err :&#x3D; c.Cookie(&quot;gin_cookie&quot;)\n        &#x2F;&#x2F; 遇到错误设置cookie\n        if err !&#x3D; nil &#123;\n            cookie &#x3D; &quot;NotSet&quot;\n            &#x2F;&#x2F; 设置cookie\n            c.SetCookie(&quot;gin_cookie&quot;, &quot;test&quot;, 3600, &quot;&#x2F;&quot;, &quot;localhost&quot;, false, true)\n        &#125;\n\n        fmt.Printf(&quot;Cookie value: %s \\n&quot;, cookie)\n    &#125;)\n\n    router.Run()\n&#125;</code></pre>\n\n<h2 id=\"表名规则\"><a href=\"#表名规则\" class=\"headerlink\" title=\"表名规则\"></a>表名规则</h2><p>db.logMode(true)来显示日志</p>\n<ol>\n<li>表名规则，根据 struct 名称改成小写，并且加上复数形式</li>\n</ol>\n<p>例子： struct 名为：</p>\n<ol>\n<li>Test，对应表名为 tests</li>\n<li>TopicClass,表名为 topic_classes 注意复数，英文基础：ch、sh、x、s 结尾时，加 es 变成复数</li>\n</ol>\n<p>可以使用<code>db.SingularTable(true)</code>来使其不为复数</p>\n<h2 id=\"其他的\"><a href=\"#其他的\" class=\"headerlink\" title=\"其他的\"></a>其他的</h2><h3 id=\"session、redis、orm、数据库链接\"><a href=\"#session、redis、orm、数据库链接\" class=\"headerlink\" title=\"session、redis、orm、数据库链接\"></a>session、redis、orm、数据库链接</h3><h3 id=\"热重载\"><a href=\"#热重载\" class=\"headerlink\" title=\"热重载\"></a><a href=\"https://zhuanlan.zhihu.com/p/184957074\" target=\"_blank\" >热重载</a></h3><div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/cosmtrek/air\"  >https://github.com/cosmtrek/air</a> <img src=\"https://img.shields.io/github/stars/cosmtrek/air?style=social\" /></div>\n\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/oxequa/realize\">https://github.com/oxequa/realize</a><img src=\"https://img.shields.io/github/stars/oxequa/realize?style=social\" /></div>\n\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/codegangsta/gin\">https://github.com/codegangsta/gin</a><img src=\"https://img.shields.io/github/stars/codegangsta/gin?style=social\" /></div>\n\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/gravityblast/fresh\">https://github.com/gravityblast/fresh</a><img src=\"https://img.shields.io/github/stars/gravityblast/fresh?style=social\" /></div>\n\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/beego/bee\">https://github.com/beego/bee</a><img src=\"https://img.shields.io/github/stars/beego/bee?style=social\" /></div>\n\n<div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/silenceper/gowatch\">https://github.com/silenceper/gowatch</a><img src=\"https://img.shields.io/github/stars/silenceper/gowatch?style=social\" /></div>\n\n<h3 id=\"docker-部署\"><a href=\"#docker-部署\" class=\"headerlink\" title=\"docker 部署\"></a>docker 部署</h3><h2 id=\"路很长\"><a href=\"#路很长\" class=\"headerlink\" title=\"路很长\"></a>路很长</h2><div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/overnote/over-golang\">https://github.com/overnote/over-golang</a><img src=\"https://img.shields.io/github/stars/overnote/over-golang?style=social\" /></div>\n\n<img src=\"https://github.com/overnote/over-golang/raw/master/images/go/go-develep.png\" />\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" >gin-gonic&#x2F;gin</a></p>\n<p><a href=\"https://golang.google.cn/doc/tutorial/web-service-gin\" target=\"_blank\" >Tutorial: Developing a RESTful API with Go and Gin</a></p>\n<p><a href=\"https://www.kancloud.cn/shuangdeyu/gin_book/949445\" target=\"_blank\" >gin_book</a></p>\n<p><a href=\"https://shields.io/category/social\" target=\"_blank\" >GitHub Repo stars</a></p>\n<h2 id=\"博客收录\"><a href=\"#博客收录\" class=\"headerlink\" title=\"博客收录\"></a>博客收录</h2><p><a href=\"https://liwenzhou.com/\" target=\"_blank\" >https://liwenzhou.com/</a></p>\n","text":"背景 巩固 go 语言学习 听说很多大公司用 go 来开发服务器，我特来看看 了解 go web 开发 Gin选这个框架原因如下： 社区活跃 Go 官网推荐Tutorial: Developing a RESTful API with Go and Gin github 上 st...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"44 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Gin\"><span class=\"toc-text\">Gin</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E4%BA%8B%E4%BE%8B\"><span class=\"toc-text\">参考事例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web-%E6%9C%8D%E5%8A%A1%E7%BB%84%E6%88%90\"><span class=\"toc-text\">web 服务组成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vscode\"><span class=\"toc-text\">vscode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Gin-API-%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">Gin API 文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9C%8B%E4%B8%8B-Gin-Example-%E5%B8%A6%E6%9D%A5%E7%9A%84-API\"><span class=\"toc-text\">看下 Gin Example 带来的 API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">请求方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Using-GET-POST-PUT-PATCH-DELETE-and-OPTIONS\"><span class=\"toc-text\">Using GET, POST, PUT, PATCH, DELETE and OPTIONS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">获取参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Parameters-in-path\"><span class=\"toc-text\">Parameters in path</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Querystring-parameters\"><span class=\"toc-text\">Querystring parameters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Multipart-x2F-Urlencoded-Form\"><span class=\"toc-text\">Multipart&#x2F;Urlencoded Form</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#query-post-form\"><span class=\"toc-text\">query + post form</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Map-as-querystring-or-postform-parameters\"><span class=\"toc-text\">Map as querystring or postform parameters</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Single-file-upload\"><span class=\"toc-text\">Single file upload</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Multiple-files\"><span class=\"toc-text\">Multiple files</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%88%86%E7%BB%84\"><span class=\"toc-text\">路由分组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Grouping-routes\"><span class=\"toc-text\">Grouping routes</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Blank-Gin-without-middleware-by-default\"><span class=\"toc-text\">Blank Gin without middleware by default</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Using-middleware\"><span class=\"toc-text\">Using middleware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Recovery-behavior\"><span class=\"toc-text\">Custom Recovery behavior</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#How-to-write-log-file\"><span class=\"toc-text\">How to write log file</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Log-Format\"><span class=\"toc-text\">Custom Log Format</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Controlling-Log-output-coloring\"><span class=\"toc-text\">Controlling Log output coloring</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">数据校验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Model-binding-and-validation\"><span class=\"toc-text\">Model binding and validation ?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Validators\"><span class=\"toc-text\">Custom Validators</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">数据绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Only-Bind-Query-String\"><span class=\"toc-text\">Only Bind Query String</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-Query-String-or-Post-Data\"><span class=\"toc-text\">Bind Query String or Post Data ?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-Uri\"><span class=\"toc-text\">Bind Uri</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-Header\"><span class=\"toc-text\">Bind Header</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-HTML-checkboxes\"><span class=\"toc-text\">Bind HTML checkboxes</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">返回数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XML-JSON-YAML-and-ProtoBuf-rendering\"><span class=\"toc-text\">XML, JSON, YAML and ProtoBuf rendering</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON-%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">JSON 数据大小写问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON\"><span class=\"toc-text\">JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SecureJSON\"><span class=\"toc-text\">SecureJSON ??</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSONP\"><span class=\"toc-text\">JSONP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AsciiJSON\"><span class=\"toc-text\">AsciiJSON</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PureJSON\"><span class=\"toc-text\">PureJSON</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">文件资源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Serving-static-files\"><span class=\"toc-text\">Serving static files</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Serving-data-from-file\"><span class=\"toc-text\">Serving data from file</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Serving-data-from-reader\"><span class=\"toc-text\">Serving data from reader</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTML-rendering\"><span class=\"toc-text\">HTML rendering</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Template-renderer\"><span class=\"toc-text\">Custom Template renderer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Delimiters\"><span class=\"toc-text\">Custom Delimiters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Template-Funcs\"><span class=\"toc-text\">Custom Template Funcs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Multitemplate\"><span class=\"toc-text\">Multitemplate</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">重定向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redirects\"><span class=\"toc-text\">Redirects</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">自定义中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">全局中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AD%98%E5%8F%96%E5%80%BC\"><span class=\"toc-text\">跨中间件存取值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-Middleware\"><span class=\"toc-text\">Custom Middleware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Using-BasicAuth-middleware\"><span class=\"toc-text\">Using BasicAuth() middleware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Goroutines-inside-a-middleware\"><span class=\"toc-text\">Goroutines inside a middleware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Custom-HTTP-configuration\"><span class=\"toc-text\">Custom HTTP configuration</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">加密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Support-Let%E2%80%99s-Encrypt-%E6%B2%A1%E7%9C%8B%E6%87%82\"><span class=\"toc-text\">Support Let’s Encrypt 没看懂</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">多服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA-x2F-%E9%87%8D%E5%90%AF-%E5%8F%AF%E8%83%BD%E5%9C%A8%E9%83%A8%E7%BD%B2%E6%97%B6%E5%80%99%E4%BC%9A%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">正常关机&#x2F;重启 ? 可能在部署时候会用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E7%89%88\"><span class=\"toc-text\">模版</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Build-a-single-binary-with-templates\"><span class=\"toc-text\">Build a single binary with templates</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-1\"><span class=\"toc-text\">数据绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-form-data-request-with-custom-struct\"><span class=\"toc-text\">Bind form-data request with custom struct</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Try-to-bind-body-into-different-structs\"><span class=\"toc-text\">Try to bind body into different structs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bind-form-data-request-with-custom-struct-and-custom-tag\"><span class=\"toc-text\">Bind form-data request with custom struct and custom tag</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A8%E9%80%81\"><span class=\"toc-text\">服务端推送</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#http2-server-push\"><span class=\"toc-text\">http2 server push</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97-1\"><span class=\"toc-text\">日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Define-format-for-the-log-of-routes\"><span class=\"toc-text\">Define format for the log of routes</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cookie\"><span class=\"toc-text\">cookie</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Set-and-get-a-cookie\"><span class=\"toc-text\">Set and get a cookie</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">表名规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%9A%84\"><span class=\"toc-text\">其他的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#session%E3%80%81redis%E3%80%81orm%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">session、redis、orm、数据库链接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%83%AD%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">热重载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">docker 部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E5%BE%88%E9%95%BF\"><span class=\"toc-text\">路很长</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E6%94%B6%E5%BD%95\"><span class=\"toc-text\">博客收录</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go vscode","uid":"8b5c76f2c2d760e600f1319758a156a6","slug":"2022-10-15go-vscode","date":"2022-10-15T15:35:13.000Z","updated":"2022-12-22T13:36:21.810Z","comments":true,"path":"api/articles/2022-10-15go-vscode.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202212211225570.webp","text":"go 配置代理♠ &#x2F;Users&#x2F;chenhailong $ go version go version go1.19.2 darwin&#x2F;amd64 ♠ &#x2F;Users&#x2F;chenhailong $ go install golang....","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"Go 语言 特殊语法","uid":"cc6337a39cba986d99843e70d56686e5","slug":"2022-10-15go","date":"2022-10-15T01:54:03.000Z","updated":"2022-12-22T13:36:21.788Z","comments":true,"path":"api/articles/2022-10-15go.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202212211225570.webp","text":"目前所遇到最好的教程go 教程 https://studygolang.com/pkgdoc 🤔 下载安装 go官方安装包地址 ♠ &#x2F;Users&#x2F;chenhailong&#x2F;Desktop&#x2F;841660202.github.io $ go ve...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}