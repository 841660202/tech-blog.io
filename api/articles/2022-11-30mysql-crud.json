{"title":"3.系统学习 mysql CRUD","uid":"c0939ae244a4c8b0accf26e60862ce5e","slug":"2022-11-30mysql-crud","date":"2022-11-30T01:32:15.000Z","updated":"2022-12-02T14:13:36.772Z","comments":true,"path":"api/articles/2022-11-30mysql-crud.json","keywords":null,"cover":"https://img2.baidu.com/it/u=3082189317,4216979427&fm=253&fmt=auto&app=120&f=PNG?w=1000&h=500","content":"<h2 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h2><h3 id=\"INSERT-x2F-INSERT-INTO-SELECT\"><a href=\"#INSERT-x2F-INSERT-INTO-SELECT\" class=\"headerlink\" title=\"INSERT &#x2F; INSERT INTO SELECT\"></a>INSERT &#x2F; INSERT INTO SELECT</h3><ul>\n<li>单行插入</li>\n<li>多行插入</li>\n<li>默认值插入</li>\n<li>日期值插入</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 单行&#x2F;多行插入\nINSERT INTO table_name(c1,c2,...)\nVALUES(v1,v2,..);\n\n\n-- 多行插入\nINSERT INTO table_name(column_list)\nSELECT\n   select_list\nFROM\n   another_table;</code></pre>\n\n<h2 id=\"DELETE-x2F-ON-DELETE-CASCADE-x2F-DELETE-JOIN\"><a href=\"#DELETE-x2F-ON-DELETE-CASCADE-x2F-DELETE-JOIN\" class=\"headerlink\" title=\"DELETE &#x2F; ON DELETE CASCADE &#x2F; DELETE JOIN\"></a>DELETE &#x2F; ON DELETE CASCADE &#x2F; DELETE JOIN</h2><ul>\n<li>从表中删除数据外，DELETE 语句还返回已删除的行数</li>\n<li>要使用单个 DELETE 语句从多个表中删除数据，请使用 DELETE JOIN 我们将在下一个教程中介绍的语句。</li>\n<li>要删除表中的所有行而不需要知道删除了多少行，应使用 TRUNCATE TABLE 语句来获得更好的性能。</li>\n<li>对于具有外键约束的表，当从父表中删除行时，将使用 ON DELETE CASCADE 选项自动删除子表中的行。</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意：WHERE 子句是可选项。如果省略 WHERE 子句，DELETE 语句将删除表中的所有行。</p>\n</div>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM table_name\nWHERE condition;\n\n-- DELETE语句选择客户France，按信用额度从低到高对其进行排序，并删除前5个客户：\nDELETE FROM customers\nWHERE country &#x3D; &#39;France&#39;\nORDER BY creditLimit\nLIMIT 5;\n</code></pre>\n\n<h3 id=\"跨表删除\"><a href=\"#跨表删除\" class=\"headerlink\" title=\"跨表删除\"></a>跨表删除</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">\n-- ON DELETE CASCADE\n-- 关联表父表删除，子表也删除\n-- 多个相关表的单个DELETE语句，子表具有对外键的 ON DELETE CASCADE引用操作\n\n-- 使用INNER JOIN语句中的子句DELETE删除表中的行和另一个表中的匹配行\n</code></pre>\n\n<h3 id=\"关联表删除\"><a href=\"#关联表删除\" class=\"headerlink\" title=\"关联表删除\"></a>关联表删除</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DROP TABLE IF EXISTS t1, t2;\n\nCREATE TABLE t1 (\n    id INT PRIMARY KEY AUTO_INCREMENT\n);\n\nCREATE TABLE t2 (\n    id VARCHAR(20) PRIMARY KEY,\n    ref INT NOT NULL\n);\n\nINSERT INTO t1 VALUES (1),(2),(3);\n\nINSERT INTO t2(id,ref) VALUES(&#39;A&#39;,1),(&#39;B&#39;,2),(&#39;C&#39;,3);\n\n-- 删除t1表中id为1的行，并使用DELETE...INNER JOIN语句删除在t2表中ref &#x3D; 1的行\nDELETE t1,t2\n   FROM t1\n      INNER JOIN t2 ON t2.ref &#x3D; t1.id\nWHERE\n    t1.id &#x3D; 1;\n\n-- 声明返回以下消息：\n\n-- 2 row(s) affected\n\n-- 它表明已删除了两行。</code></pre>\n\n<h3 id=\"使用-LEFT-JOIN-删除-JOIN\"><a href=\"#使用-LEFT-JOIN-删除-JOIN\" class=\"headerlink\" title=\"使用 LEFT JOIN 删除 JOIN\"></a>使用 LEFT JOIN 删除 JOIN</h3><p><strong>语法</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 使用SELECT语句中的 LEFT JOIN子句来查找左表中的行，这些行在右表中有或没有匹配的行。\n-- 使用DELETE语句中的LEFT JOIN子句删除表（左表）中的行，这些行在另一个表（右表）中没有匹配的行\n\nDELETE T1\nFROM T1\n   LEFT JOIN T2 ON T1.key &#x3D; T2.key\nWHERE\n    T2.key IS NULL;</code></pre>\n\n<p><strong>例子</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 每个客户都有零个或多个订单。但是，每个订单属于一个且只有一个客户。\n\n-- 我们可以使用DELETE和 LEFT JOIN子句来清理客户主数据。以下语句删除未下订单的客户：\n\nDELETE customers\nFROM customers\n        LEFT JOIN\n    orders ON customers.customerNumber &#x3D; orders.customerNumber\nWHERE\n    orderNumber IS NULL;\n</code></pre>\n\n<p>在这个声明中：</p>\n<ul>\n<li>首先，指定从中删除数据的表。</li>\n<li>其次，使用条件指定 WHERE 子句中要删除的行。如果行符合条件，则将删除行。</li>\n<li>注意：WHERE 子句是可选项。如果省略 WHERE 子句，DELETE 语句将删除表中的所有行。</li>\n<li><code>返回删除行</code>: 除了从表中删除数据外，DELETE 语句还返回已删除的行数。</li>\n<li><code>多表删除</code>: 要使用单个 DELETE 语句从多个表中删除数据，请使用 DELETE JOIN 将在下一个教程中介绍的语句。</li>\n<li><code>提高删除性能</code>: 要删除表中的所有行而不需要知道删除了多少行，应使用 <code>TRUNCATE TABLE</code> 语句来获得更好的性能。</li>\n<li><code>约束删除</code>: 对于具有外键约束的表，当从父表中删除行时，将使用 <code>ON DELETE CASCADE</code> 选项自动删除子表中的行。</li>\n</ul>\n<p><strong>这里有个问题，</strong></p>\n<ul>\n<li><code>不自动删除子表</code>: 如果不想删除对应的子表，应该先取消关联，然后执行删除</li>\n<li><code>自动删除子表</code>: <code>ON DELETE CASCADE</code> 选项自动删除子表中的行</li>\n</ul>\n<p><a href=\"https://www.begtut.com/mysql/mysql-on-delete-cascade.html#:~:text=%E6%9F%A5%E6%89%BE%E5%8F%97MySQL%20ON%20DELETE%20CASCADE%E6%93%8D%E4%BD%9C%E5%BD%B1%E5%93%8D%E7%9A%84%E8%A1%A8%E7%9A%84%E6%8F%90%E7%A4%BA\" target=\"_blank\" >查找受 MySQL ON DELETE CASCADE 操作影响的表的提示, 没懂(TODO:)</a></p>\n<h2 id=\"UPDATE-x2F-UPDATE-JOIN\"><a href=\"#UPDATE-x2F-UPDATE-JOIN\" class=\"headerlink\" title=\"UPDATE &#x2F; UPDATE JOIN\"></a>UPDATE &#x2F; UPDATE JOIN</h2><h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><p><a href=\"https://www.begtut.com/mysql/mysql-update-join.html\" target=\"_blank\" >感觉不是很懂(TODO:)</a></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 用UPDATE语句更新表中的现有数据\nUPDATE [LOW_PRIORITY] [IGNORE] table_name\nSET\n    column_name1 &#x3D; expr1,\n    column_name2 &#x3D; expr2,\n    ...\n[WHERE\n    condition];\n\n</code></pre>\n\n<p>UPDATE 声明：</p>\n<ul>\n<li>首先，指定要在 UPDATE 关键字后更新数据的表名。</li>\n<li>其次，SET 子句指定要修改的列和新值。要更新多个列，请使用逗号分隔的分配列表。可以以文字值，表达式或子查询的形式在每列的赋值中提供值。</li>\n<li>第三，使用 WHERE 子句中的条件指定要更新的行。WHERE 子句是可选项。<span style=\"color: red\">如果省略 WHERE 子句，UPDATE 语句将更新表中的所有行</span>。</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>注意： WHERE 子句非常重要，可能只想改变一行; <span style=\"color: red\">但是，可能会忘记 WHERE 子句并意外更新表的所有行</span>。\n</div>\n<p>MySQL 在 UPDATE 语句中支持两个修饰符。</p>\n<ul>\n<li><code>LOW_PRIORITY</code> 修正指示 <code>UPDATE</code> 延迟更新，<code>直到没有连接从表中读取数据的语句</code>。</li>\n<li><code>LOW_PRIORITY</code> 只对表级锁的存储引擎使用生效，例如，MyISAM 数据，MERGE，MEMORY。</li>\n<li><code>IGNORE</code> 修改使 UPDATE 语句继续更新，即使发生错误的行。导致错误（例如重复键冲突）的行不会更新。</li>\n</ul>\n<h3 id=\"使用查询结果作为更新后的值-找现成的用\"><a href=\"#使用查询结果作为更新后的值-找现成的用\" class=\"headerlink\" title=\"使用查询结果作为更新后的值(找现成的用)\"></a>使用查询结果作为更新后的值(找现成的用)</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE customers\nSET\n    salesRepEmployeeNumber &#x3D; (SELECT\n            employeeNumber\n        FROM\n            employees\n        WHERE\n            jobtitle &#x3D; &#39;Sales Rep&#39;\n        LIMIT 1)\nWHERE\n    salesRepEmployeeNumber IS NULL;</code></pre>\n\n<h3 id=\"UPDATE-JOIN\"><a href=\"#UPDATE-JOIN\" class=\"headerlink\" title=\"UPDATE JOIN\"></a>UPDATE JOIN</h3><p>跨表更新</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">UPDATE T1, T2,\n[INNER JOIN | LEFT JOIN] T1 ON T1.C1 &#x3D; T2. C1\nSET T1.C2 &#x3D; T2.C2,\n    T2.C3 &#x3D; expr\nWHERE condition\n\n\n\n-- 这个与下面那个等效（骚操作？）\nUPDATE T1, T2\nSET T1.c2 &#x3D; T2.c2,\n      T2.c3 &#x3D; expr\nWHERE T1.c1 &#x3D; T2.c1 AND condition\n-- 此UPDATE  语句UPDATE JOIN  与隐式INNER JOIN  子句的作用相同\n\n\nUPDATE T1,T2\nINNER JOIN T2 ON T1.C1 &#x3D; T2.C1 --这句\nSET T1.C2 &#x3D; T2.C2,\n      T2.C3 &#x3D; expr\nWHERE condition\n-- 让我们看一下使用UPDATE JOIN  语句进行更好理解的一些示例\n\n\n-- INNER JOIN\nUPDATE employees\n        INNER JOIN\n       merits\n        ON employees.performance &#x3D; merits.performance\nSET\n    salary &#x3D; salary + salary * percentage;\n\n-- LEFT JOIN\nUPDATE\n  employees\n  LEFT JOIN merits ON employees.performance &#x3D; merits.performance\nSET\n  salary &#x3D; salary + salary * 0.015\nWHERE\n  merits.percentage IS NULL;\n</code></pre>\n\n<h2 id=\"REPLACE\"><a href=\"#REPLACE\" class=\"headerlink\" title=\"REPLACE\"></a>REPLACE</h2><p>MySQL REPLACE 语句是标准 SQL 的 MySQL 扩展。MySQL REPLACE 语句的工作原理如下：</p>\n<ul>\n<li>如果<code>新行已不存在</code>，则 MySQL REPLACE 语句<code>将插入新行</code>。</li>\n<li>如果<code>新行已存在</code>，则 REPLACE 语句首<code>先删除旧行，然后插入新行</code>。在某些情况下，REPLACE 语句仅更新现有行。</li>\n<li>要确定表中是否已存在新行，MySQL <code>使用 PRIMARY KEY 或 UNIQUE KEY 索引。如果表没有这些索引之一，则 REPLACE 语句等同于 INSERT 语句</code>。</li>\n</ul>\n<p>使用 MySQL REPLACE 的语句，<em>你需要有至少两个 INSERT 和 DELETE 权限。</em></p>\n<p>注意：有一个 REPLACE 字符串函数 ，它不是 REPLACE 本教程中介绍的语句。</p>\n<ul>\n<li><em>和插入语法类似， 除了关键字 INSERT 被关键字替换 REPLACE</em></li>\n<li>未出现在 REPLACE 语句中的列的默认值将插入到相应的列中。如果列具有 NOT NULL 属性且没有默认值，并且未在 REPLACE 语句中指定值，则 MySQL 将引发错误</li>\n</ul>\n<h3 id=\"类似于-INSERT\"><a href=\"#类似于-INSERT\" class=\"headerlink\" title=\"类似于 INSERT\"></a>类似于 INSERT</h3><p>REPLACE 语句的第一种形式类似于 INSERT 语句，除了关键字 <code>INSERT 被关键字替换 REPLACE</code> 如下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">REPLACE INTO table_name(column_list)\nVALUES(value_list);</code></pre>\n\n<p>例如，如果要在 cities 表中插入新行，请使用以下查询：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">REPLACE INTO cities(name,population)\nVALUES(&#39;Phoenix&#39;,1321523);\n</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p><p>注意：</p>\n<p>REPLACE 和 INSERT 语句之间的区别。</p>\n<ol>\n<li>未出现在 REPLACE 语句中的列的默认值将插入到相应的列中。</li>\n<li>如果列具有 NOT NULL 属性且没有默认值，并且未在 REPLACE 语句中指定值，则 MySQL 将引发错误。</li>\n</ol>\n</p>\n</div>\n<p>例如，在以下语句中，我们仅指定 name 列的值，而不是 population 列。MySQL 引发错误消息。因为 population 列不接受 NULL 值，所以我们在定义 cities 表时没有为它指定默认值。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">REPLACE INTO cities(name)\nVALUES(&#39;Houston&#39;);</code></pre>\n\n<p>这是 MySQL 发出的错误消息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Error Code: 1364. Field &#39;population&#39; doesn&#39;t have a default value</code></pre>\n\n<h3 id=\"UPDATE-1\"><a href=\"#UPDATE-1\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 例如，如果要更新Phoenix城市的人口1768980，请使用以下REPLACE语句：\n\nREPLACE INTO cities\nSET id &#x3D; 4,\n    name &#x3D; &#39;Phoenix&#39;, -- 如果注释这里也会出现null\n    population &#x3D; 1768980;\n\n-- 与UPDATE语句不同，如果未在SET子句中指定列的值，则REPLACE语句将使用列的默认值。\n\n\n\nmysql&gt; select * from cities;\n+----+-----------+------------+\n| id | name      | population |\n+----+-----------+------------+\n|  1 | New York  |    1008256 |\n|  2 | hello     |        120 |\n|  3 | San Diego |    1223405 |\n|  4 | Phoenix   |    1321523 |\n|  5 | New York  |    1008256 |\n+----+-----------+------------+\n5 rows in set (0.00 sec)\n\nmysql&gt; REPLACE INTO cities SET id &#x3D; 4,      population &#x3D; 1768980; ;\nQuery OK, 2 rows affected (0.02 sec)\n\nERROR:\nNo query specified\n\nmysql&gt; select * from cities;\n+----+-----------+------------+\n| id | name      | population |\n+----+-----------+------------+\n|  1 | New York  |    1008256 |\n|  2 | hello     |        120 |\n|  3 | San Diego |    1223405 |\n|  4 | NULL      |    1768980 |\n|  5 | New York  |    1008256 |\n+----+-----------+------------+\n5 rows in set (0.00 sec)</code></pre>\n\n<h3 id=\"REPLACE-INTO-和-SELECT\"><a href=\"#REPLACE-INTO-和-SELECT\" class=\"headerlink\" title=\"REPLACE INTO 和 SELECT\"></a>REPLACE INTO 和 SELECT</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">REPLACE INTO table_1(column_list)\nSELECT column_list\nFROM table_2\nWHERE where_condition;\n\n\n-- 假设要复制id值为1的城市，请将REPLACE INTO SELECT语句用作以下查询：\n\nREPLACE INTO cities(name,population)\nSELECT name,population FROM cities\nWHERE id &#x3D; 1;</code></pre>\n","text":"增INSERT &#x2F; INSERT INTO SELECT 单行插入 多行插入 默认值插入 日期值插入 -- 单行&#x2F;多行插入 INSERT INTO table_name(c1,c2,...) VALUES(v1,v2,..); -- 多行插入 INSERT I...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/tags/Mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A2%9E\"><span class=\"toc-text\">增</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#INSERT-x2F-INSERT-INTO-SELECT\"><span class=\"toc-text\">INSERT &#x2F; INSERT INTO SELECT</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DELETE-x2F-ON-DELETE-CASCADE-x2F-DELETE-JOIN\"><span class=\"toc-text\">DELETE &#x2F; ON DELETE CASCADE &#x2F; DELETE JOIN</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E8%A1%A8%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">跨表删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E8%A1%A8%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">关联表删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-LEFT-JOIN-%E5%88%A0%E9%99%A4-JOIN\"><span class=\"toc-text\">使用 LEFT JOIN 删除 JOIN</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UPDATE-x2F-UPDATE-JOIN\"><span class=\"toc-text\">UPDATE &#x2F; UPDATE JOIN</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UPDATE\"><span class=\"toc-text\">UPDATE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E4%BD%9C%E4%B8%BA%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E5%80%BC-%E6%89%BE%E7%8E%B0%E6%88%90%E7%9A%84%E7%94%A8\"><span class=\"toc-text\">使用查询结果作为更新后的值(找现成的用)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UPDATE-JOIN\"><span class=\"toc-text\">UPDATE JOIN</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#REPLACE\"><span class=\"toc-text\">REPLACE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%BC%BC%E4%BA%8E-INSERT\"><span class=\"toc-text\">类似于 INSERT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UPDATE-1\"><span class=\"toc-text\">UPDATE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#REPLACE-INTO-%E5%92%8C-SELECT\"><span class=\"toc-text\">REPLACE INTO 和 SELECT</span></a></li></ol></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"4.系统学习 mysql 事务","uid":"968e01e6b4020ddd66a1e79ae770349d","slug":"2022-11-30mysql-事务","date":"2022-11-30T06:04:20.000Z","updated":"2022-11-30T13:39:08.839Z","comments":true,"path":"api/articles/2022-11-30mysql-事务.json","keywords":null,"cover":"https://img2.baidu.com/it/u=3082189317,4216979427&fm=253&fmt=auto&app=120&f=PNG?w=1000&h=500","text":"事务为什么需要事务MySQL 事务允许您执行一组 MySQL 操作，以确保数据库永远不会包含部分操作的结果。 在一组操作中，如果其中一个操作失败，则会发生回滚以将数据库还原到其原始状态。 如果没有发生错误，则将整个语句集提交给数据库。 事务特点事务是必须满足 4 个条件(ACID...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/tags/Mysql.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"2.系统学习 mysql 约束","uid":"6a629baafba13a0aeb236b74ca7f009f","slug":"2022-11-26mysql-约束","date":"2022-11-26T03:02:20.000Z","updated":"2022-12-02T14:12:51.574Z","comments":true,"path":"api/articles/2022-11-26mysql-约束.json","keywords":null,"cover":"https://img2.baidu.com/it/u=3082189317,4216979427&fm=253&fmt=auto&app=120&f=PNG?w=1000&h=500","text":"约束非空 not nullNOT NULL 约束是列约束，迫使一列的值非 NULL 值。 NOT NULL 约束的语法如下： column_name data_type NOT NULL DEFAULT value; -- 列 NOT NULL 只包含一个约束，它指定列不得包含任...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":12,"path":"api/tags/Mysql.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}