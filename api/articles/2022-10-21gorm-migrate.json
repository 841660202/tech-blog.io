{"title":"gorm migrate 注意点","uid":"1269a76e445b052b3fd7442cae906b92","slug":"2022-10-21gorm-migrate","date":"2022-10-21T02:04:16.000Z","updated":"2022-10-21T12:45:30.510Z","comments":true,"path":"api/articles/2022-10-21gorm-migrate.json","keywords":null,"cover":null,"content":"<h2 id=\"等效语句\"><a href=\"#等效语句\" class=\"headerlink\" title=\"等效语句\"></a>等效语句</h2><p>添加、删除会报错</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; ...\n\ntype User struct &#123;\n\tgorm.Model\n\tName string &#96;gorm:&quot;size:255;index:idx_name,unique&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; ....\n\n&#x2F;&#x2F; 方式1\ndb.Debug().AutoMigrate(&amp;User&#123;&#125;)\n\n&#x2F;&#x2F; 方式2\ndb.Migrator().CreateIndex(&amp;User&#123;&#125;, &quot;Name&quot;) &#x2F;&#x2F; 重复操作\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;21 09:52:36 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;migrator.go:18 Error 1061: Duplicate key name &#39;idx_name&#39;\n&#x2F;&#x2F; [2.300ms] [rows:0] CREATE UNIQUE INDEX &#96;idx_name&#96; ON &#96;users&#96;(&#96;name&#96;)\n\n&#x2F;&#x2F; 方式3\ndb.Migrator().CreateIndex(&amp;User&#123;&#125;, &quot;idx_name&quot;) &#x2F;&#x2F; 重复操作\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;21 09:52:59 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;migrator.go:19 Error 1061: Duplicate key name &#39;idx_name&#39;\n&#x2F;&#x2F; [1.194ms] [rows:0] CREATE UNIQUE INDEX &#96;idx_name&#96; ON &#96;users&#96;(&#96;name&#96;)\n\n</code></pre>\n\n<h2 id=\"AutoMigrate\"><a href=\"#AutoMigrate\" class=\"headerlink\" title=\"AutoMigrate\"></a>AutoMigrate</h2><p>AutoMigrate 用于自动迁移您的 schema，保持您的 schema 是最新的。</p>\n<p>注意： AutoMigrate 会创建表、缺失的外键、约束、列和索引。 如果大小、精度、是否为空可以更改，则 AutoMigrate 会改变列的类型。 出于保护您数据的目的，它 不会 删除未使用的列</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.AutoMigrate(&amp;User&#123;&#125;)\n\ndb.AutoMigrate(&amp;User&#123;&#125;, &amp;Product&#123;&#125;, &amp;Order&#123;&#125;)\n\n&#x2F;&#x2F; 创建表时添加后缀, 注意：文档上没说，操作mysql时候，即使你不添加 ENGINE&#x3D;InnoDB ,默认自动添加\ndb.Set(&quot;gorm:table_options&quot;, &quot;ENGINE&#x3D;InnoDB&quot;).AutoMigrate(&amp;User&#123;&#125;)\n\n&#x2F;&#x2F; 注意 AutoMigrate 会自动创建数据库外键约束，您可以在初始化时禁用此功能，例如：\ndb, err :&#x3D; gorm.Open(sqlite.Open(&quot;gorm.db&quot;), &amp;gorm.Config&#123;\n  DisableForeignKeyConstraintWhenMigrating: true,\n&#125;)\n</code></pre>\n\n<h2 id=\"Migrator-接口\"><a href=\"#Migrator-接口\" class=\"headerlink\" title=\"Migrator 接口\"></a>Migrator 接口</h2><p>GORM 提供了 Migrator 接口，该接口为每个数据库提供了统一的 API 接口，可用来为您的数据库构建独立迁移，例如：</p>\n<p>SQLite 不支持 ALTER COLUMN、DROP COLUMN，当你试图修改表结构，GORM 将创建一个新表、复制所有数据、删除旧表、重命名新表。</p>\n<p>一些版本的 MySQL 不支持 rename 列，索引。GORM 将基于您使用 MySQL 的版本执行不同 SQL</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Migrator interface &#123;\n  &#x2F;&#x2F; AutoMigrate 自动迁移\n  AutoMigrate(dst ...interface&#123;&#125;) error\n\n  &#x2F;&#x2F; Database 数据哭\n  CurrentDatabase() string\n  FullDataTypeOf(\\*schema.Field) clause.Expr\n\n  &#x2F;&#x2F; Tables 表\n  CreateTable(dst ...interface&#123;&#125;) error\n  DropTable(dst ...interface&#123;&#125;) error\n  HasTable(dst interface&#123;&#125;) bool\n  RenameTable(oldName, newName interface&#123;&#125;) error\n  GetTables() (tableList []string, err error)\n\n  &#x2F;&#x2F; Columns 列\n  AddColumn(dst interface&#123;&#125;, field string) error\n  DropColumn(dst interface&#123;&#125;, field string) error\n  AlterColumn(dst interface&#123;&#125;, field string) error\n  MigrateColumn(dst interface&#123;&#125;, field \\*schema.Field, columnType ColumnType) error\n  HasColumn(dst interface&#123;&#125;, field string) bool\n  RenameColumn(dst interface&#123;&#125;, oldName, field string) error\n  ColumnTypes(dst interface&#123;&#125;) ([]ColumnType, error)\n\n  &#x2F;&#x2F; Constraints 外键约束\n  CreateConstraint(dst interface&#123;&#125;, name string) error\n  DropConstraint(dst interface&#123;&#125;, name string) error\n  HasConstraint(dst interface&#123;&#125;, name string) bool\n\n  &#x2F;&#x2F; Indexes 索引\n  CreateIndex(dst interface&#123;&#125;, name string) error\n  DropIndex(dst interface&#123;&#125;, name string) error\n  HasIndex(dst interface&#123;&#125;, name string) bool\n  RenameIndex(dst interface&#123;&#125;, oldName, newName string) error\n&#125;</code></pre>\n\n<h2 id=\"当前数据库\"><a href=\"#当前数据库\" class=\"headerlink\" title=\"当前数据库\"></a>当前数据库</h2><p>返回当前使用的数据库名</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Migrator().CurrentDatabase()</code></pre>\n\n<h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 为 &#96;User&#96; 创建表\ndb.Migrator().CreateTable(&amp;User&#123;&#125;)\n\n&#x2F;&#x2F; 将 &quot;ENGINE&#x3D;InnoDB&quot; 添加到创建 &#96;User&#96; 的 SQL 里去\ndb.Set(&quot;gorm:table_options&quot;, &quot;ENGINE&#x3D;InnoDB&quot;).Migrator().CreateTable(&amp;User&#123;&#125;)\n\n&#x2F;&#x2F; 检查 &#96;User&#96; 对应的表是否存在\ndb.Migrator().HasTable(&amp;User&#123;&#125;)\ndb.Migrator().HasTable(&quot;users&quot;)\n\n&#x2F;&#x2F; 如果存在表则删除（删除时会忽略、删除外键约束)\n&#x2F;&#x2F; 下面两个等效，同时操作报错\ndb.Migrator().DropTable(&amp;User&#123;&#125;)\ndb.Migrator().DropTable(&quot;users&quot;)\n\n&#x2F;&#x2F; 重命名表\ndb.Migrator().RenameTable(&amp;User&#123;&#125;, &amp;UserInfo&#123;&#125;)\ndb.Migrator().RenameTable(&quot;users&quot;, &quot;user_infos&quot;)</code></pre>\n\n<h2 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type User struct &#123;\n  Name string\n&#125;\n\n&#x2F;&#x2F; 添加 name 字段\ndb.Migrator().AddColumn(&amp;User&#123;&#125;, &quot;Name&quot;)\n&#x2F;&#x2F; 删除 name 字段\ndb.Migrator().DropColumn(&amp;User&#123;&#125;, &quot;Name&quot;)\n&#x2F;&#x2F; 修改 name 字段\ndb.Migrator().AlterColumn(&amp;User&#123;&#125;, &quot;Name&quot;)\n&#x2F;&#x2F; 检查 name 字段是否存在\ndb.Migrator().HasColumn(&amp;User&#123;&#125;, &quot;Name&quot;)\n\ntype User struct &#123;\n  Name    string\n  NewName string\n&#125;\n\n&#x2F;&#x2F; 字段重命名  注意： 下面两个等效，同时使用报错\ndb.Migrator().RenameColumn(&amp;User&#123;&#125;, &quot;Name&quot;, &quot;NewName&quot;)\ndb.Migrator().RenameColumn(&amp;User&#123;&#125;, &quot;name&quot;, &quot;new_name&quot;)\n\n&#x2F;&#x2F; 字段类型\ndb.Migrator().ColumnTypes(&amp;User&#123;&#125;) ([]gorm.ColumnType, error)\n\ntype ColumnType interface &#123;\n    Name() string\n    DatabaseTypeName() string                 &#x2F;&#x2F; varchar\n    ColumnType() (columnType string, ok bool) &#x2F;&#x2F; varchar(64)\n    PrimaryKey() (isPrimaryKey bool, ok bool)\n    AutoIncrement() (isAutoIncrement bool, ok bool)\n    Length() (length int64, ok bool)\n    DecimalSize() (precision int64, scale int64, ok bool)\n    Nullable() (nullable bool, ok bool)\n    Unique() (unique bool, ok bool)\n    ScanType() reflect.Type\n    Comment() (value string, ok bool)\n    DefaultValue() (value string, ok bool)\n&#125;</code></pre>\n\n<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n&#x2F;&#x2F;  表自带约束，之后重复创建约束报错\ntype UserIndex struct &#123;\n  Name  string &#96;gorm:&quot;check:name_checker,name &lt;&gt; &#39;jinzhu&#39;&quot;&#96;\n&#125;\n&#x2F;&#x2F; 创建约束\ndb.Migrator().CreateConstraint(&amp;User&#123;&#125;, &quot;name_checker&quot;)\n\n&#x2F;&#x2F; 删除约束\ndb.Migrator().DropConstraint(&amp;User&#123;&#125;, &quot;name_checker&quot;)\n\n&#x2F;&#x2F; 检查约束是否存在\ndb.Migrator().HasConstraint(&amp;User&#123;&#125;, &quot;name_checker&quot;)\n\n&#x2F;&#x2F; 为 relation 创建外键\ntype User struct &#123;\n  gorm.Model\n  CreditCards []CreditCard\n&#125;\n\ntype CreditCard struct &#123;\n  gorm.Model\n  Number string\n  UserID uint\n&#125;\n\n&#x2F;&#x2F; 为 user &amp; credit_cards 创建 db 外键\n&#x2F;&#x2F; 以下两行代码等效，同时使用，报错\ndb.Migrator().CreateConstraint(&amp;User&#123;&#125;, &quot;CreditCards&quot;)\ndb.Migrator().CreateConstraint(&amp;User&#123;&#125;, &quot;fk_users_credit_cards&quot;)\n&#x2F;&#x2F; ALTER TABLE &#96;credit_cards&#96; ADD CONSTRAINT &#96;fk_users_credit_cards&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;users&#96;(&#96;id&#96;)\n\n&#x2F;&#x2F; 检查 user &amp; credit_cards 的外键是否存在\n&#x2F;&#x2F; 以下两行代码等效，\ndb.Migrator().HasConstraint(&amp;User&#123;&#125;, &quot;CreditCards&quot;)\ndb.Migrator().HasConstraint(&amp;User&#123;&#125;, &quot;fk_users_credit_cards&quot;)\n\n&#x2F;&#x2F; 删除 user &amp; credit_cards 的 db 外键\n&#x2F;&#x2F; 以下两行代码等效，同时使用，报错\ndb.Migrator().DropConstraint(&amp;User&#123;&#125;, &quot;CreditCards&quot;)\ndb.Migrator().DropConstraint(&amp;User&#123;&#125;, &quot;fk_users_credit_cards&quot;)</code></pre>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type User struct &#123;\n  gorm.Model\n  Name string &#96;gorm:&quot;size:255;index:idx_name,unique&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; 为 Name 字段创建索引\n&#x2F;&#x2F; 以下两行代码等效，同时使用，报错\ndb.Migrator().CreateIndex(&amp;User&#123;&#125;, &quot;Name&quot;)\ndb.Migrator().CreateIndex(&amp;User&#123;&#125;, &quot;idx_name&quot;)\n\n&#x2F;&#x2F; 为 Name 字段删除索引\n&#x2F;&#x2F; 以下两行代码等效，同时使用，报错\ndb.Migrator().DropIndex(&amp;User&#123;&#125;, &quot;Name&quot;)\ndb.Migrator().DropIndex(&amp;User&#123;&#125;, &quot;idx_name&quot;)\n\n&#x2F;&#x2F; 检查索引是否存在\ndb.Migrator().HasIndex(&amp;User&#123;&#125;, &quot;Name&quot;)\ndb.Migrator().HasIndex(&amp;User&#123;&#125;, &quot;idx_name&quot;)\n\ntype User struct &#123;\n  gorm.Model\n  Name  string &#96;gorm:&quot;size:255;index:idx_name,unique&quot;&#96;\n  Name2 string &#96;gorm:&quot;size:255;index:idx_name_2,unique&quot;&#96;\n&#125;\n&#x2F;&#x2F; 修改索引名\n&#x2F;&#x2F; 以下两行代码等效\ndb.Migrator().RenameIndex(&amp;User&#123;&#125;, &quot;Name&quot;, &quot;Name2&quot;)\ndb.Migrator().RenameIndex(&amp;User&#123;&#125;, &quot;idx_name&quot;, &quot;idx_name_2&quot;)</code></pre>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>具有相同意义的语句，在<code>创建/删除</code>时候会报错<code>重复/不存在</code></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://gorm.io/zh_CN/docs/migration.html\" target=\"_blank\" >gorm migration</a></p>\n<p><a href=\"https://learnku.com/docs/gorm/v2/migration/9746\" target=\"_blank\" >gorm 数据库迁移</a></p>\n","text":"等效语句添加、删除会报错 &#x2F;&#x2F; ... type User struct &#123; gorm.Model Name string &#96;gorm:&quot;size:255;index:idx_name,unique&quot;&#96; &#125...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"Go","slug":"Go","count":9,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":9,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%89%E6%95%88%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">等效语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AutoMigrate\"><span class=\"toc-text\">AutoMigrate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Migrator-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Migrator 接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">当前数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%97\"><span class=\"toc-text\">列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">约束</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-js class","uid":"96631ce884e53e339dba9cb51900376e","slug":"2022-10-21js-class","date":"2022-10-21T05:40:31.000Z","updated":"2022-11-26T07:05:03.116Z","comments":true,"path":"api/articles/2022-10-21js-class.json","keywords":null,"cover":null,"text":"类什么是类， 有什么作用类是: 用于创建对象的模板。用代码封装数据以处理该数据。 JS 中的类建立在原型上，但与 ES5 类的语法和语义不同 类是“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。 与函数区别class 关键字声明一...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":39,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":41,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"gorm 关联","uid":"1e93951633e1850ed62331ad3c63ff79","slug":"2022-10-20gorm关联","date":"2022-10-20T08:46:50.000Z","updated":"2022-12-06T13:57:52.202Z","comments":true,"path":"api/articles/2022-10-20gorm关联.json","keywords":null,"cover":[],"text":"打开认知belong to 属于 has one 拥有 belong to vs has one B belong to A : B 结构体和 B 的 ID 都 A 在结构体中 A has one B: A 的 id 在 B 结构体中，B 的结构体在 A 结构体中 Has man...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"Go","slug":"Go","count":9,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":9,"path":"api/tags/Go.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}