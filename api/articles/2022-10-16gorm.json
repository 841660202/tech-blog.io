{"title":"gorm","uid":"9e2838a04929d964c7bc52054867739d","slug":"2022-10-16gorm","date":"2022-10-16T10:34:17.000Z","updated":"2022-12-22T13:36:21.789Z","comments":true,"path":"api/articles/2022-10-16gorm.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202212211225570.webp","content":"<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><div style=\"display: flex;align-items: center;padding-top:4px;padding-bottom: 4px\"><a target=\"_blank\" href=\"https://github.com/go-gorm/gorm\">https://github.com/go-gorm/gorm</a><img src=\"https://img.shields.io/github/stars/go-gorm/gorm?style=social\" /></div>\n\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><img src=\"http://t-blog-images.aijs.top/img/202210161834906.png\" style=\"width: 500px;max-width:100%\" />\n\n<h2 id=\"orm-解决的问题\"><a href=\"#orm-解决的问题\" class=\"headerlink\" title=\"orm 解决的问题\"></a>orm 解决的问题</h2><p><strong>专注于语言，弱化 sql</strong></p>\n<img src=\"http://t-blog-images.aijs.top/img/202210161839151.png\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202210161839663.png\" />\n\n<h2 id=\"gorm-内部如何实现\"><a href=\"#gorm-内部如何实现\" class=\"headerlink\" title=\"gorm 内部如何实现\"></a>gorm 内部如何实现</h2><p>GORM 内部使用 SQL builder 生成 SQL。</p>\n<p>对于每个操作，GORM 都会创建一个 <code>*gorm.Statement</code> 对象，所有的 GORM API 都是在为 <code>statement</code> 添加、修改 子句，最后，GORM 会根据这些子句生成 SQL</p>\n<h3 id=\"自定义操作\"><a href=\"#自定义操作\" class=\"headerlink\" title=\"自定义操作\"></a>自定义操作</h3><h4 id=\"表名自定义\"><a href=\"#表名自定义\" class=\"headerlink\" title=\"表名自定义\"></a>表名自定义</h4><h4 id=\"外键自定义\"><a href=\"#外键自定义\" class=\"headerlink\" title=\"外键自定义\"></a>外键自定义</h4><h2 id=\"gorm-关系\"><a href=\"#gorm-关系\" class=\"headerlink\" title=\"gorm 关系\"></a>gorm 关系</h2><img src=\"http://t-blog-images.aijs.top/img/202210161838476.png\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202210161838476.png\" />\n\n<h2 id=\"gorm-First、Take、Last-区别\"><a href=\"#gorm-First、Take、Last-区别\" class=\"headerlink\" title=\"gorm First、Take、Last 区别\"></a>gorm First、Take、Last 区别</h2><ul>\n<li><code>First</code> 获取第一条记录 <strong>（主键升序）</strong></li>\n<li><code>Take</code> 获取一条记录，<strong>没有指定排序字段</strong></li>\n<li><code>Last</code> 获取最后一条记录 <strong>（主键降序）</strong></li>\n</ul>\n<p><strong>First 和 Last 的使用有条件限制</strong></p>\n<p>只有在目标 struct 是指针或者通过 db.Model() 指定 model 时，该方法才有效</p>\n<p>如果相关 model 没有定义主键，那么将按 model 的第一个字段进行排序</p>\n<h2 id=\"gorm-Find-与-Scan-的区别\"><a href=\"#gorm-Find-与-Scan-的区别\" class=\"headerlink\" title=\"gorm Find 与 Scan 的区别\"></a>gorm Find 与 Scan 的区别</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 超过一列的查询，应该使用 &#96;Scan&#96; 或者 &#96;Find&#96;，例如：\ndb.Select(&quot;name&quot;, &quot;age&quot;).Scan(&amp;users)\ndb.Select(&quot;name&quot;, &quot;age&quot;).Find(&amp;users)</code></pre>\n\n<h2 id=\"gorm-Struct-与-Map-的区别\"><a href=\"#gorm-Struct-与-Map-的区别\" class=\"headerlink\" title=\"gorm Struct 与 Map 的区别\"></a>gorm Struct 与 Map 的区别</h2><h3 id=\"相同点：\"><a href=\"#相同点：\" class=\"headerlink\" title=\"相同点：\"></a>相同点：</h3><ul>\n<li>都可做查询条件</li>\n</ul>\n<h3 id=\"不同点：\"><a href=\"#不同点：\" class=\"headerlink\" title=\"不同点：\"></a>不同点：</h3><ul>\n<li>是否含有零值： struct 不包含零值查询条件 <code>&amp;User&#123;键值对&#125;</code>，map 包含零值查询条件 <code>map[string]interface&#123;&#125;&#123;键值对&#125;</code></li>\n<li>指定查询 通过向 Where() 传入 struct 来指定查询条件的字段、值、表名（这个地方要注意拼接后的 sql 是否正常执行）</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Where(&amp;User&#123;Name: &quot;jinzhu&quot;&#125;, &quot;name&quot;, &quot;Age&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name &#x3D; &quot;jinzhu&quot; AND age &#x3D; 0;\n\ndb.Where(&amp;User&#123;Name: &quot;jinzhu&quot;&#125;, &quot;Age&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE age &#x3D; 0;</code></pre>\n\n<h2 id=\"gorm-哪些类型语句可以作查询\"><a href=\"#gorm-哪些类型语句可以作查询\" class=\"headerlink\" title=\"gorm 哪些类型语句可以作查询\"></a>gorm 哪些类型语句可以作查询</h2><ul>\n<li>主键</li>\n<li>sql 语句</li>\n<li>struct 结构体</li>\n<li>map</li>\n</ul>\n<h2 id=\"gorm-哪些不会触发查询\"><a href=\"#gorm-哪些不会触发查询\" class=\"headerlink\" title=\"gorm 哪些不会触发查询\"></a>gorm 哪些不会触发查询</h2><ul>\n<li>where 条件</li>\n<li>not 条件</li>\n<li>or 条件</li>\n<li>select 选择</li>\n<li>order 排序</li>\n<li>limit &amp; offset (这里要注意 mysql 不支持 offset 单独使用)</li>\n</ul>\n<h2 id=\"gorm-哪些会触发查询\"><a href=\"#gorm-哪些会触发查询\" class=\"headerlink\" title=\"gorm 哪些会触发查询\"></a>gorm 哪些会触发查询</h2><ul>\n<li>First 主键排序第一个</li>\n<li>Last 主键排序最后一个</li>\n<li>Take 无主键排序第一个</li>\n<li>Find</li>\n<li>Scan</li>\n<li>Pluck 只返回单列</li>\n<li>Count</li>\n<li>批查询，一次查询多少个，允许多次查询</li>\n<li>FirstOrInit 不更新数据库</li>\n<li>FirstOrCreate 查不到更新数据库</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nvar user User\n\tdb.Debug().FirstOrInit(&amp;user, User&#123;Name: &quot;non_existing&quot;&#125;)\n\tdb.Debug().FirstOrCreate(&amp;user, User&#123;Name: &quot;non_create&quot;&#125;)\n\n\t&#x2F;&#x2F; 第一次查询\n\t&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:29:38 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:431\n\t&#x2F;&#x2F; [7.830ms] [rows:0] SELECT * FROM &#96;users&#96; WHERE &#96;users&#96;.&#96;name&#96; &#x3D; &#39;non_existing&#39; ORDER BY &#96;users&#96;.&#96;id&#96; LIMIT 1\n\n\t&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:29:38 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:432\n\t&#x2F;&#x2F; [2.192ms] [rows:0] SELECT * FROM &#96;users&#96; WHERE &#96;users&#96;.&#96;name&#96; &#x3D; &#39;non_create&#39; ORDER BY &#96;users&#96;.&#96;id&#96; LIMIT 1\n\n\t&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:29:38 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:432\n\t&#x2F;&#x2F; [38.437ms] [rows:1] INSERT INTO &#96;users&#96; (&#96;name&#96;,&#96;age&#96;,&#96;email&#96;,&#96;birthday&#96;,&#96;member_number&#96;,&#96;activated_at&#96;,&#96;created_at&#96;,&#96;updated_at&#96;,&#96;active&#96;) VALUES (&#39;non_create&#39;,18,NULL,NULL,NULL,NULL,&#39;2022-10-20 10:29:38.008&#39;,&#39;2022-10-20 10:29:38.008&#39;,true)\n\n\n\t&#x2F;&#x2F; 第二次查询\n\t&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:30:07 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:431\n\t&#x2F;&#x2F; [8.054ms] [rows:0] SELECT * FROM &#96;users&#96; WHERE &#96;users&#96;.&#96;name&#96; &#x3D; &#39;non_existing&#39; ORDER BY &#96;users&#96;.&#96;id&#96; LIMIT 1\n\t&#x2F;&#x2F;\n\t&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:30:07 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:432\n\t&#x2F;&#x2F; [0.680ms] [rows:1] SELECT * FROM &#96;users&#96; WHERE &#96;users&#96;.&#96;name&#96; &#x3D; &#39;non_create&#39; ORDER BY &#96;users&#96;.&#96;id&#96; LIMIT 1\n\n\t&#x2F;&#x2F; | 19 | galeone                           | NULL  |   18 | 2022-10-19 11:21:56.089 | NULL          | NULL         | 2022-10-19 11:21:56.090 | 2022-10-19 11:21:56.090 |      1 |\n\t&#x2F;&#x2F; | 20 | galeone                           | NULL  |   18 | 2022-10-19 11:26:50.011 | NULL          | NULL         | 2022-10-19 11:26:50.012 | 2022-10-19 11:26:50.012 |      1 |\n\t&#x2F;&#x2F; | 21 | 我要存false，不要默认true         | NULL  |   18 | 2022-10-19 11:28:52.852 | NULL          | NULL         | 2022-10-19 11:28:52.852 | 2022-10-19 11:28:52.852 |      0 |\n\t&#x2F;&#x2F; | 22 | non_create                        | NULL  |   18 | NULL                    | NULL          | NULL         | 2022-10-20 10:29:38.008 | 2022-10-20 10:29:38.008 |      1 |\n\t&#x2F;&#x2F; +----+-----------------------------------+-------+------+-------------------------+---------------+--------------+-------------------------+-------------------------+--------+\n\t&#x2F;&#x2F; 22 rows in set (0.01 sec)</code></pre>\n\n<h2 id=\"mysql-offset-amp-limit-与-where-amp-limit\"><a href=\"#mysql-offset-amp-limit-与-where-amp-limit\" class=\"headerlink\" title=\"mysql offset &amp; limit 与 where &amp;limit\"></a>mysql offset &amp; limit 与 where &amp;limit</h2><img src=\"http://t-blog-images.aijs.top/img/202210201019656.svg\" style=\"width:500px;max-width:100%\" />\n\n<h2 id=\"gorm-Model-与-Table-的区别\"><a href=\"#gorm-Model-与-Table-的区别\" class=\"headerlink\" title=\"gorm Model 与 Table 的区别\"></a>gorm Model 与 Table 的区别</h2><p>GORM 允许扫描结果至 map[string]interface{} 或 []map[string]interface{}，此时别忘了指定 Model 或 Table</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">result :&#x3D; map[string]interface&#123;&#125;&#123;&#125;\ndb.Model(&amp;User&#123;&#125;).First(&amp;result, &quot;id &#x3D; ?&quot;, 1)\n\nvar results []map[string]interface&#123;&#125;\ndb.Table(&quot;users&quot;).Find(&amp;results)</code></pre>\n\n<h2 id=\"gorm-删除\"><a href=\"#gorm-删除\" class=\"headerlink\" title=\"gorm 删除\"></a>gorm 删除</h2><p>先了解这个，这个简单，不会太受 👊</p>\n<ul>\n<li>主键删除</li>\n<li>条件删除</li>\n<li>批量删除</li>\n<li>全局删除(规避)</li>\n<li>返回删除行的数据</li>\n<li>软删除</li>\n<li>查询被软删记录</li>\n<li>永久删除</li>\n<li>删除标记 Flag</li>\n<li>勾子暂时跳过</li>\n</ul>\n<h3 id=\"主键删除\"><a href=\"#主键删除\" class=\"headerlink\" title=\"主键删除\"></a>主键删除</h3><ul>\n<li>传入一个实例地址 <code>&amp;user</code></li>\n<li>结构体：<code>db.Delete(&amp;User&#123;&#125;, string/number) // 结构体</code></li>\n<li>批量主键 <code>db.Delete(&amp;users, []int&#123;1,2,3&#125;) // &amp;users</code></li>\n</ul>\n<h3 id=\"条件删除\"><a href=\"#条件删除\" class=\"headerlink\" title=\"条件删除\"></a>条件删除</h3><p><code>db.Where(&quot;name = ?&quot;, &quot;jinzhu&quot;).Delete(&amp;email)</code></p>\n<h3 id=\"批量删除\"><a href=\"#批量删除\" class=\"headerlink\" title=\"批量删除\"></a>批量删除</h3><ul>\n<li>like 条件删除</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 这种叫啥，先where, 后删除\ndb.Where(&quot;email LIKE ?&quot;, &quot;%jinzhu%&quot;).Delete(&amp;Email&#123;&#125;)\n&#x2F;&#x2F; DELETE from emails where email LIKE &quot;%jinzhu%&quot;;\n&#x2F;&#x2F; 结构体删除？\ndb.Delete(&amp;Email&#123;&#125;, &quot;email LIKE ?&quot;, &quot;%jinzhu%&quot;)\n&#x2F;&#x2F; DELETE from emails where email LIKE &quot;%jinzhu%&quot;;</code></pre>\n\n<h3 id=\"全局删除-规避\"><a href=\"#全局删除-规避\" class=\"headerlink\" title=\"全局删除(规避)\"></a>全局删除(规避)</h3><ul>\n<li>有条件，且查到的结果是全部数据 <code>Where 条件为&quot;true&quot; 都会清空</code></li>\n<li>原生 sql</li>\n<li>AllowGlobalUpdate</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Delete(&amp;User&#123;&#125;).Error &#x2F;&#x2F; gorm.ErrMissingWhereClause\n\n&#x2F;&#x2F; 会清表\ndb.Where(&quot;1 &#x3D; 1&quot;).Delete(&amp;User&#123;&#125;)\n&#x2F;&#x2F; DELETE FROM &#96;users&#96; WHERE 1&#x3D;1\n\n&#x2F;&#x2F; Where条件为&quot;true&quot; 都会清空\nvar users []User\ndb.Debug().Where(&quot;1 &#x3D; 1&quot;).Find(&amp;users)\n&#x2F;&#x2F; [4.435ms] [rows:22] SELECT * FROM &#96;users&#96; WHERE 1 &#x3D; 1\ndb.Debug().Where(&quot;true&quot;).Find(&amp;users)\n\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:54:53 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:459\n&#x2F;&#x2F; [3.312ms] [rows:22] SELECT * FROM &#96;users&#96; WHERE true\n\ndb.Debug().Where(&quot;2&#x3D;2&quot;).Find(&amp;users)\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 10:54:53 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:460\n&#x2F;&#x2F; [0.305ms] [rows:22] SELECT * FROM &#96;users&#96; WHERE 2&#x3D;2\n\n\n\n&#x2F;&#x2F; 会清表\ndb.Exec(&quot;DELETE FROM users&quot;)\n&#x2F;&#x2F; DELETE FROM users\n&#x2F;&#x2F; 会清表\ndb.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: true&#125;).Delete(&amp;User&#123;&#125;)\n&#x2F;&#x2F; DELETE FROM users</code></pre>\n\n<h3 id=\"返回删除行的数据\"><a href=\"#返回删除行的数据\" class=\"headerlink\" title=\"返回删除行的数据\"></a>返回删除行的数据</h3><p><code>Clauses(clause.Returning&#123;&#125;)</code> 仅适用于支持 Returning 的数据库</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 返回所有列\nvar users []User\nDB.Clauses(clause.Returning&#123;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Delete(&amp;users)\n&#x2F;&#x2F; DELETE FROM &#96;users&#96; WHERE role &#x3D; &quot;admin&quot; RETURNING *\n&#x2F;&#x2F; users &#x3D;&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;\n\n&#x2F;&#x2F; 返回指定的列\nDB.Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: &quot;name&quot;&#125;, &#123;Name: &quot;salary&quot;&#125;&#125;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Delete(&amp;users)\n&#x2F;&#x2F; DELETE FROM &#96;users&#96; WHERE role &#x3D; &quot;admin&quot; RETURNING &#96;name&#96;, &#96;salary&#96;\n&#x2F;&#x2F; users &#x3D;&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;</code></pre>\n\n<h3 id=\"软删除\"><a href=\"#软删除\" class=\"headerlink\" title=\"软删除\"></a>软删除</h3><ul>\n<li>引入 <code>gorm.Model</code></li>\n<li>不引入 <code>gorm.Model</code> ， <code>Deleted gorm.DeletedAt</code></li>\n</ul>\n<h3 id=\"查询被软删记录\"><a href=\"#查询被软删记录\" class=\"headerlink\" title=\"查询被软删记录\"></a>查询被软删记录</h3><p>Unscoped 译为： 未限定范围</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Unscoped().Where(&quot;age &#x3D; 20&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE age &#x3D; 20;\n\n</code></pre>\n\n<h3 id=\"永久删除\"><a href=\"#永久删除\" class=\"headerlink\" title=\"永久删除\"></a>永久删除</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Unscoped().Delete(&amp;order)\n&#x2F;&#x2F; DELETE FROM orders WHERE id&#x3D;10;\n</code></pre>\n\n<h3 id=\"删除标记-Flag\"><a href=\"#删除标记-Flag\" class=\"headerlink\" title=\"删除标记 Flag\"></a>删除标记 Flag</h3><ul>\n<li>unix 时间戳</li>\n<li>1&#x2F;0 标记</li>\n<li>混合模式</li>\n</ul>\n<h4 id=\"unix-时间戳\"><a href=\"#unix-时间戳\" class=\"headerlink\" title=\"unix 时间戳\"></a>unix 时间戳</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type User struct &#123;\n  ID    uint\n  Name  string\n  &#x2F;&#x2F; DeletedAt *time.Time &#x2F;&#x2F; 我觉得吧还是使用这个，有删除时间，前端想展示就展示，不想展示就当false&#x2F;true处理\n  DeletedAt soft_delete.DeletedAt &#96;gorm:&quot;softDelete:milli&quot;&#96;\n  &#x2F;&#x2F; DeletedAt soft_delete.DeletedAt &#96;gorm:&quot;softDelete:nano&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; 查询\nSELECT * FROM users WHERE deleted_at &#x3D; 0;\n\n&#x2F;&#x2F; 删除\nUPDATE users SET deleted_at &#x3D; &#x2F;* 当前毫秒、纳秒时间戳 *&#x2F; WHERE ID &#x3D; 1;\n</code></pre>\n\n<h4 id=\"1-x2F-0-标记\"><a href=\"#1-x2F-0-标记\" class=\"headerlink\" title=\"1&#x2F;0 标记\"></a>1&#x2F;0 标记</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\nimport &quot;gorm.io&#x2F;plugin&#x2F;soft_delete&quot; &#x2F;&#x2F; 这里引入了个插件\n\ntype User struct &#123;\n  ID    uint\n  Name  string\n  IsDel soft_delete.DeletedAt &#96;gorm:&quot;softDelete:flag&quot;&#96; &#x2F;&#x2F; 这里使用tab进行标记\n&#125;\n\n&#x2F;&#x2F; 查询\nSELECT * FROM users WHERE is_del &#x3D; 0;\n\n&#x2F;&#x2F; 删除\nUPDATE users SET is_del &#x3D; 1 WHERE ID &#x3D; 1;</code></pre>\n\n<h4 id=\"混合模式\"><a href=\"#混合模式\" class=\"headerlink\" title=\"混合模式\"></a>混合模式</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type User struct &#123;\n  ID        uint\n  Name      string\n  DeletedAt time.Time &#x2F;&#x2F; 这个\n  IsDel     soft_delete.DeletedAt &#96;gorm:&quot;softDelete:flag,DeletedAtField:DeletedAt&quot;&#96; &#x2F;&#x2F; 使用 &#96;1&#96; &#96;0&#96; 标识\n  &#x2F;&#x2F; IsDel     soft_delete.DeletedAt &#96;gorm:&quot;softDelete:,DeletedAtField:DeletedAt&quot;&#96; &#x2F;&#x2F; 使用 &#96;unix second&#96; 标识\n  &#x2F;&#x2F; IsDel     soft_delete.DeletedAt &#96;gorm:&quot;softDelete:nano,DeletedAtField:DeletedAt&quot;&#96; &#x2F;&#x2F; 使用 &#96;unix nano second&#96; 标识\n&#125;\n\n&#x2F;&#x2F; 查询\nSELECT * FROM users WHERE is_del &#x3D; 0; &#x2F;&#x2F; 一个查询条件就够了\n&#x2F;&#x2F; 在gorm中，这里有个问题，如果find，在不加Unscoped会不会查不到呢？ TODO:\n\n&#x2F;&#x2F; 删除，比较两个都要改啊，这么用的场景是什么\nUPDATE users SET is_del &#x3D; 1, deleted_at &#x3D; &#x2F;* current unix second *&#x2F; WHERE ID &#x3D; 1;</code></pre>\n\n<h2 id=\"原生-SQL-和-SQL-生成器\"><a href=\"#原生-SQL-和-SQL-生成器\" class=\"headerlink\" title=\"原生 SQL 和 SQL 生成器\"></a>原生 SQL 和 SQL 生成器</h2><p>这个比较有用</p>\n<ul>\n<li><code>db.Raw</code> + Scan Raw：译为原生</li>\n<li><code>db.Exec</code> Exec： 执行</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; db.Raw + Scan\ndb.Raw(&quot;SELECT id, name, age FROM users WHERE name &#x3D; ?&quot;, 3).Scan(&amp;result)\n\n&#x2F;&#x2F; db.Exec\ndb.Exec(&quot;UPDATE orders SET shipped_at &#x3D; ? WHERE id IN ?&quot;, time.Now(), []int64&#123;1, 2, 3&#125;)\n\n&#x2F;&#x2F; Exec with SQL Expression\ndb.Exec(&quot;UPDATE users SET money &#x3D; ? WHERE name &#x3D; ?&quot;, gorm.Expr(&quot;money * ? + ?&quot;, 10000, 1), &quot;jinzhu&quot;)\n</code></pre>\n\n<h3 id=\"命名参数\"><a href=\"#命名参数\" class=\"headerlink\" title=\"命名参数\"></a>命名参数</h3><p>GORM 支持 sql.NamedArg、map[string]interface{}{} 或 struct 形式的命名参数</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\ndb.Where(&quot;name1 &#x3D; @name OR name2 &#x3D; @name&quot;, sql.Named(&quot;name&quot;, &quot;jinzhu&quot;)).Find(&amp;user) &#x2F;&#x2F; name 替换前面的@name\n&#x2F;&#x2F; SELECT * FROM &#96;users&#96; WHERE name1 &#x3D; &quot;jinzhu&quot; OR name2 &#x3D; &quot;jinzhu&quot;\n\n&#x2F;&#x2F; map[string]interface&#123;&#125;&#123;&#125;\ndb.Where(&quot;name1 &#x3D; @name OR name2 &#x3D; @name&quot;, map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;jinzhu2&quot;&#125;).First(&amp;result3)\n&#x2F;&#x2F; SELECT * FROM &#96;users&#96; WHERE name1 &#x3D; &quot;jinzhu2&quot; OR name2 &#x3D; &quot;jinzhu2&quot; ORDER BY &#96;users&#96;.&#96;id&#96; LIMIT 1\n\n&#x2F;&#x2F; struct 形式的命名参数\ntype NamedArgument struct &#123;\n    Name string\n    Name2 string\n&#125;\n\ndb.Raw(\n  &quot;SELECT * FROM users WHERE (name1 &#x3D; @Name AND name3 &#x3D; @Name) AND name2 &#x3D; @Name2&quot;,\n  NamedArgument&#123;Name: &quot;jinzhu&quot;, Name2: &quot;jinzhu2&quot;&#125;\n).Find(&amp;user)</code></pre>\n\n<h3 id=\"预检-DryRun-模式\"><a href=\"#预检-DryRun-模式\" class=\"headerlink\" title=\"预检 DryRun 模式\"></a>预检 DryRun 模式</h3><p>生成语句不执行</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">stmt :&#x3D; db.Session(&amp;Session&#123;DryRun: true&#125;).First(&amp;user, 1).Statement\nstmt.SQL.String() &#x2F;&#x2F;&#x3D;&gt; SELECT * FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; $1 ORDER BY &#96;id&#96;\nstmt.Vars         &#x2F;&#x2F;&#x3D;&gt; []interface&#123;&#125;&#123;1&#125;\n</code></pre>\n\n<h3 id=\"ToSql\"><a href=\"#ToSql\" class=\"headerlink\" title=\"ToSql\"></a>ToSql</h3><p>生成语句不执行</p>\n<p>GORM 使用 database&#x2F;sql 的参数占位符来构建 SQL 语句，它会自动转义参数以避免 SQL 注入</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sql :&#x3D; DB.ToSQL(func(tx *gorm.DB) *gorm.DB &#123;\n  return tx.Model(&amp;User&#123;&#125;).Where(&quot;id &#x3D; ?&quot;, 100).Limit(10).Order(&quot;age desc&quot;).Find(&amp;[]User&#123;&#125;)\n&#125;)\nsql &#x2F;&#x2F;&#x3D;&gt; SELECT * FROM &quot;users&quot; WHERE id &#x3D; 100 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL ORDER BY age desc LIMIT 10\n</code></pre>\n\n<h3 id=\"Row-amp-Rows\"><a href=\"#Row-amp-Rows\" class=\"headerlink\" title=\"Row &amp; Rows\"></a>Row &amp; Rows</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 使用 GORM API 构建 SQL\nrow :&#x3D; db.Table(&quot;users&quot;).Where(&quot;name &#x3D; ?&quot;, &quot;jinzhu&quot;).Select(&quot;name&quot;, &quot;age&quot;).Row()\nrow.Scan(&amp;name, &amp;age)\n\n&#x2F;&#x2F; 使用原生 SQL\nrow :&#x3D; db.Raw(&quot;select name, age, email from users where name &#x3D; ?&quot;, &quot;jinzhu&quot;).Row()\nrow.Scan(&amp;name, &amp;age, &amp;email)</code></pre>\n\n<p>获取 <code>*sql.Rows</code> 结果</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 使用 GORM API 构建 SQL\nrows, err :&#x3D; db.Model(&amp;User&#123;&#125;).Where(&quot;name &#x3D; ?&quot;, &quot;jinzhu&quot;).Select(&quot;name, age, email&quot;).Rows()\ndefer rows.Close()\n\n&#x2F;&#x2F; 数据情况，需要用到循环\nfor rows.Next() &#123; &#x2F;&#x2F; 这个是while循环， 在go中为简化版for\n  rows.Scan(&amp;name, &amp;age, &amp;email)\n\n  &#x2F;&#x2F; 业务逻辑...\n&#125;\n\n&#x2F;&#x2F; 原生 SQL\nrows, err :&#x3D; db.Raw(&quot;select name, age, email from users where name &#x3D; ?&quot;, &quot;jinzhu&quot;).Rows()\ndefer rows.Close()\nfor rows.Next() &#123;\n  rows.Scan(&amp;name, &amp;age, &amp;email)\n\n  &#x2F;&#x2F; 业务逻辑...\n&#125;\n\n&#x2F;&#x2F; sql.rows 扫描至 model\n\nrows, err :&#x3D; db.Model(&amp;User&#123;&#125;).Where(&quot;name &#x3D; ?&quot;, &quot;jinzhu&quot;).Select(&quot;name, age, email&quot;).Rows() &#x2F;&#x2F; (*sql.Rows, error)\ndefer rows.Close()\n\nvar user User\nfor rows.Next() &#123;\n  &#x2F;&#x2F; ScanRows 将一行扫描至 user\n  db.ScanRows(rows, &amp;user)\n\n  &#x2F;&#x2F; 业务逻辑...\n&#125;</code></pre>\n\n<h3 id=\"单连接-多操作\"><a href=\"#单连接-多操作\" class=\"headerlink\" title=\"单连接,多操作\"></a>单连接,多操作</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 在一条 tcp DB 连接中运行多条 SQL (不是事务)\n\ndb.Connection(func(tx *gorm.DB) error &#123;\n  tx.Exec(&quot;SET my.role &#x3D; ?&quot;, &quot;admin&quot;)\n\n  tx.First(&amp;User&#123;&#125;)\n&#125;)</code></pre>\n\n<h3 id=\"子句\"><a href=\"#子句\" class=\"headerlink\" title=\"子句\"></a>子句</h3><p>TODO： 先不学</p>\n<h3 id=\"StatementModifier-语句修改器\"><a href=\"#StatementModifier-语句修改器\" class=\"headerlink\" title=\"StatementModifier 语句修改器\"></a>StatementModifier 语句修改器</h3><p>TODO： 先不学</p>\n<hr/>\n\n<h2 id=\"gorm-更新\"><a href=\"#gorm-更新\" class=\"headerlink\" title=\"gorm 更新\"></a>gorm 更新</h2><h3 id=\"保存所有字段\"><a href=\"#保存所有字段\" class=\"headerlink\" title=\"保存所有字段\"></a>保存所有字段</h3><p>Save <strong>会保存所有的字段，即使字段是零值</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.First(&amp;user)\n\nuser.Name &#x3D; &quot;jinzhu 2&quot;\nuser.Age &#x3D; 100\ndb.Save(&amp;user)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;jinzhu 2&#39;, age&#x3D;100, birthday&#x3D;&#39;2016-01-01&#39;, updated_at &#x3D; &#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n</code></pre>\n\n<h3 id=\"更新单个列\"><a href=\"#更新单个列\" class=\"headerlink\" title=\"更新单个列\"></a>更新单个列</h3><p>这里直接用的键值对</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 条件更新\ndb.Model(&amp;User&#123;&#125;).Where(&quot;active &#x3D; ?&quot;, true).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE active&#x3D;true;\n\n&#x2F;&#x2F; User 的 ID 是 &#96;111&#96;\ndb.Model(&amp;user).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n\n&#x2F;&#x2F; 根据条件和 model 的值进行更新\ndb.Model(&amp;user).Where(&quot;active &#x3D; ?&quot;, true).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111 AND active&#x3D;true;\n</code></pre>\n\n<h3 id=\"更新多列\"><a href=\"#更新多列\" class=\"headerlink\" title=\"更新多列\"></a>更新多列</h3><ul>\n<li><code>struct</code> 更新非零值字段</li>\n<li><code>map[string]interface&#123;&#125;</code></li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 根据 &#96;struct&#96; 更新属性，只会更新非零值的字段\ndb.Model(&amp;user).Updates(User&#123;Name: &quot;hello&quot;, Age: 18, Active: false&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18, updated_at &#x3D; &#39;2013-11-17 21:34:10&#39; WHERE id &#x3D; 111;\n\n&#x2F;&#x2F; 根据 &#96;map&#96; 更新属性\ndb.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18, &quot;active&quot;: false&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18, active&#x3D;false, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n</code></pre>\n\n<h3 id=\"更新选定字段\"><a href=\"#更新选定字段\" class=\"headerlink\" title=\"更新选定字段\"></a>更新选定字段</h3><ul>\n<li>Select 选择字段</li>\n<li>Omit 剔除字段</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 使用 Map 进行 Select\n&#x2F;&#x2F; User&#39;s ID is &#96;111&#96;:\n\n&#x2F;&#x2F;只更新name\ndb.Model(&amp;user).Select(&quot;name&quot;).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18, &quot;active&quot;: false&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39; WHERE id&#x3D;111;\n\n\n&#x2F;&#x2F; 不更新name\ndb.Model(&amp;user).Omit(&quot;name&quot;).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18, &quot;active&quot;: false&#125;)\n&#x2F;&#x2F; UPDATE users SET age&#x3D;18, active&#x3D;false, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n\n&#x2F;&#x2F; 使用 Struct 进行 Select（会 select 零值的字段） 这么特殊的吗？哦，大概晓得了： 默认是不更新，但Select要更新\ndb.Model(&amp;user).Select(&quot;Name&quot;, &quot;Age&quot;).Updates(User&#123;Name: &quot;new_name&quot;, Age: 0&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;new_name&#39;, age&#x3D;0 WHERE id&#x3D;111;\n\n&#x2F;&#x2F; Select 所有字段（查询包括零值字段的所有字段）\n&#x2F;&#x2F; 还支持 *呢\ndb.Model(&amp;user).Select(&quot;*&quot;).Update(User&#123;Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Age: 0&#125;)\n\n&#x2F;&#x2F; Select 除 Role 外的所有字段（包括零值字段的所有字段）\n&#x2F;&#x2F; 组合使用\ndb.Model(&amp;user).Select(&quot;*&quot;).Omit(&quot;Role&quot;).Update(User&#123;Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Age: 0&#125;)\n</code></pre>\n\n<h3 id=\"更新-Hook\"><a href=\"#更新-Hook\" class=\"headerlink\" title=\"更新 Hook\"></a>更新 Hook</h3><p>勾子无非就是校验和改变</p>\n<h3 id=\"批量更新\"><a href=\"#批量更新\" class=\"headerlink\" title=\"批量更新\"></a>批量更新</h3><p>不指定主键就是批更新</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 根据 struct 更新\n&#x2F;&#x2F; 给gorm个模型，让它来找表\ndb.Model(User&#123;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Updates(User&#123;Name: &quot;hello&quot;, Age: 18&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18 WHERE role &#x3D; &#39;admin&#39;;\n\n&#x2F;&#x2F; 根据 map 更新\n&#x2F;&#x2F; db.Table 选择某个表\ndb.Table(&quot;users&quot;).Where(&quot;id IN ?&quot;, []int&#123;10, 11&#125;).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18 WHERE id IN (10, 11);\n</code></pre>\n\n<h3 id=\"阻止全局更新\"><a href=\"#阻止全局更新\" class=\"headerlink\" title=\"阻止全局更新\"></a>阻止全局更新</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Model(&amp;User&#123;&#125;).Update(&quot;name&quot;, &quot;jinzhu&quot;).Error &#x2F;&#x2F; gorm.ErrMissingWhereClause\n\n\n&#x2F;&#x2F; .Where(&quot;true&quot;) 模式\ndb.Model(&amp;User&#123;&#125;).Where(&quot;1 &#x3D; 1&quot;).Update(&quot;name&quot;, &quot;jinzhu&quot;)\n&#x2F;&#x2F; UPDATE users SET &#96;name&#96; &#x3D; &quot;jinzhu&quot; WHERE 1&#x3D;1\n\n&#x2F;&#x2F; 原生\ndb.Exec(&quot;UPDATE users SET name &#x3D; ?&quot;, &quot;jinzhu&quot;)\n&#x2F;&#x2F; UPDATE users SET name &#x3D; &quot;jinzhu&quot;\n\n&#x2F;&#x2F; AllowGlobalUpdate\ndb.Session(&amp;gorm.Session&#123;AllowGlobalUpdate: true&#125;).Model(&amp;User&#123;&#125;).Update(&quot;name&quot;, &quot;jinzhu&quot;)\n&#x2F;&#x2F; UPDATE users SET &#96;name&#96; &#x3D; &quot;jinzhu&quot;</code></pre>\n\n<h3 id=\"更新的受影响数\"><a href=\"#更新的受影响数\" class=\"headerlink\" title=\"更新的受影响数\"></a>更新的受影响数</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 通过 &#96;RowsAffected&#96; 得到更新的记录数\nresult :&#x3D; db.Model(User&#123;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Updates(User&#123;Name: &quot;hello&quot;, Age: 18&#125;)\n&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18 WHERE role &#x3D; &#39;admin&#39;;\n\nresult.RowsAffected &#x2F;&#x2F; 更新的记录数\nresult.Error        &#x2F;&#x2F; 更新的错误</code></pre>\n\n<h3 id=\"高级选项\"><a href=\"#高级选项\" class=\"headerlink\" title=\"高级选项\"></a>高级选项</h3><h3 id=\"使用-SQL-表达式更新\"><a href=\"#使用-SQL-表达式更新\" class=\"headerlink\" title=\"使用 SQL 表达式更新\"></a>使用 SQL 表达式更新</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n&#x2F;&#x2F; product 的 ID 是 &#96;3&#96;\ndb.Model(&amp;product).Update(&quot;price&quot;, gorm.Expr(&quot;price * ? + ?&quot;, 2, 100))\n&#x2F;&#x2F; UPDATE &quot;products&quot; SET &quot;price&quot; &#x3D; price * 2 + 100, &quot;updated_at&quot; &#x3D; &#39;2013-11-17 21:34:10&#39; WHERE &quot;id&quot; &#x3D; 3;\n\ndb.Model(&amp;product).Updates(map[string]interface&#123;&#125;&#123;&quot;price&quot;: gorm.Expr(&quot;price * ? + ?&quot;, 2, 100)&#125;)\n&#x2F;&#x2F; UPDATE &quot;products&quot; SET &quot;price&quot; &#x3D; price * 2 + 100, &quot;updated_at&quot; &#x3D; &#39;2013-11-17 21:34:10&#39; WHERE &quot;id&quot; &#x3D; 3;\n\ndb.Model(&amp;product).UpdateColumn(&quot;quantity&quot;, gorm.Expr(&quot;quantity - ?&quot;, 1))\n&#x2F;&#x2F; UPDATE &quot;products&quot; SET &quot;quantity&quot; &#x3D; quantity - 1 WHERE &quot;id&quot; &#x3D; 3;\n\ndb.Model(&amp;product).Where(&quot;quantity &gt; 1&quot;).UpdateColumn(&quot;quantity&quot;, gorm.Expr(&quot;quantity - ?&quot;, 1))\n&#x2F;&#x2F; UPDATE &quot;products&quot; SET &quot;quantity&quot; &#x3D; quantity - 1 WHERE &quot;id&quot; &#x3D; 3 AND quantity &gt; 1;\n\n&#x2F;&#x2F; 将链式调用拆解\n\n  &#x2F;&#x2F; db.Model(&amp;product) 选表\n  &#x2F;&#x2F; .UpdateColumn(&quot;quantity&quot;, &#x2F;&#x2F; 更新操作\n  &#x2F;&#x2F; .Where(&quot;quantity &gt; 1&quot;) &#x2F;&#x2F; 判断条件\n\n&#x2F;&#x2F; 我有个疑问：gorm 是如何进行链式调用而保证顺序的？\n\n&#x2F;&#x2F; func (db *DB) Model(value interface&#123;&#125;) (tx *DB) &#123;\n&#x2F;&#x2F; \ttx &#x3D; db.getInstance()\n&#x2F;&#x2F; \ttx.Statement.Model &#x3D; value\n&#x2F;&#x2F; \treturn\n&#x2F;&#x2F; &#125;\n\n&#x2F;&#x2F; 把所有的.节点 都放到Statement上，UpdateColumn是执行 tx.callbacks.Update().Execute， 最后怎么组织的 Execute执行了啥？往下好像看不懂了\n\n&#x2F;&#x2F; func (db *DB) UpdateColumn(column string, value interface&#123;&#125;) (tx *DB) &#123;\n&#x2F;&#x2F; \ttx &#x3D; db.getInstance()\n&#x2F;&#x2F; \ttx.Statement.Dest &#x3D; map[string]interface&#123;&#125;&#123;column: value&#125;\n&#x2F;&#x2F; \ttx.Statement.SkipHooks &#x3D; true\n&#x2F;&#x2F; \treturn tx.callbacks.Update().Execute(tx)\n&#x2F;&#x2F; &#125;\n\n\n&#x2F;&#x2F; for _, f :&#x3D; range p.fns &#123; &#x2F;&#x2F; p *processor\n&#x2F;&#x2F; \t\tf(db)\n&#x2F;&#x2F; \t&#125;</code></pre>\n\n<p>TODO:这里有个自定义数据类型，在下面章节里有，先跳过</p>\n<h3 id=\"根据子查询进行更新\"><a href=\"#根据子查询进行更新\" class=\"headerlink\" title=\"根据子查询进行更新\"></a>根据子查询进行更新</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">db.Model(&amp;user)\n.Update(\n  &quot;company_name&quot;,\n  db.Model(&amp;Company&#123;&#125;).Select(&quot;name&quot;).Where(&quot;companies.id &#x3D; users.company_id&quot;)\n)\n&#x2F;&#x2F; UPDATE &quot;users&quot; SET &quot;company_name&quot; &#x3D; (SELECT name FROM companies WHERE companies.id &#x3D; users.company_id);\n\n&#x2F;&#x2F; 表明是复数\ndb.Table(&quot;users as u&quot;).Where(&quot;name &#x3D; ?&quot;, &quot;jinzhu&quot;)\n.Update(\n  &quot;company_name&quot;,\n  db.Table(&quot;companies as c&quot;).Select(&quot;name&quot;).Where(&quot;c.id &#x3D; u.company_id&quot;)\n)\n\ndb.Table(&quot;users as u&quot;).Where(&quot;name &#x3D; ?&quot;, &quot;jinzhu&quot;)\n.Updates(map[string]interface&#123;&#125;&#123;\n  &quot;company_name&quot;: db.Table(&quot;companies as c&quot;).Select(&quot;name&quot;).Where(&quot;c.id &#x3D; u.company_id&quot;)\n&#125;)</code></pre>\n\n<h3 id=\"不使用-Hook-和时间追踪\"><a href=\"#不使用-Hook-和时间追踪\" class=\"headerlink\" title=\"不使用 Hook 和时间追踪\"></a>不使用 Hook 和时间追踪</h3><p>官方文档上是错误的， 没有主键，没有查询条件，不会更新<br>注意：下面这几个 <em>不追踪更新时间</em></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var user User\ndb.Debug().Model(&amp;user).Where(&quot;id &#x3D; ?&quot;,1).UpdateColumn(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 14:52:17 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:468 WHERE conditions required\n&#x2F;&#x2F; [0.496ms] [rows:0] UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39; where &#96;id&#96;&#x3D;1\n\n&#x2F;&#x2F; 更新多个列\ndb.Model(&amp;user).Where(&quot;id &#x3D; ?&quot;,1).UpdateColumns(User&#123;Name: &quot;hello&quot;, Age: 18&#125;)\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 14:53:09 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:473 WHERE conditions required\n&#x2F;&#x2F; [0.567ms] [rows:0] UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;age&#96;&#x3D;18 where &#96;id&#96;&#x3D;1\n\n&#x2F;&#x2F; 更新选中的列\ndb.Model(&amp;user).Select(&quot;name&quot;, &quot;age&quot;).Where(&quot;id &#x3D; ?&quot;,1).UpdateColumns(User&#123;Name: &quot;hello&quot;, Age: 0&#125;)\n&#x2F;&#x2F; 2022&#x2F;10&#x2F;20 14:53:59 &#x2F;Users&#x2F;haotian&#x2F;haotian&#x2F;github&#x2F;go&#x2F;learn-gorm&#x2F;crud&#x2F;r.go:478 WHERE conditions required\n&#x2F;&#x2F; [0.539ms] [rows:0] UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;age&#96;&#x3D;0 where &#96;id&#96;&#x3D;1\n</code></pre>\n\n<h3 id=\"返回修改行的数据\"><a href=\"#返回修改行的数据\" class=\"headerlink\" title=\"返回修改行的数据\"></a>返回修改行的数据</h3><p>这个有用，可以给前端同步数据，而不需要前端再发个请求到后端查询数据，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 返回所有列\nvar users []User\nDB.Model(&amp;users).Clauses(clause.Returning&#123;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Update(&quot;salary&quot;, gorm.Expr(&quot;salary * ?&quot;, 2))\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;salary&#96;&#x3D;salary * 2,&#96;updated_at&#96;&#x3D;&quot;2021-10-28 17:37:23.19&quot; WHERE role &#x3D; &quot;admin&quot; RETURNING *\n&#x2F;&#x2F; users &#x3D;&gt; []User&#123;&#123;ID: 1, Name: &quot;jinzhu&quot;, Role: &quot;admin&quot;, Salary: 100&#125;, &#123;ID: 2, Name: &quot;jinzhu.2&quot;, Role: &quot;admin&quot;, Salary: 1000&#125;&#125;\n\n&#x2F;&#x2F; 返回指定的列\nDB.Model(&amp;users).Clauses(clause.Returning&#123;Columns: []clause.Column&#123;&#123;Name: &quot;name&quot;&#125;, &#123;Name: &quot;salary&quot;&#125;&#125;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Update(&quot;salary&quot;, gorm.Expr(&quot;salary * ?&quot;, 2))\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;salary&#96;&#x3D;salary * 2,&#96;updated_at&#96;&#x3D;&quot;2021-10-28 17:37:23.19&quot; WHERE role &#x3D; &quot;admin&quot; RETURNING &#96;name&#96;, &#96;salary&#96;\n&#x2F;&#x2F; users &#x3D;&gt; []User&#123;&#123;ID: 0, Name: &quot;jinzhu&quot;, Role: &quot;&quot;, Salary: 100&#125;, &#123;ID: 0, Name: &quot;jinzhu.2&quot;, Role: &quot;&quot;, Salary: 1000&#125;&#125;\n</code></pre>\n\n<h3 id=\"检查字段是否有变更？\"><a href=\"#检查字段是否有变更？\" class=\"headerlink\" title=\"检查字段是否有变更？\"></a>检查字段是否有变更？</h3><h3 id=\"在-Update-时修改值\"><a href=\"#在-Update-时修改值\" class=\"headerlink\" title=\"在 Update 时修改值\"></a>在 Update 时修改值</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 给谁加的勾子？ 给user?,加勾子都加载字段上的吗\nfunc (user *User) BeforeSave(tx *gorm.DB) (err error) &#123;\n  if pw, err :&#x3D; bcrypt.GenerateFromPassword(user.Password, 0); err &#x3D;&#x3D; nil &#123;\n    tx.Statement.SetColumn(&quot;EncryptedPassword&quot;, pw)\n  &#125;\n\n  if tx.Statement.Changed(&quot;Code&quot;) &#123;\n    user.Age +&#x3D; 20\n    tx.Statement.SetColumn(&quot;Age&quot;, user.Age)\n  &#125;\n&#125;\n\ndb.Model(&amp;user).Update(&quot;Name&quot;, &quot;jinzhu&quot;)</code></pre>\n\n<hr/>\n\n<h2 id=\"gorm-安全\"><a href=\"#gorm-安全\" class=\"headerlink\" title=\"gorm 安全\"></a>gorm 安全</h2><h3 id=\"gorm-SQL-注入\"><a href=\"#gorm-SQL-注入\" class=\"headerlink\" title=\"gorm SQL 注入\"></a>gorm SQL 注入</h3><p><strong>应对</strong></p>\n<p>GORM 使用 database&#x2F;sql 的<em>参数占位符来构造 SQL 语句，这可以自动转义参数</em>，避免 SQL 注入数据</p>\n<h3 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h3><h3 id=\"内联条件\"><a href=\"#内联条件\" class=\"headerlink\" title=\"内联条件\"></a>内联条件</h3><p>当通过用户输入的整形主键检索记录时，你应该对变量进行类型检查。</p>\n<h3 id=\"避免-Sql-注入的原则：\"><a href=\"#避免-Sql-注入的原则：\" class=\"headerlink\" title=\"避免 Sql 注入的原则：\"></a>避免 Sql 注入的原则：</h3><ul>\n<li>避免 SQL 注入的一般原则是，不信任用户提交的数据。</li>\n<li>您可以进行白名单验证来测试用户的输入是否为已知安全的、已批准、已定义的输入 TODO: 如何实现？</li>\n<li>在使用用户的输入时，仅将它们作为参数。</li>\n</ul>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><h2 id=\"零值-默认值\"><a href=\"#零值-默认值\" class=\"headerlink\" title=\"零值 || 默认值\"></a>零值 || 默认值</h2><ul>\n<li>方式 1: 指针</li>\n<li>方式 2: sql 结构体</li>\n</ul>\n<h2 id=\"map-string-interface-啥意思？\"><a href=\"#map-string-interface-啥意思？\" class=\"headerlink\" title=\"map[string]interface{}{}啥意思？\"></a><code>map[string]interface&#123;&#125;&#123;&#125;</code>啥意思？</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">.Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18, &quot;active&quot;: false&#125;)</code></pre>\n\n<h2 id=\"软删除后查询全量数据\"><a href=\"#软删除后查询全量数据\" class=\"headerlink\" title=\"软删除后查询全量数据\"></a>软删除后查询全量数据</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; Unscoped 翻译为：无范围\n\n&#x2F;&#x2F; Unscoped 方法可以查询被软删除的记录\ndb.Unscoped().Where(&quot;age &#x3D; 20&quot;).Find(&amp;users)\n&#x2F;&#x2F;&#x2F;&#x2F; SELECT * FROM users WHERE age &#x3D; 20;</code></pre>\n\n<h2 id=\"实战学习\"><a href=\"#实战学习\" class=\"headerlink\" title=\"实战学习\"></a>实战学习</h2><p>找个项目瞅瞅，</p>\n<p><a href=\"https://github.com/Q1mi/bubble\" target=\"_blank\" >见</a></p>\n<h2 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h2><img src=\"http://t-blog-images.aijs.top/img/202210162226393.png\" />\n\n<h2 id=\"博客收集\"><a href=\"#博客收集\" class=\"headerlink\" title=\"博客收集\"></a>博客收集</h2><p><a href=\"https://www.liwenzhou.com/posts/Go/golang-menu/\" target=\"_blank\" >liwenzhou.com golang 菜单</a></p>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-0-0\" target=\"_blank\" >liwenzhou.com 创建</a></p>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-1-3\" target=\"_blank\" >liwenzhou.com 查询</a></p>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-3-4\" target=\"_blank\" >liwenzhou.com 更新</a></p>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-4-8\" target=\"_blank\" >liwenzhou.com 删除</a></p>\n<p><a href=\"https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-2-11\" target=\"_blank\" >liwenzhou.com 链式调用</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1gJ411p7xC?p=19\" target=\"_blank\" >B 站视频 gorm</a></p>\n<p><a href=\"https://gitee.com/moxi159753/LearningNotes/tree/master/Golang/Gin%E6%A1%86%E6%9E%B6/\" target=\"_blank\" >课程代码</a></p>\n<p>学高级的都要钱，呜呜～，有钱真好</p>\n<p><a href=\"https://study.163.com/course/introduction.htm?courseId=1210171207#/courseDetail?tab=1\" target=\"_blank\" >哪位老哥有买此课程，借阅,三克油了</a></p>\n","text":"githubhttps://github.com/go-gorm/gorm ORM orm 解决的问题专注于语言，弱化 sql gorm 内部如何实现GORM 内部使用 SQL builder 生成 SQL。 对于每个操作，GORM 都会创建一个 *gorm.Statement ...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#github\"><span class=\"toc-text\">github</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM\"><span class=\"toc-text\">ORM</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#orm-%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">orm 解决的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%86%85%E9%83%A8%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">gorm 内部如何实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">自定义操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%90%8D%E8%87%AA%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">表名自定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%94%AE%E8%87%AA%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">外键自定义</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">gorm 关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-First%E3%80%81Take%E3%80%81Last-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">gorm First、Take、Last 区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-Find-%E4%B8%8E-Scan-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">gorm Find 与 Scan 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-Struct-%E4%B8%8E-Map-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">gorm Struct 与 Map 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">相同点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">不同点：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%AF%AD%E5%8F%A5%E5%8F%AF%E4%BB%A5%E4%BD%9C%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">gorm 哪些类型语句可以作查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%93%AA%E4%BA%9B%E4%B8%8D%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">gorm 哪些不会触发查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%93%AA%E4%BA%9B%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">gorm 哪些会触发查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mysql-offset-amp-limit-%E4%B8%8E-where-amp-limit\"><span class=\"toc-text\">mysql offset &amp; limit 与 where &amp;limit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-Model-%E4%B8%8E-Table-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">gorm Model 与 Table 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">gorm 删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">主键删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">条件删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">批量删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%88%A0%E9%99%A4-%E8%A7%84%E9%81%BF\"><span class=\"toc-text\">全局删除(规避)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%88%A0%E9%99%A4%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">返回删除行的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">软删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E8%A2%AB%E8%BD%AF%E5%88%A0%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">查询被软删记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B0%B8%E4%B9%85%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">永久删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0-Flag\"><span class=\"toc-text\">删除标记 Flag</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unix-%E6%97%B6%E9%97%B4%E6%88%B3\"><span class=\"toc-text\">unix 时间戳</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-x2F-0-%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">1&#x2F;0 标记</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">混合模式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F-SQL-%E5%92%8C-SQL-%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">原生 SQL 和 SQL 生成器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">命名参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E6%A3%80-DryRun-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">预检 DryRun 模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ToSql\"><span class=\"toc-text\">ToSql</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Row-amp-Rows\"><span class=\"toc-text\">Row &amp; Rows</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%BF%9E%E6%8E%A5-%E5%A4%9A%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">单连接,多操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E5%8F%A5\"><span class=\"toc-text\">子句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#StatementModifier-%E8%AF%AD%E5%8F%A5%E4%BF%AE%E6%94%B9%E5%99%A8\"><span class=\"toc-text\">StatementModifier 语句修改器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">gorm 更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E6%89%80%E6%9C%89%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">保存所有字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E5%8D%95%E4%B8%AA%E5%88%97\"><span class=\"toc-text\">更新单个列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E5%A4%9A%E5%88%97\"><span class=\"toc-text\">更新多列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E9%80%89%E5%AE%9A%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">更新选定字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0-Hook\"><span class=\"toc-text\">更新 Hook</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">批量更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BB%E6%AD%A2%E5%85%A8%E5%B1%80%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">阻止全局更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E7%9A%84%E5%8F%97%E5%BD%B1%E5%93%8D%E6%95%B0\"><span class=\"toc-text\">更新的受影响数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">高级选项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-SQL-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">使用 SQL 表达式更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%BF%9B%E8%A1%8C%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">根据子查询进行更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8-Hook-%E5%92%8C%E6%97%B6%E9%97%B4%E8%BF%BD%E8%B8%AA\"><span class=\"toc-text\">不使用 Hook 和时间追踪</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E4%BF%AE%E6%94%B9%E8%A1%8C%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">返回修改行的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%9F%A5%E5%AD%97%E6%AE%B5%E6%98%AF%E5%90%A6%E6%9C%89%E5%8F%98%E6%9B%B4%EF%BC%9F\"><span class=\"toc-text\">检查字段是否有变更？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-Update-%E6%97%B6%E4%BF%AE%E6%94%B9%E5%80%BC\"><span class=\"toc-text\">在 Update 时修改值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gorm-%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">gorm 安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gorm-SQL-%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">gorm SQL 注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">查询条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E8%81%94%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">内联条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D-Sql-%E6%B3%A8%E5%85%A5%E7%9A%84%E5%8E%9F%E5%88%99%EF%BC%9A\"><span class=\"toc-text\">避免 Sql 注入的原则：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">默认值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E5%80%BC-%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">零值 || 默认值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#map-string-interface-%E5%95%A5%E6%84%8F%E6%80%9D%EF%BC%9F\"><span class=\"toc-text\">map[string]interface{}{}啥意思？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E5%88%A0%E9%99%A4%E5%90%8E%E6%9F%A5%E8%AF%A2%E5%85%A8%E9%87%8F%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">软删除后查询全量数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">实战学习</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">项目架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86\"><span class=\"toc-text\">博客收集</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"js面试题","uid":"abbf797f56f759efd8b49b85ff4481ae","slug":"2022-10-16js","date":"2022-10-16T15:17:54.000Z","updated":"2022-12-22T13:36:21.790Z","comments":true,"path":"api/articles/2022-10-16js.json","keywords":null,"cover":null,"text":"B 站爬取脚本var list &#x3D; document.getElementsByClassName(&quot;video-list&quot;)[0]; Array.from(list.children).forEach((item) &#x3D;&gt; &#123...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"js","slug":"js","count":1,"path":"api/categories/js.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"B站播放速度修改","uid":"857139c827e07a054648ff4832e5a476","slug":"2022-10-16Bplayer-rate","date":"2022-10-16T07:55:58.000Z","updated":"2022-10-18T12:24:12.488Z","comments":true,"path":"api/articles/2022-10-16Bplayer-rate.json","keywords":null,"cover":[],"text":"背景B 站视频播放速度可选项太少了，有的视频被转化的语速快，有的视频被转化的特慢，不能忍～ 更改 dom&lt;ul class&#x3D;&quot;bpx-player-ctrl-playbackrate-menu&quot;&gt; &lt;!-- 增加个三倍速选项，B站没...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"工具","slug":"工具","count":26,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":20,"path":"api/tags/工具.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}