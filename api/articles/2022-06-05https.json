{"title":"前端基础-HTTPS","uid":"ddb7ac9f9b94448e902641cf7e936ac1","slug":"2022-06-05https","date":"2022-06-05T03:55:17.000Z","updated":"2022-09-16T13:54:56.127Z","comments":true,"path":"api/articles/2022-06-05https.json","keywords":null,"cover":[],"content":"<h2 id=\"吐槽掘金\"><a href=\"#吐槽掘金\" class=\"headerlink\" title=\"吐槽掘金\"></a>吐槽掘金</h2><ul>\n<li>后台有定时器在运行，一直发送请求，打开多个 web 标签页面，cpu 直接飙升到 100% +，鉴于掘金太卡，所以转载</li>\n</ul>\n<h2 id=\"为什么要有-HTTPS\"><a href=\"#为什么要有-HTTPS\" class=\"headerlink\" title=\"为什么要有 HTTPS\"></a>为什么要有 HTTPS</h2><p>在 HTTPS 出现之前，所有请求都是以明文方式送出的，那么如果有人在传输途中偷听或者抓包的话，你的所有通信内容都会泄漏。<br>比较安全的方法是将通信内容加密在发送给对方。加密方法有两种，对称加密和非对称加密。</p>\n<h2 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h2><ul>\n<li>对称加密指的是加密和解密用同一个密钥。</li>\n<li>但是在通信之前，客户端和服务端是不会有这样同一把密钥的。需要其中一方将密钥发送给对方。</li>\n<li>在整个传输过程没有任何验证操作，所以黑客也可以截取到这把密钥从而破译出加密的内容。<br>所以纯对称加密是不安全的。</li>\n</ul>\n<h2 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h2><p>非对称加密指的是加密和解密用不同的密钥。可以是用私钥加密，公钥解密，也可以是用公钥加密，私钥解密。<br>但是会有这种情况。</p>\n<ul>\n<li>服务端拥有私钥和公钥，将公钥发给客户端。<br>既然客户端可以获得公钥，黑客也可以获得公钥。那么服务端发送给客户端的所有内容黑客也是可以解读的。</li>\n<li>客户端用公钥加密发送给服务端不受影响，因为黑客手上没有服务器的私钥。<br>所以纯非对称加密也是不安全的。</li>\n</ul>\n<h2 id=\"传输密钥的过程\"><a href=\"#传输密钥的过程\" class=\"headerlink\" title=\"传输密钥的过程\"></a>传输密钥的过程</h2><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17217c84d03a66a9~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\"></p>\n<h2 id=\"图解传输密钥的过程\"><a href=\"#图解传输密钥的过程\" class=\"headerlink\" title=\"图解传输密钥的过程\"></a>图解传输密钥的过程</h2><p>HTTPS 采用对称加密来加密通信内容，所用的密钥称为 A。用非对称加密来加密密钥 A 再发送给对方（有点绕）。只要密钥 A 不落入他人手中，那传输的数据就不会被别人破译。</p>\n<p>那么问题来了，要如何安全的将这把密钥送到对方手上呢？</p>\n<p>我们来看密钥的传输过程<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17218630ec9be8b3~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\"></p>\n<h2 id=\"为什么-HTTPS-是可靠的？\"><a href=\"#为什么-HTTPS-是可靠的？\" class=\"headerlink\" title=\"为什么 HTTPS 是可靠的？\"></a>为什么 HTTPS 是可靠的？</h2><p>HTTPS 是可靠的，因为它解决了三个问题。</p>\n<ol>\n<li>加密通信，即使别人获取到了信息也没法复原成原来的信息。</li>\n<li>防止中间人攻击。黑客没法冒充服务端。因为在第 2 步，服务端给了客户端一个 CA 证书。</li>\n</ol>\n<ul>\n<li>如果客户端验证了这个证书，说明这个证书和公钥是由服务端发来的且真实可靠。</li>\n<li>如果客户端验证不了这个证书，就说明这个证书不可靠，有可能是假的。</li>\n</ul>\n<ol start=\"3\">\n<li>CA 证书的公信力<br>CA 证书需要由公司或者个人发出申请，再通过邮箱验证等方法验证域名存在。避免了黑客冒充网站获取证书的可能。<br>在技术层面上，CA 机构的公钥是写在操作系统或者浏览器里的。只有用 CA 机构的私钥加密的内容才能完成解密。确保了证书的确是 CA 机构发行的。</li>\n</ol>\n<h2 id=\"密钥的作用\"><a href=\"#密钥的作用\" class=\"headerlink\" title=\"密钥的作用\"></a>密钥的作用</h2><p>最后让我们再来回顾一下每一把密钥的作用<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17217e2ee1709bcd~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\"></p>\n<h2 id=\"HTTPS-一定安全吗\"><a href=\"#HTTPS-一定安全吗\" class=\"headerlink\" title=\"HTTPS 一定安全吗\"></a>HTTPS 一定安全吗</h2><p>非全站 HTTPS 并不安全</p>\n<p>登录页面支持 HTTPS 不就行了，首页又没有涉及账户信息<br>其实这是非常不安全的行为，黑客会利用这一点进行攻击，一般是以下流程：</p>\n<p>1.用户在首页点击「登录」，页面跳转到有 htps 的网银页面，但此时由于首页是 htp 请求，所以是明文的，这就会被黑客劫持 2.黑客劫持用户的跳转请求，将 https 网银页面地址转换为 http 的地址再发送给银行</p>\n<p>用户&lt;&#x3D;&#x3D;HTTP&#x3D;&#x3D;&gt;黑客&lt;&#x3D;&#x3D;HTTPS&#x3D;&#x3D;&gt;银行</p>\n<p>1.此时如果用户输入账户信息，那么会被中间的黑客获取，此时的账号密码就被泄露了</p>\n<p>好在是银行的网银页面,只支持 htps,因此上述攻击暂时是无效的</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://link.juejin.cn/?target=https://www.bilibili.com/video/BV1w4411m7GL\">【web 安全 3】【硬核】HTTPS 原理全解析</a></p>\n<p>作者：站在书脊之上<br>链接：<a href=\"https://juejin.cn/post/6844904160089882631\">https://juejin.cn/post/6844904160089882631</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","text":"吐槽掘金 后台有定时器在运行，一直发送请求，打开多个 web 标签页面，cpu 直接飙升到 100% +，鉴于掘金太卡，所以转载 为什么要有 HTTPS在 HTTPS 出现之前，所有请求都是以明文方式送出的，那么如果有人在传输途中偷听或者抓包的话，你的所有通信内容都会泄漏。比较安...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":39,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":41,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":19,"path":"api/tags/面试.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%90%E6%A7%BD%E6%8E%98%E9%87%91\"><span class=\"toc-text\">吐槽掘金</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-HTTPS\"><span class=\"toc-text\">为什么要有 HTTPS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">对称加密</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">非对称加密</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E8%BE%93%E5%AF%86%E9%92%A5%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">传输密钥的过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E8%A7%A3%E4%BC%A0%E8%BE%93%E5%AF%86%E9%92%A5%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">图解传输密钥的过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-HTTPS-%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">为什么 HTTPS 是可靠的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%86%E9%92%A5%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">密钥的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTPS-%E4%B8%80%E5%AE%9A%E5%AE%89%E5%85%A8%E5%90%97\"><span class=\"toc-text\">HTTPS 一定安全吗</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"1.Typescript起步","uid":"bb89616b2d7e7f4e050ed00ae2d71539","slug":"2022-06-08ts-start","date":"2022-06-06T01:58:32.000Z","updated":"2022-09-16T14:59:28.569Z","comments":true,"path":"api/articles/2022-06-08ts-start.json","keywords":null,"cover":"https://img0.baidu.com/it/u=86492913,3057347241&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=208","text":"说明此文及后续的几篇是对Typescript官方原文的翻译，方便阅读 Get Startedtypescript 起步，分别针对 4 类不同的程序开发者进行引导， 对号入座 新手程序猿，没有接触过任何开发语言 JS 开发者 Java&#x2F;C#开发 [跳过] 函数式编程人员 ...","link":"","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":11,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":12,"path":"api/tags/TypeScript.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"再学Vue3-7 最佳实践","uid":"e33992d78838483e28879a1cdf87c45e","slug":"2022-06-02vue-7","date":"2022-06-02T12:05:05.000Z","updated":"2022-09-16T13:54:56.126Z","comments":true,"path":"api/articles/2022-06-02vue-7.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/20220602185003.webp","text":"概览 性能 安全 ","link":"","photos":[],"count_time":{"symbolsCount":11,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":13,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":13,"path":"api/tags/vue.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}