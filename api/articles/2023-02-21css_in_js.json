{"title":"css-in-js Emotion","uid":"dcd1b904e1a0e1af1d4a643d739dc3fa","slug":"2023-02-21css_in_js","date":"2023-02-21T06:20:01.000Z","updated":"2023-02-23T13:26:54.130Z","comments":true,"path":"api/articles/2023-02-21css_in_js.json","keywords":null,"cover":"https://i.imgur.com/9WKHXbg.png","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近一段时间，维护敏捷平台的几个相关项目，都是使用 <code>Emotion</code> 进行开发的，所以有必要系统了解下 <code>Emotion</code></p>\n<h1 id=\"Emotion-是什么\"><a href=\"#Emotion-是什么\" class=\"headerlink\" title=\"Emotion 是什么\"></a>Emotion 是什么</h1><ol>\n<li><code>使用</code>: 使用 js 编写 css 样式而设计的库</li>\n<li><code>手段</code>: 提供可预测的样式组合, 支持字符串和对象样式</li>\n<li><code>效果</code>: 具有源码映射、标签和测试实用程序等功能提高开发人员体验，</li>\n</ol>\n<p><a href=\"https://emotion.sh/docs/introduction\" target=\"_blank\" >Emotion 官网</a></p>\n<h1 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h1><ol>\n<li><code>@emotion/css</code> 框架无关</li>\n<li><code>@emotion/react</code> 框架有关 支持<code>css属性</code></li>\n<li><code>@emotion/styled</code> 使用 <code>styled.div</code> 风格的 API 来创建组件</li>\n</ol>\n<h1 id=\"emotion-x2F-css\"><a href=\"#emotion-x2F-css\" class=\"headerlink\" title=\"@emotion&#x2F;css\"></a>@emotion&#x2F;css</h1><h2 id=\"css-属性有什么优势？\"><a href=\"#css-属性有什么优势？\" class=\"headerlink\" title=\"css 属性有什么优势？\"></a>css 属性有什么优势？</h2><ol>\n<li><code>style</code>: 与 style 属性相似，支持额外的<code>前缀补全，嵌套选择器，媒体查询</code>（这就 👍）</li>\n<li><code>styled</code>: 可以不使用<code>styled</code>API 直接使用</li>\n<li><code>接收函数</code>: css 属性可以接受函数，来<code>统一样式</code>和<code>定制一些值</code></li>\n<li><code>减少模版代码</code></li>\n<li><code>样式覆盖</code>: 个人觉得对于已有的样式进行样式覆盖非常灵活，完全可以用 js 来控制</li>\n</ol>\n<h2 id=\"支持原生的样式（看上去像一个类）\"><a href=\"#支持原生的样式（看上去像一个类）\" class=\"headerlink\" title=\"支持原生的样式（看上去像一个类）\"></a>支持原生的样式（看上去像一个类）</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; css &#125; from &quot;@emotion&#x2F;css&quot;;\n\nconst app &#x3D; document.getElementById(&quot;root&quot;);\nconst myStyle &#x3D; css&#96;\n  color: rebeccapurple;\n&#96;;\n&#x2F;&#x2F; 放到了classList上\napp.classList.add(myStyle);</code></pre>\n\n<h2 id=\"四类-API\"><a href=\"#四类-API\" class=\"headerlink\" title=\"四类 API\"></a>四类 API</h2><ol>\n<li>Generate Class Names — css</li>\n<li>Global Styles — injectGlobal</li>\n<li>Animation Keyframes — keyframes</li>\n<li>Composing Class Names — cx</li>\n</ol>\n<h3 id=\"Generate-Class-Names-—-css\"><a href=\"#Generate-Class-Names-—-css\" class=\"headerlink\" title=\"Generate Class Names — css\"></a>Generate Class Names — css</h3><h4 id=\"1-string-形式的样式类\"><a href=\"#1-string-形式的样式类\" class=\"headerlink\" title=\"1. string 形式的样式类\"></a>1. string 形式的样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @live\nimport &#123; css &#125; from &quot;@emotion&#x2F;css&quot;;\n\nconst color &#x3D; &quot;darkgreen&quot;;\n\nrender(\n  &#x2F;&#x2F; prettier-ignore\n  &lt;div\n    className&#x3D;&#123;css&#96;\n      background-color: hotpink;\n      &amp;:hover &#123;\n        color: $&#123;color&#125;; &#123;&#x2F;*这里可以添加变量，“字符串模版”  *&#x2F;&#125;\n      &#125;\n    &#96;&#125;\n  &gt;\n    This has a hotpink background.\n  &lt;&#x2F;div&gt;\n);</code></pre>\n\n<h4 id=\"2-对象形式的样式类\"><a href=\"#2-对象形式的样式类\" class=\"headerlink\" title=\"2. 对象形式的样式类\"></a>2. 对象形式的样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @live\nimport &#123; css &#125; from &#39;@emotion&#x2F;css&#39;\n\nconst color &#x3D; &#39;darkgreen&#39;\n\nrender(\n  &#x2F;&#x2F; prettier-ignore\n  &lt;div\n    className&#x3D;&#123;css(&#123;       &#123;&#x2F;*像扩展后的jsx中的 style  *&#x2F;&#125;\n      backgroundColor: &#39;hotpink&#39;,\n      &#39;&amp;:hover&#39;: &#123;\n        color\n      &#125;\n    &#125;)&#125;\n  &gt;\n    This has a hotpink background.\n  &lt;&#x2F;div&gt;\n)</code></pre>\n\n<h4 id=\"3-数组对象形式的样式类\"><a href=\"#3-数组对象形式的样式类\" class=\"headerlink\" title=\"3. 数组对象形式的样式类\"></a>3. 数组对象形式的样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @live\nimport &#123; css &#125; from &#39;@emotion&#x2F;css&#39;\n\nconst color &#x3D; &#39;darkgreen&#39;\nconst isDanger &#x3D; true\n\nrender(\n  &#x2F;&#x2F; prettier-ignore\n  &lt;div\n    className&#x3D;&#123;css([\n      &#123;\n        backgroundColor: &#39;hotpink&#39;,\n        &#39;&amp;:hover&#39;: &#123;\n          color\n        &#125;\n      &#125;,\n      &#123;&#x2F;* 动态控制 *&#x2F;&#125;\n      isDanger &amp;&amp; &#123;\n        color: &#39;red&#39;\n      &#125;\n    ])&#125;\n  &gt;\n    This has a hotpink background.\n  &lt;&#x2F;div&gt;\n)</code></pre>\n\n<h3 id=\"Global-Styles-—-injectGlobal\"><a href=\"#Global-Styles-—-injectGlobal\" class=\"headerlink\" title=\"Global Styles — injectGlobal\"></a>Global Styles — injectGlobal</h3><h4 id=\"4-全局样式类\"><a href=\"#4-全局样式类\" class=\"headerlink\" title=\"4. 全局样式类\"></a>4. 全局样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; injectGlobal &#125; from &quot;@emotion&#x2F;css&quot;;\n&#x2F;&#x2F; 用于全局的样式覆盖\ninjectGlobal&#96;\n  * &#123;\n    box-sizing: border-box;\n  &#125;\n  @font-face &#123;\n    font-family: &#39;Patrick Hand SC&#39;;\n    font-style: normal;\n    font-weight: 400;\n    src: local(&#39;Patrick Hand SC&#39;),\n      local(&#39;PatrickHandSC-Regular&#39;),\n      url(https:&#x2F;&#x2F;fonts.gstatic.com&#x2F;s&#x2F;patrickhandsc&#x2F;v4&#x2F;OYFWCgfCR-7uHIovjUZXsZ71Uis0Qeb9Gqo8IZV7ckE.woff2)\n        format(&#39;woff2&#39;);\n    unicode-range: U+0100-024f, U+1-1eff,\n      U+20a0-20ab, U+20ad-20cf, U+2c60-2c7f,\n      U+A720-A7FF;\n  &#125;\n&#96;;</code></pre>\n\n<h3 id=\"Animation-Keyframes-—-keyframes\"><a href=\"#Animation-Keyframes-—-keyframes\" class=\"headerlink\" title=\"Animation Keyframes — keyframes\"></a>Animation Keyframes — keyframes</h3><h4 id=\"5-string-形式的动画帧\"><a href=\"#5-string-形式的动画帧\" class=\"headerlink\" title=\"5. string 形式的动画帧\"></a>5. string 形式的动画帧</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @live\nimport &#123; css, keyframes &#125; from &quot;@emotion&#x2F;css&quot;;\n&#x2F;&#x2F; 这里是字符串模版\nconst bounce &#x3D; keyframes&#96;\n  from, 20%, 53%, 80%, to &#123;\n    transform: translate3d(0,0,0);\n  &#125;\n\n  40%, 43% &#123;\n    transform: translate3d(0, -30px, 0);\n  &#125;\n\n  70% &#123;\n    transform: translate3d(0, -15px, 0);\n  &#125;\n\n  90% &#123;\n    transform: translate3d(0,-4px,0);\n  &#125;\n&#96;;\n\nrender(\n  &lt;img\n    className&#x3D;&#123;css&#96;\n      width: 96px;\n      height: 96px;\n      border-radius: 50%;\n      animation: $&#123;bounce&#125; 1s ease infinite;\n      transform-origin: center bottom;\n    &#96;&#125;\n    src&#x3D;&#123;logoUrl&#125;\n  &#x2F;&gt;\n);</code></pre>\n\n<h4 id=\"6-对象形式的动画帧\"><a href=\"#6-对象形式的动画帧\" class=\"headerlink\" title=\"6. 对象形式的动画帧\"></a>6. 对象形式的动画帧</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; @live\nimport &#123; css, keyframes &#125; from &quot;@emotion&#x2F;css&quot;;\n&#x2F;&#x2F; jsx对象风格\nconst bounce &#x3D; keyframes(&#123;\n  &quot;from, 20%, 53%, 80%, to&quot;: &#123;\n    transform: &quot;translate3d(0,0,0)&quot;,\n  &#125;,\n  &quot;40%, 43%&quot;: &#123;\n    transform: &quot;translate3d(0, -30px, 0)&quot;,\n  &#125;,\n  &quot;70%&quot;: &#123;\n    transform: &quot;translate3d(0, -15px, 0)&quot;,\n  &#125;,\n  &quot;90%&quot;: &#123;\n    transform: &quot;translate3d(0, -4px, 0)&quot;,\n  &#125;,\n&#125;);\n\nrender(\n  &lt;img\n    src&#x3D;&#123;logoUrl&#125;\n    className&#x3D;&#123;css(&#123;\n      width: 96,\n      height: 96,\n      borderRadius: &quot;50%&quot;,\n      &#123;&#x2F;* 在这里当变量使用 *&#x2F;&#125;\n      animation: &#96;$&#123;bounce&#125; 1s ease infinite&#96;,\n      transformOrigin: &quot;center bottom&quot;,\n    &#125;)&#125;\n  &#x2F;&gt;\n);</code></pre>\n\n<h3 id=\"Composing-Class-Names-—-cx\"><a href=\"#Composing-Class-Names-—-cx\" class=\"headerlink\" title=\"Composing Class Names — cx\"></a>Composing Class Names — cx</h3><h4 id=\"7-cx-API-合并样式类\"><a href=\"#7-cx-API-合并样式类\" class=\"headerlink\" title=\"7. cx API 合并样式类\"></a>7. cx API 合并样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; cx, css &#125; from &#39;@emotion&#x2F;css&#39;\n\nconst cls1 &#x3D; css&#96;\n  font-size: 20px;\n  background: green;\n&#96;\nconst cls2 &#x3D; css&#96;\n  font-size: 20px;\n  background: blue;\n&#96;\n&#x2F;&#x2F; 类似 classnames的效果\n&lt;div className&#x3D;&#123;cx(cls1, cls2)&#125; &#x2F;&gt;</code></pre>\n\n<h4 id=\"8-cx-API-按条件合并样式类\"><a href=\"#8-cx-API-按条件合并样式类\" class=\"headerlink\" title=\"8. cx API 按条件合并样式类\"></a>8. cx API 按条件合并样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const cls1 &#x3D; css&#96;\n  font-size: 20px;\n  background: green;\n&#96;;\nconst cls2 &#x3D; css&#96;\n  font-size: 20px;\n  background: blue;\n&#96;;\n\nconst foo &#x3D; true;\nconst bar &#x3D; false;\n\n&#x2F;&#x2F; classnames的效果\n&lt;div className&#x3D;&#123;cx(&#123; [cls1]: foo &#125;, &#123; [cls2]: bar &#125;)&#125; &#x2F;&gt;;</code></pre>\n\n<h4 id=\"9-cx-API-引入其他样式类\"><a href=\"#9-cx-API-引入其他样式类\" class=\"headerlink\" title=\"9. cx API 引入其他样式类\"></a>9. cx API 引入其他样式类</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const cls1 &#x3D; css&#96;\n  font-size: 20px;\n  background: green;\n&#96;;\n\n&#123;\n  &#x2F;* profile其他文件资源 *&#x2F;\n&#125;\n&lt;div className&#x3D;&#123;cx(cls1, &quot;profile&quot;)&#125; &#x2F;&gt;;</code></pre>\n\n<h1 id=\"emotion-x2F-react\"><a href=\"#emotion-x2F-react\" class=\"headerlink\" title=\"@emotion&#x2F;react\"></a>@emotion&#x2F;react</h1><h2 id=\"代码如何书写\"><a href=\"#代码如何书写\" class=\"headerlink\" title=\"代码如何书写\"></a>代码如何书写</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; css &#125; from &quot;@emotion&#x2F;react&quot;;\n\nconst color &#x3D; &quot;white&quot;;\n\nrender(\n  &lt;div\n    css&#x3D;&#123;css&#96;\n      padding: 32px;\n      background-color: hotpink;\n      font-size: 24px;\n      border-radius: 4px;\n      &amp;:hover &#123;\n        color: $&#123;color&#125;;\n      &#125;\n    &#96;&#125;\n  &gt;\n    Hover to change color.\n  &lt;&#x2F;div&gt;\n);</code></pre>\n\n<h1 id=\"emotion-x2F-styled\"><a href=\"#emotion-x2F-styled\" class=\"headerlink\" title=\"@emotion&#x2F;styled\"></a>@emotion&#x2F;styled</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>使用 <code>styled.div</code>风格来创建组件</p>\n<h2 id=\"代码如何书写-1\"><a href=\"#代码如何书写-1\" class=\"headerlink\" title=\"代码如何书写\"></a>代码如何书写</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import styled from &quot;@emotion&#x2F;styled&quot;;\n&#x2F;&#x2F; 声明一个具有这组样式的组件（组件名要大写）\nconst Button &#x3D; styled.button&#96;\n  padding: 32px;\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  color: black;\n  font-weight: bold;\n  &amp;:hover &#123;\n    color: white;\n  &#125;\n&#96;;\n&#x2F;&#x2F; 使用这个新声明的组件（这不是antd的Button组件）\nrender(&lt;Button&gt;This my button component.&lt;&#x2F;Button&gt;);</code></pre>\n\n<h1 id=\"Emotion-Snippets-vscode-插件\"><a href=\"#Emotion-Snippets-vscode-插件\" class=\"headerlink\" title=\"Emotion Snippets vscode 插件\"></a>Emotion Snippets vscode 插件</h1><ol>\n<li><code>vscode-styled-components</code>: code intellisense <a href=\"https://github.com/emotion-js/emotion/issues/447\" target=\"_blank\" >issue 447</a></li>\n<li><code>vscode-styled-jsx</code>: code hightlight</li>\n<li><code>Emotion Snippets</code>: 代码片段(我觉得手动自定义会更好些，太多的插件太笨重)</li>\n</ol>\n<!-- <a href=\"https://marketplace.visualstudio.com/items?itemName=iJS.emotionsnippets\" target=\"_blank\" >Emotion Snippets</a>\n\n改为自定义代码片段，不安装插件。。。 -->\n\n<p><strong>vscode-styled-components 提示效果</strong><br><img src=\"http://t-blog-images.aijs.top/img/202302231102393.webp\" alt=\"vscode-styled-components\" /></p>\n<h1 id=\"横向对比\"><a href=\"#横向对比\" class=\"headerlink\" title=\"横向对比\"></a>横向对比</h1><p><strong>优点</strong></p>\n<ol>\n<li>相比<code>less, sass</code> 老牌的 css 预编译，更方便，功能更多</li>\n<li>没有<code>tailwindcss</code>,较为分散的诸多样式类选择器</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>相比<code>tailwindcss</code>, cssinjs 会生成更多独立的 hash 类，我觉得有可能增大 css 的加载</li>\n<li>或许，分散的样式要统一到某个文件夹下，写成.js 或.ts 进行复用</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>主要 emotion 主要部分是 emotion&#x2F;css</p>\n<ol>\n<li>Generate Class Names — css</li>\n<li>Animation Keyframes — keyframes</li>\n<li>Composing Class Names — cx</li>\n<li>Global Styles — injectGlobal</li>\n</ol>\n<p><strong>api 支持字符串、对象、数组，和函数，以及逻辑判断，灵活方便</strong></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ol>\n<li><a href=\"https://emotion.sh/docs/introduction\" target=\"_blank\" >emotion.sh&#x2F;docs</a></li>\n<li><a href=\"https://emotion.sh/docs/@emotion/css#api\" target=\"_blank\" >@emotion&#x2F;css#api</a></li>\n<li><a href=\"https://github.com/emotion-js/emotion/issues/447\" target=\"_blank\" >[Question] any editor plugins to write CSS in js #447</a></li>\n<li><a href=\"https://github.com/emotion-js/emotion/issues/1316\" target=\"_blank\" >VS Code syntax highlighting <code>#1316</code> </a></li>\n</ol>\n","text":"背景最近一段时间，维护敏捷平台的几个相关项目，都是使用 Emotion 进行开发的，所以有必要系统了解下 Emotion Emotion 是什么 使用: 使用 js 编写 css 样式而设计的库 手段: 提供可预测的样式组合, 支持字符串和对象样式 效果: 具有源码映射、标签和测...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"css-in-js","slug":"css-in-js","count":1,"path":"api/categories/css-in-js.json"}],"tags":[{"name":"css-in-js","slug":"css-in-js","count":1,"path":"api/tags/css-in-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Emotion-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Emotion 是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">组成部分</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#emotion-x2F-css\"><span class=\"toc-text\">@emotion&#x2F;css</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#css-%E5%B1%9E%E6%80%A7%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF%EF%BC%9F\"><span class=\"toc-text\">css 属性有什么优势？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E5%8E%9F%E7%94%9F%E7%9A%84%E6%A0%B7%E5%BC%8F%EF%BC%88%E7%9C%8B%E4%B8%8A%E5%8E%BB%E5%83%8F%E4%B8%80%E4%B8%AA%E7%B1%BB%EF%BC%89\"><span class=\"toc-text\">支持原生的样式（看上去像一个类）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E7%B1%BB-API\"><span class=\"toc-text\">四类 API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Generate-Class-Names-%E2%80%94-css\"><span class=\"toc-text\">Generate Class Names — css</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-string-%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">1. string 形式的样式类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">2. 对象形式的样式类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">3. 数组对象形式的样式类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Global-Styles-%E2%80%94-injectGlobal\"><span class=\"toc-text\">Global Styles — injectGlobal</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">4. 全局样式类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Animation-Keyframes-%E2%80%94-keyframes\"><span class=\"toc-text\">Animation Keyframes — keyframes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-string-%E5%BD%A2%E5%BC%8F%E7%9A%84%E5%8A%A8%E7%94%BB%E5%B8%A7\"><span class=\"toc-text\">5. string 形式的动画帧</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%AF%B9%E8%B1%A1%E5%BD%A2%E5%BC%8F%E7%9A%84%E5%8A%A8%E7%94%BB%E5%B8%A7\"><span class=\"toc-text\">6. 对象形式的动画帧</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Composing-Class-Names-%E2%80%94-cx\"><span class=\"toc-text\">Composing Class Names — cx</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-cx-API-%E5%90%88%E5%B9%B6%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">7. cx API 合并样式类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-cx-API-%E6%8C%89%E6%9D%A1%E4%BB%B6%E5%90%88%E5%B9%B6%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">8. cx API 按条件合并样式类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-cx-API-%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E6%A0%B7%E5%BC%8F%E7%B1%BB\"><span class=\"toc-text\">9. cx API 引入其他样式类</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#emotion-x2F-react\"><span class=\"toc-text\">@emotion&#x2F;react</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%A6%82%E4%BD%95%E4%B9%A6%E5%86%99\"><span class=\"toc-text\">代码如何书写</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#emotion-x2F-styled\"><span class=\"toc-text\">@emotion&#x2F;styled</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%A6%82%E4%BD%95%E4%B9%A6%E5%86%99-1\"><span class=\"toc-text\">代码如何书写</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Emotion-Snippets-vscode-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">Emotion Snippets vscode 插件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%AA%E5%90%91%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">横向对比</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"js代码注释","uid":"6048c84185b9e926fc5bd13fc5af10cc","slug":"2023-02-22comment","date":"2023-02-22T08:22:35.000Z","updated":"2023-02-23T13:26:54.130Z","comments":true,"path":"api/articles/2023-02-22comment.json","keywords":null,"cover":null,"text":"js 文件中的注释 ","link":"","photos":[],"count_time":{"symbolsCount":10,"symbolsTime":"1 mins."},"categories":[{"name":"工具","slug":"工具","count":19,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":13,"path":"api/tags/工具.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"性能优化-Preload, Prefetch And Priorities in Chrome","uid":"18f2de6f6ea6d59c8b217d81ff25660d","slug":"2023-02-20priorities","date":"2023-02-20T10:13:09.000Z","updated":"2023-02-23T13:26:54.130Z","comments":true,"path":"api/articles/2023-02-20priorities.json","keywords":null,"cover":"https://miro.medium.com/v2/resize:fit:720/format:webp/1*W4_tAMHlFs6tunMxbXQjFA.png","text":"Preload, Prefetch 是如何工作的 正如其他文章中很好地介绍的那样，preload 是一种声明式获取，允许您强制浏览器发出对资源的请求，而不会阻止文档的 onload 事件 prefetch 是向浏览器提示可能需要资源，但将决定是否以及何时加载委托给浏览器 prel...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"性能优化","slug":"性能优化","count":8,"path":"api/categories/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":8,"path":"api/tags/性能优化.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}