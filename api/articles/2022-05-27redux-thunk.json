{"title":"redux-thunk源码","uid":"ef136ce7ac94dd6f9c2f35712eef1e47","slug":"2022-05-27redux-thunk","date":"2022-05-27T01:21:50.000Z","updated":"2022-09-15T14:26:10.749Z","comments":true,"path":"api/articles/2022-05-27redux-thunk.json","keywords":null,"cover":null,"content":"<h2 id=\"源码版本\"><a href=\"#源码版本\" class=\"headerlink\" title=\"源码版本\"></a>源码版本</h2><p><a href=\"https://github.com/reduxjs/redux-thunk/releases/tag/v2.4.1\">v2.4.1</a></p>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><ul>\n<li>通过redux源码applyMiddleware了解到，是对store.dispatch进行增强</li>\n<li>可以接受一个返回函数的action creator。如果这个action creator 返回的是一个函数，就执行它，如果不是，就按照原来的next(action)执行。</li>\n<li>可以在这个函数中执行一些异步的操作</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export function addCount() &#123;\n  return &#123;type: ADD_COUNT&#125;\n&#125; \nexport function addCountAsync() &#123;\n  return dispatch &#x3D;&gt; &#123; &#x2F;&#x2F; dispatch对应源码的 ： action(dispatch, getState, extraArgument);的第一个参数\n    setTimeout( () &#x3D;&gt; &#123;\n      dispatch(addCount())\n    &#125;,2000)\n  &#125;\n&#125;\n</code></pre>\n<ul>\n<li>addCountAsync函数就返回了一个函数，将dispatch作为函数的第一个参数传递进去，在函数内进行异步操作就可以了。</li>\n</ul>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><ul>\n<li>这个文件结构与redux、react-redux相比，没有什么特别之处，这里及以后如无必要不在进行阅读</li>\n<li>简单扫一眼就好</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;** A function that accepts a potential &quot;extra argument&quot; value to be injected later,\n * and returns an instance of the thunk middleware that uses that value\n *&#x2F;\n&#x2F;** 一个函数接收一个可能的&quot;extra argument&quot;值，并返回一个thunk中间件，它使用这个值 *&#x2F;\nfunction createThunkMiddleware&lt;\n  State &#x3D; any,\n  BasicAction extends Action &#x3D; AnyAction,\n  ExtraThunkArg &#x3D; undefined\n&gt;(extraArgument?: ExtraThunkArg) &#123;\n  &#x2F;&#x2F; Standard Redux middleware definition pattern:\n  &#x2F;&#x2F; 标准Redux中间件定义模式:\n  &#x2F;&#x2F; See: https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#writing-custom-middleware\n  const middleware: ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt; &#x3D;\n    (&#123; dispatch, getState &#125;) &#x3D;&gt; (next) &#x3D;&gt;  (action) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; The thunk middleware looks for any functions that were passed to &#96;store.dispatch&#96;.\n      &#x2F;&#x2F; If this &quot;action&quot; is really a function, call it and return the result.\n      &#x2F;&#x2F; 这个thunk中间件会查找store.dispatch传入的任何函数。如果这个&quot;action&quot;是一个函数，调用它并返回结果。\n      if (typeof action &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;\n        &#x2F;&#x2F; Inject the store&#39;s &#96;dispatch&#96; and &#96;getState&#96; methods, as well as any &quot;extra arg&quot;\n        &#x2F;&#x2F; 注入store的dispatch和getState方法，以及任意的&quot;extra arg&quot;\n        return action(dispatch, getState, extraArgument);\n      &#125;\n      &#x2F;&#x2F; 否则，像往常一样将操作传递给中间件链\n      &#x2F;&#x2F; Otherwise, pass the action down the middleware chain as usual\n      return next(action);\n    &#125;;\n  return middleware;\n&#125;</code></pre>\n<p><strong>中间件模式</strong></p>\n<p>柯里化：将一个函数的参数分解成多个参数，并且返回一个新的函数，这个新的函数可以被调用，并且返回原函数的结果。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const anotherExampleMiddleware &#x3D; storeAPI &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;\n  &#x2F;&#x2F; Do something in here, when each action is dispatched\n\n  return next(action)\n&#125;</code></pre>\n<p><strong>storeAPI</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; storeAPI\n\nconst store &#x3D; &#123;\n  dispatch: dispatch as Dispatch&lt;A&gt;,\n  subscribe,\n  getState,\n  replaceReducer,\n  [$$observable]: observable\n&#125; as unknown as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</code></pre>\n<p><em>工厂模式</em></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">\nconst thunk &#x3D; createThunkMiddleware() as ThunkMiddleware &amp; &#123;\n  withExtraArgument&lt;\n    ExtraThunkArg,\n    State &#x3D; any,\n    BasicAction extends Action &#x3D; AnyAction\n  &gt;(\n    extraArgument: ExtraThunkArg\n  ): ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt;\n&#125;\n\n&#x2F;&#x2F; Attach the factory function so users can create a customized version\n&#x2F;&#x2F; with whatever &quot;extra arg&quot; they want to inject into their thunks\n&#x2F;&#x2F; 尝试将工厂函数附加到用户可以创建任何额外的&quot;extra arg&quot;的thunk中间件\nthunk.withExtraArgument &#x3D; createThunkMiddleware\n\nexport default thunk</code></pre>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/reduxjs/redux-thunk/blob/master/src/index.ts\">redux-thunk源码</a><br><a href=\"https://blog.csdn.net/hsany330/article/details/105951197\">Redux中间件之redux-thunk使用详解</a></p>\n","text":"源码版本v2.4.1 用途 通过redux源码applyMiddleware了解到，是对store.dispatch进行增强 可以接受一个返回函数的action creator。如果这个action creator 返回的是一个函数，就执行它，如果不是，就按照原来的next(ac...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"react","slug":"react","count":18,"path":"api/categories/react.json"}],"tags":[{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"},{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"},{"name":"redux-thunk","slug":"redux-thunk","count":1,"path":"api/tags/redux-thunk.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">源码版本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E9%80%94\"><span class=\"toc-text\">用途</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#package-json\"><span class=\"toc-text\">package.json</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vscode i18n-ally","uid":"98e904a0d3e9702a10dc20a22eaad4dd","slug":"2022-05-27i18n","date":"2022-05-27T02:47:24.000Z","updated":"2022-09-15T14:26:10.748Z","comments":true,"path":"api/articles/2022-05-27i18n.json","keywords":null,"cover":[],"text":"国际化 大型公司的国际化需求很高，需要支持多语言，比如中文、英文、日文等等。 i18n-ally是一个基于vscode的国际化工具，可以帮助你快速的实现国际化。 背景 如果经常做国际化的研发，应该很清楚，代码中写多语言，然而，多语言在项目中维护是非常困难的。 当遇到大型项目，业务...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":15,"path":"api/categories/工具.json"}],"tags":[{"name":"增效","slug":"增效","count":8,"path":"api/tags/增效.json"},{"name":"工具","slug":"工具","count":7,"path":"api/tags/工具.json"},{"name":"vscode","slug":"vscode","count":6,"path":"api/tags/vscode.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"js 代码注释","uid":"5df43a7a7d0a76be0dcfbc13fca3f3d6","slug":"2022-05-26code","date":"2022-05-26T07:31:20.000Z","updated":"2022-09-15T14:26:10.748Z","comments":true,"path":"api/articles/2022-05-26code.json","keywords":null,"cover":[],"text":"代码注释//这种js注释代码在vscode其他地方引用时候，没有提示， 如果需要有提示，需要写成/** 提示 **/ 写法1 export enum ELeaveType &#123; MATERNITY_ &#x3D; 17, &#x2F;&#x2F; &quot;产假&amp...","link":"","photos":[],"count_time":{"symbolsCount":469,"symbolsTime":"1 mins."},"categories":[{"name":"code","slug":"code","count":1,"path":"api/categories/code.json"}],"tags":[{"name":"code","slug":"code","count":1,"path":"api/tags/code.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}