{"title":"常聊的存储","uid":"abe1fdd233c62a53808b3cc396b5a093","slug":"2023-02-11站点存储","date":"2023-02-11T14:52:27.000Z","updated":"2023-02-20T21:20:56.490Z","comments":true,"path":"api/articles/2023-02-11站点存储.json","keywords":null,"cover":null,"content":"<h2 id=\"打开思维定式\"><a href=\"#打开思维定式\" class=\"headerlink\" title=\"打开思维定式\"></a>打开思维定式</h2><p>只要能存储，就关联起来，不要局限于 <code>cookie</code>，<code>localStorage</code>，<code>sessionStorage</code>，<code>indexDB</code></p>\n<h2 id=\"web-相关的\"><a href=\"#web-相关的\" class=\"headerlink\" title=\"web 相关的\"></a>web 相关的</h2><h3 id=\"cookie-x2F-cookieStore\"><a href=\"#cookie-x2F-cookieStore\" class=\"headerlink\" title=\"cookie&#x2F;cookieStore\"></a>cookie&#x2F;cookieStore</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\" target=\"_blank\" >cookie</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CookieStore\" target=\"_blank\" >cookieStore</a></p>\n<h3 id=\"localStorage，sessionStorage\"><a href=\"#localStorage，sessionStorage\" class=\"headerlink\" title=\"localStorage，sessionStorage\"></a>localStorage，sessionStorage</h3><ol>\n<li>Web Storage API 提供机制，使<code>浏览器能以一种比使用 Cookie 更直观的方式存储键/值对</code></li>\n<li>sessionStorage 为<code>每一个给定的源（given origin）维持一个独立的存储区域</code>，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li>\n<li>localStorage 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li>\n<li>在支持的浏览器中 Window 对象实现了 WindowLocalStorage 和 WindowSessionStorage 对象并挂在其 localStorage 和 sessionStorage 属性下</li>\n<li>调用其中任一对象会创建 Storage 对象，通过 Storage 对象，可以设置、获取和移除数据项。</li>\n<li><code>对于每个源（origin）sessionStorage 和 localStorage 使用不同的 Storage 对象——独立运行和控制</code> （<strong>浏览器内容安全策略限制，禁止跨域，这里要注意一下，这里特指<code>origin</code>并没有说跨域三要素的事情，是跨域的必要非充分条件</strong>）</li>\n<li><code>StorageEvent</code>当一个存储区更改时，存储事件从文档的 Window 对象上被发布</li>\n</ol>\n<h3 id=\"indexDB-数据库\"><a href=\"#indexDB-数据库\" class=\"headerlink\" title=\"indexDB 数据库\"></a>indexDB 数据库</h3><h3 id=\"web-sql-弃用\"><a href=\"#web-sql-弃用\" class=\"headerlink\" title=\"web sql 弃用\"></a>web sql 弃用</h3><h3 id=\"存到-url-上刷新不丢失\"><a href=\"#存到-url-上刷新不丢失\" class=\"headerlink\" title=\"存到 url 上刷新不丢失\"></a>存到 url 上刷新不丢失</h3><h4 id=\"history-pushState-x2F-replaceState\"><a href=\"#history-pushState-x2F-replaceState\" class=\"headerlink\" title=\"history.pushState &#x2F; replaceState\"></a>history.pushState &#x2F; replaceState</h4><ol>\n<li><code>history.pushState() 方法向当前浏览器会话的历史堆栈中添加一个状态（state）</code>,</li>\n<li>在 <code>reactrouter</code>源码中使用了 history 库，history 封装了 webapi history 相关方法，有<code>replaceState</code>这个. <a href=\"https://reactrouter.com/en/main/hooks/use-search-params#usesearchparams\" target=\"_blank\" >useSearchParams</a></li>\n</ol>\n<h4 id=\"不同于-window-location\"><a href=\"#不同于-window-location\" class=\"headerlink\" title=\"不同于 window.location\"></a>不同于 window.location</h4><p>从某种程度来说，调用 pushState() 和 window.location &#x3D; “#foo”基本上一样，</p>\n<h4 id=\"window-location-x2F-history-pushState-x2F-replaceState-区别\"><a href=\"#window-location-x2F-history-pushState-x2F-replaceState-区别\" class=\"headerlink\" title=\"window.location &#x2F; history.pushState &#x2F; replaceState 区别\"></a>window.location &#x2F; history.pushState &#x2F; replaceState 区别</h4><table>\n<thead>\n<tr>\n<th align=\"left\">比较项</th>\n<th align=\"left\">history.pushState</th>\n<th>replaceState</th>\n<th>window.location</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">创建和激活一个新的历史记录</td>\n<td align=\"left\">是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td align=\"left\">适用更广</td>\n<td align=\"left\">同源就行</td>\n<td>同源就行</td>\n<td>window.location 只会在你只设置锚的时候才会使当前的 URL</td>\n</tr>\n<tr>\n<td align=\"left\">修改 URL</td>\n<td align=\"left\">非强制</td>\n<td>非强制</td>\n<td>仅仅会在锚的值不是 #foo 情况下创建一条新的历史记录</td>\n</tr>\n<tr>\n<td align=\"left\">新的历史记录中关联任何数据</td>\n<td align=\"left\">可以</td>\n<td>可以</td>\n<td>将所需数据写入锚的字符串中</td>\n</tr>\n<tr>\n<td align=\"left\">hashchange 事件调用</td>\n<td align=\"left\">不调用</td>\n<td>不调用</td>\n<td>调用</td>\n</tr>\n</tbody></table>\n<h3 id=\"Service-Worker-registrations\"><a href=\"#Service-Worker-registrations\" class=\"headerlink\" title=\"Service Worker registrations\"></a>Service Worker registrations</h3><h3 id=\"CacheStorage\"><a href=\"#CacheStorage\" class=\"headerlink\" title=\"CacheStorage\"></a>CacheStorage</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\" target=\"_blank\" >Cache</a></p>\n<ol>\n<li>Cache 接口为缓存的<code>Request / Response</code> 对象对提供存储机制，例如，作为 ServiceWorker 生命周期的一部分。</li>\n<li>请注意，<code>Cache 接口像 workers 一样，是暴露在 window 作用域下的</code>。</li>\n<li>尽管它被定义在 <code>service worker 的标准中</code>，但是它<code>不必一定要配合 service worker 使用</code></li>\n<li><code>一个域可以有多个命名 Cache 对象</code>。你需要在你的脚本 (例如，在 ServiceWorker 中) 中处理缓存更新的方式。</li>\n<li>除非明确地更新缓存，否则缓存将不会被更新；除非删除，否则缓存数据不会过期。</li>\n<li>使用 CacheStorage.open(cacheName) 打开一个 Cache 对象，再使用 Cache 对象的方法去处理缓存</li>\n</ol>\n<h4 id=\"API-Promise\"><a href=\"#API-Promise\" class=\"headerlink\" title=\"API Promise\"></a>API Promise</h4><ol>\n<li><code>Cache.match(request, options)</code>返回一个 Promise 对象，resolve 的结果是跟 Cache 对象匹配的第一个已经缓存的请求。</li>\n<li><code>Cache.matchAll(request, options)</code> 返回一个 Promise 对象，resolve 的结果是跟 Cache 对象匹配的所有请求组成的数组。</li>\n<li><code>Cache.add(request)</code> 抓取这个 URL，检索并把返回的 response 对象添加到给定的 Cache 对象。这在功能上等同于调用 fetch(), 然后使用 Cache.put() 将 response 添加到 cache 中。</li>\n<li><code>Cache.addAll(requests)</code> 抓取一个 URL 数组，检索并把返回的 response 对象添加到给定的 Cache 对象。</li>\n<li><code>Cache.put(request, response)</code> 同时抓取一个请求及其响应，并将其添加到给定的 cache。</li>\n<li><code>Cache.delete(request, options)</code> 搜索 key 值为 request 的 Cache 条目。如果找到，则删除该 Cache 条目，并且返回一个 resolve 为 true 的 Promise 对象；如果未找到，则返回一个 resolve 为 false 的 Promise 对象。</li>\n<li><code>Cache.keys(request, options)</code> 返回一个 Promise 对象，resolve 的结果是 Cache 对象 key 值组成的数组。</li>\n</ol>\n<h4 id=\"大多数浏览器兼容\"><a href=\"#大多数浏览器兼容\" class=\"headerlink\" title=\"大多数浏览器兼容\"></a>大多数浏览器兼容</h4><h2 id=\"闭包、全局变量\"><a href=\"#闭包、全局变量\" class=\"headerlink\" title=\"闭包、全局变量\"></a>闭包、全局变量</h2><h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"redux、vuex、pinia\"><a href=\"#redux、vuex、pinia\" class=\"headerlink\" title=\"redux、vuex、pinia\"></a>redux、vuex、pinia</h3><h3 id=\"context、useState\"><a href=\"#context、useState\" class=\"headerlink\" title=\"context、useState\"></a>context、useState</h3><h2 id=\"原生相关的\"><a href=\"#原生相关的\" class=\"headerlink\" title=\"原生相关的\"></a>原生相关的</h2><h3 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h3><h2 id=\"小程序相关-storage\"><a href=\"#小程序相关-storage\" class=\"headerlink\" title=\"小程序相关 storage\"></a>小程序相关 storage</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Storage_API\" target=\"_blank\" >Storage_API</a></p>\n","text":"打开思维定式只要能存储，就关联起来，不要局限于 cookie，localStorage，sessionStorage，indexDB web 相关的cookie&#x2F;cookieStorecookie cookieStore localStorage，sessionStor...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":47,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%BC%80%E6%80%9D%E7%BB%B4%E5%AE%9A%E5%BC%8F\"><span class=\"toc-text\">打开思维定式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web-%E7%9B%B8%E5%85%B3%E7%9A%84\"><span class=\"toc-text\">web 相关的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cookie-x2F-cookieStore\"><span class=\"toc-text\">cookie&#x2F;cookieStore</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#localStorage%EF%BC%8CsessionStorage\"><span class=\"toc-text\">localStorage，sessionStorage</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#indexDB-%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">indexDB 数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web-sql-%E5%BC%83%E7%94%A8\"><span class=\"toc-text\">web sql 弃用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%88%B0-url-%E4%B8%8A%E5%88%B7%E6%96%B0%E4%B8%8D%E4%B8%A2%E5%A4%B1\"><span class=\"toc-text\">存到 url 上刷新不丢失</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#history-pushState-x2F-replaceState\"><span class=\"toc-text\">history.pushState &#x2F; replaceState</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E4%BA%8E-window-location\"><span class=\"toc-text\">不同于 window.location</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#window-location-x2F-history-pushState-x2F-replaceState-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">window.location &#x2F; history.pushState &#x2F; replaceState 区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Service-Worker-registrations\"><span class=\"toc-text\">Service Worker registrations</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CacheStorage\"><span class=\"toc-text\">CacheStorage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#API-Promise\"><span class=\"toc-text\">API Promise</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%A4%9A%E6%95%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9\"><span class=\"toc-text\">大多数浏览器兼容</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E3%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">闭包、全局变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#redux%E3%80%81vuex%E3%80%81pinia\"><span class=\"toc-text\">redux、vuex、pinia</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#context%E3%80%81useState\"><span class=\"toc-text\">context、useState</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E7%9B%B8%E5%85%B3%E7%9A%84\"><span class=\"toc-text\">原生相关的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQLite\"><span class=\"toc-text\">SQLite</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3-storage\"><span class=\"toc-text\">小程序相关 storage</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Web API【watting...】","uid":"a837b31db4bffa654fe3b9023ed7211d","slug":"2023-02-11webapi","date":"2023-02-11T15:36:04.000Z","updated":"2023-02-20T21:20:56.488Z","comments":true,"path":"api/articles/2023-02-11webapi.json","keywords":null,"cover":null,"text":"爬取脚本var sects &#x3D; document.getElementById(&quot;sect1&quot;); var h3s &#x3D; sects.getElementsByTagName(&quot;h3&quot;); var uls &#x3D; s...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":47,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"包管理工具","uid":"842dcf974088eb6a6584ed019af3396a","slug":"2023-02-10pkg","date":"2023-02-10T10:33:47.000Z","updated":"2023-02-20T21:20:56.488Z","comments":true,"path":"api/articles/2023-02-10pkg.json","keywords":null,"cover":"https://pnpm.io/zh/assets/images/cafs-illustration-7be6bd97e43ba11a031b099869321deb.jpg","text":"npm用 node 版本管理工具把 node 版本降到 4，那 npm 版本就是 2.x 了。 执行 npm init， npm install express，可以看到 node_modules 目录如下：可以看到，npm2 的 node_modules 是嵌套的。 优点:就是...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":17,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":11,"path":"api/tags/工具.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}