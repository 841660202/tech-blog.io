{"title":"包管理工具","uid":"842dcf974088eb6a6584ed019af3396a","slug":"2023-02-10pkg","date":"2023-02-10T10:33:47.000Z","updated":"2023-02-20T21:20:56.488Z","comments":true,"path":"api/articles/2023-02-10pkg.json","keywords":null,"cover":"https://pnpm.io/zh/assets/images/cafs-illustration-7be6bd97e43ba11a031b099869321deb.jpg","content":"<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>用 node 版本管理工具把 node 版本降到 4，那 npm 版本就是 2.x 了。</p>\n<p>执行 npm init， npm install express，可以看到 node_modules 目录如下：<br>可以看到，npm2 的 node_modules 是嵌套的。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h3><p>就是模块依赖关系清晰。</p>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ol>\n<li><code>依赖层级太深</code>，会导致文件路径过长的问题，尤其在 window 系统下，最多 260 多个字符。</li>\n<li><code>大量重复的包被安装</code>，文件体积超级大。比如跟 foo 同级目录下有一个 baz，两者都依赖于同一个版本的 lodash，那么 lodash 会分别在两者的 node_modules 中被安装，也就是重复安装。</li>\n<li><code>模块实例不能共享</code>。比如 React 有一些内部变量，在两个不同包引入的 React 不是同一个模块实例，因此无法共享内部变量，导致一些不可预知的 bug。</li>\n</ol>\n<p>当时 npm 还没解决这些问题，社区就出来一个新的解决方案了，那就是 yarn。</p>\n<p>————————————————<br>版权声明：本文为 CSDN 博主「weikxu」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_33050575/article/details/127852993\">https://blog.csdn.net/qq_33050575/article/details/127852993</a></p>\n<h2 id=\"cnpm\"><a href=\"#cnpm\" class=\"headerlink\" title=\"cnpm\"></a>cnpm</h2><h2 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h2><h3 id=\"项目初衷-为了解决-npm-存在的问题\"><a href=\"#项目初衷-为了解决-npm-存在的问题\" class=\"headerlink\" title=\"项目初衷: 为了解决 npm 存在的问题\"></a>项目初衷: 为了解决 npm 存在的问题</h3><p>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>同时利用并行下载以最大化资源利用率，因此安装速度更快。</p>\n<ol>\n<li><code>扁平模式</code>: 将依赖包的不同版本归结为单个版本，以避免创建多个副本。</li>\n<li><code>确定性</code> 不管安装顺序如何，相同的依赖关系将在每台机器上以相同的方式安装。</li>\n<li><code>相同软件包</code>: 从 npm 安装软件包并保持相同的包管理流程。</li>\n<li><code>离线模式</code>: 如果你以前安装过某个包，再次安装时可以在没有任何互联网连接的情况下进行。</li>\n<li><code>网络性能</code>: 请求队列化处理，避免发起的请求如瀑布般倾泻，以便最大限度地利用网络资源。</li>\n<li><code>重试机制</code>: 重试机制确保单个请求失败并不会导致整个安装失败。</li>\n</ol>\n<p><a href=\"https://yarn.bootcss.com/\" target=\"_blank\" >见</a></p>\n<h3 id=\"yarn2-vs-yarn1\"><a href=\"#yarn2-vs-yarn1\" class=\"headerlink\" title=\"yarn2 vs yarn1\"></a>yarn2 vs yarn1</h3><h2 id=\"pnmp\"><a href=\"#pnmp\" class=\"headerlink\" title=\"pnmp\"></a>pnmp</h2><h3 id=\"项目初衷-节约磁盘空间并提升安装速度\"><a href=\"#项目初衷-节约磁盘空间并提升安装速度\" class=\"headerlink\" title=\"项目初衷: 节约磁盘空间并提升安装速度\"></a>项目初衷: 节约磁盘空间并提升安装速度</h3><p>快速的，节省磁盘空间的包管理工具</p>\n<ol>\n<li><code>快速</code>: pnpm 比其他包管理器快 2 倍</li>\n<li><code>高效</code>: node_modules 中的文件为复制或链接自特定的内容寻址存储库</li>\n<li><code>支持 monorepos</code>: pnpm 内置支持单仓多包</li>\n<li><code>严格</code>: pnpm 默认创建了一个非平铺的 node_modules，因此代码无法访问任意包</li>\n</ol>\n<p><a href=\"https://pnpm.io/zh/\" target=\"_blank\" >见</a></p>\n<p>有个缺点：有时候 pnpm 安装不了的包，yarn 可以安装</p>\n<h3 id=\"链接寻址\"><a href=\"#链接寻址\" class=\"headerlink\" title=\"链接寻址\"></a>链接寻址</h3><div style=\"display:flex;flex-direction:row; flex-wrap:wrap;align-items: flex-start;\">\n<img src=\"http://t-blog-images.aijs.top/img/202302111131710.webp\" style=\"width:400px;max-width:100%\" />\n<img src=\"http://t-blog-images.aijs.top/img/202302111132743.webp\" style=\"width:400px;max-width:100%\" />\n</div>\n\n<h3 id=\"非扁平化的-node-modules\"><a href=\"#非扁平化的-node-modules\" class=\"headerlink\" title=\"非扁平化的 node_modules\"></a>非扁平化的 node_modules</h3><ol>\n<li>使用 npm 或 Yarn Classic 安装依赖项时，所有包都被提升到模块目录的根目录。 因此，项目可以访问到未被添加进当前项目的依赖。</li>\n<li>默认情况下，pnpm 使用软链的方式将项目的直接依赖添加进模块文件夹的根目录。</li>\n</ol>\n<img src=\"https://pnpm.io/zh/assets/images/node-modules-structure-8ab301ddaed3b7530858b233f5b3be57.jpg\" />\n\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><h3 id=\"pnpm-vs-yarn\"><a href=\"#pnpm-vs-yarn\" class=\"headerlink\" title=\"pnpm vs yarn\"></a>pnpm vs yarn</h3><p><strong>pnpm 优于 yarn 的点：</strong></p>\n<ol>\n<li><code>链接寻址</code>: 项目内 node_modules 大小进行比较 <code> yarn 5.93 GB</code> ， <code>pnpm 588.8 MB</code></li>\n<li><code>side-effect-cache</code></li>\n<li><code>自动安装 peers</code></li>\n<li><code>管理 Node.js 版本</code></li>\n</ol>\n<p><strong>yarn 比 pnpm 多了零安装功能</strong></p>\n<div style=\"display:flex;flex-direction:row; flex-wrap:wrap;align-items: flex-start;\">\n<!-- <img src=\"http://t-blog-images.aijs.top/img/202302111146004.webp\" style=\"width:400px;max-width:100%\" /> -->\n<img src=\"http://t-blog-images.aijs.top/img/202302111149828.webp\" style=\"width:400px;max-width:100%\" />\n<img src=\"http://t-blog-images.aijs.top/img/202302111146143.webp\" style=\"width:400px;max-width:100%\" />\n</div>\n\n<h3 id=\"pnpm-vs-yarn-vs-npm\"><a href=\"#pnpm-vs-yarn-vs-npm\" class=\"headerlink\" title=\"pnpm vs yarn vs npm\"></a>pnpm vs yarn vs npm</h3><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">pnpm</th>\n<th>Yarn</th>\n<th>npm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">工作空间支持（monorepo）</td>\n<td align=\"left\">✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td align=\"left\">隔离的 node_modules</td>\n<td align=\"left\">✔️ - 默认</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td align=\"left\">提升的 node_modules</td>\n<td align=\"left\">✔️</td>\n<td>✔️</td>\n<td>✔️ - 默认</td>\n</tr>\n<tr>\n<td align=\"left\">自动安装 peers</td>\n<td align=\"left\">✔️ - 通过 auto-install-peers&#x3D;true</td>\n<td>❌</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td align=\"left\">Plug’n’Play 安装策略</td>\n<td align=\"left\">✔️</td>\n<td>✔️ - 默认</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">零安装</td>\n<td align=\"left\">❌</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">修补依赖项</td>\n<td align=\"left\">✔️</td>\n<td>✔️</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">管理 Node.js 版本</td>\n<td align=\"left\">✔️ - <code>pnpm env &lt;cmd&gt;</code></td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">有锁文件</td>\n<td align=\"left\">✔️ - pnpm-lock.yaml</td>\n<td>✔️ - yarn.lock</td>\n<td>✔️ - package-lock.json</td>\n</tr>\n<tr>\n<td align=\"left\">支持覆盖</td>\n<td align=\"left\">✔️</td>\n<td>✔️ - 通过 resolutions</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td align=\"left\">内容可寻址存储</td>\n<td align=\"left\">✔️ - 链接形式</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">动态包执行(不安装，仅执行)</td>\n<td align=\"left\">✔️ - 通过 pnpm dlx <a href=\"https://pnpm.io/zh/cli/dlx\" target=\"_blank\" >见</a></td>\n<td>✔️ - 通过 yarn dlx</td>\n<td>✔️ - 通过 npx</td>\n</tr>\n<tr>\n<td align=\"left\">Side-effects cache</td>\n<td align=\"left\">✔️</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td align=\"left\">罗列许可</td>\n<td align=\"left\">✔️ - Via <code>pnpm licenses list</code> Added in: v7.17.0</td>\n<td>✔️ - Via a plugin</td>\n<td>❌</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://pnpm.io/zh/feature-comparison\" target=\"_blank\" >pnpm yarn npm 功能比较</a></p>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><h3 id=\"零安装-yarn-独有\"><a href=\"#零安装-yarn-独有\" class=\"headerlink\" title=\"零安装(yarn 独有)\"></a>零安装(yarn 独有)</h3><ol>\n<li>零安装将缓存存储在您项目目录中的.yarn 文件夹中,</li>\n<li>当使用 yarn 或 yarn add package 等命令时， Yarn 将创建一个 .pnp.cjs 文件, 该文件包含项目包的依赖关系层次结构,因此，我们几乎可以在零时间访问它们</li>\n</ol>\n<h3 id=\"Plug’n’Playan-安装策略\"><a href=\"#Plug’n’Playan-安装策略\" class=\"headerlink\" title=\"Plug’n’Playan 安装策略\"></a>Plug’n’Playan 安装策略</h3><p><a href=\"https://juejin.cn/post/7136896031614042125\" target=\"_blank\" >见</a><br><a href=\"https://yarnpkg.com/features/pnp\" target=\"_blank\" >见</a></p>\n<p>PnP 主要是为了解决当前依赖管理方式 安装依赖，引用依赖效率低下的问题</p>\n<h3 id=\"软链接-x2F-硬链接\"><a href=\"#软链接-x2F-硬链接\" class=\"headerlink\" title=\"软链接&#x2F;硬链接\"></a>软链接&#x2F;硬链接</h3><p>首先区分拷贝和共享的区别：</p>\n<pre><code>1. 拷贝：是建立多个副本，一个副本的修改不会影响另一个。\n2. 共享：是通过链接的方式建立联系，只会存在一个真正的文件，任何改变对其他用户可见。\n</code></pre>\n<p>linux 文件链接分为两种：一种被称为硬链接；另一种为软链接。</p>\n<p>1）创建硬链接的 shell 命令：<code>ln -d</code>, <strong>默认状态下（ln 命令不带任何选项），ln 命令产生硬链接。</strong></p>\n<p>硬链接是指在 linux 中，多个文件名指向同一个 i 节点（索引节点）。<code>它允许一个文件拥有多个有效路径名，防止用户“误删”，即文件真正删除的条件是与之相关的所有硬链接文件均被删除</code></p>\n<p>2）符号链接的 shell 命令：<code>ln -s</code></p>\n<p>符号链接也叫软链接，类似 windows 的快捷方式，是一个特殊的文本文件（LINK 类型），里面包含所链接的文件的位置信息。<code>只有文件的真正拥有者才有文件索引节点的指针，其他人只有路径名，这也就意味着只有文件的拥有者才拥有文件的修改权限，其他人只有只读权限</code></p>\n<h3 id=\"side-effects-cache\"><a href=\"#side-effects-cache\" class=\"headerlink\" title=\"side-effects-cache\"></a>side-effects-cache</h3><ol>\n<li>会让 <code>preinstall</code> 和 <code>postinstall</code> 两个脚本或 hook 执行的结果缓存，这样做会大大<code>减少（非首次）pnpm install 执行的时间</code>。</li>\n<li>pnpm 本来也以缓存下载结果，加速包下载而著称 <a href=\"https://juejin.cn/post/7093061981254451231\" target=\"_blank\" >见</a></li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.php.cn/js-tutorial-494774.html\" target=\"_blank\" >JavaScript 包管理器比较：Npm vs Yarn vs Pnpm</a></p>\n<p><a href=\"https://juejin.cn/post/7093061981254451231\" target=\"_blank\" >pnpm-v7 正式发布！最大变化：默认开启 side-effects-cache</a></p>\n<p><a href=\"https://juejin.cn/post/6931001022982651918\" target=\"_blank\" >shell 编程之软硬链接 ln</a></p>\n","text":"npm用 node 版本管理工具把 node 版本降到 4，那 npm 版本就是 2.x 了。 执行 npm init， npm install express，可以看到 node_modules 目录如下：可以看到，npm2 的 node_modules 是嵌套的。 优点:就是...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":26,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":20,"path":"api/tags/工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#npm\"><span class=\"toc-text\">npm</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">缺点：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cnpm\"><span class=\"toc-text\">cnpm</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yarn\"><span class=\"toc-text\">yarn</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%88%9D%E8%A1%B7-%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3-npm-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">项目初衷: 为了解决 npm 存在的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yarn2-vs-yarn1\"><span class=\"toc-text\">yarn2 vs yarn1</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pnmp\"><span class=\"toc-text\">pnmp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%88%9D%E8%A1%B7-%E8%8A%82%E7%BA%A6%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%B9%B6%E6%8F%90%E5%8D%87%E5%AE%89%E8%A3%85%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">项目初衷: 节约磁盘空间并提升安装速度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E6%8E%A5%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">链接寻址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%89%81%E5%B9%B3%E5%8C%96%E7%9A%84-node-modules\"><span class=\"toc-text\">非扁平化的 node_modules</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pnpm-vs-yarn\"><span class=\"toc-text\">pnpm vs yarn</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pnpm-vs-yarn-vs-npm\"><span class=\"toc-text\">pnpm vs yarn vs npm</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">术语</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E5%AE%89%E8%A3%85-yarn-%E7%8B%AC%E6%9C%89\"><span class=\"toc-text\">零安装(yarn 独有)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Plug%E2%80%99n%E2%80%99Playan-%E5%AE%89%E8%A3%85%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">Plug’n’Playan 安装策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E9%93%BE%E6%8E%A5-x2F-%E7%A1%AC%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">软链接&#x2F;硬链接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#side-effects-cache\"><span class=\"toc-text\">side-effects-cache</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"常聊的存储","uid":"abe1fdd233c62a53808b3cc396b5a093","slug":"2023-02-11站点存储","date":"2023-02-11T14:52:27.000Z","updated":"2023-05-15T13:17:32.976Z","comments":true,"path":"api/articles/2023-02-11站点存储.json","keywords":null,"cover":null,"text":"打开思维定式只要能存储，就关联起来，不要局限于 cookie，localStorage，sessionStorage，indexDB web 相关的cookie&#x2F;cookieStorecookie cookieStore localStorage，sessionStor...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"博客页面/源码分离","uid":"b615acafbb8ee4433c2f5fdfa0424a84","slug":"2023-02-09hexo","date":"2023-02-09T15:20:55.000Z","updated":"2023-02-20T21:20:56.487Z","comments":true,"path":"api/articles/2023-02-09hexo.json","keywords":null,"cover":[],"text":"背景源码&#x2F;页面放一起暴露，太不安全 创建新的仓库tech-blog.io 更改 hexo 配置# _config.yml deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;841660202&#x2F;t...","link":"","photos":[],"count_time":{"symbolsCount":307,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":4,"path":"api/tags/hexo.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}