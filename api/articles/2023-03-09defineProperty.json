{"title":"Object.defineProperty","uid":"547eb37eabbf2632d492b2d3c42b55d1","slug":"2023-03-09defineProperty","date":"2023-03-09T07:09:55.000Z","updated":"2023-03-09T15:11:24.967Z","comments":true,"path":"api/articles/2023-03-09defineProperty.json","keywords":null,"cover":null,"content":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>Object.defineProperty() 方法会<code>直接在一个对象上定义一个新属性</code>，或者<code>修改一个对象的现有属性</code>，<code>并返回此对象</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 语法\nObject.defineProperty(obj, prop, descriptor);</code></pre>\n\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>为了精确地添加或修改对象的属性</p>\n<p><strong>赋值操作</strong></p>\n<ol>\n<li>通过赋值操作添加的普通属性是</li>\n<li>可枚举的，在枚举对象属性时会被枚举到（for…in 或 Object.keys 方法），</li>\n<li>可改变这些属性的值，</li>\n<li>可以删除这些属性。</li>\n</ol>\n<p><strong>Object.defineProperty</strong><br>这个方法允许修改默认的额外选项（或配置）。默认情况下，使用 Object.defineProperty() 添加的属性值是不可修改（immutable）的。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><h3 id=\"数据描述符和存取描述符\"><a href=\"#数据描述符和存取描述符\" class=\"headerlink\" title=\"数据描述符和存取描述符\"></a>数据描述符和存取描述符</h3><p>对象里目前存在的属性描述符有两种主要形式：<code>数据描述符</code>和<code>存取描述符</code>。</p>\n<ol>\n<li><code>数据描述符</code>：是一个具有值的属性，该值可以是可写的，也可以是不可写的。</li>\n<li><code>存取描述符</code>：是由 getter 函数和 setter 函数所描述的属性。一个描述符只能是这两者其中之一；不能同时是两者</li>\n</ol>\n<h3 id=\"描述符默认值\"><a href=\"#描述符默认值\" class=\"headerlink\" title=\"描述符默认值\"></a>描述符默认值</h3><ol>\n<li>拥有布尔值的键 configurable、enumerable 和 writable 的默认值都是 false。</li>\n<li>属性值和函数的键 value、get 和 set 字段的默认值为 undefined。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>value</th>\n<th>writable</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据描述符(value&#x2F;writable)</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n</tr>\n<tr>\n<td>存取描述符(get&#x2F;set)</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>undefined</td>\n<td>false</td>\n<td>undefined</td>\n<td>undefined</td>\n</tr>\n</tbody></table>\n<p>这些选项不一定是自身属性，也要考虑继承来的属性。为了确认保留这些默认值，在设置之前，可能要冻结 <code>Object.prototype</code>，明确指定所有的选项，或者通过 <code>Object.create(null)</code> 将 <code>Object.prototype.__proto__</code> 属性指向 <code>null</code></p>\n<h2 id=\"Object-defineProperties\"><a href=\"#Object-defineProperties\" class=\"headerlink\" title=\"Object.defineProperties\"></a>Object.defineProperties</h2><p>Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 语法\nObject.defineProperties(obj, props);</code></pre>\n\n<p><strong>这里需要注意的是：props 是一个对象，而不是一个数组</strong></p>\n<h2 id=\"Object-defineProperties-实现原理\"><a href=\"#Object-defineProperties-实现原理\" class=\"headerlink\" title=\"Object.defineProperties 实现原理\"></a>Object.defineProperties 实现原理</h2><p><code>Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象</code><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties#polyfill\" target=\"_blank\" >见</a></p>\n<ol>\n<li>校验传入的第一个参数需要是对象</li>\n<li>传入的第二个参数，先转为对象，然后处理成描述符</li>\n<li>遍历，将描述符添加到第一个参数对象上</li>\n<li>返回原对象</li>\n</ol>\n<details class=\"custom-details\">\n<summary>实现原理源代码</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function defineProperties(obj, properties) &#123;\n  function convertToDescriptor(desc) &#123;\n    &#x2F;&#x2F; 是否有这个属性\n    function hasProperty(obj, prop) &#123;\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    &#125;\n    &#x2F;&#x2F; 是否可以被调用\n    function isCallable(v) &#123;\n      &#x2F;&#x2F; NB: modify as necessary if other values than functions are callable.\n      return typeof v &#x3D;&#x3D;&#x3D; &quot;function&quot;;\n    &#125;\n    &#x2F;&#x2F; 基本数据类型\n    if (typeof desc !&#x3D;&#x3D; &quot;object&quot; || desc &#x3D;&#x3D;&#x3D; null) throw new TypeError(&quot;bad desc&quot;);\n\n    var d &#x3D; &#123;&#125;;\n\n    &#x2F;*数据描述：可枚举、可配置、值、可改写*&#x2F;\n    if (hasProperty(desc, &quot;enumerable&quot;)) d.enumerable &#x3D; !!desc.enumerable;\n    if (hasProperty(desc, &quot;configurable&quot;)) d.configurable &#x3D; !!desc.configurable;\n    if (hasProperty(desc, &quot;value&quot;)) d.value &#x3D; desc.value;\n    if (hasProperty(desc, &quot;writable&quot;)) d.writable &#x3D; !!desc.writable;\n\n    &#x2F;*存储描述 *&#x2F;\n    function storeDesc(desc, key) &#123;\n      var g &#x3D; desc[key];\n      if (!isCallable(g) &amp;&amp; typeof g !&#x3D;&#x3D; &quot;undefined&quot;) throw new TypeError(&#96;bad $&#123;key&#125;&#96;);\n      d[key] &#x3D; g;\n    &#125;\n    &#x2F;&#x2F; 不再进一步封装\n    if (hasProperty(desc, &quot;get&quot;)) storeDesc(desc, &quot;get&quot;);\n    if (hasProperty(desc, &quot;set&quot;)) storeDesc(desc, &quot;set&quot;);\n\n    &#x2F;&#x2F; &#x2F;&#x2F; 如果有get，get需要是个函数\n    &#x2F;&#x2F; if (hasProperty(desc, &quot;get&quot;)) &#123;\n    &#x2F;&#x2F;   var g &#x3D; desc.get;\n    &#x2F;&#x2F;   if (!isCallable(g) &amp;&amp; typeof g !&#x3D;&#x3D; &quot;undefined&quot;) throw new TypeError(&quot;bad get&quot;);\n    &#x2F;&#x2F;   d.get &#x3D; g;\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; &#x2F;&#x2F; 如果有set，set需要是个函数\n    &#x2F;&#x2F; if (hasProperty(desc, &quot;set&quot;)) &#123;\n    &#x2F;&#x2F;   var s &#x3D; desc.set;\n    &#x2F;&#x2F;   if (!isCallable(s) &amp;&amp; typeof s !&#x3D;&#x3D; &quot;undefined&quot;) throw new TypeError(&quot;bad set&quot;);\n    &#x2F;&#x2F;   d.set &#x3D; s;\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; 描述符冲突\n    &#x2F;&#x2F; @link https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Object&#x2F;defineProperty#:~:text&#x3D;%E4%B8%BA%20undefined%E3%80%82-,%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%8F%AF%E6%8B%A5%E6%9C%89%E7%9A%84%E9%94%AE%E5%80%BC,-configurable\n    &#x2F;&#x2F; 1. 如果一个描述符不具有 value、writable、get 和 set 中的任意一个键，那么它将被认为是一个数据描述符。\n    &#x2F;&#x2F; 2. 如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。\n    if ((&quot;get&quot; in d || &quot;set&quot; in d) &amp;&amp; (&quot;value&quot; in d || &quot;writable&quot; in d)) throw new TypeError(&quot;identity-confused descriptor&quot;);\n\n    return d;\n  &#125;\n  &#x2F;&#x2F; 被扩展的必须是对象\n  &#x2F;&#x2F; 会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象\n  if (typeof obj !&#x3D;&#x3D; &quot;object&quot; || obj &#x3D;&#x3D;&#x3D; null) throw new TypeError(&quot;bad obj&quot;);\n  &#x2F;&#x2F; 转化成对象, Object是一个构造函数\n  properties &#x3D; Object(properties);\n  &#x2F;&#x2F; 遍历key\n  var keys &#x3D; Object.keys(properties);\n  var descs &#x3D; [];\n  &#x2F;&#x2F; &#x2F;&#x2F; 先转化成二维数组\n  &#x2F;&#x2F; for (var i &#x3D; 0; i &lt; keys.length; i++) descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);\n  &#x2F;&#x2F; &#x2F;&#x2F; 然后一个一个添加语法： Object.defineProperty(obj, prop, descriptor)\n  &#x2F;&#x2F; for (var i &#x3D; 0; i &lt; descs.length; i++) Object.defineProperty(obj, descs[i][0], descs[i][1]);\n\n  for (var i &#x3D; 0; i &lt; keys.length; i++) &#123;\n    Object.defineProperty(obj, keys[i], convertToDescriptor(properties[keys[i]]));\n  &#125;\n\n  &#x2F;&#x2F; 返回原对象\n  return obj;\n&#125;</code></pre>\n\n</p>\n</details>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>上面代码有行代码<code>properties = Object(properties);</code></p>\n<p><strong>Object 构造函数将给定的值包装为一个新对象。</strong></p>\n<ol>\n<li>如果给定的值是 <code>null</code> 或 <code>undefined</code>, 它会创建并返回一个空对象。</li>\n<li><code>否则，它将返回一个和给定的值相对应的类型的对象</code>。</li>\n<li><code>如果给定值是一个已经存在的对象，则会返回这个已经存在的值（相同地址）</code>。</li>\n<li><code>在非构造函数上下文中调用时， Object 和 new Object()表现一致</code></li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 如果给定的值是 &#96;null&#96; 或 &#96;undefined&#96;, 它会创建并返回一个空对象。\nObject(null);\n&#x2F;&#x2F; &#123;&#125;\nObject(undefined);\n&#x2F;&#x2F; &#123;&#125;\n&#x2F;&#x2F; 2. &#96;否则，它将返回一个和给定的值相对应的类型的对象&#96;。\nObject(true);\n&#x2F;&#x2F; Boolean &#123;true&#125;\nObject(1);\n&#x2F;&#x2F; Number &#123;1&#125;\nObject(&quot;1212&quot;);\n&#x2F;&#x2F; String &#123;&#39;1212&#39;&#125;\n&#x2F;&#x2F; 3. &#96;如果给定值是一个已经存在的对象，则会返回这个已经存在的值（相同地址）&#96;。\nvar a &#x3D; &#123; name: 1 &#125;;\nObject(a);\n&#x2F;&#x2F; &#123;name: 1&#125;\n\nvar a &#x3D; [1, 2, 3];\nObject(a);\n&#x2F;&#x2F; [1, 2, 3]</code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#:~:text=%E4%B8%BA%20undefined%E3%80%82-,%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%8F%AF%E6%8B%A5%E6%9C%89%E7%9A%84%E9%94%AE%E5%80%BC,-configurable\" target=\"_blank\" >MDN</a></li>\n<li><a href=\"/#/post/2022-07-04js\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-04js</a></li>\n</ol>\n","text":"是什么Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象 &#x2F;&#x2F; 语法 Object.defineProperty(obj, prop, descriptor); 动机为了精确地添加或修...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%9C%BA\"><span class=\"toc-text\">动机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E5%AD%98%E5%8F%96%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\">数据描述符和存取描述符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0%E7%AC%A6%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">描述符默认值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-defineProperties\"><span class=\"toc-text\">Object.defineProperties</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-defineProperties-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Object.defineProperties 实现原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object\"><span class=\"toc-text\">Object</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React StrictMode","uid":"072284d75a6848b3baf49e71f53b2857","slug":"2023-03-10babel","date":"2023-03-10T09:14:04.000Z","updated":"2023-03-13T13:39:28.233Z","comments":true,"path":"api/articles/2023-03-10babel.json","keywords":null,"cover":[],"text":"动机 React StrictMode 的源码长什么样子？ 执行过成是什么？为什么是标签，难道 React 内部实现了这个组件？ 查资料搜到的资料都是官网文档 和 React 官方博客 18 版本更新内容 的搬运 翻源码clone react 源码， vscode 搜索一搜 😓，...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"React","slug":"React","count":39,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":33,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"vue vs react","uid":"fa1ca6ffeb14e68321654370d8f81adc","slug":"2023-03-09vue_vs_react","date":"2023-03-09T06:12:58.000Z","updated":"2023-03-09T15:11:24.968Z","comments":true,"path":"api/articles/2023-03-09vue_vs_react.json","keywords":null,"cover":null,"text":"vue 对比 react动机数据驱动，提升开发体验，避免对 dom 的直接操作（原生&#x2F;jquery） 发展上vue 由借鉴 react 和 angular，现在更多的是追逐着 react 的脚步 声明周期的重命名 新的支持：hook、suspense、Teleport ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}