{"title":"云原生 系统学习shell脚本","uid":"feba4ef9a66046c06860005632a037b6","slug":"2022-11-14shell语法","date":"2022-11-14T08:20:26.000Z","updated":"2022-12-22T13:36:21.797Z","comments":true,"path":"api/articles/2022-11-14shell语法.json","keywords":null,"cover":"https://img1.baidu.com/it/u=2053451129,2889213081&fm=253&fmt=auto&app=138&f=PNG?w=640&h=320","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"#!\"></a><code>#!</code></h2><p><code>#!</code> 它告诉系统这个脚本需要什么解释器来执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh，它同样也可以改为 #!&#x2F;bin&#x2F;bash</code></pre>\n\n<p>之前因为不晓得啥意思，一直记不住这个东西。为此还写个 vscode sippets 来自动生成 😓</p>\n<h2 id=\"执行方式\"><a href=\"#执行方式\" class=\"headerlink\" title=\"执行方式\"></a>执行方式</h2><ul>\n<li><code>bash</code> 文件</li>\n<li><code>sh</code> 文件</li>\n<li><code>chmod +x</code> 文件路径（相对&#x2F;绝对&#x2F;文件执行运行）,现将文件改为可执行文件</li>\n<li><code>source</code> 文件</li>\n<li><code>.</code> 文件</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>命名：命名只能使用英文字母，数字和下划线，首个字符不能以数字开头（通用标准：非关键字、非标点符号、非空格）</li>\n<li>使用：$variable_name 或 ${variable_name}</li>\n<li>只读：<code>readonly</code> variable_name</li>\n<li>删除：<code>unset</code> variable_name</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h3><ul>\n<li>单引号里的任何字符都会<code>原样输出</code></li>\n<li>单引号字符串中的变量是<code>无效的</code></li>\n<li>单引号字串中<code>不能出现单独一个的单引号</code>（对单引号使用转义符后也不行）</li>\n</ul>\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><ul>\n<li>双引号里可以有变量</li>\n<li>双引号里可以有转义字符</li>\n</ul>\n<h3 id=\"反引号\"><a href=\"#反引号\" class=\"headerlink\" title=\"反引号\"></a>反引号</h3><h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">&lt;!-- $&#123; 导致 hexo 无法编译,用md承载 --&gt;\n\n- &#96;获取长度&#96; 变量为数组时，&#96;$&#123;#string&#125;&#96; 等价于 &#96;$&#123;#string[0]&#125;&#96;\n- &#96;提取子串&#96; 从字符串第 2 个字符开始截取 4 个字符 &#96;$&#123;string:1:4&#125;&#96;\n- &#96;查找子串&#96; 查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)： &#96;expr index &quot;$string&quot; io&#96;</code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">- &#96;初始化语法&#96;： 1. 数组名&#x3D;(值 1 值 2 ... 值 n) 数组元素用&quot;空格&#x2F;回车&quot;符号分割开 2.元素单独赋值\n- &#96;读取单个元素&#96;：&#96;valuen&#x3D;$&#123;array_name[n]&#125;&#96; 下标\n- &#96;读取全部元素&#96;：&#96;valuen&#x3D;$&#123;array_name[@]&#125;&#96; @符号\n- &#96;获取数组的长度&#96;：&#96;$&#123;#array_name[@]&#125;&#96; &#96;$&#123;#array_name[*]&#125;&#96;,单元素长度&#96;$&#123;#array_name[n]&#125;&#96;\n- &#96;关联数组&#96; 使用任意的字符串、或者整数作为下标&#96;declare -A array_name&#96;</code></pre>\n\n<h2 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h2><ul>\n<li><code>$#</code> 传递到脚本的参数个数</li>\n<li><code>$*</code> 以<code>一个</code>单字符串显示所有向脚本传递的参数。如”<code>$*</code>“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</li>\n<li><code>$@</code> 多个参数，与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</li>\n</ul>\n<hr/>\n\n<ul>\n<li><code>$$</code> 脚本运行的当前进程 ID 号</li>\n<li><code>$!</code> 后台运行的最后一个进程的 ID 号</li>\n<li><code>$-</code> 显示 Shell 使用的当前选项，与 set 命令功能相同。</li>\n<li><code>$?</code> 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</li>\n</ul>\n<h2 id=\"基本运算\"><a href=\"#基本运算\" class=\"headerlink\" title=\"基本运算\"></a>基本运算</h2><h3 id=\"算数运算\"><a href=\"#算数运算\" class=\"headerlink\" title=\"算数运算\"></a>算数运算</h3><p><strong>原生 bash 不支持简单的数学运算，借助<code>expr</code>工具实现</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\nval&#x3D;&#96;expr 2 + 2&#96;\necho &quot;两数之和为 : $val&quot;</code></pre>\n\n<ul>\n<li><code>+</code> 加法 <code>expr $a + $b</code> 结果为 30。</li>\n<li><code>-</code> 减法 <code>expr $a - $b</code> 结果为 -10。</li>\n<li><code>*</code> 乘法 <code>expr $a \\* $b</code> 结果为 200。 <strong>乘号(<code>*</code>)前边必须加反斜杠(<code>\\</code>)才能实现乘法运算；</strong></li>\n<li><code>/</code> 除法 <code>expr $b / $a</code> 结果为 2。</li>\n<li><code>%</code> 取余 <code>expr $b % $a</code> 结果为 0。</li>\n<li><code>=</code> 赋值 a&#x3D;$b 把变量 b 的值赋给 a。</li>\n<li><code>==</code> 相等。用于比较两个数字，相同则返回 true。 [ $a &#x3D;&#x3D; $b ] 返回 false。</li>\n<li><code>!=</code> 不相等。用于比较两个数字，不相同则返回 true。 [ $a !&#x3D; $b ] 返回 true。</li>\n</ul>\n<p>注意：<strong>条件表达式要放在方括号之间，并且要有空格</strong>，例如: [$a&#x3D;&#x3D;$b] 是错误的，必须写成 [ $a &#x3D;&#x3D; $b ]。</p>\n<h3 id=\"关系运算\"><a href=\"#关系运算\" class=\"headerlink\" title=\"关系运算\"></a>关系运算</h3><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</strong></p>\n<ul>\n<li><code>-eq</code> 检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 false。</li>\n<li><code>-ne</code> 检测两个数是否不相等，不相等返回 true。 [ $a -ne $b ] 返回 true。</li>\n<li><code>-gt</code> 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ] 返回 false。</li>\n<li><code>-lt</code> 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ] 返回 true。</li>\n<li><code>-ge</code> 检测左边的数是否大于等于右边的，如果是，则返回 true。 [ $a -ge $b ] 返回 false。</li>\n<li><code>-le</code> 检测左边的数是否小于等于右边的，如果是，则返回 true。 [ $a -le $b ] 返回 true。</li>\n</ul>\n<h3 id=\"布尔运算\"><a href=\"#布尔运算\" class=\"headerlink\" title=\"布尔运算\"></a>布尔运算</h3><ul>\n<li><code>!</code> 非运算，表达式为 true 则返回 false，否则返回 true。 [ ! false ] 返回 true。</li>\n<li><code>-o</code> 或运算，有一个表达式为 true 则返回 true。 [ $a -lt 20 -o $b -gt 100 ] 返回 true。</li>\n<li><code>-a</code> 与运算，两个表达式都为 true 才返回 true。 [ $a -lt 20 -a $b -gt 100 ] 返回 false。</li>\n</ul>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><p><strong>这里效果上同布尔运算 ， 用了两层括号</strong></p>\n<ul>\n<li><code>&amp;&amp;</code> 逻辑的 AND [[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false</li>\n<li><code>||</code> 逻辑的 OR [[$a -lt 100 || $b -gt 100]] 返回 true</li>\n</ul>\n<h3 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h3><ul>\n<li><code>=</code> 检测两个字符串是否相等，相等返回 true。 [ $a &#x3D; $b ] 返回 false。</li>\n<li><code>!=</code> 检测两个字符串是否不相等，不相等返回 true。 [ $a !&#x3D; $b ] 返回 true。</li>\n<li><code>-z</code> 检测字符串长度是否为 0，为 0 返回 true。 [ -z $a ] 返回 false。</li>\n<li><code>-n</code> 检测字符串长度是否不为 0，不为 0 返回 true。 [ -n “$a” ] 返回 true。</li>\n<li><code>$</code> 检测字符串是否不为空，不为空返回 true。 [ $a ] 返回 true。</li>\n</ul>\n<h3 id=\"文件测试运算\"><a href=\"#文件测试运算\" class=\"headerlink\" title=\"文件测试运算\"></a>文件测试运算</h3><ul>\n<li><code>-d file</code> 检测文件是否是目录，如果是，则返回 true。 [ -d $file ] 返回 false。</li>\n<li><code>-f file</code> 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 [ -f $file ] 返回 true。</li>\n<li><code>-r file</code> 检测文件是否可读，如果是，则返回 true。 [ -r $file ] 返回 true。</li>\n<li><code>-w file</code> 检测文件是否可写，如果是，则返回 true。 [ -w $file ] 返回 true。</li>\n<li><code>-x file</code> 检测文件是否可执行，如果是，则返回 true。 [ -x $file ] 返回 true。</li>\n<li><code>-s file</code> 检测文件是否为空（文件大小是否大于 0），不为空返回 true。 [ -s $file ] 返回 true。</li>\n<li><code>-e file</code> 检测文件（包括目录）是否存在，如果是，则返回 true。 [ -e $file ] 返回 true。</li>\n</ul>\n<hr/>\n\n<p>以下不晓得啥东西</p>\n<ul>\n<li><code>-b file</code> 检测文件是否是块设备文件，如果是，则返回 true。 [ -b $file ] 返回 false。</li>\n<li><code>-c file</code> 检测文件是否是字符设备文件，如果是，则返回 true。 [ -c $file ] 返回 false。</li>\n<li><code>-g file</code> 检测文件是否设置了 SGID 位，如果是，则返回 true。 [ -g $file ] 返回 false。</li>\n<li><code>-k file</code> 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 [ -k $file ] 返回 false。</li>\n<li><code>-u file</code> 检测文件是否设置了 SUID 位，如果是，则返回 true。 [ -u $file ] 返回 false。</li>\n<li><code>-p file</code> 检测文件是否是有名管道，如果是，则返回 true。 [ -p $file ] 返回 false。</li>\n</ul>\n<h2 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h2><h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><ul>\n<li><code>％s</code> 输出一个字符串</li>\n<li><code>％d</code> 整型输出</li>\n<li><code>％c</code> 输出一个字符</li>\n<li><code>％f</code> 输出实数，以小数形式输出</li>\n<li><code>%-10s</code> 指一个宽度为 10 个字符（<code>-</code> 表示左对齐，<code>默认</code>：右对齐）</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nprintf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543\nprintf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876</code></pre>\n\n<h3 id=\"转译\"><a href=\"#转译\" class=\"headerlink\" title=\"转译\"></a>转译</h3><ul>\n<li><code>\\a</code> 不换行</li>\n<li><code>\\b</code> 后退</li>\n<li><code>\\c</code> 抑制（不显示）输出结果中任何结尾的换行字符（只在%b 格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</li>\n<li><code>\\f</code> 换页（formfeed）</li>\n<li><code>\\n</code> 换行</li>\n<li><code>\\r</code> 回车（Carriage return）</li>\n<li><code>\\t</code> 水平制表符</li>\n<li><code>\\v</code> 垂直制表符</li>\n<li><code>\\\\</code> 一个字面上的反斜杠字符</li>\n</ul>\n<hr/>\n\n<p>不晓得什么意思</p>\n<ul>\n<li><code>\\ddd</code> 表示 1 到 3 位数八进制值的字符。仅在格式字符串中有效</li>\n<li><code>\\0ddd</code> 表示 1 到 3 位的八进制值字符</li>\n</ul>\n<h2 id=\"test-是命令\"><a href=\"#test-是命令\" class=\"headerlink\" title=\"test 是命令\"></a>test 是命令</h2><ul>\n<li>命令也能直接当脚本用 🤔</li>\n<li>这个 命令好像等价上文操作符中的<code>[]</code></li>\n</ul>\n<img src=\"http://t-blog-images.aijs.top/img/202211141816204.webp\" style=\"width:500px;max-width:100%\" />\n\n<h3 id=\"数值测试\"><a href=\"#数值测试\" class=\"headerlink\" title=\"数值测试\"></a>数值测试</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh\n\nnum1&#x3D;100\nnum2&#x3D;100\nif test $[num1] -eq $[num2]\nthen\n    echo &#39;两个数相等！&#39;\nelse\n    echo &#39;两个数不相等！&#39;\nfi</code></pre>\n\n<ul>\n<li><code>-eq</code> 等于则为真</li>\n<li><code>-ne</code> 不等于则为真</li>\n<li><code>-gt</code> 大于则为真</li>\n<li><code>-ge</code> 大于等于则为真</li>\n<li><code>-lt</code> 小于则为真</li>\n<li><code>-le</code> 小于等于则为真</li>\n</ul>\n<h3 id=\"字符串测试\"><a href=\"#字符串测试\" class=\"headerlink\" title=\"字符串测试\"></a>字符串测试</h3><p><code>=</code> 等于则为真<br><code>!=</code> 不相等则为真<br><code>-z</code> 字符串 字符串的长度为零则为真<br><code>-n</code> 字符串 字符串的长度不为零则为真</p>\n<h3 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h3><p><code>-e 文件名</code> 如果文件存在则为真<br><code>-r 文件名</code> 如果文件存在且可读则为真<br><code>-w 文件名</code> 如果文件存在且可写则为真<br><code>-x 文件名</code> 如果文件存在且可执行则为真<br><code>-s 文件名</code> 如果文件存在且至少有一个字符则为真<br><code>-d 文件名</code> 如果文件存在且为目录则为真<br><code>-f 文件名</code> 如果文件存在且为普通文件则为真<br><code>-c 文件名</code> 如果文件存在且为字符型特殊文件则为真<br><code>-b 文件名</code> 如果文件存在且为块特殊文件则为真</p>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><h3 id=\"if-…-then-else-if\"><a href=\"#if-…-then-else-if\" class=\"headerlink\" title=\"if ((…)) then else if\"></a>if ((…)) then else if</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># if else 的 [...] 判断语句中大于使用 -gt，小于使用 -lt。\n\nif [ &quot;$a&quot; -gt &quot;$b&quot; ]; then\n    ...\nfi\n# 如果使用 ((...)) 作为判断语句，大于和小于可以直接使用 &gt; 和 &lt;。\n\nif (( a &gt; b )); then\n    ...\nfi</code></pre>\n\n<h3 id=\"if-test\"><a href=\"#if-test\" class=\"headerlink\" title=\"if test\"></a>if test</h3><h3 id=\"for-in-do-done\"><a href=\"#for-in-do-done\" class=\"headerlink\" title=\"for in do done\"></a>for in do done</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\nfor str in This is a string\ndo\n    echo $str\ndone</code></pre>\n\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\nint&#x3D;1\nwhile(( $int&lt;&#x3D;5 ))\ndo\n    echo $int\n    let &quot;int++&quot;\n    # let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，\n    # 变量计算中不需要加上 $ 来表示变量。\n    # 如果表达式中包含了空格或其他特殊字符，则必须引起来。\ndone</code></pre>\n\n<h3 id=\"无限循环\"><a href=\"#无限循环\" class=\"headerlink\" title=\"无限循环\"></a>无限循环</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 无限循环语法格式：\nwhile :\ndo\n    command\ndone\n\n# 或者\nwhile true\ndo\n    command\ndone\n\n\n# TODO: 上面这两句有点奇怪，：代表 true吗？\n\n# 或者\nfor (( ; ; ))</code></pre>\n\n<h3 id=\"util\"><a href=\"#util\" class=\"headerlink\" title=\"util\"></a>util</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。\n# 执行循环语句，直到满足条件停下来\nuntil condition\ndo\n    command\ndone</code></pre>\n\n<h3 id=\"case-…esac\"><a href=\"#case-…esac\" class=\"headerlink\" title=\"case …esac\"></a>case …esac</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n# case ... esac 为多选择语句，与其他语言中的 switch ... case 语句类似，是一种多分支选择结构，\n\n# 每个 case 分支用右圆括号开始\n# 用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。\n# 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。\n\n# case ... esac 语法格式如下：\n\n# *) 可以理解为default语句\n# 如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。\n\ncase 值 in\n模式1)\n    command1\n    command2\n    ...\n    commandN\n    ;;\n模式2)\n    command1\n    command2\n    ...\n    commandN\n    ;;\nesac</code></pre>\n\n<h3 id=\"break-x2F-continue\"><a href=\"#break-x2F-continue\" class=\"headerlink\" title=\"break&#x2F;continue\"></a>break&#x2F;continue</h3><p>continue 命令与 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n[ function ] funname ()\n&#123;\n\n    action;\n\n    [return int;]\n\n&#125;\n\n# 1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。\n# 2、参数返回\n#   可以显示加：return 返回，\n#   如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255\n\n# 1. 函数返回值: 在调用该函数后通过 $? 来获得\n# 2. 先定义后使用，注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。\n# 3. 调用函数仅使用其函数名即可</code></pre>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li><code>$10</code> 不能获取第十个参数，获取第十个参数需要<code>$&#123;10&#125;</code>。<em>当 n&gt;&#x3D;10 时，需要使用${n}来获取参数</em></li>\n</ol>\n<ul>\n<li><code>$#</code> 传递到脚本或函数的参数个数</li>\n<li><code>$*</code> 以一个单字符串显示所有向脚本传递的参数</li>\n<li><code>$@</code> 与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。</li>\n<li><code>$$</code> 脚本运行的当前进程 ID 号</li>\n<li><code>$!</code> 后台运行的最后一个进程的 ID 号</li>\n<li><code>$-</code> 显示 Shell 使用的当前选项，与 set 命令功能相同。</li>\n<li><code>$?</code> 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</li>\n</ul>\n<h2 id=\"输入-x2F-输出重定向\"><a href=\"#输入-x2F-输出重定向\" class=\"headerlink\" title=\"输入&#x2F;输出重定向\"></a>输入&#x2F;输出重定向</h2><h3 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h3><ul>\n<li><code>command &gt; file</code> 将输出重定向到 file。</li>\n<li><code>command &gt;&gt; file</code> 将输出以追加的方式重定向到 file。</li>\n</ul>\n<h3 id=\"输入重定向\"><a href=\"#输入重定向\" class=\"headerlink\" title=\"输入重定向\"></a>输入重定向</h3><ul>\n<li><code>command &lt; file</code> 将输入重定向到 file。</li>\n<li><code>&lt;&lt; tag</code> 将开始标记 tag 和结束标记 tag 之间的内容作为输入。</li>\n</ul>\n<h3 id=\"测试无效的几个\"><a href=\"#测试无效的几个\" class=\"headerlink\" title=\"测试无效的几个\"></a>测试无效的几个</h3><ul>\n<li><code>n &gt; file</code> 将文件描述符为 n 的文件重定向到 file。</li>\n<li><code>n &gt;&gt; file</code> 将文件描述符为 n 的文件以追加的方式重定向到 file。</li>\n<li><code>n &gt;&amp; m</code> 将输出文件 m 和 n 合并。</li>\n<li><code>n &lt;&amp; m</code> 将输入文件 m 和 n 合并。</li>\n</ul>\n<h2 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h2><p>文件级连执行</p>\n<p><strong>var.sh</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\nw1&#x3D;&quot;world&quot;</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\n\n#使用 . 号来引用var.sh文件\n. .&#x2F;var.sh\n\n# 或者使用以下包含文件代码\n# source .&#x2F;var.sh\n\necho $w1\necho &quot;hello $w1&quot;</code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.runoob.com/linux/linux-shell-variable.html\" target=\"_blank\" >见</a></p>\n","text":"#!#! 它告诉系统这个脚本需要什么解释器来执行 #!&#x2F;bin&#x2F;sh，它同样也可以改为 #!&#x2F;bin&#x2F;bash 之前因为不晓得啥意思，一直记不住这个东西。为此还写个 vscode sippets 来自动生成 😓 执行方式 bash 文件 s...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"云原生","slug":"云原生","count":5,"path":"api/categories/云原生.json"}],"tags":[{"name":"云原生","slug":"云原生","count":5,"path":"api/tags/云原生.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">#!</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">执行方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">单引号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">双引号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">反引号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">参数传递</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">基本运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">算数运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">关系运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">布尔运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">逻辑运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">字符串运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">文件测试运算</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#printf\"><span class=\"toc-text\">printf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E8%AF%91\"><span class=\"toc-text\">转译</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#test-%E6%98%AF%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">test 是命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">数值测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">字符串测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">文件测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if-%E2%80%A6-then-else-if\"><span class=\"toc-text\">if ((…)) then else if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if-test\"><span class=\"toc-text\">if test</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for-in-do-done\"><span class=\"toc-text\">for in do done</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">无限循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#util\"><span class=\"toc-text\">util</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#case-%E2%80%A6esac\"><span class=\"toc-text\">case …esac</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#break-x2F-continue\"><span class=\"toc-text\">break&#x2F;continue</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5-x2F-%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">输入&#x2F;输出重定向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">输出重定向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">输入重定向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%97%A0%E6%95%88%E7%9A%84%E5%87%A0%E4%B8%AA\"><span class=\"toc-text\">测试无效的几个</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">文件包含</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Flutter 热更新 Fair","uid":"6a4942ee97deb4752e5ca5382eb30450","slug":"2022-11-17fair","date":"2022-11-17T05:44:35.000Z","updated":"2022-11-21T13:08:33.129Z","comments":true,"path":"api/articles/2022-11-17fair.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202211171351832.webp","text":"Fair 全称Flutter Over the Air 58 热更新https://github.com/wuba/fair 官方文档 Fair 是为 Flutter 设计的动态化框架，通过 Fair Compiler 工具对原生 Dart 源文件的自动转化，使项目获得动态更新 ...","link":"","photos":[],"count_time":{"symbolsCount":239,"symbolsTime":"1 mins."},"categories":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/categories/Flutter.json"}],"tags":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"云原生 系统学习vim","uid":"ecabbc2a042ed135e8c399618871b1ec","slug":"2022-11-14vim语法","date":"2022-11-14T06:05:35.000Z","updated":"2022-11-14T13:06:21.800Z","comments":true,"path":"api/articles/2022-11-14vim语法.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202211122058918.webp","text":"vim 键盘图见 单词u undo # 撤销 f follow # 向下 b back # 向上 i insert # 插入 c copy # 拷贝 n next # 下一 p paste # 粘贴 j join # 合并 r repeat # 重复 h hight # 顶部 m...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"云原生","slug":"云原生","count":5,"path":"api/categories/云原生.json"}],"tags":[{"name":"云原生","slug":"云原生","count":5,"path":"api/tags/云原生.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}