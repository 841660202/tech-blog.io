{"title":"前端基础-跨域问题","uid":"097419cee069b6e2fdfe8a3b19f9ef54","slug":"2022-05-09cors","date":"2022-05-09T13:30:47.000Z","updated":"2022-09-16T13:54:56.104Z","comments":true,"path":"api/articles/2022-05-09cors.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/20220509181853.webp","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>浏览器安全策略限制跨域访问</p>\n<p>内容安全策略是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p>\n<p>维基百科：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内容安全策略（英语：Content Security Policy，简称 CSP）是一种计算机安全标准，旨在防御跨站脚本、点击劫持等代码注入攻击，阻止恶意内容在受信网页环境中执行。这一标准是 W3C 网络应用安全工作组的候选推荐标准，被现代网页浏览器广泛支持</p></blockquote>\n<ol>\n<li>使用方式<br>为使 CSP 可用, 你需要配置你的网络服务器返回 Content-Security-Policy，或者在 HTML <meta> 元素种也可配置该策略, 例如：</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta\n  http-equiv&#x3D;&quot;Content-Security-Policy&quot;\n  content&#x3D;&quot;default-src &#39;self&#39;; img-src https:&#x2F;&#x2F;*; child-src &#39;none&#39;;&quot;\n&#x2F;&gt;</code></pre>\n\n<ol start=\"2\">\n<li>配置示例<br>（1）一个网站管理者想要所有内容均来自站点的同一个源 (不包括其子域名)</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">Content-Security-Policy: default-src &#39;self&#39;</code></pre>\n\n<p>（2）一个网站管理者允许内容来自信任的域名及其子域名 (域名不必须与 CSP 设置所在的域名相同)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Content-Security-Policy: default-src &#39;self&#39; *.trusted.com</code></pre>\n\n<p>（3）一个网站管理者允许网页应用的用户在他们自己的内容中包含来自任何源的图片, 但是限制音频或视频需从信任的资源提供者(获得)，所有脚本必须从特定主机服务器获取可信的代码。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Content-Security-Policy: default-src &#39;self&#39;;\nimg-src *;\nmedia-src media1.com media2.com; script-src userscripts.example.com</code></pre>\n\n<p>在这里，各种内容默认仅允许从文档所在的源获取, 但存在如下例外:</p>\n<p>图片可以从任何地方加载(注意 “*“ 通配符)。<br>多媒体文件仅允许从 media1.com 和 media2.com 加载(不允许从这些站点的子域名)。<br>可运行脚本仅允许来自于 userscripts.example.com。</p>\n<p>作者：菜鸡前端<br>链接：<a href=\"https://www.jianshu.com/p/a45924e99a6d\">https://www.jianshu.com/p/a45924e99a6d</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h2><h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ul>\n<li>脚本</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nlisten 80; # 监听的端⼝\n   add_header &#39;Access-Control-Allow-Origin&#39; &#39;$http_origin&#39; ;\n   add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39; ;\n   add_header &#39;Access-Control-Allow-Methods&#39; &#39;PUT,POST,GET,DELETE,OPTIONS&#39; ;\n   add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type,Content-Length,Authorization,Accept,X-Requested-With&#39; ;</code></pre>\n\n<ul>\n<li>实际操作</li>\n</ul>\n<p><img src=\"http://t-blog-images.aijs.top/img/20220509181853.webp\"></p>\n<h3 id=\"jsonp-方式-lt-动态-script-gt\"><a href=\"#jsonp-方式-lt-动态-script-gt\" class=\"headerlink\" title=\"jsonp 方式 &lt;动态 script&gt;\"></a>jsonp 方式 &lt;动态 script&gt;</h3><p>最经典的跨域⽅案 jsonp jsonp 本质上是⼀个 Hack，它利⽤ <code>&lt;script&gt;</code> 标签不受同源策略限制的特性进⾏跨域操作。</p>\n<p>jsonp 优点： 实现简单 兼容性⾮常好</p>\n<p>jsonp 的缺点：</p>\n<p>只⽀持 get 请求（因为<code> &lt;script&gt;</code> 标签只能 get）<br>有安全性问题，容易遭受 xss 攻击<br>需要服务端配合 jsonp 进⾏⼀定程度的改造</p>\n<p>jsonp 的实现：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function JSONP(&#123; url, params, callbackKey, callback &#125;) &#123;\n  &#x2F;&#x2F; 在参数⾥制定 callback 的名字\n  params &#x3D; params || &#123;&#125;;\n  params[callbackKey] &#x3D; &quot;callback&quot;;\n  &#x2F;&#x2F; 预留 callback\n  window.callback &#x3D; callback;\n  &#x2F;&#x2F; 拼接参数字符串\n  const paramKeys &#x3D; Object.keys(params);\n  const paramString &#x3D; paramKeys.map((key) &#x3D;&gt; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&#96;).join(&quot;&amp;&quot;);\n  &#x2F;&#x2F; 插⼊ DOM 元素\n  const script &#x3D; document.createElement(&quot;script&quot;);\n  script.setAttribute(&quot;src&quot;, &#96;$&#123;url&#125;?$&#123;paramString&#125;&#96;);\n  document.body.appendChild(script);\n&#125;\n\nJSONP(&#123;\n  url: &quot;http:&#x2F;&#x2F;s.weibo.com&#x2F;ajax&#x2F;jsonp&#x2F;suggestion&quot;,\n  params: &#123;\n    key: &quot;test&quot;,\n  &#125;,\n  callbackKey: &quot;callback&quot;,\n  callback(result) &#123;\n    console.log(result.data);\n  &#125;,\n&#125;);</code></pre>\n\n<p>jsonp 服务端改造</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var http &#x3D; require(&quot;http&quot;);\nvar urllib &#x3D; require(&quot;url&quot;);\n\nvar port &#x3D; 10011;\nvar data &#x3D; &#123; name: &quot;jifeng&quot;, company: &quot;tb&quot; &#125;;\n\nhttp\n  .createServer(function (req, res) &#123;\n    var params &#x3D; urllib.parse(req.url, true);\n    console.log(params);\n    if (params.query &amp;&amp; params.query.callback &#x2F;**对应客户端 *&#x2F;) &#123;\n      &#x2F;&#x2F;console.log(params.query.callback);\n      var str &#x3D; params.query.callback + &quot;(&quot; + JSON.stringify(data) + &quot;)&quot;; &#x2F;&#x2F;jsonp\n      res.end(str);\n    &#125; else &#123;\n      res.end(JSON.stringify(data)); &#x2F;&#x2F;普通的json\n    &#125;\n  &#125;)\n  .listen(port, function () &#123;\n    console.log(&quot;server is listening on port &quot; + port);\n  &#125;);</code></pre>\n\n<h3 id=\"服务端设置，类似-nginx\"><a href=\"#服务端设置，类似-nginx\" class=\"headerlink\" title=\"服务端设置，类似 nginx\"></a>服务端设置，类似 nginx</h3><p>cors 是⽬前主流的跨域解决⽅案，跨域资源共享(CORS) 是⼀种机制，它使⽤额外的 HTTP 头来告诉浏览器 让运⾏在⼀ 个 origin (domain) 上的 Web 应⽤被准许访问来⾃不同源服务器上的指定的资源。当⼀个资源从与该资源本身所在的服 务器不同的域、协议或端⼝请求⼀个资源时，资源会发起⼀个跨域 HTTP 请求。 如果你⽤ express，可以这样在后端设置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;CORS middleware\nvar allowCrossDomain &#x3D; function (req, res, next) &#123;\n  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;http:&#x2F;&#x2F;example.com&quot;);\n  res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,PUT,POST,DELETE&quot;);\n  res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);\n  &#x2F;&#x2F; 预检的存活时间\n  res.setHeader(&quot;Access-Control-Max-Age&quot;, 60);\n  next();\n&#125;;\n&#x2F;&#x2F;...\napp.configure(function () &#123;\n  app.use(express.bodyParser());\n  app.use(express.cookieParser());\n  app.use(express.session(&#123; secret: &quot;cool beans&quot; &#125;));\n  app.use(express.methodOverride());\n  app.use(allowCrossDomain);\n  app.use(app.router);\n  app.use(express.static(__dirname + &quot;&#x2F;public&quot;));\n&#125;);</code></pre>\n\n<p>在⽣产环境中建议⽤成熟的开源中间件解决问题。</p>\n<p>不同的 nodejs 框架设置方式不同，一般跨域问题几乎框架官网必备，查下就晓得如何配置了，但本质都是改变相应头</p>\n<h3 id=\"其他（不常用）\"><a href=\"#其他（不常用）\" class=\"headerlink\" title=\"其他（不常用）\"></a>其他（不常用）</h3><ol>\n<li>HTML5 XMLHttpRequest 有⼀个 API，<code>postMessage()</code>⽅法允许来⾃不同源的脚本采⽤异步⽅式进⾏有限的通信， 可以实现跨⽂本档、多窗⼝、跨域消息传递。</li>\n</ol>\n<details class=\"custom-details\">\n<summary>Details</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; a.html\n  &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;localhost:4000&#x2F;b.html&quot; frameborder&#x3D;&quot;0&quot; id&#x3D;&quot;frame&quot; onload&#x3D;&quot;load()&quot;&gt;&lt;&#x2F;iframe&gt; &#x2F;&#x2F;等它加载完触发一个事件\n  &#x2F;&#x2F;内嵌在http:&#x2F;&#x2F;localhost:3000&#x2F;a.html\n    &lt;script&gt;\n      function load() &#123;\n        let frame &#x3D; document.getElementById(&#39;frame&#39;)\n        frame.contentWindow.postMessage(&#39;我爱你&#39;, &#39;http:&#x2F;&#x2F;localhost:4000&#39;) &#x2F;&#x2F;发送数据\n        window.onmessage &#x3D; function(e) &#123; &#x2F;&#x2F;接受返回数据\n          console.log(e.data) &#x2F;&#x2F;我不爱你\n        &#125;\n      &#125;\n    &lt;&#x2F;script&gt;\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; b.html\nwindow.onmessage &#x3D; function (e) &#123;\n  console.log(e.data); &#x2F;&#x2F;我爱你\n  e.source.postMessage(&quot;我不爱你&quot;, e.origin);\n&#125;;</code></pre>\n\n</p>\n</details>\n<ol start=\"2\">\n<li><code>WebSocket</code> 是⼀种双向通信协议，在建⽴连接之后，WebSocket 的 server 与 client 都能主动向对⽅发送或接收数 据，连接建⽴好了之后 client 与 server 之间的双向通信就与 HTTP ⽆关了，因此可以跨域。</li>\n<li><code>window.name + iframe</code>：window.name 属性值在不同的⻚⾯（甚⾄不同域名）加载后依旧存在，并且可以⽀持⾮常 ⻓的 name 值，我们可以利⽤这个特点进⾏跨域。</li>\n</ol>\n<details class=\"custom-details\">\n<summary>Details</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; a.html(http:&#x2F;&#x2F;localhost:3000&#x2F;b.html)\n &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;localhost:4000&#x2F;c.html&quot; frameborder&#x3D;&quot;0&quot; onload&#x3D;&quot;load()&quot; id&#x3D;&quot;iframe&quot;&gt;&lt;&#x2F;iframe&gt;\n &lt;script&gt;\n   let first &#x3D; true\n   &#x2F;&#x2F; onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n   function load() &#123;\n     if(first)&#123;\n     &#x2F;&#x2F; 第1次onload(跨域页)成功后，切换到同域代理页面\n       let iframe &#x3D; document.getElementById(&#39;iframe&#39;);\n       iframe.src &#x3D; &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;b.html&#39;;\n       first &#x3D; false;\n     &#125;else&#123;\n     &#x2F;&#x2F; 第2次onload(同域b.html页)成功后，读取同域window.name中数据\n       console.log(iframe.contentWindow.name);\n     &#125;\n   &#125;\n &lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; c.html(http:&#x2F;&#x2F;localhost:4000&#x2F;c.html)\n&lt;script&gt;window.name &#x3D; &#39;我不爱你&#39;&lt;&#x2F;script&gt;</code></pre>\n\n<p>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n</p>\n</details>\n<ol start=\"4\">\n<li><code>location.hash + iframe</code>：a.html 欲与 c.html 跨域相互通信，通过中间⻚ b.html 来实现。 三个⻚⾯，不同域之间利⽤ iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</li>\n</ol>\n<details class=\"custom-details\">\n<summary>动态创建 iframe</summary>\n<p>具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。<br>同样的，a.html 和 b.html 是同域的，都是 <a href=\"http://localhost:3000;而\">http://localhost:3000;而</a> c.html 是 <a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; a.html\n &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;localhost:4000&#x2F;c.html#iloveyou&quot;&gt;&lt;&#x2F;iframe&gt;\n &lt;script&gt;\n   window.onhashchange &#x3D; function () &#123; &#x2F;&#x2F;检测hash的变化\n     console.log(location.hash);\n   &#125;\n &lt;&#x2F;script&gt;\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; b.html\n&lt;script&gt;\n  window.parent.parent.location.hash &#x3D; location.hash\n  &#x2F;&#x2F;b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面\n&lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; c.html\nconsole.log(location.hash);\nlet iframe &#x3D; document.createElement(&quot;iframe&quot;);\niframe.src &#x3D; &quot;http:&#x2F;&#x2F;localhost:3000&#x2F;b.html#idontloveyou&quot;;\ndocument.body.appendChild(iframe);</code></pre>\n\n</p>\n</details>\n<ol start=\"5\">\n<li><code>document.domain + iframe</code>： 该⽅式只能⽤于⼆级域名相同的情况下，⽐如 a.test.com 和 b.test.com 适⽤于该⽅ 式，我们只需要给⻚⾯添加 document.domain &#x3D;’test.com’ 表示⼆级域名都相同就可以实现跨域，两个⻚⾯都通过 js 强制设置 document.domain 为基础主域，就实现了同域。</li>\n</ol>\n<details class=\"custom-details\">\n<summary>Details</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; a.html\n&lt;body&gt;\n helloa\n  &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;b.zf1.cn:3000&#x2F;b.html&quot; frameborder&#x3D;&quot;0&quot; onload&#x3D;&quot;load()&quot; id&#x3D;&quot;frame&quot;&gt;&lt;&#x2F;iframe&gt;\n  &lt;script&gt;\n    document.domain &#x3D; &#39;zf1.cn&#39;\n    function load() &#123;\n      console.log(frame.contentWindow.a);\n    &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; b.html\n&lt;body&gt;\n  hellob\n  &lt;script&gt;document.domain &#x3D; &#39;zf1.cn&#39; var a &#x3D; 100;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n</p>\n</details>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.cn/post/6844903767226351623#heading-19\" target=\"_blank\" >九种跨域方式实现原理（完整版）</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2016/09/csp.html\" target=\"_blank\" >Content Security Policy 入门教程</a></p>\n","text":"背景浏览器安全策略限制跨域访问 内容安全策略是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。 维基百科： 内容安全策略（英语：Content Security ...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":31,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":18,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">处理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nginx\"><span class=\"toc-text\">nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jsonp-%E6%96%B9%E5%BC%8F-lt-%E5%8A%A8%E6%80%81-script-gt\"><span class=\"toc-text\">jsonp 方式 &lt;动态 script&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%BE%E7%BD%AE%EF%BC%8C%E7%B1%BB%E4%BC%BC-nginx\"><span class=\"toc-text\">服务端设置，类似 nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%EF%BC%88%E4%B8%8D%E5%B8%B8%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">其他（不常用）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Slate wiki-ui评论功能光标乱跳","uid":"f5ccfd5f1ce5f78727a64a19669811c7","slug":"2022-04-29slate","date":"2022-05-10T05:00:00.000Z","updated":"2022-09-16T13:54:56.099Z","comments":true,"path":"api/articles/2022-04-29slate.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/bug.webp","text":"bug复现bug复现 (node:29) UnhandledPromiseRejectionWarning: Error: Forbidden at &amp;#x2F;code&amp;#x2F;client&amp;#x2F;.next&amp;#x2F;server&amp...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"wiki","slug":"wiki","count":3,"path":"api/categories/wiki.json"}],"tags":[{"name":"wiki","slug":"wiki","count":4,"path":"api/tags/wiki.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"面试题汇总","uid":"99460a2013287be2d51642da6dd169f8","slug":"2022-05-08interview","date":"2022-05-08T08:27:00.000Z","updated":"2022-09-16T13:54:56.102Z","comments":true,"path":"api/articles/2022-05-08interview.json","keywords":null,"cover":null,"text":"值得收藏的链接 码上通天 面试完 50 个人后我写下这篇总结 if 我是前端团队 Leader，怎么制定前端协作规范? 做了一份前端面试复习计划，保熟～ url解析过程 ","link":"","photos":[],"count_time":{"symbolsCount":91,"symbolsTime":"1 mins."},"categories":[{"name":"面试","slug":"面试","count":2,"path":"api/categories/面试.json"}],"tags":[{"name":"面试","slug":"面试","count":18,"path":"api/tags/面试.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}