{"title":"svelte kit","uid":"9769659b2de5d4126dd03449784d4bdb","slug":"2023-07-14sveltekit","date":"2023-07-14T15:49:23.000Z","updated":"2023-07-20T14:58:47.213Z","comments":true,"path":"api/articles/2023-07-14sveltekit.json","keywords":null,"cover":null,"content":"<h2 id=\"SvelteKit-中-universal-and-server-load-functions-是啥\"><a href=\"#SvelteKit-中-universal-and-server-load-functions-是啥\" class=\"headerlink\" title=\"SvelteKit 中 universal and server load functions 是啥\"></a>SvelteKit 中 universal and server load functions 是啥</h2><p>在 SvelteKit 中，有两个重要的概念：Universal（通用）和 Server Load Functions（服务器加载函数）。</p>\n<p><strong>Universal（通用）:</strong></p>\n<p>Universal 是指应用程序在服务器端和客户端之间共享相同的代码和渲染逻辑。在 SvelteKit 中，你可以在应用程序的核心功能和页面上使用相同的代码，无论是在服务器端渲染还是在客户端渲染。这样可以确保在服务器端预渲染的内容和在客户端动态渲染的内容保持一致，提供更好的性能和用户体验。</p>\n<p><strong>Server Load Functions（服务器加载函数）:</strong></p>\n<p>在 SvelteKit 中，服务器加载函数是在运行时在服务器端执行的函数，它们允许你在生成 HTML 之前获取和处理数据。这些函数在处理每个请求时都会运行，可以用于从外部数据源获取数据、进行身份验证、执行服务器端渲染等操作。</p>\n<p>在 SvelteKit 中定义服务器加载函数很简单，只需在页面组件中导出一个名为 <code>load</code> 的函数即可。例如：</p>\n<pre class=\"line-numbers language-svelte\" data-language=\"svelte\"><code class=\"language-svelte\">&lt;script context&#x3D;&quot;module&quot;&gt;\n  export async function load(&#123; fetch &#125;) &#123;\n    const res &#x3D; await fetch(&#39;https:&#x2F;&#x2F;api.example.com&#x2F;data&#39;);\n    const data &#x3D; await res.json();\n\n    return &#123;\n      props: &#123;\n        data\n      &#125;\n    &#125;;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>在上面的例子中，我们导出一个名为 <code>load</code> 的服务器加载函数，该函数使用 SvelteKit 提供的 <code>fetch</code> 函数从 <code>https://api.example.com/data</code> 获取数据，并将其作为属性返回。</p>\n<p>服务器加载函数的返回值将被传递给页面组件的 <code>props</code> 属性，以便在服务器端和客户端都能够访问到相同的数据。</p>\n<p>通过使用服务器加载函数，你可以实现许多功能，如数据预取、鉴权、服务器端渲染等。这样可以在保持代码共享的同时，根据需要在服务器端进行更多的处理和数据准备工作。</p>\n<h2 id=\"难理解的点\"><a href=\"#难理解的点\" class=\"headerlink\" title=\"难理解的点\"></a>难理解的点</h2><p><a href=\"https://kit.svelte.dev/docs/form-actions#loading-data\" target=\"_blank\" >docs&#x2F;form-actions#loading-data</a></p>\n<p>根据提供的代码，<code>src/hooks.server.ts</code> 和 <code>src/routes/account/+page.server.ts</code> 是使用 SvelteKit 框架编写的服务器端钩子和页面逻辑代码。</p>\n<p>在这种情况下，根据 SvelteKit 的执行规则，<code>src/hooks.server.ts</code> 中的 <code>handle</code> 函数将会在请求处理过程的开始阶段执行，它用于在处理请求之前从会话中获取用户信息，并将用户信息存储在 <code>event.locals.user</code> 中。然后它会调用 <code>resolve(event)</code> 将处理过程继续传递给下一个处理步骤。</p>\n<p>随后，当请求到达 <code>src/routes/account/+page.server.ts</code> 中的页面时，<code>load</code> 函数将在页面服务器加载阶段执行。它将从 <code>event.locals.user</code> 中获取之前存储的用户信息，并将其作为属性 <code>user</code> 返回给页面。</p>\n<p>此外，<code>actions</code> 对象定义了一组动作，其中 <code>logout</code> 是一个异步函数，用于处理用户的注销操作。它会删除 <code>sessionid</code> 的 cookie，并将 <code>event.locals.user</code> 设置为 <code>null</code>。</p>\n<p>因此，根据 SvelteKit 的执行规则和提供的代码，<code>src/hooks.server.ts</code> 中的 <code>handle</code> 函数会在请求处理的开始阶段执行，而 <code>src/routes/account/+page.server.ts</code> 中的 <code>load</code> 函数和 <code>actions</code> 对象将在某个请求到达相关页面时执行。</p>\n<h2 id=\"Svelte-Kit-把一些代码逻辑转化成了项目结构？\"><a href=\"#Svelte-Kit-把一些代码逻辑转化成了项目结构？\" class=\"headerlink\" title=\"Svelte Kit 把一些代码逻辑转化成了项目结构？\"></a>Svelte Kit 把一些代码逻辑转化成了项目结构？</h2><p>是的，Svelte Kit 提供了一种将代码逻辑转化为项目结构的方式。它倡导使用约定优于配置的原则，通过组织代码和文件来简化开发流程和代码管理。</p>\n<p>在传统的前端开发中，通常需要手动创建和配置许多文件，例如路由文件、服务端渲染文件、构建配置文件等。但是，在 Svelte Kit 中，这些文件的创建和配置是自动完成的，你只需要关注于编写组件和处理业务逻辑。</p>\n<p>Svelte Kit 的项目结构遵循以下约定：</p>\n<ul>\n<li><code>src/routes</code> 文件夹：包含应用程序的路由，每个路由对应一个 <code>.svelte</code> 文件。Svelte Kit 会根据路由文件自动生成路由配置和服务端渲染逻辑。</li>\n<li><code>src/routes/__layout.svelte</code>：定义应用程序的布局模板，所有路由都会应用这个布局。</li>\n<li><code>src/lib</code> 文件夹：放置可共享的 JavaScript 函数、工具类和服务等。</li>\n<li><code>public</code> 文件夹：存放静态资源，例如图像、样式表等。</li>\n<li><code>global.d.ts</code>：定义全局类型和接口的 TypeScript 类型声明文件。</li>\n</ul>\n<p>使用这样的项目结构，Svelte Kit 将自动构建和配置路由，处理服务端渲染，并提供静态资源的处理。这样可以极大地简化开发流程，并且使得代码更易于组织和管理。你只需专注于编写组件和处理业务逻辑，而无需过多关注繁琐的配置和文件管理。</p>\n<h2 id=\"sveltejs-x2F-kit-中有哪些-hook\"><a href=\"#sveltejs-x2F-kit-中有哪些-hook\" class=\"headerlink\" title=\"@sveltejs&#x2F;kit 中有哪些 hook\"></a>@sveltejs&#x2F;kit 中有哪些 hook</h2><p><a href=\"https://kit.svelte.dev/docs/hooks\" target=\"_blank\" >见</a></p>\n<p>@sveltejs&#x2F;kit 提供了以下钩子函数：</p>\n<ol>\n<li><code>Context</code>: 用于设置全局的上下文信息，可以从指定的钩子函数中访问。</li>\n<li><code>getSession</code>: 用于获取用户会话信息，以在服务器端和客户端之间共享。可以在路由组件和其他地方使用。</li>\n<li><code>handle</code>: 用于处理服务器端路由请求的钩子函数。</li>\n<li><code>handleError</code>: 用于处理在服务器端或客户端路由切换过程中出现的错误。</li>\n<li><code>load</code>: 用于加载动态数据（例如从 API 获取的数据）。</li>\n<li><code>preload</code>: 在编译期间预加载组件所需的数据。</li>\n<li><code>reset</code>: 在 Svelte 应用重置时触发的钩子函数。</li>\n<li><code>page</code>: 用于自定义页面路由行为和生命周期。</li>\n</ol>\n<p>这些钩子函数可在 Svelte Kit 项目的 <code>src/hooks.ts</code> 文件中定义，在路由配置中使用。通过使用这些钩子函数，你可以自定义应用的行为，管理全局状态，处理错误和加载数据等。请注意，这里列出的钩子函数仅是主要的钩子函数，还有其他一些钩子函数可以根据需要使用。</p>\n<h2 id=\"sveltejs-x2F-kit-page-server-ts-加号有什么用？\"><a href=\"#sveltejs-x2F-kit-page-server-ts-加号有什么用？\" class=\"headerlink\" title=\"@sveltejs&#x2F;kit +page.server.ts 加号有什么用？\"></a>@sveltejs&#x2F;kit +page.server.ts 加号有什么用？</h2><p>在 <code>sveltejs/kit</code> 中，通过在 <code>page.server.ts</code> 文件中使用加号 <code>+</code>，可以将其视为一种约定，用来指示该文件是一个服务器端特定的页面。</p>\n<p>这种约定的作用是让 Svelte Kit 在构建项目时能够正确识别和处理这些特定的页面文件。当你使用加号 <code>+</code> 命名 <code>page.server.ts</code> 时，Svelte Kit 会将其与对应的 <code>page.svelte</code> 文件关联起来，并自动生成服务器端渲染(SSR)所需的代码。</p>\n<p>这种约定的好处是可以轻松地将部分代码放在服务器端运行，而另一部分代码则在客户端运行，以实现更好的性能和用户体验。通过将代码逻辑区分为服务器端和客户端，可以确保在每个环境中都有适当的代码运行。</p>\n<p>请注意，加号 <code>+</code> 的使用是可选的，你也可以不使用加号，而是使用其他方式来指示服务器端特定的页面文件。</p>\n","text":"SvelteKit 中 universal and server load functions 是啥在 SvelteKit 中，有两个重要的概念：Universal（通用）和 Server Load Functions（服务器加载函数）。 Universal（通用）: Unive...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"svelte","slug":"svelte","count":2,"path":"api/categories/svelte.json"}],"tags":[{"name":"svelte","slug":"svelte","count":2,"path":"api/tags/svelte.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SvelteKit-%E4%B8%AD-universal-and-server-load-functions-%E6%98%AF%E5%95%A5\"><span class=\"toc-text\">SvelteKit 中 universal and server load functions 是啥</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%BE%E7%90%86%E8%A7%A3%E7%9A%84%E7%82%B9\"><span class=\"toc-text\">难理解的点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Svelte-Kit-%E6%8A%8A%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E8%BD%AC%E5%8C%96%E6%88%90%E4%BA%86%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%9F\"><span class=\"toc-text\">Svelte Kit 把一些代码逻辑转化成了项目结构？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sveltejs-x2F-kit-%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B-hook\"><span class=\"toc-text\">@sveltejs&#x2F;kit 中有哪些 hook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sveltejs-x2F-kit-page-server-ts-%E5%8A%A0%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">@sveltejs&#x2F;kit +page.server.ts 加号有什么用？</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Solidity","uid":"f708a9779c264010c95b53120252c787","slug":"2023-07-16solidity","date":"2023-07-16T02:13:49.000Z","updated":"2023-07-31T06:42:49.727Z","comments":true,"path":"api/articles/2023-07-16solidity.json","keywords":null,"cover":[],"text":"为什么搞了个 solidity 语言，golang rust 不能满足需要吗Solidity 是一种专门用于智能合约开发的编程语言，它在以太坊和其他以太坊兼容区块链平台上广泛使用。当开发者想要在以太坊平台上构建去中心化应用程序（DApps）或编写智能合约时，Solidity 是一...","link":"","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"47 mins."},"categories":[{"name":"区块链","slug":"区块链","count":1,"path":"api/categories/区块链.json"}],"tags":[{"name":"区块链","slug":"区块链","count":1,"path":"api/tags/区块链.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"svelte","uid":"159e1d8888631750dd50b9032a4b1226","slug":"2023-07-13svelte","date":"2023-07-13T11:07:21.000Z","updated":"2023-07-16T02:13:26.430Z","comments":true,"path":"api/articles/2023-07-13svelte.json","keywords":null,"cover":null,"text":"svelte 名字由来“Svelte”这个名字源自英语词汇，用于形容一个人或物体的外观或姿态非常优雅、时髦、时尚或精巧。在软件开发领域，”Svelte”这个名字被用来指代一种现代的、高效的前端框架，因为这个框架以其精巧、优雅且高性能的特点而得名。 “Svelte”框架的设计目标是...","link":"","photos":[],"count_time":{"symbolsCount":371,"symbolsTime":"1 mins."},"categories":[{"name":"svelte","slug":"svelte","count":2,"path":"api/categories/svelte.json"}],"tags":[{"name":"svelte","slug":"svelte","count":2,"path":"api/tags/svelte.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}