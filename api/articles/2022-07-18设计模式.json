{"title":"前端基础-设计模式","uid":"21c81236c6b792525b47c142ae6ad187","slug":"2022-07-18设计模式","date":"2022-07-18T06:53:04.000Z","updated":"2022-09-16T13:54:56.219Z","comments":true,"path":"api/articles/2022-07-18设计模式.json","keywords":null,"cover":null,"content":"<h2 id=\"SOLID-设计原则\"><a href=\"#SOLID-设计原则\" class=\"headerlink\" title=\"SOLID 设计原则\"></a>SOLID 设计原则</h2><p><strong>S: Single Responsibility Principle</strong> 单一职责原则</p>\n<p>一个程序只做一件事</p>\n<p><strong>O: OpenClosed Principle</strong> 开放&#x2F;封闭原则</p>\n<p>对扩展开放，对修改封闭</p>\n<p><strong>L:</strong> 里氏替换原则</p>\n<p>子类能覆盖父类，父类能出现的地方，子类也能出现</p>\n<p><strong>I: interface Segregation Principle</strong> 接口隔离原则</p>\n<p>保持接口的单一独立，避免出现“胖接口”。这点目前在 TS 中运用到</p>\n<p><strong>D: Dependency Inversion Principle</strong> 依赖倒转原则</p>\n<p>面向接口编程，依赖于抽象而不依赖于具体。使用方只专注接口而不用关注具体类的实现。俗称“鸭子类型”</p>\n<h2 id=\"常见的设计模式\"><a href=\"#常见的设计模式\" class=\"headerlink\" title=\"常见的设计模式\"></a>常见的设计模式</h2><ul>\n<li>创建型：<code>单例模式</code>、<code>工厂模式</code>、<code>原型模式</code></li>\n<li>结构型：<code>装饰器模式</code>、<code>代理模式</code></li>\n<li>行为型：<code>策略模式</code>、<code>模块方法模式</code>、<code>发布订阅模式</code>。</li>\n</ul>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>单例模式的思路是：保证一个类只能被实例一次，每次获取的时候，如果该类已经创建过实例则直接返回该实例，否则创建一个实例保存并返回。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>内存中只有一个实例，减少了内存的开销。</li>\n<li>避免了对资源多重的占用。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>违反了单一职责，一个类应该只关心内部逻辑，而不用去关心外部的实现</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式是<code>用来创建对象</code>的一种最常用的设计模式，不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂</p>\n<p>其就像工厂一样重复的<code>产生类似的产品</code>，工厂模式只需要我们传入正确的参数，就能生产类似的产品</p>\n<p>举个例子：</p>\n<p>编程中，在一个 A 类中通过 new 的方式实例化了类 B，那么 A 类和 B 类之间就存在关联(耦合)</p>\n<p>后期因为需要修改了 B 类的代码和使用方式，比如构造函数中传入参数，那么 A 类也要跟着修改，一个类的依赖可能影响不大，但若有多个类依赖了 B 类，那么这个工作量将会相当的大，容易出现修改错误，也会产生很多的重复代码，这无疑是件非常痛苦的事;</p>\n<p>这种情况下，就需要将创建实例的工作从调用方(A 类)中分离，与调用方「解耦」，也就是<code>使用工厂方法创建实例的工作封装起来(「减少代码重复」)</code>，由工厂管理对象的创建逻辑，<code>调用方不需要知道具体的创建过程，只管使用</code>，「而降低调用者因为创建逻辑导致的错误」;</p>\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>调用者创建对象时只要知道其名称即可</li>\n<li>扩展性高，如果要新增一个产品，直接扩展一个工厂类即可。</li>\n<li>隐藏产品的具体实现，只关心产品的接口。</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>每次增加一个产品时，都需要增加一个具体类，这无形增加了系统内存的压力和系统的复杂度，也增加了具体类的依赖</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>工厂模式<code>根据抽象程度</code>的不同可以分为：</p>\n<ul>\n<li><code>简单工厂模式</code>(Simple Factory)</li>\n<li><code>工厂方法模式</code>(Factory Method)</li>\n<li><code>抽象工厂模式</code>(Abstract Factory)</li>\n</ul>\n<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p>简单工厂模式也叫静态工厂模式，<code>用一个工厂对象创建同一类对象类的实例</code></p>\n<p>假设我们要开发一个公司岗位及其工作内容的录入信息，不同岗位的工作内容不一致</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Factory(career) &#123;\n  function User(career, work) &#123;\n    this.career &#x3D; career;\n    this.work &#x3D; work;\n  &#125;\n  let work;\n  switch (career) &#123;\n    case &quot;coder&quot;:\n      work &#x3D; [&quot;写代码&quot;, &quot;修Bug&quot;];\n      return new User(career, work);\n      break;\n    case &quot;hr&quot;:\n      work &#x3D; [&quot;招聘&quot;, &quot;员工信息管理&quot;];\n      return new User(career, work);\n      break;\n    case &quot;driver&quot;:\n      work &#x3D; [&quot;开车&quot;];\n      return new User(career, work);\n      break;\n    case &quot;boss&quot;:\n      work &#x3D; [&quot;喝茶&quot;, &quot;开会&quot;, &quot;审批文件&quot;];\n      return new User(career, work);\n      break;\n  &#125;\n&#125;\n\nlet coder &#x3D; new Factory(&quot;coder&quot;);\nconsole.log(coder);\n\nlet boss &#x3D; new Factory(&quot;boss&quot;);\nconsole.log(boss);</code></pre>\n\n<h3 id=\"简单工厂方法\"><a href=\"#简单工厂方法\" class=\"headerlink\" title=\"简单工厂方法\"></a>简单工厂方法</h3><p>工厂方法模式跟简单工厂模式差不多，但是<code>把具体的产品放到了工厂函数的 prototype 中</code></p>\n<p>这样一来，扩展产品种类就不必修改工厂函数了，变成抽象类，也可以随时重写某种具体的产品</p>\n<p>也就是相当于工厂总部不生产产品了，交给下辖分工厂进行生产;但是进入工厂之前，需要有个判断来验证你要生产的东西是否是属于我们工厂所生产范围，如果是，就丢给下辖工厂来进行生产</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 工厂方法\nfunction Factory(career) &#123;\n  if (this instanceof Factory) &#123;\n    return new this[career]();\n  &#125; else &#123;\n    return new Factory(career);\n  &#125;\n&#125;\n&#x2F;&#x2F; 工厂方法函数的原型中设置所有对象的构造函数\nFactory.prototype &#x3D; &#123;\n  coder: function () &#123;\n    this.careerName &#x3D; &quot;程序员&quot;;\n    this.work &#x3D; [&quot;写代码&quot;, &quot;修Bug&quot;];\n  &#125;,\n  hr: function () &#123;\n    this.careerName &#x3D; &quot;HR&quot;;\n    this.work &#x3D; [&quot;招聘&quot;, &quot;员工信息管理&quot;];\n  &#125;,\n  driver: function () &#123;\n    this.careerName &#x3D; &quot;司机&quot;;\n    this.work &#x3D; [&quot;开车&quot;];\n  &#125;,\n  boss: function () &#123;\n    this.careerName &#x3D; &quot;老板&quot;;\n    this.work &#x3D; [&quot;喝茶&quot;, &quot;开会&quot;, &quot;审批文件&quot;];\n  &#125;,\n&#125;;\n\nlet coder &#x3D; new Factory(&quot;coder&quot;);\nconsole.log(coder);\n\nlet hr &#x3D; new Factory(&quot;hr&quot;);\nconsole.log(hr);</code></pre>\n\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>上述<code>简单工厂模式</code>和<code>工厂方法模式</code>都<code>是直接生成实例</code>，但是抽象工厂模式不同，抽象工厂模式并不直接生成实例， 而是用于对产品类簇的创建</p>\n<p>通俗点来讲就是：<code>简单工厂和工厂方法模式的工作是生产产品，那么抽象工厂模式的工作就是生产工厂的</code></p>\n<p>由于 JavaScript 中并没有抽象类的概念，只能模拟，可以分成四部分：</p>\n<ul>\n<li>用于创建抽象类的函数</li>\n<li>抽象类</li>\n<li>具体类</li>\n<li>实例化具体类</li>\n</ul>\n<p>上面的例子中有 coder、hr、boss、driver 四种岗位，其中 coder 可能使用不同的开发语言进行开发，比如 JavaScript、Java 等等。那么这两种语言就是对应的类簇</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function CareerAbstractUserFactory(type) &#123;\n  switch (type) &#123;\n    case &quot;coder&quot;:\n      return UserOfCoder;\n    case &quot;hr&quot;:\n      return UserOfHR;\n    case &quot;driver&quot;:\n      return UserOfDriver;\n    case &quot;boss&quot;:\n      return UserOfBoss;\n    default:\n      throw new Error(&quot;参数错误, 可选参数:coder、hr、driver、boss&quot;);\n  &#125;\n&#125;</code></pre>\n\n<p>上面代码中 CareerAbstractFactory 就是一个抽象工厂方法，该方法在参数中传递子类和父类，在方法体内部实现了子类对父类的继承</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>工厂模式适用场景如下：</p>\n<ul>\n<li>如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择 <code>flutter接口返回json数据转化成实例</code></li>\n<li>将 new 操作简单封装，<code>遇到 new 的时候就应该考虑是否用工厂模式</code>;</li>\n<li><code>需要依赖具体环境创建不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式</code>，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性</li>\n</ul>\n<p><a href=\"https://developer.51cto.com/article/688576.html\" target=\"_blank\" >说说你对工厂模式的理解？应用场景？</a><br><a href=\"https://juejin.cn/post/6844903653774458888#heading-3\" target=\"_blank\" >JavaScript 设计模式与实践–工厂模式</a></p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>原型模式是指原型实例指向创建对象的种类，通过拷贝这些原型来创建新的对象，说白了就是克隆自己，生成一个新的对象。</p>\n<h3 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>不再依赖构造函数或者类创建对象，可以将这个对象作为一个模板生成更多的新对象。</p>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>对于包含引用类型值的属性来说，所有实例在默认的情况下都会取得相同的属性值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; Object.create\nconst user &#x3D; &#123;\n  name: &quot;小明&quot;,\n  age: &quot;30&quot;,\n  getInfo() &#123;\n    console.log(&#96;姓名：$&#123;this.name&#125;，年龄：$&#123;this.age&#125;&#96;);\n  &#125;,\n&#125;;\nconst xiaozhang &#x3D; Object.create(user);\nxiaozhang.name &#x3D; &quot;小张&quot;;\nxiaozhang.age &#x3D; 18;\n\nxiaozhang.getInfo(); &#x2F;&#x2F; 姓名：小张，年龄：18\nuser.getInfo(); &#x2F;&#x2F; 姓名：小明，年龄：30</code></pre>\n\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>HTML 元 素事件代理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;ul id&#x3D;&quot;ul&quot;&gt;\n  &lt;li&gt;1&lt;&#x2F;li&gt;\n  &lt;li&gt;2&lt;&#x2F;li&gt;\n  &lt;li&gt;3&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n&lt;script&gt;\n  let ul &#x3D; document.querySelector(&#39;#ul&#39;);\n  ul.addEventListener(&#39;click&#39;, event &#x3D;&gt; &#123;\n    console.log(event.target);\n  &#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>代理模式能将代理对象与被调用对象分离，<code>降低了系统的耦合度</code>。</li>\n<li>代理模式在客户端和目标对象之间起到一个中介作用，这样可以<code>起到保护目标对象的作用</code></li>\n<li>代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；</li>\n</ul>\n<h3 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>处理请求速度可能有差别，非直接访问存在开销</p>\n<p>作者：四叶舟<br>链接：<a href=\"https://www.jianshu.com/p/19a8c1d76257\">https://www.jianshu.com/p/19a8c1d76257</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"发布订阅模式（eventbus）\"><a href=\"#发布订阅模式（eventbus）\" class=\"headerlink\" title=\"发布订阅模式（eventbus）\"></a>发布订阅模式（eventbus）</h2><h2 id=\"模块方法模式\"><a href=\"#模块方法模式\" class=\"headerlink\" title=\"模块方法模式\"></a>模块方法模式</h2><p>模块方法模式是一种基于继承的设计模式，</p>\n<p>在 javascript 中没有真正意义上的继承，所有继承都来自原型(prototype)上的继承，<br>随着 ES6 的 class 到来，实现了继承的“概念”，让我们可以以一种很方便简洁的方式继承，但其本质上还是原型继承。</p>\n<p>模板方法模式由两部分组成，<code>第一部分是抽象父类</code>，<code>第二部分是具体的实现子类</code>。</p>\n<ul>\n<li><code>抽象父类</code>主要封装了子类的算法框架，以及实现了一些公共的方法和其他方法的执行顺序。</li>\n<li><code>子类</code>通过继承父类，继承了父类的算法框架，并进行重写。</li>\n</ul>\n<h3 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>提供公共的代码便于维护。行为由父类控制，具体由子类来实现。</p>\n<h3 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>其每一个具体实现都需要继承的子类来实现，这无疑导致类的个数增加，使得系统庞大。</p>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><h2 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h2><p><a href=\"https://www.bilibili.com/video/BV1WK411G7QH?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV1WK411G7QH?spm_id_from=333.337.search-card.all.click</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/19a8c1d76257\" target=\"_blank\" >前端常见的 9 种设计模式</a></p>\n<p><a href=\"https://juejin.cn/post/7072175210874535967\" target=\"_blank\" >javascript 的 23 种设计模式</a></p>\n","text":"SOLID 设计原则S: Single Responsibility Principle 单一职责原则 一个程序只做一件事 O: OpenClosed Principle 开放&#x2F;封闭原则 对扩展开放，对修改封闭 L: 里氏替换原则 子类能覆盖父类，父类能出现的地方，子类...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":31,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":18,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SOLID-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">SOLID 设计原则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">常见的设计模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">单例模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">工厂模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9-1\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-1\"><span class=\"toc-text\">缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">简单工厂模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">简单工厂方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">抽象工厂模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">原型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9-2\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-2\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">代理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9-3\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-3\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%88eventbus%EF%BC%89\"><span class=\"toc-text\">发布订阅模式（eventbus）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">模块方法模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9-4\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-4\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">策略模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">装饰器模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"react-native 架构变更","uid":"6f92233bb9cb3976c3ae6f34c3be87e6","slug":"2022-07-19rn-架构变更","date":"2022-07-19T02:33:57.000Z","updated":"2022-09-16T13:54:56.220Z","comments":true,"path":"api/articles/2022-07-19rn-架构变更.json","keywords":null,"cover":[],"text":"Fabric 渲染器Fabric 渲染器 一开始直接看 react-native 官网，对于 Fabric 渲染器的介绍看的我一脸懵逼，在 Google 扒拉下，发现了 2018 年的一个提案。 我觉得从过去来看更符合事物的发展规律。直接拿到结果倒着看，不是很好理解。 这么搜搜到...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"react-native","slug":"react-native","count":2,"path":"api/categories/react-native.json"}],"tags":[{"name":"react-native","slug":"react-native","count":2,"path":"api/tags/react-native.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-CSS3","uid":"04f522a5377d4d5450ce4cf8a54e76ff","slug":"2022-07-17css","date":"2022-07-17T07:39:25.000Z","updated":"2022-09-16T13:54:56.218Z","comments":true,"path":"api/articles/2022-07-17css.json","keywords":null,"cover":[],"text":"CSS 选择器的优先级是怎样的CSS 选择器的优先级是：（标签选择器 &lt; 类选择器 &lt; ID 选择器） &lt; 内联 &lt; !important &lt; 特殊情况 到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下： A 的...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":31,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":18,"path":"api/tags/面试.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}