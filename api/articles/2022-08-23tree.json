{"title":"tree","uid":"c362c8649d871624a90f1e24b5ef0828","slug":"2022-08-23tree","date":"2022-08-23T07:31:09.000Z","updated":"2022-09-16T13:54:56.314Z","comments":true,"path":"api/articles/2022-08-23tree.json","keywords":null,"cover":[],"content":"<h2 id=\"mysql-存储的几种方式\"><a href=\"#mysql-存储的几种方式\" class=\"headerlink\" title=\"mysql 存储的几种方式\"></a>mysql 存储的几种方式</h2><p><a href=\"https://www.zhihu.com/question/20417447\" target=\"_blank\" >见</a></p>\n<img src=\"http://t-blog-images.aijs.top/img/202208231531157.webp\" />\n\n<p>1,4 用过， 2 见过（当前公司 DHR 系统组织架构在用）</p>\n<h2 id=\"js-获取树某个节点\"><a href=\"#js-获取树某个节点\" class=\"headerlink\" title=\"js 获取树某个节点\"></a>js 获取树某个节点</h2><p>场景：编辑树节点，刷新树数据，进行编辑节点回显，某些情况下，树节点被转移他人，当前节点不需要回显</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n *\n * @param &#123;要查询的节点key&#125; targetValue\n * @param &#123;数组形式，树数据&#125; data\n * @returns\n *&#x2F;\nconst findTreeNodeByKey &#x3D; (\n  tree: TreeNode[],\n  targetValue: string | number,\n  options &#x3D; &#123;\n    find_field: &quot;id&quot;,\n    children: &quot;children&quot;,\n  &#125;\n) &#x3D;&gt; &#123;\n  let result &#x3D; null;\n  const ffindeNodeByKey &#x3D; (\n    data: TreeNode[],\n    skey: string | number,\n    options\n  ) &#x3D;&gt; &#123;\n    const loop &#x3D; (_data, options) &#x3D;&gt; &#123;\n      _data.forEach((item) &#x3D;&gt; &#123;\n        if (item[find_field] &#x3D;&#x3D;&#x3D; skey) &#123;\n          result &#x3D; item;\n        &#125;\n        if (item[options.children]) &#123;\n          loop(item[options.children], options);\n        &#125;\n      &#125;);\n    &#125;;\n\n    return loop(data, options);\n  &#125;;\n  ffindeNodeByKey(tree, targetValue, options);\n  return result;\n&#125;;</code></pre>\n\n<h3 id=\"测试数据\"><a href=\"#测试数据\" class=\"headerlink\" title=\"测试数据\"></a>测试数据</h3><details class=\"custom-details\">\n<summary>测试数据详情</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const data &#x3D; [\n  &#123;\n    id: 0,\n    parentId: null,\n    bizName: &quot;所有业务&quot;,\n    child: [\n      &#123;\n        id: 1,\n        parentId: 0,\n        bizName: &quot;APP项目组1&quot;,\n        child: [\n          &#123;\n            id: 2,\n            parentId: 1,\n            bizName: &quot;APP项目组-1&quot;,\n          &#125;,\n          &#123;\n            id: 27,\n            parentId: 1,\n            bizName: &quot;测试&quot;,\n          &#125;,\n        ],\n      &#125;,\n      &#123;\n        id: 3,\n        parentId: 0,\n        bizName: &quot;0-APP项目组&quot;,\n        child: [\n          &#123;\n            id: 29,\n            parentId: 3,\n            bizName: &quot;测试业务线&quot;,\n          &#125;,\n          &#123;\n            id: 42,\n            parentId: 3,\n            bizName: &quot;测试acl&quot;,\n          &#125;,\n        ],\n      &#125;,\n      &#123;\n        id: 5,\n        parentId: 0,\n        bizName: &quot;测试的业务线4&quot;,\n        child: [\n          &#123;\n            id: 23,\n            parentId: 5,\n            bizName: &quot;业务线测试&quot;,\n          &#125;,\n        ],\n      &#125;,\n      &#123;\n        id: 6,\n        parentId: 0,\n        bizName: &quot;测试的业务线5&quot;,\n        child: [\n          &#123;\n            id: 24,\n            parentId: 6,\n            bizName: &quot;测试测试业务线报错&quot;,\n          &#125;,\n        ],\n      &#125;,\n      &#123;\n        id: 8,\n        parentId: 0,\n        bizName: &quot;测试的业务线8&quot;,\n        child: [\n          &#123;\n            id: 25,\n            parentId: 8,\n            bizName: &quot;开发测试的业务线21&quot;,\n          &#125;,\n          &#123;\n            id: 26,\n            parentId: 8,\n            bizName: &quot;开发测试的业务线22&quot;,\n          &#125;,\n        ],\n      &#125;,\n      &#123;\n        id: 9,\n        parentId: 0,\n        bizName: &quot;测试的业务线9&quot;,\n      &#125;,\n    ],\n  &#125;,\n];</code></pre>\n</p>\n</details>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&quot;res - 2&quot;, findTreeNodeByKey(2, data));\nconsole.log(&quot;res - 1326&quot;, findTreeNodeByKey(13, data));\n&#x2F;&#x2F; console.log(&quot;res - 0&quot;, findTreeNodeByKey(0, data));\nconsole.log(&quot;res - 996&quot;, findTreeNodeByKey(996, data));</code></pre>\n\n<h2 id=\"js-获取某个节点-对应的路径\"><a href=\"#js-获取某个节点-对应的路径\" class=\"headerlink\" title=\"js 获取某个节点, 对应的路径\"></a>js 获取某个节点, 对应的路径</h2><ul>\n<li>路径 type&#x3D;path</li>\n<li>父节点组 type&#x3D;item</li>\n</ul>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n&#x2F;**\n *\n * @param &#123;数组：树data&#125; tree\n * @param &#123;目标值&#125; targetValue\n * @param &#123;配置信息&#125; options\n * @returns\n *&#x2F;\nfunction findNodePaths(tree, targetValue, options) &#123;\n  const defaultOptions &#x3D; &#123;\n    find_field: &quot;id&quot;, &#x2F;&#x2F; 与 targetValue匹配的字段\n    path_field: &quot;id&quot;, &#x2F;&#x2F; 生成路径的字段\n    separator: &quot;,&quot;, &#x2F;&#x2F; 路径字段分隔符\n    type: &quot;path&quot;, &#x2F;&#x2F; path &#x2F; item\n    children: &quot;children&quot;,\n  &#125;;\n  console.log(&#39;options&#39;,options)\n  options &#x3D; &#123;\n    ...defaultOptions,\n    ...options,\n  &#125;;\n  &#x2F;&#x2F; 首先我们先定义个数组，用来保存路径节点id\n  let nodePathArray &#x3D; [];\n\n  &#x2F;&#x2F; (tree为目标树，targetId为目标节点id)\n  function getNodeRoute(tree, targetValue, options) &#123;\n    for (let index &#x3D; 0; index &lt; tree.length; index++) &#123;\n      if (tree[index][options.children]) &#123;\n        let endRecursiveLoop &#x3D; getNodeRoute(\n          tree[index][options.children],\n          targetValue,\n          options\n        );\n        console.log(&quot;endRecursiveLoop&quot;, endRecursiveLoop);\n        if (endRecursiveLoop) &#123;\n          if (options.type &#x3D;&#x3D;&#x3D; &quot;path&quot;) &#123;\n            nodePathArray.push(tree[index][options.path_field]);\n          &#125; else &#123;\n            nodePathArray.push(tree[index]);\n          &#125;\n          return true;\n        &#125;\n      &#125;\n      if (tree[index][options.find_field] &#x3D;&#x3D;&#x3D; targetValue) &#123;\n        if (options.type &#x3D;&#x3D;&#x3D; &quot;path&quot;) &#123;\n          nodePathArray.push(tree[index][options.path_field]);\n        &#125; else &#123;\n          nodePathArray.push(tree[index]);\n        &#125;\n        return true;\n      &#125;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 转化成数组\n  let _tree &#x3D; [];\n  if (Array.isArray(tree)) &#123;\n    _tree &#x3D; tree;\n  &#125; else &#123;\n    _tree &#x3D; [tree];\n  &#125;\n\n  getNodeRoute(_tree, targetValue, options);\n  console.log(&quot;nodePathArray&quot;, nodePathArray);\n\n  if (options.type &#x3D;&#x3D;&#x3D; &quot;path&quot;) &#123;\n    return nodePathArray.reverse().join(options.separator);\n  &#125; else &#123;\n    return nodePathArray.reverse();\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const paths &#x3D; findNodePaths(data, 81); &#x2F;&#x2F;查找id为112的节点路径\nconsole.log(paths);\n\nconst pathItems &#x3D; findNodePaths(treeArray, 81, &#123; type: &quot;item&quot; &#125;); &#x2F;&#x2F;查找id为112的节点路径\nconsole.log(pathItems);</code></pre>\n","text":"mysql 存储的几种方式见 1,4 用过， 2 见过（当前公司 DHR 系统组织架构在用） js 获取树某个节点场景：编辑树节点，刷新树数据，进行编辑节点回显，某些情况下，树节点被转移他人，当前节点不需要回显 代码&#x2F;** * * @param &#123;要查询的节点...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"tree","slug":"tree","count":1,"path":"api/categories/tree.json"}],"tags":[{"name":"tree","slug":"tree","count":1,"path":"api/tags/tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mysql-%E5%AD%98%E5%82%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">mysql 存储的几种方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js-%E8%8E%B7%E5%8F%96%E6%A0%91%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">js 获取树某个节点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">测试数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">测试结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js-%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9-%E5%AF%B9%E5%BA%94%E7%9A%84%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">js 获取某个节点, 对应的路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"react hook 如何增加依赖更新","uid":"66abc3dc4231aab7cbe8387d3c356301","slug":"2022-08-23react-hook","date":"2022-08-23T08:25:15.000Z","updated":"2022-09-16T15:03:32.529Z","comments":true,"path":"api/articles/2022-08-23react-hook.json","keywords":null,"cover":[],"text":"背景想将，业务逻辑按钮组封装为 hook,在移动端和 pc 端之间进行逻辑复用。在详情页面使用时候，发现并没有生效 原因： 无法给 useActions，增加依赖项，类似 useEffect 的第二参数一样。 查询了 ahooks 的 hook，了解类似解决方案 useActio...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"React","slug":"React","count":27,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":21,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"移动端问题（待补充）","uid":"9ca59950df988675bcde5e82f2244716","slug":"2022-08-22mb","date":"2022-08-22T10:55:01.000Z","updated":"2022-09-16T13:54:56.314Z","comments":true,"path":"api/articles/2022-08-22mb.json","keywords":null,"cover":null,"text":"【移动端】移动端点击可点击元素时，出现蓝色默认背景色见 web页面放在移动端，点击button 标签或者添加了cursor:pointer 样式的标签，会出现 蓝色背景色， 解决方案： 给相应标签 或者直接在body 标签上添加 样式： &#96;&#96;&#96;css -w...","link":"","photos":[],"count_time":{"symbolsCount":663,"symbolsTime":"1 mins."},"categories":[{"name":"移动端适配","slug":"移动端适配","count":1,"path":"api/categories/移动端适配.json"}],"tags":[{"name":"移动端适配","slug":"移动端适配","count":1,"path":"api/tags/移动端适配.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}