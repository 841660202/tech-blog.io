{"title":"前端基础-webpack系列","uid":"1e83d022f4eb1c3b94dc11a21715ce7c","slug":"2022-07-14webpack","date":"2022-07-14T14:19:31.000Z","updated":"2022-09-16T13:54:56.213Z","comments":true,"path":"api/articles/2022-07-14webpack.json","keywords":null,"cover":null,"content":"<h2 id=\"webpack-与-grunt、gulp-的不同？\"><a href=\"#webpack-与-grunt、gulp-的不同？\" class=\"headerlink\" title=\"webpack 与 grunt、gulp 的不同？\"></a>webpack 与 grunt、gulp 的不同？</h2><ul>\n<li><p><code>Grunt、Gulp</code> 是基于任务运⾏的⼯具： 它们会⾃动执⾏指定的任务，就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活跃的社区，丰富的插 件，能⽅便的打造各种⼯作流。</p>\n</li>\n<li><p><code>Webpack</code> 是基于模块化打包的⼯具: ⾃动化处理模块,webpack 把⼀切当成模块，当 webpack 处理应⽤程序时，它会递归地构建⼀个依赖关系图 (dependency graph)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 bundle。 因此这是完全不同的两类⼯具,⽽现在主流的⽅式是⽤ npm script 代替 Grunt、Gulp,npm script 同样可以打造任务流</p>\n</li>\n</ul>\n<h2 id=\"webpack、rollup、parcel、vite-优劣？\"><a href=\"#webpack、rollup、parcel、vite-优劣？\" class=\"headerlink\" title=\"webpack、rollup、parcel、vite 优劣？\"></a>webpack、rollup、parcel、vite 优劣？</h2><ul>\n<li>webpack 适⽤于⼤型复杂的前端站点构建: webpack 有强⼤的 loader 和插件⽣态,打包后的⽂件实际上就是⼀个⽴即 执⾏函数，这个⽴即执⾏函数接收⼀个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。⽴即执 ⾏函数内部则处理模块之间的引⽤，执⾏模块等,这种情况更适合⽂件依赖复杂的应⽤开发.</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote>\n<ul>\n<li>Rollup</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中，而不是以前的特殊解决方案，如 CommonJS 和 AMD。ES6 模块可以使你自由、无缝地使用你最喜爱的 library 中那些最有用独立函数，而你的项目不必携带其他未使用的代码。ES6 模块最终还是要由浏览器原生实现，但当前 Rollup 可以使你提前体验。</p></blockquote>\n<ul>\n<li>parcel 极速零配置 Web 应用打包工具</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🚀 <code>极速打包</code>: Parcel 使用 worker 进程去启用多核编译。同时有文件系统缓存，即使在重启构建后也能快速再编译。<br>📦 <code>将你所有的资源打包</code>: Parcel 具备开箱即用的对 JS, CSS, HTML, 文件 及更多的支持，而且不需要插件。<br>🐠 <code>自动转换</code>: 如若有需要，Babel, PostCSS, 和 PostHTML 甚至 node_modules 包会被用于自动转换代码.<br>✂️ <code>零配置代码分拆</code>: 使用动态 import() 语法, Parcel 将你的输出文件束(bundles)分拆，因此你只需要在初次加载时加载你所需要的代码。<br>🔥 <code>热模块替换</code>: Parcel 无需配置，在开发环境的时候会自动在浏览器内随着你的代码更改而去更新模块。<br>🚨 <code>友好的错误日志</code>:当遇到错误时，Parcel 会输出 语法高亮的代码片段，帮助你定位问题。</p></blockquote>\n<ul>\n<li>vite 下一代前端开发与构建工具</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>📦 <code>极速的服务启动</code>: 使用原生 ESM 文件，无需打包!<br>⚡️ <code>轻量快速的热重载</code>: 无论应用程序大小如何，都始终极快的模块热重载（HMR）<br>🛠️ <code>丰富的功能</code>: 对 TypeScript、JSX、CSS 等支持开箱即用。<br>📦 <code>优化的构建</code>: 可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建<br>🔩 <code>通用的插件</code>: 在开发和构建之间共享 Rollup-superset 插件接口。<br>🔑 <code>完全类型化的 API</code>: 灵活的 API 和完整 TypeScript 类型。</p></blockquote>\n<h2 id=\"有哪些常⻅的-Loader？\"><a href=\"#有哪些常⻅的-Loader？\" class=\"headerlink\" title=\"有哪些常⻅的 Loader？\"></a>有哪些常⻅的 Loader？</h2><p><a href=\"https://www.webpackjs.com/loaders/url-loader/\" target=\"_blank\" >更多</a></p>\n<p><strong>文件相关的</strong></p>\n<!-- - `raw-loader`：加载文件原始内容（utf-8） -->\n\n<ul>\n<li><code>file-loader</code>：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li>\n<li><code>url-loader</code>：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li>\n<li><code>source-map-loader</code>：加载额外的 Source Map 文件，以方便断点调试</li>\n<li><code>svg-inline-loader</code>：将压缩后的 SVG 内容注入代码中</li>\n<li><code>image-loader</code>：加载并且压缩图片文件</li>\n<li><code>json-loader</code> 加载 JSON 文件（默认包含）</li>\n<li><code>handlebars-loader</code>: 将 Handlebars 模版编译成函数并返回</li>\n</ul>\n<p><strong>脚本相关的</strong></p>\n<ul>\n<li><code>babel-loader</code>：把 ES6 转换成 ES5</li>\n<li><code>ts-loader</code>: 将 TypeScript 转换成 JavaScript</li>\n<li><code>awesome-typescript-loader</code>：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li>\n</ul>\n<p><strong>样式相关的</strong></p>\n<ul>\n<li><code>sass-loader</code>：将 SCSS&#x2F;SASS 代码转换成 CSS</li>\n<li><code>css-loader</code>：加载 CSS，支持模块化、压缩、文件导入等特性</li>\n<li><code>style-loader</code>：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li>\n<li><code>postcss-loader</code>：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li>\n</ul>\n<p><strong>校验相关的</strong></p>\n<ul>\n<li><code>eslint-loader</code>：通过 ESLint 检查 JavaScript 代码</li>\n<li><code>tslint-loader</code>：通过 TSLint 检查 TypeScript 代码</li>\n</ul>\n<p><strong>测试相关的</strong></p>\n<ul>\n<li><code>mocha-loader</code>：加载 Mocha 测试用例的代码</li>\n<li><code>coverjs-loader</code>：计算测试的覆盖率</li>\n</ul>\n<p><strong>框架相关的</strong></p>\n<ul>\n<li><code>vue-loader</code>：加载 Vue.js 单文件组件</li>\n</ul>\n<p><strong>语言相关的</strong></p>\n<ul>\n<li><code>i18n-loader</code>: 国际化</li>\n</ul>\n<p><strong>性能相关的</strong></p>\n<ul>\n<li><code>cache-loader</code>: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li>\n</ul>\n<p><a href=\"https://webpack.docschina.org/loaders/cache-loader/#getting-started\" target=\"_blank\" >见 webpack cache-loader</a></p>\n<h2 id=\"有哪些常⻅的-Plugin？\"><a href=\"#有哪些常⻅的-Plugin？\" class=\"headerlink\" title=\"有哪些常⻅的 Plugin？\"></a>有哪些常⻅的 Plugin？</h2><p><strong>基本</strong></p>\n<ul>\n<li><code>define-plugin</code>：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li>\n<li><code>html-webpack-plugin</code>：简化 HTML 文件创建 (依赖于 html-loader)</li>\n<li><code>web-webpack-plugin</code>：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li>\n<li><code>clean-webpack-plugin</code>: 目录清理</li>\n</ul>\n<p><strong>编译范围优化相关</strong></p>\n<ul>\n<li><code>ignore-plugin</code>：忽略部分文件</li>\n</ul>\n<p><strong>压缩优化相关</strong></p>\n<ul>\n<li><code>uglifyjs-webpack-plugin</code>：不支持 ES6 压缩 (Webpack4 以前)</li>\n<li><code>terser-webpack-plugin</code>: 支持压缩 ES6 (Webpack4)</li>\n<li><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li>\n</ul>\n<p><strong>其他优化相关</strong></p>\n<ul>\n<li><code>mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代 extract-text-webpack-plugin)</li>\n<li><code>serviceworker-webpack-plugin</code>：为网页应用增加离线缓存功能</li>\n<li><code>ModuleConcatenationPlugin</code>: 开启 Scope Hoisting</li>\n</ul>\n<p><strong>分析相关</strong></p>\n<ul>\n<li><code>speed-measure-webpack-plugin</code>: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li>\n<li><code>webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li>\n</ul>\n<h2 id=\"分别介绍-bundle，chunk，module-是什么\"><a href=\"#分别介绍-bundle，chunk，module-是什么\" class=\"headerlink\" title=\"分别介绍 bundle，chunk，module 是什么\"></a>分别介绍 bundle，chunk，module 是什么</h2><ul>\n<li><code>bundle</code>：是由 webpack 打包出来的⽂件</li>\n<li><code>chunk</code>：代码块，⼀个 chunk 由多个模块组合⽽成，⽤于代码的合并和分割</li>\n<li><code>module</code>：是开发中的单个模块，在 webpack 的世界，⼀切皆模块，⼀个模块对应⼀个⽂件，webpack 会从配置的 entry 中递归开始找出所有依赖的模块</li>\n</ul>\n<h2 id=\"Loader-和-Plugin-的不同？\"><a href=\"#Loader-和-Plugin-的不同？\" class=\"headerlink\" title=\"Loader 和 Plugin 的不同？\"></a>Loader 和 Plugin 的不同？</h2><p><strong>作用</strong></p>\n<ul>\n<li><code>Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。<br>因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</li>\n<li><code>Plugin</code> 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li>\n</ul>\n<p><strong>使用</strong></p>\n<ul>\n<li><code>Loader</code> 在 <code>module.rules</code> 中配置，作为模块的解析规则，类型为数组。<code>每一项都是一个 Object</code>，内部包含了 <code>test</code>(类型文件)、<code>loader</code>、<code>options</code> (参数)等属性。</li>\n<li><code>Plugin</code> 在 <code>plugins</code> 中单独配置，类型为数组，<code>每一项是一个 Plugin 的实例</code>，参数都通过构造函数传入。</li>\n</ul>\n<h2 id=\"webpack-的构建流程是什么\"><a href=\"#webpack-的构建流程是什么\" class=\"headerlink\" title=\"webpack 的构建流程是什么?\"></a>webpack 的构建流程是什么?</h2><p>Webpack 的运行流程是一个<code>串行的过程</code>，从启动到结束会依次执行以下流程：</p>\n<ul>\n<li><code>初始化参数</code>：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li>\n<li><code>开始编译</code>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li>\n<li><code>确定入口</code>：根据配置中的 entry 找出所有的入口文件</li>\n<li><code>编译模块</code>：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li>\n<li><code>完成模块编译</code>：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li>\n<li><code>输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li>\n<li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li>\n</ul>\n<p>在以上过程中，Webpack <code>会在特定的时间点广播出特定的事件</code>，<code>插件</code>在监听到感兴趣的事件后会执行特定的逻辑，并且<code>插件</code>可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。<br>简单说</p>\n<ul>\n<li><code>初始化</code>：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li>\n<li><code>编译</code>：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li>\n<li><code>输出</code>：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li>\n</ul>\n<h2 id=\"描述下编写-loader-的思路\"><a href=\"#描述下编写-loader-的思路\" class=\"headerlink\" title=\"描述下编写 loader 的思路\"></a>描述下编写 loader 的思路</h2><p>Loader 像⼀个”翻译官”把读到的源⽂件内容转义成新的⽂件内容，并且每个 Loader 通过链式操作，将源⽂件⼀步步翻译 成想要的样⼦。 编写 Loader 时要遵循单⼀原则，每个 Loader 只做⼀种”转义”⼯作。 每个 Loader 的拿到的是源⽂件内容（ source ），可 以通过返回值的⽅式将处理后的内容输出，也可以调⽤ this.callback() ⽅法，将内容返回给 webpack。 还可以通过 this.async() ⽣成⼀个 callback 函数，再⽤这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了 开发 loader 的⼯具函数集—— loader-utils 。<br><strong>注意</strong></p>\n<ul>\n<li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li>\n<li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li>\n<li>加载本地 Loader 方法<code>Npm link</code></li>\n</ul>\n<p><a href=\"https://www.webpackjs.com/contribute/writing-a-loader/\" target=\"_blank\" >编写一个 loader</a></p>\n<p>loader 是导出为一个函数的 node 模块。该函数在 loader 转换资源的时候调用。给定的函数将调用 loader API，并通过 this 上下文访问。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getOptions &#125; from &quot;loader-utils&quot;;\nimport validateOptions from &quot;schema-utils&quot;;\n\nconst schema &#x3D; &#123;\n  type: &quot;object&quot;,\n  properties: &#123;\n    test: &#123;\n      type: &quot;string&quot;,\n    &#125;,\n  &#125;,\n&#125;;\n\nexport default function (source) &#123;\n  const options &#x3D; getOptions(this);\n\n  validateOptions(schema, options, &quot;Example Loader&quot;);\n\n  &#x2F;&#x2F; 对资源应用一些转换……\n\n  return &#96;export default $&#123;JSON.stringify(source)&#125;&#96;;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n  test: &#x2F;\\.js$&#x2F;;\n  use: [\n    &#123;\n      loader: path.resolve(&quot;path&#x2F;to&#x2F;loader.js&quot;), &#x2F;&#x2F;直接使用本地loader\n      options: &#123;\n        &#x2F;* ... *&#x2F;\n      &#125;,\n    &#125;,\n  ];\n&#125;</code></pre>\n\n<h2 id=\"描述下编写-plugin-的思路？\"><a href=\"#描述下编写-plugin-的思路？\" class=\"headerlink\" title=\"描述下编写 plugin 的思路？\"></a>描述下编写 plugin 的思路？</h2><p>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！</p>\n<p>插件目的在于解决 loader 无法实现的其他事。</p>\n<p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; ConsoleLogOnBuildWebpackPlugin.js\nconst pluginName &#x3D; &quot;ConsoleLogOnBuildWebpackPlugin&quot;;\n\nclass ConsoleLogOnBuildWebpackPlugin &#123;\n  apply(compiler) &#123;\n    &#x2F;&#x2F; 注意这个compiler\n    compiler.hooks.run.tap(pluginName, (compilation) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 注意这个compilation\n      console.log(&quot;webpack 构建过程开始！&quot;);\n    &#125;);\n  &#125;\n&#125;</code></pre>\n\n<p>compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中复用。</p>\n<p><a href=\"https://www.webpackjs.com/concepts/plugins/#%E5%89%96%E6%9E%90\" target=\"_blank\" >见 plugin 剖析</a></p>\n<h2 id=\"webpack-的热更新原理\"><a href=\"#webpack-的热更新原理\" class=\"headerlink\" title=\"webpack 的热更新原理\"></a>webpack 的热更新原理</h2><p>Webpack 的<code>热更新</code>又称<code>热替换</code>（Hot Module Replacement），缩写为 HMR。 这个机制可以做到<code>不用刷新浏览器</code>而将新变更的模块替换掉旧的模块。</p>\n<p>HMR 的核心就是客户端从服务端拉去更新后的文件，准确的说是 <code>chunk diff</code> (chunk 需要更新的部分)，实际上 <code>WDS</code> 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，<code>并带上构建时的 hash</code>，让客户端与上一次资源进行对比。</p>\n<p>客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该 chunk 的增量更新。</p>\n<p>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由<code> HotModulePlugin</code> 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像 <code>react-hot-loader</code> 和 <code>vue-loader</code> 都是借助这些 API 实现 HMR。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/30669007\" target=\"_blank\" >见</a></p>\n<h2 id=\"⽤-webpack-来优化前端性能\"><a href=\"#⽤-webpack-来优化前端性能\" class=\"headerlink\" title=\"⽤ webpack 来优化前端性能\"></a>⽤ webpack 来优化前端性能</h2><p>原则：<code>更小</code>、<code>更少</code>、<code>更近</code></p>\n<p>⽤ webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<p><strong>更小</strong></p>\n<ul>\n<li><code>压缩代码</code>:删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤ webpack 的 <code>UglifyJsPlugin</code> 和 <code>ParallelUglifyPlugin</code> 来压缩 JS ⽂件，</li>\n<li><code>利⽤ cssnano</code> （css-loader?minimize）来压缩 css</li>\n<li><code>Tree Shaking</code>: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现</li>\n</ul>\n<p><strong>更少</strong></p>\n<ul>\n<li><code>Code Splitting</code>: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存</li>\n<li><code>提取公共第三⽅库</code>: SplitChunksPlugin 插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的 公共代码</li>\n</ul>\n<p><strong>更近</strong></p>\n<ul>\n<li><code>利⽤ CDN 加速</code>: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤ webpack 对 于 output 参数和各 loader 的 publicPath 参数来修改资源路径</li>\n</ul>\n<h2 id=\"提⾼-webpack-的打包速度\"><a href=\"#提⾼-webpack-的打包速度\" class=\"headerlink\" title=\"提⾼ webpack 的打包速度\"></a>提⾼ webpack 的打包速度</h2><p><strong>打个比方：</strong></p>\n<p>一期需求时间紧任务重，领导来了，说要明天上线。<br>如何做到更快上线？（需要：<code>更多的研发资源</code>（并行）；<code>之前有的功能组件直接用</code>（不重复做事）；<code>砍几个需求吧</code>（更小的范围））</p>\n<p><strong>用更厉害的</strong></p>\n<ul>\n<li>高版本<code>node</code>和<code>webpack</code></li>\n</ul>\n<p><strong>并行</strong></p>\n<ul>\n<li><code>happypack</code>: 利⽤进程并⾏编译 loader,利⽤缓存来使得 rebuild 更快,遗憾的是作者表示已经不会继续开发此项⽬,类 似的替代者是<code>thread-loader</code></li>\n</ul>\n<p><strong>不重复做事</strong></p>\n<ul>\n<li><code>外部扩展(externals)</code>: 将不怎么需要更新的第三⽅库脱离 webpack 打包，不被打⼊ bundle 中，从⽽减少打包时间,⽐ 如 jQuery <code>⽤ script 标签引⼊</code></li>\n<li><code>dll</code>: 采⽤ webpack 的 <code>DllPlugin</code> 和 <code>DllReferencePlugin</code> 引⼊ dll，让⼀些基本不会改动的代码先打包成静态资源,避免 反复编译浪费时间</li>\n<li><code>利⽤缓存</code>: <code>webpack.cache</code> 、<code>babel-loader.cacheDirectory</code>、 <code>HappyPack.cache</code> 都可以利⽤缓存提⾼ rebuild 效率</li>\n</ul>\n<p><strong>更小的范围</strong></p>\n<ul>\n<li><code>缩⼩⽂件搜索范围</code>: ⽐如 babel-loader 插件,如果你的⽂件仅存在于 src 中,那么可以 include: path.resolve(__dirname, ‘src’) ,当然绝⼤多数情况下这种操作的提升有限,除⾮不⼩⼼ build 了 node_modules ⽂件</li>\n</ul>\n<h2 id=\"提⾼-webpack-的构建速度\"><a href=\"#提⾼-webpack-的构建速度\" class=\"headerlink\" title=\"提⾼ webpack 的构建速度\"></a>提⾼ webpack 的构建速度</h2><ul>\n<li>高版本<code>node</code>和<code>webpack</code></li>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码</li>\n<li>通过 <code>externals</code> 配置来提取常⽤库</li>\n<li>利⽤ <code>DllPlugin</code> 和 <code>DllReferencePlugin</code> 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li>\n<li>使⽤ <code>Happypack</code> 实现多线程加速编译</li>\n<li>使⽤ <code>webpack-uglify-parallel</code> 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏ 压缩来提升压缩速度</li>\n<li>使⽤ <code>Tree-shaking</code> 和 <code>Scope Hoisting</code> 来剔除多余代码</li>\n</ul>\n<h2 id=\"怎么配置单⻚应⽤？怎么配置多⻚应⽤？\"><a href=\"#怎么配置单⻚应⽤？怎么配置多⻚应⽤？\" class=\"headerlink\" title=\"怎么配置单⻚应⽤？怎么配置多⻚应⽤？\"></a>怎么配置单⻚应⽤？怎么配置多⻚应⽤？</h2><ul>\n<li><p><code>单⻚应⽤</code>可以理解为 webpack 的标准模式，直接在 entry 中指定单⻚应⽤的⼊⼝即可，这⾥不再赘述</p>\n<br/>\n<br/>\n</li>\n<li><p><code>多⻚应⽤</code>的话，可以使⽤ webpack 的 <code>AutoWebPlugin</code> 来完成简单⾃动化的构建，但是前提是项⽬的<code>⽬录结构必须遵守他预设的规范</code>。 多⻚应⽤中要注意的是： <code>每个⻚⾯都有公共的代码，可以将这些代码抽离出来，避免重复的加载</code>。⽐如，每个⻚⾯都引⽤了同⼀套 css 样式表随着业务的不断扩展，⻚⾯可能会不断的追加，所以⼀定要让<code>⼊⼝的配置⾜够灵活</code>，避免每次添加新⻚⾯还需要修改构建配置</p>\n</li>\n</ul>\n<h2 id=\"source-map-是什么？生产环境怎么用？\"><a href=\"#source-map-是什么？生产环境怎么用？\" class=\"headerlink\" title=\"source map 是什么？生产环境怎么用？\"></a>source map 是什么？生产环境怎么用？</h2><p><code>source map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。</p>\n<ul>\n<li><code>打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map</code>。</li>\n<li>map 文件只要不打开开发者工具，浏览器是不会加载的。</li>\n</ul>\n<p><strong>线上环境一般有三种处理方案：</strong></p>\n<ul>\n<li><code>hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li>\n<li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li>\n<li><code>sourcemap</code>：通过<code>nginx</code> 设置将 <code>.map</code> 文件<code>只对白名单开放</code>(公司内网)</li>\n</ul>\n<p>注意：避免在生产中使用 <code>inline-</code> 和 <code>eval-</code>，因为它们会增加 bundle 体积大小，并降低整体性能。</p>\n<p><a href=\"https://juejin.cn/post/6844903450644316174\" target=\"_blank\" >[webpack] devtool 里的 7 种 SourceMap 模式是什么鬼？</a></p>\n<p>sourcemap 关键字如下</p>\n<p><strong>eval</strong></p>\n<p>使用 eval 包裹代码模块（这个代码块是转译后的代码，并未进行打包和压缩）<br>eval 包裹每个代码块时候，会在后面增加”sourceURL”（和 sourcemap 里的”sourceMappingURL”不同）用来定位到原文件。</p>\n<p>eval 模式优势在于，它是将每个模块单独 eval 执行，因此如果配合 source-map 使用，就可以单独缓存每个模块的 sourcemap，这样就可以在重新构建时候实现增量修改 sourcemap，节省时间。</p>\n<p>如果不使用 eval 模式，就是一个文件（chunk）对应一个 sourcemap，重新构建时候需要将整个 chunk 的 sourcemap 重新生成，更耗费时间。</p>\n<p>因此 eval 模式的优势就在于重新构建的速度更快</p>\n<p><strong>source-map</strong></p>\n<p>产生 source map</p>\n<p><strong>cheap</strong></p>\n<p>用来修饰 source-map<br>让 sourcemap 只保存行信息，不保存列信息<br>让 sourcemap 只将打包后的代码映射到转换过的代码，不映射到原始源代码<br>【由于源代码到转译后的代码的映射关系由相应的 loader 提供，因此 cheap 模式应该不需要关心这部分的 sourcemap】</p>\n<p><strong>module</strong></p>\n<p>用来修饰 cheap-source-map<br>让 sourcemap 可以映射到原始源代码<br>【由于源代码到转译后的代码的映射关系由相应的 loader 提供，因此 module 模式应该会处理这部分 sourcemap，以最终得到到原始源代码的映射】</p>\n<p><strong>inline</strong></p>\n<p>用来修饰 source-map<br>将.map 作为 DataURI 嵌入，不单独生成.map 文件</p>\n<p><a href=\"https://www.jianshu.com/p/b2316aab32bb\" target=\"_blank\" >webpack 的 sourcemap 各种参数详解</a></p>\n<table>\n<thead>\n<tr>\n<th>devtool</th>\n<th>构建速度</th>\n<th>重新构建速度</th>\n<th>生产环境</th>\n<th>品质</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(none)</td>\n<td>+++</td>\n<td>+++</td>\n<td>yes</td>\n<td>打包后的代码</td>\n</tr>\n<tr>\n<td>eval</td>\n<td>+++</td>\n<td>+++</td>\n<td>no</td>\n<td>生成后的代码</td>\n</tr>\n<tr>\n<td>source-map</td>\n<td>–</td>\n<td>–</td>\n<td>yes</td>\n<td>原始源代码</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>–</td>\n<td>+</td>\n<td>no</td>\n<td>原始源代码</td>\n</tr>\n<tr>\n<td>cheap-source-map</td>\n<td>+</td>\n<td>o</td>\n<td>no</td>\n<td>转换过的代码（仅限行）</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>o</td>\n<td>-</td>\n<td>no</td>\n<td>原始源代码（仅限行）</td>\n</tr>\n<tr>\n<td>cheap-eval-source-map</td>\n<td>+</td>\n<td>++</td>\n<td>no</td>\n<td>转换过的代码（仅限行）</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>o</td>\n<td>++</td>\n<td>no</td>\n<td>原始源代码（仅限行）</td>\n</tr>\n<tr>\n<td>inline-source-map</td>\n<td>–</td>\n<td>–</td>\n<td>no</td>\n<td>原始源代码</td>\n</tr>\n<tr>\n<td>inline-cheap-source-map</td>\n<td>+</td>\n<td>o</td>\n<td>no</td>\n<td>转换过的代码（仅限行）</td>\n</tr>\n<tr>\n<td>inline-cheap-module-source-map</td>\n<td>o</td>\n<td>-</td>\n<td>no</td>\n<td>原始源代码（仅限行）</td>\n</tr>\n<tr>\n<td>hidden-source-map</td>\n<td>–</td>\n<td>–</td>\n<td>yes</td>\n<td>原始源代码</td>\n</tr>\n<tr>\n<td>nosources-source-map</td>\n<td>–</td>\n<td>–</td>\n<td>yes</td>\n<td>无源代码内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"模块打包原理知道吗？\"><a href=\"#模块打包原理知道吗？\" class=\"headerlink\" title=\"模块打包原理知道吗？\"></a>模块打包原理知道吗？</h2><p>Webpack <code>实际上为每个模块创造了一个可以导出和导入的环境</code>，<code>本质上并没有修改 代码的执行逻辑</code>，<code>代码执行顺序与模块加载顺序也完全一致</code>。</p>\n<h2 id=\"文件指纹是什么？怎么用？\"><a href=\"#文件指纹是什么？怎么用？\" class=\"headerlink\" title=\"文件指纹是什么？怎么用？\"></a>文件指纹是什么？怎么用？</h2><p>文件指纹是打包后输出的文件名的后缀。</p>\n<ul>\n<li><code>Hash</code>：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li><code>Chunkhash</code>：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li>\n<li><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li>\n</ul>\n<h3 id=\"JS-的文件指纹设置\"><a href=\"#JS-的文件指纹设置\" class=\"headerlink\" title=\"JS 的文件指纹设置\"></a>JS 的文件指纹设置</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  entry: &#123;\n    app: &quot;.&#x2F;scr&#x2F;app.js&quot;,\n    search: &quot;.&#x2F;src&#x2F;search.js&quot;,\n  &#125;,\n  output: &#123;\n    filename: &quot;[name][chunkhash:8].js&quot;,\n    path: __dirname + &quot;&#x2F;dist&quot;,\n  &#125;,\n&#125;;</code></pre>\n\n<h3 id=\"CSS-的文件指纹设置\"><a href=\"#CSS-的文件指纹设置\" class=\"headerlink\" title=\"CSS 的文件指纹设置\"></a>CSS 的文件指纹设置</h3><p>设置 <code>MiniCssExtractPlugin</code> 的 <code>filename</code>，使用 <code>contenthash</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  entry: &#123;\n    app: &quot;.&#x2F;scr&#x2F;app.js&quot;,\n    search: &quot;.&#x2F;src&#x2F;search.js&quot;,\n  &#125;,\n  output: &#123;\n    filename: &quot;[name][chunkhash:8].js&quot;,\n    path: __dirname + &quot;&#x2F;dist&quot;,\n  &#125;,\n  plugins: [\n    new MiniCssExtractPlugin(&#123;\n      filename: &#96;[name][contenthash:8].css&#96;,\n    &#125;),\n  ],\n&#125;;</code></pre>\n\n<h3 id=\"图片的文件指纹设置\"><a href=\"#图片的文件指纹设置\" class=\"headerlink\" title=\"图片的文件指纹设置\"></a>图片的文件指纹设置</h3><p>设置<code>file-loader</code>的<code>name</code>，使用<code>hash</code>。<br>占位符名称及含义</p>\n<ul>\n<li><code>ext</code> 资源后缀名</li>\n<li><code>name</code> 文件名称</li>\n<li><code>path</code> 文件的相对路径</li>\n<li><code>folder</code> 文件所在的文件夹</li>\n<li><code>contenthash</code> 文件的内容 hash，默认是 md5 生成</li>\n<li><code>hash</code> 文件内容的 hash，默认是 md5 生成</li>\n<li><code>emoji</code> 一个随机的指代文件内容的 emoj</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const path &#x3D; require(&quot;path&quot;);\n\nmodule.exports &#x3D; &#123;\n  entry: &quot;.&#x2F;src&#x2F;index.js&quot;,\n  output: &#123;\n    filename: &quot;bundle.js&quot;,\n    path: path.resolve(__dirname, &quot;dist&quot;),\n  &#125;,\n  module: &#123;\n    rules: [\n      &#123;\n        test: &#x2F;\\.(png|svg|jpg|gif)$&#x2F;,\n        use: [\n          &#123;\n            loader: &quot;file-loader&quot;, &#x2F;&#x2F; 这里\n            options: &#123;\n              name: &quot;img&#x2F;[name][hash:8].[ext]&quot;, &#x2F;&#x2F; 这里\n            &#125;,\n          &#125;,\n        ],\n      &#125;,\n    ],\n  &#125;,\n&#125;;</code></pre>\n\n<h2 id=\"如何对-bundle-体积进行监控和分析？\"><a href=\"#如何对-bundle-体积进行监控和分析？\" class=\"headerlink\" title=\"如何对 bundle 体积进行监控和分析？\"></a>如何对 bundle 体积进行监控和分析？</h2><ul>\n<li>VSCode 中有一个插件 <code>Import Cost</code> 可以帮助我们对引入模块的大小进行实时监测，</li>\n<li>还可以使用 <code>webpack-bundle-analyzer</code> 生成 bundle 的模块组成图，显示所占体积。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.cn/post/6844904094281236487\" target=\"_blank\" >吐血整理」再来一打 Webpack 面试题</a></p>\n<p><a href=\"https://juejin.cn/post/7073869980411887652\" target=\"_blank\" >最近两周出去面试遇到的面试题（前端初级、长更）</a></p>\n","text":"webpack 与 grunt、gulp 的不同？ Grunt、Gulp 是基于任务运⾏的⼯具： 它们会⾃动执⾏指定的任务，就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活跃的社区，丰富的插 件，能⽅便的打造各种⼯作流。 Webpack 是基于模块化打包的⼯具: ⾃动...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":51,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webpack-%E4%B8%8E-grunt%E3%80%81gulp-%E7%9A%84%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">webpack 与 grunt、gulp 的不同？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webpack%E3%80%81rollup%E3%80%81parcel%E3%80%81vite-%E4%BC%98%E5%8A%A3%EF%BC%9F\"><span class=\"toc-text\">webpack、rollup、parcel、vite 优劣？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E2%BB%85%E7%9A%84-Loader%EF%BC%9F\"><span class=\"toc-text\">有哪些常⻅的 Loader？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E2%BB%85%E7%9A%84-Plugin%EF%BC%9F\"><span class=\"toc-text\">有哪些常⻅的 Plugin？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%88%AB%E4%BB%8B%E7%BB%8D-bundle%EF%BC%8Cchunk%EF%BC%8Cmodule-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">分别介绍 bundle，chunk，module 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Loader-%E5%92%8C-Plugin-%E7%9A%84%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">Loader 和 Plugin 的不同？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webpack-%E7%9A%84%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">webpack 的构建流程是什么?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0%E4%B8%8B%E7%BC%96%E5%86%99-loader-%E7%9A%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">描述下编写 loader 的思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0%E4%B8%8B%E7%BC%96%E5%86%99-plugin-%E7%9A%84%E6%80%9D%E8%B7%AF%EF%BC%9F\"><span class=\"toc-text\">描述下编写 plugin 的思路？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webpack-%E7%9A%84%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">webpack 的热更新原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%BD%A4-webpack-%E6%9D%A5%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">⽤ webpack 来优化前端性能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E2%BE%BC-webpack-%E7%9A%84%E6%89%93%E5%8C%85%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">提⾼ webpack 的打包速度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E2%BE%BC-webpack-%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6\"><span class=\"toc-text\">提⾼ webpack 的构建速度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E5%8D%95%E2%BB%9A%E5%BA%94%E2%BD%A4%EF%BC%9F%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E5%A4%9A%E2%BB%9A%E5%BA%94%E2%BD%A4%EF%BC%9F\"><span class=\"toc-text\">怎么配置单⻚应⽤？怎么配置多⻚应⽤？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#source-map-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">source map 是什么？生产环境怎么用？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%8E%9F%E7%90%86%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">模块打包原理知道吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">文件指纹是什么？怎么用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JS-%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">JS 的文件指纹设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CSS-%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">CSS 的文件指纹设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%87%E4%BB%B6%E6%8C%87%E7%BA%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">图片的文件指纹设置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AF%B9-bundle-%E4%BD%93%E7%A7%AF%E8%BF%9B%E8%A1%8C%E7%9B%91%E6%8E%A7%E5%92%8C%E5%88%86%E6%9E%90%EF%BC%9F\"><span class=\"toc-text\">如何对 bundle 体积进行监控和分析？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-安全","uid":"63e60c5ff1f2bb6bee35b8ec5818fb3b","slug":"2022-07-15安全","date":"2022-07-15T06:32:30.000Z","updated":"2023-02-28T15:57:25.663Z","comments":true,"path":"api/articles/2022-07-15安全.json","keywords":null,"cover":null,"text":"前端安全问题? 跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS. 早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚ ⾯, 其...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":51,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-数组","uid":"12cc7106661c51633c97f9b1ac94a946","slug":"2022-07-14js-arr","date":"2022-07-14T07:40:32.000Z","updated":"2022-09-16T13:54:56.212Z","comments":true,"path":"api/articles/2022-07-14js-arr.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202208022304934.png","text":"思维导图 创建 取值 查找 扁平化 遍历 返回 boolean 返回字符串 增&#x2F;删&#x2F;改&#x2F;拷贝&#x2F;解构 详细内容 查看数组 proto[1, 2, 3]; &#x2F;&#x2F; 将结果展开后，见下图 哎呦 [].__proto__Objec...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":49,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":51,"path":"api/tags/前端基础.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"<div><p>眼中有光，心中有梦，脚下有路</p><p>做好该做的，然后做自己想做的</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}