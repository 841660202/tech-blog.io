{"title":"redux-logger源码","uid":"8b8288a2a8637d5beee93bb6d37a8ba8","slug":"2022-05-27redux-logger","date":"2022-05-27T05:52:01.000Z","updated":"2022-09-16T14:58:09.031Z","comments":true,"path":"api/articles/2022-05-27redux-logger.json","keywords":null,"cover":[],"content":"<h2 id=\"redux-日志中间件\"><a href=\"#redux-日志中间件\" class=\"headerlink\" title=\"redux 日志中间件\"></a>redux 日志中间件</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">.\n├── core.js\n├── defaults.js\n├── diff.js\n├── helpers.js &#x2F;&#x2F; 一些帮助函数\n└── index.js\n\n0 directories, 5 files</code></pre>\n<h2 id=\"defaultLogger\"><a href=\"#defaultLogger\" class=\"headerlink\" title=\"defaultLogger\"></a>defaultLogger</h2><p><strong>v3 版本，破坏性变更</strong></p>\n<p>之前</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import createLogger from &quot;redux-logger&quot;;</code></pre>\n\n<p>之后</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import &#123; createLogger &#125; from &quot;redux-logger&quot;;</code></pre>\n\n<p><strong>源码</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;index.js\n\nconst defaultLogger &#x3D; (&#123; dispatch, getState &#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123;\n  if (typeof dispatch &#x3D;&#x3D;&#x3D; &quot;function&quot; || typeof getState &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;\n    &#x2F;&#x2F; createLogger，柯里化 工厂模式\n    return createLogger()(&#123; dispatch, getState &#125;);\n  &#125;\n  &#x2F;&#x2F; 如果没有传递dispatch和getState，打印错误信息\n  &#x2F;&#x2F; v3版本，破坏性变更, 根据《语义化版本》不看内容也知道有破坏性变更\n  &#x2F;&#x2F; Since 3.0.0 redux-logger exports by default logger with default settings\n  &#x2F;&#x2F; import createLogger from &#39;redux-logger&#39; &#x3D;&gt; import &#123; createLogger &#125; from &#39;redux-logger&#39;\n  console.error(&#96;\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from &#39;redux-logger&#39;\n[redux-logger v3] to\n[redux-logger v3] import &#123; createLogger &#125; from &#39;redux-logger&#39;\n&#96;);\n&#125;;\n\nexport &#123; defaults, createLogger, defaultLogger as logger &#125;;\n\nexport default defaultLogger;</code></pre>\n\n<h2 id=\"createLogger\"><a href=\"#createLogger\" class=\"headerlink\" title=\"createLogger\"></a>createLogger</h2><ul>\n<li>使用传入的 options， 创建日志记录器</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * Creates logger with following options\n * 创建日志记录器，配置如下：\n * @namespace\n * @param &#123;object&#125; options - options for logger\n * @param &#123;string | function | object&#125; options.level - console[level] 日志级别\n * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间\n * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳\n * @param &#123;object&#125; options.colors - custom colors 定制颜色\n * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现\n * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出\n * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组\n * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为\n * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换\n * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换\n * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换\n *\n * @returns &#123;function&#125; logger middleware 返回中间件\n *&#x2F;\nfunction createLogger(options &#x3D; &#123;&#125;) &#123;\n  const loggerOptions &#x3D; Object.assign(&#123;&#125;, defaults, options);\n\n  const &#123;\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate,\n  &#125; &#x3D; loggerOptions;\n\n  &#x2F;&#x2F; Return if &#39;console&#39; object is not defined\n  &#x2F;&#x2F; 如果&#39;console&#39;对象未定义，返回\n  if (typeof logger &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;\n    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);\n  &#125;\n\n  &#x2F;&#x2F; Detect if &#39;createLogger&#39; was passed directly to &#39;applyMiddleware&#39;.\n  &#x2F;&#x2F; 判断是否传递给applyMiddleware\n  if (options.getState &amp;&amp; options.dispatch) &#123;\n    &#x2F;&#x2F; eslint-disable-next-line no-console\n    console.error(&#96;[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n&#x2F;&#x2F; Logger with default options\nimport &#123; logger &#125; from &#39;redux-logger&#39;\nconst store &#x3D; createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n&#x2F;&#x2F; Or you can create your own logger with custom options http:&#x2F;&#x2F;bit.ly&#x2F;redux-logger-options\nimport &#123; createLogger &#125; from &#39;redux-logger&#39;\nconst logger &#x3D; createLogger(&#123;\n  &#x2F;&#x2F; ...options\n&#125;);\nconst store &#x3D; createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n&#96;);\n    &#x2F;&#x2F; 中间件书写套路\n    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);\n  &#125;\n\n  const logBuffer &#x3D; [];\n\n  return (&#123; getState &#125;) &#x3D;&gt;\n    (next) &#x3D;&gt;\n    (action) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; Exit early if predicate function returns &#39;false&#39; 如果predicate函数返回false，退出\n      if (typeof predicate &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; !predicate(getState, action)) &#123;\n        return next(action);\n      &#125;\n\n      const logEntry &#x3D; &#123;&#125;;\n\n      logBuffer.push(logEntry);\n\n      logEntry.started &#x3D; timer.now();\n      logEntry.startedTime &#x3D; new Date();\n      logEntry.prevState &#x3D; stateTransformer(getState());\n      logEntry.action &#x3D; action;\n\n      let returnedValue;\n      if (logErrors) &#123;\n        try &#123;\n          returnedValue &#x3D; next(action);\n        &#125; catch (e) &#123;\n          logEntry.error &#x3D; errorTransformer(e);\n        &#125;\n      &#125; else &#123;\n        returnedValue &#x3D; next(action);\n      &#125;\n\n      logEntry.took &#x3D; timer.now() - logEntry.started;\n      logEntry.nextState &#x3D; stateTransformer(getState());\n\n      const diff &#x3D;\n        loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;\n          ? diffPredicate(getState, action)\n          : loggerOptions.diff;\n\n      printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;));\n      logBuffer.length &#x3D; 0;\n\n      if (logEntry.error) throw logEntry.error;\n      return returnedValue;\n    &#125;;\n&#125;</code></pre>\n\n<p><strong>defaults 默认配置</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;default.js\nexport default &#123;\n  level: &quot;log&quot;,\n  logger: console,\n  logErrors: true,\n  collapsed: undefined,\n  predicate: undefined,\n  duration: false,\n  timestamp: true,\n  stateTransformer: (state) &#x3D;&gt; state,\n  actionTransformer: (action) &#x3D;&gt; action,\n  errorTransformer: (error) &#x3D;&gt; error,\n  colors: &#123;\n    title: () &#x3D;&gt; &quot;inherit&quot;,\n    prevState: () &#x3D;&gt; &quot;#9E9E9E&quot;,\n    action: () &#x3D;&gt; &quot;#03A9F4&quot;,\n    nextState: () &#x3D;&gt; &quot;#4CAF50&quot;,\n    error: () &#x3D;&gt; &quot;#F20404&quot;,\n  &#125;,\n  diff: false,\n  diffPredicate: undefined,\n\n  &#x2F;&#x2F; Deprecated options 已废弃配置\n  transformer: undefined,\n&#125;;\n&#x2F;&#x2F; 字段释义\n&#x2F;**\n * Creates logger with following options\n * 创建日志记录器，配置如下：\n * @namespace\n * @param &#123;object&#125; options - options for logger\n * @param &#123;string | function | object&#125; options.level - console[level] 日志级别\n * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间\n * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳\n * @param &#123;object&#125; options.colors - custom colors 定制颜色\n * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现\n * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出\n * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组\n * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为\n * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换\n * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换\n * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换\n *\n * @returns &#123;function&#125; logger middleware 返回中间件\n *&#x2F;</code></pre>\n\n<p><strong>奇怪</strong></p>\n<ul>\n<li>这两个配置在测试文件中，没找到相关测试代码</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> &#x2F;&#x2F; 配置\n diff: false, &#x2F;&#x2F;\n diffPredicate: undefined,\n\n &#x2F;&#x2F; ...\n\n const diff &#x3D;\n       loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;\n         ? diffPredicate(getState, action)\n         : loggerOptions.diff;\n &#x2F;&#x2F; 打印日志中\n printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;));\n\n &#x2F;&#x2F; src&#x2F;core.js printBuffer的定义\nfunction printBuffer(buffer, options) &#123;\n   const &#123;\n     &#x2F;&#x2F; ...\n       diff,\n   &#125; &#x3D; options;\n   &#x2F;&#x2F; 如果开启\n   if (diff) &#123;\n     &#x2F;&#x2F; 执行了 diffLogger\n     diffLogger(prevState, nextState, logger, isCollapsed);\n   &#125;\n&#125;\n&#x2F;&#x2F; src&#x2F;diff.js\nexport default function diffLogger(prevState, newState, logger, isCollapsed) &#123;\n  &#x2F;&#x2F; import differ from &#39;deep-diff&#39;;计算对象差异化的包\n  const diff &#x3D; differ(prevState, newState);\n\n  try &#123;\n    if (isCollapsed) &#123;\n      logger.groupCollapsed(&#39;diff&#39;);\n    &#125; else &#123;\n      logger.group(&#39;diff&#39;);\n    &#125;\n  &#125; catch (e) &#123;\n    logger.log(&#39;diff&#39;);\n  &#125;\n  &#x2F;&#x2F; 有差异执行输出，这个差异包含类型kind E:编辑 N:新增 D:删除 A:数组\n  &#x2F;&#x2F; dictionary为对象，对kind值进行枚举\n  &#x2F;&#x2F; 遍历输出\n  if (diff) &#123;\n    diff.forEach((elem) &#x3D;&gt; &#123;\n      const &#123; kind &#125; &#x3D; elem;\n      const output &#x3D; render(elem);\n\n      logger.log(&#96;%c $&#123;dictionary[kind].text&#125;&#96;, style(kind), ...output);\n    &#125;);\n  &#125; else &#123;\n    logger.log(&#39;—— no diff ——&#39;);\n  &#125;\n\n  try &#123;\n    logger.groupEnd();\n  &#125; catch (e) &#123;\n    logger.log(&#39;—— diff end —— &#39;);\n  &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"helpers\"><a href=\"#helpers\" class=\"headerlink\" title=\"helpers\"></a>helpers</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; repeat + pad &#x3D; padLeft 左侧补零， es多少有个api\nexport const repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);\n\nexport const pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;\n&#x2F;&#x2F; 时间格式化\nexport const formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;\n\n&#x2F;&#x2F; Use performance API if it&#39;s available in order to get better precision\nexport const timer &#x3D;\n(typeof performance !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; performance !&#x3D;&#x3D; null) &amp;&amp; typeof performance.now &#x3D;&#x3D;&#x3D; &#39;function&#39; ?\n  performance :\n  Date;</code></pre>\n<p><strong>运行测试下</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);\n\nconst pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;\n\nconst formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;\n\nconsole.log(formatTime(new Date()))\n&#x2F;&#x2F; 输出\n18:58:15.667\n</code></pre>\n\n<h2 id=\"源码图\"><a href=\"#源码图\" class=\"headerlink\" title=\"源码图\"></a>源码图</h2><p><img src=\"http://t-blog-images.aijs.top/img/20220527190102.webp\"></p>\n<h2 id=\"deep-diff\"><a href=\"#deep-diff\" class=\"headerlink\" title=\"deep-diff\"></a>deep-diff</h2><ul>\n<li>看下两个对象比较的事例</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var lhs &#x3D; &#123;\n\tname: &#39;my object&#39;,\n\tdescription: &#39;it\\&#39;s an object!&#39;,\n\tdetails: &#123;\n\t\tit: &#39;has&#39;,\n\t\tan: &#39;array&#39;,\n\t\twith: [&#39;a&#39;, &#39;few&#39;, &#39;elements&#39;]\n\t&#125;\n&#125;;\n\nvar rhs &#x3D; &#123;\n\tname: &#39;updated object&#39;,\n\tdescription: &#39;it\\&#39;s an object!&#39;,\n\tdetails: &#123;\n\t\tit: &#39;has&#39;,\n\t\tan: &#39;array&#39;,\n\t\twith: [&#39;a&#39;, &#39;few&#39;, &#39;more&#39;, &#39;elements&#39;, &#123; than: &#39;before&#39; &#125;]\n\t&#125;\n&#125;;\n\nvar differences &#x3D; deep.diff(lhs, rhs);\n\n\n&#x2F;&#x2F; 输出\n\n\n27 May 17:27:12 - [\n  DiffEdit &#123;\n    kind: &#39;E&#39;,\n    path: [ &#39;name&#39; ],\n    lhs: &#39;my object&#39;,\n    rhs: &#39;updated object&#39;\n  &#125;,\n  DiffArray &#123;\n    kind: &#39;A&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39; ],\n    index: 4,\n    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#123; than: &#39;before&#39; &#125; &#125;\n  &#125;,\n  DiffArray &#123;\n    kind: &#39;A&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39; ],\n    index: 3,\n    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#39;elements&#39; &#125;\n  &#125;,\n  DiffEdit &#123;\n    kind: &#39;E&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39;, 2 ],\n    lhs: &#39;elements&#39;,\n    rhs: &#39;more&#39;\n  &#125;\n]</code></pre>\n","text":"redux 日志中间件. ├── core.js ├── defaults.js ├── diff.js ├── helpers.js &#x2F;&#x2F; 一些帮助函数 └── index.js 0 directories, 5 files defaultLoggerv3 ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"React","slug":"React","count":18,"path":"api/categories/React.json"}],"tags":[{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"},{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redux-%E6%97%A5%E5%BF%97%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">redux 日志中间件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#defaultLogger\"><span class=\"toc-text\">defaultLogger</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#createLogger\"><span class=\"toc-text\">createLogger</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#helpers\"><span class=\"toc-text\">helpers</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E5%9B%BE\"><span class=\"toc-text\">源码图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#deep-diff\"><span class=\"toc-text\">deep-diff</span></a></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"丷为中华之崛起而学习丷","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"wiki Laser Pen","uid":"2e69f09f2b5424b80304135ea166c436","slug":"2022-05-27wiki-laserPen","date":"2022-05-27T08:07:33.000Z","updated":"2022-09-16T13:54:56.121Z","comments":true,"path":"api/articles/2022-05-27wiki-laserPen.json","keywords":null,"cover":[],"text":"Laser PenLaser Pen 是一套用来在 web canvas 上绘制鼠标轨迹的工具集。 使用场景wiki全屏演示时候，为了便于听众跟随演讲者进度，给鼠标轨迹加上标记。 注：公司项目由于版权问题，不便演示 初步上手首先在你的项目中添加对 Laser Pen 的依赖： y...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"wiki","slug":"wiki","count":3,"path":"api/categories/wiki.json"}],"tags":[{"name":"wiki","slug":"wiki","count":4,"path":"api/tags/wiki.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"丷为中华之崛起而学习丷","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"vscode i18n-ally","uid":"98e904a0d3e9702a10dc20a22eaad4dd","slug":"2022-05-27i18n","date":"2022-05-27T02:47:24.000Z","updated":"2022-09-16T13:54:56.118Z","comments":true,"path":"api/articles/2022-05-27i18n.json","keywords":null,"cover":[],"text":"国际化 大型公司的国际化需求很高，需要支持多语言，比如中文、英文、日文等等。 i18n-ally是一个基于vscode的国际化工具，可以帮助你快速的实现国际化。 背景 如果经常做国际化的研发，应该很清楚，代码中写多语言，然而，多语言在项目中维护是非常困难的。 当遇到大型项目，业务...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":15,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":7,"path":"api/tags/工具.json"},{"name":"增效","slug":"增效","count":8,"path":"api/tags/增效.json"},{"name":"vscode","slug":"vscode","count":7,"path":"api/tags/vscode.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"丷为中华之崛起而学习丷","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}