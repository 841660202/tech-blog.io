{"title":"宝塔操作","uid":"4ced8cf48a316513e0691b990d8beeef","slug":"2023-06-28baota","date":"2023-06-28T13:31:11.000Z","updated":"2023-07-20T14:59:55.205Z","comments":true,"path":"api/articles/2023-06-28baota.json","keywords":null,"cover":[],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一个项目，运行不正常，帮整整</p>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><img src=\"http://t-blog-images.aijs.top/img/202306282131621.webp\" />\n\n<h2 id=\"启动配置\"><a href=\"#启动配置\" class=\"headerlink\" title=\"启动配置\"></a>启动配置</h2><img src=\"http://t-blog-images.aijs.top/img/202306282132832.webp\" />\n\n<h2 id=\"一点思考\"><a href=\"#一点思考\" class=\"headerlink\" title=\"一点思考\"></a>一点思考</h2><ol>\n<li><code>存在的问题</code>：看了下全是手动在操作，也没有打包，就那么运行的，性能、体验先不谈，能正常运行都很难</li>\n<li><code>简单自动化</code>： webhook + nginx 进行简单出发脚本执行打包、部署，使用 nginx 进行接口代理</li>\n</ol>\n<h2 id=\"工具信息\"><a href=\"#工具信息\" class=\"headerlink\" title=\"工具信息\"></a>工具信息</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@VM-4-7-centos test]# ls\n[root@VM-4-7-centos test]# pwd\n&#x2F;www&#x2F;wwwroot&#x2F;test\n[root@VM-4-7-centos test]# git --version\ngit version 1.8.3.1\n[root@VM-4-7-centos test]# py3 --version\n-bash: py3: command not found\n[root@VM-4-7-centos test]# python --version\nPython 2.7.5\n[root@VM-4-7-centos test]# yarn -v\n1.22.19\n[root@VM-4-7-centos test]# npm -v\n8.19.2\n[root@VM-4-7-centos test]# node -v\nv16.18.0\n[root@VM-4-7-centos test]# nginx -v\nnginx version: nginx&#x2F;1.22.1\n[root@VM-4-7-centos test]# touch index.html\n[root@VM-4-7-centos test]# vim index.html\n[root@VM-4-7-centos test]#</code></pre>\n\n<h2 id=\"外网无法访问\"><a href=\"#外网无法访问\" class=\"headerlink\" title=\"外网无法访问\"></a>外网无法访问</h2><ol>\n<li>启动端口</li>\n<li>安全中配置端口</li>\n<li>服务器开发端口(不是宝塔面板上操作)</li>\n</ol>\n<img src=\"http://t-blog-images.aijs.top/img/202307161310691.webp\" />\n\n<h2 id=\"宝塔-nginx-配置\"><a href=\"#宝塔-nginx-配置\" class=\"headerlink\" title=\"宝塔 nginx 配置\"></a>宝塔 nginx 配置</h2><h2 id=\"安全开启端口，仍无法访问\"><a href=\"#安全开启端口，仍无法访问\" class=\"headerlink\" title=\"安全开启端口，仍无法访问\"></a>安全开启端口，仍无法访问</h2><p>服务器也要开启端口</p>\n<h1 id=\"nginx-部署\"><a href=\"#nginx-部署\" class=\"headerlink\" title=\"nginx 部署\"></a>nginx 部署</h1><h2 id=\"简单发布-x2F-回滚脚本\"><a href=\"#简单发布-x2F-回滚脚本\" class=\"headerlink\" title=\"简单发布&#x2F;回滚脚本\"></a>简单发布&#x2F;回滚脚本</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># 1. 切到目录\n# 2. 目录下打开终端\n# 3. 查看可回滚的zip包\n# 4. 回滚操作\n.&#x2F;rb.sh fix-zoom.zip # fix-zoom.zip为要回滚的包</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202307181126548.webp\" />\n\n<h2 id=\"如何配置-nginx-缓存\"><a href=\"#如何配置-nginx-缓存\" class=\"headerlink\" title=\"如何配置 nginx 缓存\"></a>如何配置 nginx 缓存</h2><p>以下是一个简单的 Nginx 缓存配置示例：</p>\n<ol>\n<li><p>打开 Nginx 的配置文件（通常位于<code>/etc/nginx/nginx.conf</code>或<code>/etc/nginx/conf.d/default.conf</code>）。</p>\n</li>\n<li><p>在需要启用缓存的 location 块内添加以下配置：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\">location &#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;backend_server;   # 后端服务器的地址\n    proxy_cache cache_zone;             # 缓存名称\n    proxy_cache_valid 200 1d;           # 缓存过期时间\n    proxy_cache_methods GET HEAD;       # 允许缓存的请求方法\n    proxy_cache_bypass $http_cache_control $http_pragma;   # 不缓存的请求条件\n    proxy_no_cache $http_authorization; # 不缓存的请求条件\n    proxy_cache_key $host$uri$is_args$args;   # 缓存的键值\n&#125;</code></pre>\n\n<p>在上述配置中，你需要根据自己的实际需求做相应的修改：</p>\n<ul>\n<li><code>http://backend_server</code>需要替换为你的后端服务器的具体地址。</li>\n<li><code>cache_zone</code>是你为该缓存定义的名称，可以自定义。</li>\n<li><code>1d</code>表示缓存的有效期为一天，你可以根据需求修改。</li>\n<li><code>GET</code>和<code>HEAD</code>表示允许缓存这两种请求方法，你可以根据需要添加其他方法。</li>\n<li><code>$http_cache_control</code>和<code>$http_pragma</code>是一些请求头信息，可以在这里定义不缓存的请求条件。</li>\n<li><code>$http_authorization</code>是授权信息，可以在这里定义不缓存的请求条件。</li>\n<li><code>$host$uri$is_args$args</code>是缓存的键值，可以根据实际情况进行修改。</li>\n</ul>\n<ol start=\"3\">\n<li><p>保存并退出配置文件。</p>\n</li>\n<li><p>重新加载 Nginx 配置，以使更改生效。可以执行以下命令：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo nginx -t   # 检查配置文件是否有语法错误\nsudo systemctl reload nginx   # 重新加载Nginx配置</code></pre>\n\n<p>这只是一个简单的示例，你可以根据自己的需求进行更复杂的配置。记得查阅 Nginx 的官方文档和其他资源，以便进一步了解 Nginx 缓存的更多配置选项和最佳实践。</p>\n<h2 id=\"如果是文件-hash-的方式进行协商缓存如何设置\"><a href=\"#如果是文件-hash-的方式进行协商缓存如何设置\" class=\"headerlink\" title=\"如果是文件 hash 的方式进行协商缓存如何设置\"></a>如果是文件 hash 的方式进行协商缓存如何设置</h2><p>如果你想使用文件的哈希值来进行缓存协商（也称为静态文件的版本化），可以按照以下步骤进行配置：</p>\n<ol>\n<li><p>在你的 Nginx 配置文件中找到需要启用缓存的 location 块。</p>\n</li>\n<li><p>添加以下配置：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\">location &#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;backend_server;   # 后端服务器的地址\n    etag on;                            # 启用ETag\n    if_modified_since before;           # 允许使用If-Modified-Since协商缓存\n    add_header Last-Modified &quot;&quot;;        # 禁用Last-Modified头部\n&#125;</code></pre>\n\n<p>在上述配置中，你需要根据自己的实际需求做相应的修改：</p>\n<ul>\n<li><code>http://backend_server</code>需要替换为你的后端服务器的具体地址。</li>\n<li><code>etag on</code>启用 ETag（实体标签），它会对请求的文件生成唯一的哈希值。</li>\n<li><code>if_modified_since before</code>允许使用 If-Modified-Since 头部进行缓存协商，如果该头部存在并且和当前文件的最后修改时间匹配，Nginx 会返回 304 Not Modified。</li>\n<li><code>add_header Last-Modified &quot;&quot;</code>禁用 Last-Modified 头部，以确保在缓存协商过程中只使用 ETag，而不使用 Last-Modified。</li>\n</ul>\n<ol start=\"3\">\n<li><p>保存并退出配置文件。</p>\n</li>\n<li><p>重新加载 Nginx 配置，以使更改生效。可以执行以下命令：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sudo nginx -t   # 检查配置文件是否有语法错误\nsudo systemctl reload nginx   # 重新加载Nginx配置</code></pre>\n\n<p>这样配置后，Nginx 会根据文件的哈希值生成 ETag，并在响应中返回 ETag 头部。客户端在发起后续请求时，可以通过<code>If-None-Match</code>头部将之前返回的 ETag 值发送给服务器进行缓存协商，以确定文件是否已被修改。</p>\n<h2 id=\"为什么用\"><a href=\"#为什么用\" class=\"headerlink\" title=\"为什么用 [[]]?\"></a>为什么用 [[]]?</h2><p><code>[[</code> 和 <code>]]</code> 是 Bash Shell 中用于条件判断的关键字。相比于传统的 <code>[</code> 和 <code>]</code> 命令，<code>[[</code> 和 <code>]]</code> 关键字提供了更多的功能和灵活性。</p>\n<p>使用 <code>[[</code> 和 <code>]]</code> 的主要好处包括：</p>\n<ol>\n<li><strong>更强大的模式匹配</strong>：<code>[[</code> 可以进行模式匹配，支持使用通配符模式（如 <code>*</code> 和 <code>?</code>）进行字符串匹配，以及使用正则表达式进行模式匹配。而 <code>[</code> 只能进行简单的模式匹配。</li>\n<li><strong>不需要对变量进行引用</strong>：在 <code>[[</code> 中，可以直接使用变量名，而不需要像 <code>[</code> 那样对变量进行引用（使用双引号或单引号包裹变量）。这样可以提高代码的可读性。</li>\n<li><strong>更多条件判断选项</strong>：<code>[[</code> 支持更多的条件判断选项，如字符串比较、数值比较、文件属性判断等。而 <code>[</code> 只支持有限的条件判断选项。</li>\n<li><strong>更好的错误处理</strong>：<code>[[</code> 可以捕获一些错误，并提供更好的错误处理机制。使用 <code>[</code> 进行条件判断时，如果表达式中的文件或变量不存在，可能会导致错误。</li>\n</ol>\n<p>总的来说，如果你在 Bash Shell 中进行条件判断，推荐使用 <code>[[</code> 和 <code>]]</code> 关键字，因为它们提供了更多的功能和方便的语法。</p>\n<h1 id=\"乞丐版\"><a href=\"#乞丐版\" class=\"headerlink\" title=\"乞丐版\"></a>乞丐版</h1><h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">user  www www;\nworker_processes auto;\nerror_log  &#x2F;www&#x2F;wwwlogs&#x2F;nginx_error.log  crit;\npid        &#x2F;www&#x2F;server&#x2F;nginx&#x2F;logs&#x2F;nginx.pid;\nworker_rlimit_nofile 51200;\n\nstream &#123;\n    log_format tcp_format &#39;$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time&#39;;\n\n    access_log &#x2F;www&#x2F;wwwlogs&#x2F;tcp-access.log tcp_format;\n    error_log &#x2F;www&#x2F;wwwlogs&#x2F;tcp-error.log;\n    include &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;nginx&#x2F;tcp&#x2F;*.conf;\n&#125;\n\nevents\n    &#123;\n        use epoll;\n        worker_connections 51200;\n        multi_accept on;\n    &#125;\n\nhttp\n    &#123;\n        include       mime.types;\n\t\t#include luawaf.conf;\n\n\t\tinclude proxy.conf;\n\n        default_type  application&#x2F;octet-stream;\n\n        server_names_hash_bucket_size 512;\n        client_header_buffer_size 32k;\n        large_client_header_buffers 4 32k;\n        client_max_body_size 50m;\n\n        sendfile   on;\n        tcp_nopush on;\n\n        keepalive_timeout 60;\n\n        tcp_nodelay on;\n\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        fastcgi_buffer_size 64k;\n        fastcgi_buffers 4 64k;\n        fastcgi_busy_buffers_size 128k;\n        fastcgi_temp_file_write_size 256k;\n\t\tfastcgi_intercept_errors on;\n\n        gzip on;\n        gzip_min_length  1k;\n        gzip_buffers     4 16k;\n        gzip_http_version 1.1;\n        gzip_comp_level 2;\n        gzip_types     text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;javascript text&#x2F;css application&#x2F;xml;\n        gzip_vary on;\n        gzip_proxied   expired no-cache no-store private auth;\n        gzip_disable   &quot;MSIE [1-6]\\.&quot;;\n\n        limit_conn_zone $binary_remote_addr zone&#x3D;perip:10m;\n\t\tlimit_conn_zone $server_name zone&#x3D;perserver:10m;\n\n        server_tokens off;\n        access_log off;\n\nserver\n    &#123;\n        listen 888;\n        server_name phpmyadmin;\n        index index.html index.htm index.php;\n        root  &#x2F;www&#x2F;server&#x2F;phpmyadmin;\n\n        #error_page   404   &#x2F;404.html;\n        include enable-php.conf;\n\n        location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n        &#123;\n            expires      30d;\n        &#125;\n\n        location ~ .*\\.(js|css)?$\n        &#123;\n            expires      12h;\n        &#125;\n\n        location ~ &#x2F;\\.\n        &#123;\n            deny all;\n        &#125;\n\n        access_log  &#x2F;www&#x2F;wwwlogs&#x2F;access.log;\n    &#125;\nserver &#123;\n        listen 9999;\n        server_name localhost;\n\n        location &#x2F; &#123;\n            etag on;\n            if_modified_since before;\n            add_header Last-Modified &quot;&quot;;\n            root &#x2F;www&#x2F;wwwroot&#x2F;web&#x2F;tim-build&#x2F;pre-9999&#x2F;dist;\n            try_files $uri $uri&#x2F; &#x2F;index.html;\n        &#125;\n         location &#x2F;api-client&#x2F;v1 &#123;\n            proxy_pass http:&#x2F;&#x2F;xxx.xxx.xxx:35086;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        &#125;\n\n    &#125;\nserver &#123;\n        listen 8000;\n        server_name localhost;\n\n        location &#x2F; &#123;\n            etag on;\n            if_modified_since before;\n            add_header Last-Modified &quot;&quot;;\n            root &#x2F;www&#x2F;wwwroot&#x2F;web&#x2F;tim-build&#x2F;pro-8000&#x2F;dist;\n            try_files $uri $uri&#x2F; &#x2F;index.html;\n        &#125;\n         location &#x2F;api-client&#x2F;v1 &#123;\n            proxy_pass http:&#x2F;&#x2F;xxx.xxx.xxx:35086;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        &#125;\n\n    &#125;\ninclude &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;nginx&#x2F;*.conf;\n&#125;\n</code></pre>\n\n<h3 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h3><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">#!&#x2F;bin&#x2F;bash\n# 回滚操作: .&#x2F;rb.sh 包.zip 如： .&#x2F;rb.sh fix-zoom.zip 会回滚到 fix-zoom.zip 的打包内容\n\nif [[ $1 &#x3D;&#x3D; &#39;?&#39; ]]; then\n    echo &quot;&quot;\n    echo &quot;提示信息&quot;\n    echo &quot;&quot;\n    echo &quot;.&#x2F;rb.sh 环境 发布包&quot;\n    echo &quot;&quot;\n    echo &quot;- 环境：pre&#x2F;pro&#x2F;dev&quot;\n    echo &quot;- 发布包：xxx.zip&quot;\n    echo &quot;&quot;\n    echo &quot;例子：.&#x2F;rb.sh dev 20230719-style.zip&quot;\n    echo &quot;&quot;\n    exit\nfi\n\nif [[ -n $1 &amp;&amp; -n $2 ]]; then\n    if [[ $1 &#x3D;&#x3D; &#39;pre&#39; ]]; then\n        echo $1\n        rm -rf .&#x2F;pre-9999&#x2F;dist &amp;&amp; unzip $2 -d .&#x2F;pre-9999\n    elif [[ $1 &#x3D;&#x3D; &#39;pro&#39; ]]; then\n        echo $1\n        rm -rf .&#x2F;pro-8000&#x2F;dist &amp;&amp; unzip $2 -d .&#x2F;pro-8000\n    elif [[ $1 &#x3D;&#x3D; &#39;dev&#39; ]]; then\n        echo $1\n        rm -rf .&#x2F;dev-7000&#x2F;dist &amp;&amp; unzip $2 -d .&#x2F;dev-7000\n    else\n        echo &quot;Invalid argument: $1&quot;\n    fi\nelse\n    echo &quot;参数有误: $1 $2  (环境：pre&#x2F;pro&#x2F;dev)、（发布包：xxx.zip）&quot;\n    echo &quot;例子：.&#x2F;rb.sh dev 20230719-style.zip&quot;\nfi\n</code></pre>\n\n<h3 id=\"本地命令行操作远程服务器\"><a href=\"#本地命令行操作远程服务器\" class=\"headerlink\" title=\"本地命令行操作远程服务器\"></a>本地命令行操作远程服务器</h3><p>原因：web 终端工具贼难用</p>\n<ol>\n<li>zip 可以直接上传服务器</li>\n<li>上传完成自动发脚本执行</li>\n</ol>\n<h1 id=\"乞丐版-gt-企业正式版\"><a href=\"#乞丐版-gt-企业正式版\" class=\"headerlink\" title=\"乞丐版-&gt;企业正式版\"></a>乞丐版-&gt;企业正式版</h1><ol>\n<li>为非运维人员提供可视化面板：配置、（开发、预发、线上、灰度、回滚）发布、nginx 可视化配置</li>\n<li>使用 k8s 自动化、打 image（灰度、回滚）</li>\n<li>使用第三方工具进行流水线控制（中途暂停&#x2F;停止发布）</li>\n</ol>\n","text":"背景一个项目，运行不正常，帮整整 文件管理 启动配置 一点思考 存在的问题：看了下全是手动在操作，也没有打包，就那么运行的，性能、体验先不谈，能正常运行都很难 简单自动化： webhook + nginx 进行简单出发脚本执行打包、部署，使用 nginx 进行接口代理 工具信息[...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"运维","slug":"运维","count":1,"path":"api/categories/运维.json"}],"tags":[{"name":"运维","slug":"运维","count":1,"path":"api/tags/运维.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">文件管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">启动配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83\"><span class=\"toc-text\">一点思考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">工具信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">外网无法访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9D%E5%A1%94-nginx-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">宝塔 nginx 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3%EF%BC%8C%E4%BB%8D%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">安全开启端口，仍无法访问</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">nginx 部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%8F%91%E5%B8%83-x2F-%E5%9B%9E%E6%BB%9A%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">简单发布&#x2F;回滚脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE-nginx-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">如何配置 nginx 缓存</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%98%AF%E6%96%87%E4%BB%B6-hash-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">如果是文件 hash 的方式进行协商缓存如何设置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8\"><span class=\"toc-text\">为什么用 [[]]?</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B9%9E%E4%B8%90%E7%89%88\"><span class=\"toc-text\">乞丐版</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nginx-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">nginx 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shell-%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">shell 脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">本地命令行操作远程服务器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B9%9E%E4%B8%90%E7%89%88-gt-%E4%BC%81%E4%B8%9A%E6%AD%A3%E5%BC%8F%E7%89%88\"><span class=\"toc-text\">乞丐版-&gt;企业正式版</span></a>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"chrome编辑完代码同步","uid":"05790e6bbac5752b4d540adbd8fcf137","slug":"2023-06-30chrome","date":"2023-06-30T01:44:47.000Z","updated":"2023-07-08T01:06:25.365Z","comments":true,"path":"api/articles/2023-06-30chrome.json","keywords":null,"cover":[],"text":"动机调试完代码直接保存到本地，避免 CV 操作 编辑完代码保存提示 Changes to this file were not saved to file system. 授权 workspace 授权后的配置 再次保存 ","link":"","photos":[],"count_time":{"symbolsCount":114,"symbolsTime":"1 mins."},"categories":[{"name":"Chrome","slug":"Chrome","count":2,"path":"api/categories/Chrome.json"}],"tags":[{"name":"Chrome","slug":"Chrome","count":3,"path":"api/tags/Chrome.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"chrome快捷键","uid":"607b644ddb65db98f35faca20e792e2f","slug":"2023-06-27chrome-shortcuts","date":"2023-06-27T10:17:24.000Z","updated":"2023-07-08T01:06:25.364Z","comments":true,"path":"api/articles/2023-06-27chrome-shortcuts.json","keywords":null,"cover":[],"text":"文档连接Documentation Chrome DevTools Commands and shortcuts Keyboard shortcuts for opening DevTools Action Mac Windows &#x2F; Linux 最后用哪个就打开哪个 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"shortcuts","slug":"shortcuts","count":1,"path":"api/categories/shortcuts.json"}],"tags":[{"name":"shortcuts","slug":"shortcuts","count":1,"path":"api/tags/shortcuts.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}