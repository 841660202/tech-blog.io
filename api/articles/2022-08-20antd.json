{"title":"antd-mobile 源码","uid":"aef30b8bcd5723729d853e982cc988b5","slug":"2022-08-20antd","date":"2022-08-20T14:28:11.000Z","updated":"2022-09-16T13:54:56.313Z","comments":true,"path":"api/articles/2022-08-20antd.json","keywords":null,"cover":[],"content":"<h2 id=\"Mask-组件-getContainer\"><a href=\"#Mask-组件-getContainer\" class=\"headerlink\" title=\"Mask 组件 getContainer\"></a>Mask 组件 getContainer</h2><p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/3d8d66b54e1ebadccfa17dc80208cceeeeac1555/src/utils/render-to-container.ts#L1\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; renderToContainer\nimport &#123; createPortal &#125; from &quot;react-dom&quot;;\nimport &#123; ReactElement, ReactPortal &#125; from &quot;react&quot;;\nimport &#123; resolveContainer &#125; from &quot;.&#x2F;get-container&quot;;\nimport &#123; canUseDom &#125; from &quot;.&#x2F;can-use-dom&quot;;\n\nexport type GetContainer &#x3D; HTMLElement | (() &#x3D;&gt; HTMLElement) | null;\n&#x2F;&#x2F; 将节点挂在到 getContainer\nexport function renderToContainer(\n  getContainer: GetContainer,\n  node: ReactElement\n) &#123;\n  if (canUseDom &amp;&amp; getContainer) &#123;\n    const container &#x3D; resolveContainer(getContainer);\n    return createPortal(node, container) as ReactPortal; &#x2F;&#x2F; React portal\n  &#125;\n  return node;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export function resolveContainer(\n  getContainer: HTMLElement | (() &#x3D;&gt; HTMLElement) | undefined | null\n) &#123;\n  const container &#x3D;\n    typeof getContainer &#x3D;&#x3D;&#x3D; &quot;function&quot; ? getContainer() : getContainer;\n  &#x2F;&#x2F; 按照这个默认应该挂在到body上，我在IOS上发现并不是这样，浏览器和安卓没问题\n  &#x2F;&#x2F; nextjs IOS有兼容问题\n  return container || document.body;\n&#125;</code></pre>\n\n<h2 id=\"renderToBody\"><a href=\"#renderToBody\" class=\"headerlink\" title=\"renderToBody\"></a>renderToBody</h2><p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/3d8d66b54e1ebadccfa17dc80208cceeeeac1555/src/utils/render-to-body.ts#L1\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123; ReactElement &#125; from &quot;react&quot;;\nimport &#123; render, unmount as reactUnmount &#125; from &quot;.&#x2F;render&quot;;\n\nexport function renderToBody(element: ReactElement) &#123;\n  const container &#x3D; document.createElement(&quot;div&quot;);\n  document.body.appendChild(container); &#x2F;&#x2F; 挂在到body底部\n  function unmount() &#123;\n    const unmountResult &#x3D; reactUnmount(container);\n    if (unmountResult &amp;&amp; container.parentNode) &#123;\n      container.parentNode.removeChild(container);\n    &#125;\n  &#125;\n  render(element, container);\n  return unmount;\n&#125;</code></pre>\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/3d8d66b54e1ebadccfa17dc80208cceeeeac1555/src/utils/render.ts#L71\" target=\"_blank\" >见 Unmount</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Render &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F; 有点没看懂\n\n&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Unmount &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nfunction legacyUnmount(container: ContainerType) &#123;\n  return unmountComponentAtNode(container);\n&#125;\n\nasync function concurrentUnmount(container: ContainerType) &#123;\n  &#x2F;&#x2F; Delay to unmount to avoid React 18 sync warning\n  return Promise.resolve().then(() &#x3D;&gt; &#123;\n    container[MARK]?.unmount();\n    delete container[MARK];\n  &#125;);\n&#125;\n\nexport function unmount(container: ContainerType) &#123;\n  if (createRoot as unknown) &#123;\n    return concurrentUnmount(container);\n  &#125;\n\n  return legacyUnmount(container); &#x2F;&#x2F; 服务端渲染处理\n&#125;</code></pre>\n\n<p>renderToBody 主要用于： <a href=\"https://github.com/ant-design/ant-design-mobile/search?q=renderToBody\" target=\"_blank\" >见</a>, unmount 我猜应该是为了关闭时候卸载组件</p>\n<h2 id=\"客户端渲染判断\"><a href=\"#客户端渲染判断\" class=\"headerlink\" title=\"客户端渲染判断\"></a>客户端渲染判断</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export const canUseDom &#x3D; !!(\n  typeof window !&#x3D;&#x3D; &quot;undefined&quot; &amp;&amp;\n  typeof document !&#x3D;&#x3D; &quot;undefined&quot; &amp;&amp;\n  window.document &amp;&amp;\n  window.document.createElement\n);</code></pre>\n\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h2><p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/3d8d66b54e1ebadccfa17dc80208cceeeeac1555/src/utils/sleep.ts#L1\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export const sleep &#x3D; (time: number) &#x3D;&gt;\n  new Promise((resolve) &#x3D;&gt; setTimeout(resolve, time))&#96;&#96;;</code></pre>\n\n<h2 id=\"Space\"><a href=\"#Space\" class=\"headerlink\" title=\"Space\"></a>Space</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; mergeProps\n\nimport assignWith from &quot;lodash&#x2F;assignWith&quot;;\n\nexport function mergeProps&lt;A, B&gt;(a: A, b: B): B &amp; A;\nexport function mergeProps&lt;A, B, C&gt;(a: A, b: B, c: C): C &amp; B &amp; A;\nexport function mergeProps(...items: any[]) &#123;\n  function customizer(objValue: any, srcValue: any) &#123;\n    return srcValue &#x3D;&#x3D;&#x3D; undefined ? objValue : srcValue;\n  &#125;\n\n  let ret &#x3D; &#123; ...items[0] &#125;;\n  for (let i &#x3D; 1; i &lt; items.length; i++) &#123;\n    ret &#x3D; assignWith(ret, items[i], customizer);\n  &#125;\n  return ret;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import React, &#123; FC &#125; from &quot;react&quot;;\nimport classNames from &quot;classnames&quot;;\nimport &#123; NativeProps, withNativeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;native-props&quot;;\nimport &#123; mergeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;with-default-props&quot;;\n\nconst classPrefix &#x3D; &#96;adm-space&#96;;\n\nexport type SpaceProps &#x3D; &#123;\n  direction?: &quot;horizontal&quot; | &quot;vertical&quot;;\n  align?: &quot;start&quot; | &quot;end&quot; | &quot;center&quot; | &quot;baseline&quot;;\n  justify?:\n    | &quot;start&quot;\n    | &quot;end&quot;\n    | &quot;center&quot;\n    | &quot;between&quot;\n    | &quot;around&quot;\n    | &quot;evenly&quot;\n    | &quot;stretch&quot;;\n  wrap?: boolean;\n  block?: boolean;\n  onClick?: (event: React.MouseEvent&lt;HTMLDivElement, MouseEvent&gt;) &#x3D;&gt; void;\n  children?: React.ReactNode;\n&#125; &amp; NativeProps&lt;&quot;--gap&quot; | &quot;--gap-vertical&quot; | &quot;--gap-horizontal&quot;&gt;;\n\nconst defaultProps &#x3D; &#123;\n  direction: &quot;horizontal&quot;,\n&#125;;\n\nexport const Space: FC&lt;SpaceProps&gt; &#x3D; (p) &#x3D;&gt; &#123;\n  const props &#x3D; mergeProps(defaultProps, p);\n  const &#123; direction, onClick &#125; &#x3D; props;\n  return withNativeProps(\n    props,\n    &lt;div\n      className&#x3D;&#123;classNames(classPrefix, &#123;\n        [&#96;$&#123;classPrefix&#125;-wrap&#96;]: props.wrap,\n        [&#96;$&#123;classPrefix&#125;-block&#96;]: props.block,\n        [&#96;$&#123;classPrefix&#125;-$&#123;direction&#125;&#96;]: true,\n        [&#96;$&#123;classPrefix&#125;-align-$&#123;props.align&#125;&#96;]: !!props.align,\n        [&#96;$&#123;classPrefix&#125;-justify-$&#123;props.justify&#125;&#96;]: !!props.justify,\n      &#125;)&#125;\n      onClick&#x3D;&#123;onClick&#125;\n    &gt;\n      &#123;React.Children.map(props.children, (child) &#x3D;&gt; &#123;\n        return (\n          child !&#x3D;&#x3D; null &amp;&amp;\n          child !&#x3D;&#x3D; undefined &amp;&amp; (\n            &lt;div className&#x3D;&#123;&#96;$&#123;classPrefix&#125;-item&#96;&#125;&gt;&#123;child&#125;&lt;&#x2F;div&gt; &#x2F;&#x2F; 这里由下面样式，使用margin-right &#x2F; margin-bottom 实现间隔\n          )\n        );\n      &#125;)&#125;\n    &lt;&#x2F;div&gt;\n  );\n&#125;;</code></pre>\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/7c00eee09077d7805161b249ced34852db44c53b/src/components/space/space.less#L1\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">&#x2F;&#x2F; space.less\n\n@class-prefix-space: ~&quot;adm-space&quot;;\n\n.@&#123;class-prefix-space&#125;-item &#123;\n  flex: none;\n&#125;\n\n.@&#123;class-prefix-space&#125; &#123;\n  display: inline-flex;\n  --gap: 8px;\n  --gap-vertical: var(--gap);\n  --gap-horizontal: var(--gap);\n  &amp;-vertical &#123;\n    flex-direction: column;\n    &gt; .@&#123;class-prefix-space&#125;-item &#123;\n      margin-bottom: var(--gap-vertical);\n      &amp;:last-child &#123;\n        margin-bottom: 0;\n      &#125;\n    &#125;\n  &#125;\n  &amp;-horizontal &#123;\n    flex-direction: row;\n    &gt; .@&#123;class-prefix-space&#125;-item &#123;\n      margin-right: var(--gap-horizontal);\n      &amp;:last-child &#123;\n        margin-right: 0;\n      &#125;\n    &#125;\n    &amp;.@&#123;class-prefix-space&#125;-wrap &#123;\n      flex-wrap: wrap;\n      margin-bottom: calc(var(--gap-vertical) * -1);\n      &gt; .@&#123;class-prefix-space&#125;-item &#123;\n        padding-bottom: var(--gap-vertical);\n      &#125;\n    &#125;\n  &#125;\n  &amp;.@&#123;class-prefix-space&#125;-block &#123;\n    display: flex;\n  &#125;\n  &amp;-align &#123;\n    &amp;-center &#123;\n      align-items: center;\n    &#125;\n    &amp;-start &#123;\n      align-items: flex-start;\n    &#125;\n    &amp;-end &#123;\n      align-items: flex-end;\n    &#125;\n    &amp;-baseline &#123;\n      align-items: baseline;\n    &#125;\n  &#125;\n  &amp;-justify &#123;\n    &amp;-center &#123;\n      justify-content: center;\n    &#125;\n    &amp;-start &#123;\n      justify-content: flex-start;\n    &#125;\n    &amp;-end &#123;\n      justify-content: flex-end;\n    &#125;\n    &amp;-between &#123;\n      justify-content: space-between;\n    &#125;\n    &amp;-around &#123;\n      justify-content: space-around;\n    &#125;\n    &amp;-evenly &#123;\n      justify-content: space-evenly;\n    &#125;\n    &amp;-stretch &#123;\n      justify-content: stretch;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><img src=\"http://t-blog-images.aijs.top/img/202208211218118.png\" />\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import &#123; mergeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;with-default-props&quot;;\nimport React, &#123; ReactNode, useState, useRef &#125; from &quot;react&quot;;\nimport &#123; NativeProps, withNativeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;native-props&quot;;\nimport &#123; PictureOutline, PictureWrongOutline &#125; from &quot;antd-mobile-icons&quot;;\nimport &#123; useInViewport &#125; from &quot;ahooks&quot;;\nimport &#123; useInitialized &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;use-initialized&quot;;\nimport &#123; staged &#125; from &quot;staged-components&quot;;\nimport &#123; toCSSLength &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;to-css-length&quot;;\n\nconst classPrefix &#x3D; &#96;adm-image&#96;;\n\nexport type ImageProps &#x3D; &#123;\n  src: string;\n  alt?: string;\n  width?: number | string;\n  height?: number | string;\n  fit?: &quot;contain&quot; | &quot;cover&quot; | &quot;fill&quot; | &quot;none&quot; | &quot;scale-down&quot;;\n  placeholder?: ReactNode;\n  fallback?: ReactNode;\n  lazy?: boolean;\n  onClick?: (event: React.MouseEvent&lt;HTMLImageElement, Event&gt;) &#x3D;&gt; void;\n  onError?: (event: React.SyntheticEvent&lt;HTMLImageElement, Event&gt;) &#x3D;&gt; void;\n&#125; &amp; NativeProps&lt;&quot;--width&quot; | &quot;--height&quot;&gt; &amp;\n  Pick&lt;\n    React.ImgHTMLAttributes&lt;HTMLImageElement&gt;,\n    | &quot;crossOrigin&quot;\n    | &quot;decoding&quot;\n    | &quot;loading&quot;\n    | &quot;referrerPolicy&quot;\n    | &quot;sizes&quot;\n    | &quot;srcSet&quot;\n    | &quot;useMap&quot;\n  &gt;;\n\nconst defaultProps &#x3D; &#123;\n  fit: &quot;fill&quot;,\n  placeholder: (\n    &lt;div className&#x3D;&#123;&#96;$&#123;classPrefix&#125;-tip&#96;&#125;&gt;\n      &lt;PictureOutline &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  ),\n  fallback: (\n    &lt;div className&#x3D;&#123;&#96;$&#123;classPrefix&#125;-tip&#96;&#125;&gt;\n      &lt;PictureWrongOutline &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  ),\n  lazy: false,\n&#125;;\n\nexport const Image &#x3D; staged&lt;ImageProps&gt;((p) &#x3D;&gt; &#123;\n  const props &#x3D; mergeProps(defaultProps, p); &#x2F;&#x2F; 属性合并\n  const [loaded, setLoaded] &#x3D; useState(false);\n  const [failed, setFailed] &#x3D; useState(false);\n\n  const ref &#x3D; useRef&lt;HTMLDivElement&gt;(null);\n\n  let src: string | undefined &#x3D; props.src;\n  let srcSet: string | undefined &#x3D; props.srcSet;\n  &#x2F;&#x2F; 非懒加载\n  if (!props.lazy) &#123;\n    return render();\n  &#125;\n  &#x2F;&#x2F; 懒加载\n  return () &#x3D;&gt; &#123;\n    const inViewport &#x3D; useInViewport(ref); &#x2F;&#x2F; 当出现在视口中时，将\n\n    const initialized &#x3D; useInitialized(inViewport); &#x2F;&#x2F; inViewport为true时候进行初始化\n    &#x2F;&#x2F; useInitialized 源码\n    &#x2F;&#x2F; import &#123; useRef &#125; from &#39;react&#39;\n\n    &#x2F;&#x2F; export function useInitialized(check?: boolean) &#123; &#x2F;&#x2F; check为true的时候执行初始化\n    &#x2F;&#x2F;   const initializedRef &#x3D; useRef(check)\n    &#x2F;&#x2F;   if (check) &#123;\n    &#x2F;&#x2F;     initializedRef.current &#x3D; true\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F;   return !!initializedRef.current\n    &#x2F;&#x2F; &#125;\n\n    &#x2F;&#x2F; 初始化时候，设置真实src、srcSet\n    src &#x3D; initialized ? props.src : undefined;\n    srcSet &#x3D; initialized ? props.srcSet : undefined;\n    return render();\n  &#125;;\n\n  function renderInner() &#123;\n    if (failed) &#123;\n      return props.fallback;\n    &#125;\n    return (\n      &lt;&gt;\n        &#x2F;&#x2F; 未加载完成的情况，展示placeholder\n        &#123;!loaded &amp;&amp; props.placeholder&#125;\n        &lt;img\n          className&#x3D;&#123;&#96;$&#123;classPrefix&#125;-img&#96;&#125;\n          src&#x3D;&#123;src&#125;\n          alt&#x3D;&#123;props.alt&#125;\n          onClick&#x3D;&#123;props.onClick&#125;\n          onLoad&#x3D;&#123;() &#x3D;&gt; &#123;\n            setLoaded(true);\n          &#125;&#125;\n          onError&#x3D;&#123;(e) &#x3D;&gt; &#123;\n            setFailed(true);\n            props.onError?.(e);\n          &#125;&#125;\n          style&#x3D;&#123;&#123;\n            objectFit: props.fit,\n            display: loaded ? &quot;block&quot; : &quot;none&quot;,\n          &#125;&#125;\n          crossOrigin&#x3D;&#123;props.crossOrigin&#125; &#x2F;&#x2F; 跨域\n          decoding&#x3D;&#123;props.decoding&#125;\n          loading&#x3D;&#123;props.loading&#125;\n          referrerPolicy&#x3D;&#123;props.referrerPolicy&#125;\n          sizes&#x3D;&#123;props.sizes&#125;\n          srcSet&#x3D;&#123;srcSet&#125;\n          useMap&#x3D;&#123;props.useMap&#125; &#x2F;&#x2F; ????\n        &#x2F;&gt;\n      &lt;&#x2F;&gt;\n    );\n  &#125;\n\n  function render() &#123;\n    const style: ImageProps[&quot;style&quot;] &#x3D; &#123;&#125;;\n    if (props.width) &#123;\n      style[&quot;--width&quot;] &#x3D; toCSSLength(props.width);\n    &#125;\n    if (props.height) &#123;\n      style[&quot;--height&quot;] &#x3D; toCSSLength(props.height);\n    &#125;\n    return withNativeProps(\n      &#x2F;&#x2F; 组件增加属性\n      props,\n      &lt;div ref&#x3D;&#123;ref&#125; className&#x3D;&#123;classPrefix&#125; style&#x3D;&#123;style&#125;&gt;\n        &#123;renderInner()&#125;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;);</code></pre>\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/7c00eee09077d7805161b249ced34852db44c53b/src/utils/native-props.ts#L10\" target=\"_blank\" >见 withNativeProps</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; toCSSLength, 只是为了增加 px 单位\n\nexport function toCSSLength(val: string | number) &#123;\n  return typeof val &#x3D;&#x3D;&#x3D; &quot;number&quot; ? &#96;$&#123;val&#125;px&#96; : val;\n&#125;</code></pre>\n\n<h2 id=\"Floating-panel\"><a href=\"#Floating-panel\" class=\"headerlink\" title=\"Floating-panel\"></a>Floating-panel</h2><img src=\"http://t-blog-images.aijs.top/img/202208211339119.png\" />\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/7c00eee09077d7805161b249ced34852db44c53b/src/components/floating-panel/floating-panel.tsx#L118\" target=\"_blank\" >源码</a></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import React, &#123;\n  forwardRef,\n  ReactNode,\n  useImperativeHandle,\n  useRef,\n  useState,\n&#125; from &quot;react&quot;;\nimport &#123; NativeProps, withNativeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;native-props&quot;;\nimport &#123; useDrag &#125; from &quot;@use-gesture&#x2F;react&quot;;\n&#x2F;&#x2F;@link: https:&#x2F;&#x2F;github.com&#x2F;pmndrs&#x2F;react-spring\nimport &#123; useSpring, animated &#125; from &quot;@react-spring&#x2F;web&quot;;\nimport &#123; supportsPassive &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;supports-passive&quot;;\nimport &#123; nearest &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;nearest&quot;;\n\nexport type FloatingPanelProps &#x3D; &#123;\n  anchors: number[];\n  children: ReactNode;\n&#125; &amp; NativeProps&lt;&quot;--border-radius&quot; | &quot;--z-index&quot;&gt;;\n\nexport type FloatingPanelRef &#x3D; &#123;\n  setHeight: (\n    height: number,\n    options?: &#123;\n      immediate?: boolean;\n    &#125;\n  ) &#x3D;&gt; void;\n&#125;;\n\nexport const FloatingPanel &#x3D; forwardRef&lt;FloatingPanelRef, FloatingPanelProps&gt;(\n  (props, ref) &#x3D;&gt; &#123;\n    const &#123; anchors &#125; &#x3D; props;\n    &#x2F;&#x2F;@link: https:&#x2F;&#x2F;mobile.ant.design&#x2F;zh&#x2F;components&#x2F;floating-panel#floatingpanel\n    &#x2F;*这里取最后一个为最大高度，[300,50,200],取的是200,😓，文档没说啊 *&#x2F;\n    const maxHeight &#x3D; anchors[anchors.length - 1] ?? window.innerHeight;\n\n    const possibles &#x3D; anchors.map((x) &#x3D;&gt; -x); &#x2F;&#x2F; 顶部是负值\n\n    const elementRef &#x3D; useRef&lt;HTMLDivElement&gt;(null);\n    const headerRef &#x3D; useRef&lt;HTMLDivElement&gt;(null);\n    const contentRef &#x3D; useRef&lt;HTMLDivElement&gt;(null);\n    const [pulling, setPulling] &#x3D; useState(false);\n    const pullingRef &#x3D; useRef(false);\n\n    const bounds &#x3D; &#123;\n      top: possibles[possibles.length - 1], &#x2F;&#x2F; 顶部是负值\n      bottom: possibles[0], &#x2F;&#x2F; 底部取0， 0位不一定是最小的😓\n    &#125;;\n\n    const [&#123; y &#125;, api] &#x3D; useSpring(() &#x3D;&gt; (&#123;\n      &#x2F;&#x2F; useSpring\n      y: bounds.bottom,\n      config: &#123; tension: 300 &#125;,\n    &#125;));\n\n    useDrag(\n      (state) &#x3D;&gt; &#123;\n        const [, offsetY] &#x3D; state.offset;\n        if (state.first) &#123;\n          const target &#x3D; state.event.target as Element;\n          const header &#x3D; headerRef.current;\n          if (header &#x3D;&#x3D;&#x3D; target || header?.contains(target)) &#123;\n            pullingRef.current &#x3D; true;\n          &#125; else &#123;\n            const reachedTop &#x3D; y.goal &lt;&#x3D; bounds.top;\n            const content &#x3D; contentRef.current;\n            if (!content) return;\n            if (reachedTop) &#123;\n              if (content.scrollTop &lt;&#x3D; 0 &amp;&amp; state.direction[1] &gt; 0) &#123;\n                pullingRef.current &#x3D; true;\n              &#125;\n            &#125; else &#123;\n              pullingRef.current &#x3D; true;\n            &#125;\n          &#125;\n        &#125;\n        setPulling(pullingRef.current);\n        if (!pullingRef.current) return;\n        const &#123; event &#125; &#x3D; state;\n        if (event.cancelable) &#123;\n          event.preventDefault();\n        &#125;\n        event.stopPropagation();\n        let nextY &#x3D; offsetY;\n        if (state.last) &#123;\n          pullingRef.current &#x3D; false;\n          setPulling(false);\n          nextY &#x3D; nearest(possibles, offsetY);\n        &#125;\n        api.start(&#123;\n          y: nextY,\n        &#125;);\n      &#125;,\n      &#123;\n        axis: &quot;y&quot;,\n        bounds,\n        rubberband: true,\n        from: () &#x3D;&gt; [0, y.get()],\n        pointer: &#123; touch: true &#125;,\n        target: elementRef,\n        eventOptions: supportsPassive ? &#123; passive: false &#125; : false,\n      &#125;\n    );\n\n    useImperativeHandle(\n      ref,\n      () &#x3D;&gt; (&#123;\n        setHeight: (\n          height: number,\n          options?: &#123;\n            immediate?: boolean;\n          &#125;\n        ) &#x3D;&gt; &#123;\n          api.start(&#123;\n            y: -height,\n            immediate: options?.immediate,\n          &#125;);\n        &#125;,\n      &#125;),\n      [api]\n    );\n\n    return withNativeProps(\n      props,\n      &lt;animated.div\n        ref&#x3D;&#123;elementRef&#125;\n        className&#x3D;&quot;adm-floating-panel&quot;\n        style&#x3D;&#123;&#123;\n          height: maxHeight,\n          y,\n        &#125;&#125;\n      &gt;\n        &#x2F;&#x2F; 遮照， 怎么没看到效果呢？？？？\n        &lt;div\n          className&#x3D;&quot;adm-floating-panel-mask&quot;\n          style&#x3D;&#123;&#123;\n            display: pulling ? &quot;block&quot; : &quot;none&quot;,\n          &#125;&#125;\n        &#x2F;&gt;\n        &#x2F;&#x2F; bar内容\n        &lt;div className&#x3D;&quot;adm-floating-panel-header&quot; ref&#x3D;&#123;headerRef&#125;&gt;\n          &lt;div className&#x3D;&quot;adm-floating-panel-bar&quot; &#x2F;&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div className&#x3D;&quot;adm-floating-panel-content&quot; ref&#x3D;&#123;contentRef&#125;&gt;\n          &#123;props.children&#125;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;animated.div&gt;\n    );\n  &#125;\n);</code></pre>\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/7c00eee09077d7805161b249ced34852db44c53b/src/components/floating-panel/floating-panel.tsx#L100\" target=\"_blank\" >useImperativeHandle</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正常情况下 ref 是不能挂在到函数组件上的，因为函数组件没有实例，但是 useImperativeHandle 为我们提供了一个类似实例的东西。它帮助我们通过 useImperativeHandle 的第 2 个参数，所返回的对象的内容挂载到 父组件的 ref.current 上。</p>\n<p>forwardRef 会创建一个 React 组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。</p>\n<p>作者：机智的狮老师<br>链接：<a href=\"https://www.jianshu.com/p/bf9f66ac3f9c\">https://www.jianshu.com/p/bf9f66ac3f9c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import React, &#123;\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n  useRef,\n&#125; from &quot;react&quot;;\n\nconst TestRef &#x3D; forwardRef((props, ref) &#x3D;&gt; &#123;\n  useImperativeHandle(ref, () &#x3D;&gt; (&#123;\n    open() &#123;\n      console.log(&quot;open&quot;);\n    &#125;,\n  &#125;));\n&#125;);\n\nfunction App() &#123;\n  const ref &#x3D; useRef();\n  useEffect(() &#x3D;&gt; &#123;\n    ref.current.open();\n  &#125;, []);\n\n  return (\n    &lt;&gt;\n      &lt;div&gt;石小阳&lt;&#x2F;div&gt;\n      &lt;TestRef ref&#x3D;&#123;ref&#125;&gt;&lt;&#x2F;TestRef&gt;\n    &lt;&#x2F;&gt;\n  );\n&#125;\nexport default App;</code></pre>\n\n<p>另一种实现：可以使用 hooks 把子组件数据绑定到一个 ref 上（这个 ref 是父组件传入的）如下：</p>\n<p><strong>子组件</strong></p>\n<img src=\"http://t-blog-images.aijs.top/img/202208211349068.png\" />\n\n<p><strong>父组件</strong></p>\n<img src=\"http://t-blog-images.aijs.top/img/202208211351388.png\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202208211351568.png\" />\n\n<p>可见 <code>useImperativeHandle</code>方式更优雅</p>\n<h2 id=\"tabs-与-内容联动\"><a href=\"#tabs-与-内容联动\" class=\"headerlink\" title=\"tabs 与 内容联动\"></a>tabs 与 内容联动</h2><img src=\"http://t-blog-images.aijs.top/img/202208211737240.gif\" />\n\n<p><a href=\"https://mobile.ant.design/zh/components/tabs\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import React, &#123; useEffect, useState &#125; from &quot;react&quot;;\nimport &#123; Tabs &#125; from &quot;antd-mobile&quot;;\nimport &#123; DemoBlock, lorem &#125; from &quot;demos&quot;;\nimport styles from &quot;.&#x2F;demo4.less&quot;;\nimport &#123; useThrottleFn &#125; from &quot;ahooks&quot;;\n\nconst tabItems &#x3D; [\n  &#123; key: &quot;1&quot;, title: &quot;第一项&quot;, text: lorem.generateParagraphs(8) &#125;,\n  &#123; key: &quot;2&quot;, title: &quot;第二项&quot;, text: lorem.generateParagraphs(8) &#125;,\n  &#123; key: &quot;3&quot;, title: &quot;第三项&quot;, text: lorem.generateParagraphs(8) &#125;,\n  &#123; key: &quot;4&quot;, title: &quot;第四项&quot;, text: lorem.generateParagraphs(8) &#125;,\n];\n\nconst tabHeight &#x3D; 42;\n\nexport default () &#x3D;&gt; &#123;\n  const [activeKey, setActiveKey] &#x3D; useState(&quot;1&quot;);\n\n  const &#123; run: handleScroll &#125; &#x3D; useThrottleFn(\n    () &#x3D;&gt; &#123;\n      let currentKey &#x3D; tabItems[0].key;\n      for (const item of tabItems) &#123;\n        const element &#x3D; document.getElementById(&#96;anchor-$&#123;item.key&#125;&#96;);\n        if (!element) continue;\n        const rect &#x3D; element.getBoundingClientRect();\n        if (rect.top &lt;&#x3D; tabHeight) &#123;\n          &#x2F;&#x2F; 通过滚动设置key\n          currentKey &#x3D; item.key;\n        &#125; else &#123;\n          break;\n        &#125;\n      &#125;\n      setActiveKey(currentKey);\n    &#125;,\n    &#123;\n      leading: true,\n      trailing: true,\n      wait: 100,\n    &#125;\n  );\n\n  useEffect(() &#x3D;&gt; &#123;\n    window.addEventListener(&quot;scroll&quot;, handleScroll);\n    return () &#x3D;&gt; &#123;\n      window.removeEventListener(&quot;scroll&quot;, handleScroll);\n    &#125;;\n  &#125;, []);\n\n  return (\n    &lt;&gt;\n      &lt;DemoBlock title&#x3D;&quot;作为页面滚动的导航&quot; padding&#x3D;&quot;0&quot;&gt;\n        &lt;div className&#x3D;&#123;styles.tabsContainer&#125;&gt;\n          &lt;Tabs\n            activeKey&#x3D;&#123;activeKey&#125; &#x2F;&#x2F; 滚动时候设置 activeKey\n            onChange&#x3D;&#123;(key) &#x3D;&gt; &#123;\n              document.getElementById(&#96;anchor-$&#123;key&#125;&#96;)?.scrollIntoView(); &#x2F;&#x2F; 滚动到视口\n              window.scrollTo(&#123;\n                &#x2F;&#x2F; 点击时候滚动的位置\n                top: window.scrollY - tabHeight,\n              &#125;);\n            &#125;&#125;\n          &gt;\n            &#123;tabItems.map((item) &#x3D;&gt; (\n              &lt;Tabs.Tab title&#x3D;&#123;item.title&#125; key&#x3D;&#123;item.key&#125; &#x2F;&gt;\n            ))&#125;\n          &lt;&#x2F;Tabs&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div className&#x3D;&#123;styles.content&#125;&gt;\n          &#123;tabItems.map((item) &#x3D;&gt; (\n            &lt;div key&#x3D;&#123;item.key&#125;&gt;\n              &#x2F;&#x2F; 这里设置id\n              &lt;h2 id&#x3D;&#123;&#96;anchor-$&#123;item.key&#125;&#96;&#125;&gt;&#123;item.title&#125;&lt;&#x2F;h2&gt;\n              &#123;item.text&#125;\n            &lt;&#x2F;div&gt;\n          ))&#125;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;DemoBlock&gt;\n    &lt;&#x2F;&gt;\n  );\n&#125;;</code></pre>\n\n<p><a href=\"https://github.com/ant-design/ant-design-mobile/blob/7c00eee09077d7805161b249ced34852db44c53b/src/components/tabs/index.ts#L7\" target=\"_blank\" >见</a></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &quot;.&#x2F;tabs.less&quot;;\nimport &#123; TabPane, Tabs &#125; from &quot;.&#x2F;tabs&quot;;\nimport &#123; attachPropertiesToComponent &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;attach-properties-to-component&quot;;\n\nexport type &#123; TabsProps, TabPaneProps &#125; from &quot;.&#x2F;tabs&quot;;\n\nexport default attachPropertiesToComponent(Tabs, &#123;\n  &#x2F;&#x2F; 之后可以使用 Tabs.TabPane提示\n  TabPane,\n&#125;);</code></pre>\n\n<h2 id=\"badge-看个简单的放松下\"><a href=\"#badge-看个简单的放松下\" class=\"headerlink\" title=\"badge 看个简单的放松下\"></a>badge 看个简单的放松下</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &quot;.&#x2F;badge.less&quot;;\nimport &#123; Badge, dot &#125; from &quot;.&#x2F;badge&quot;;\nimport &#123; attachPropertiesToComponent &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;attach-properties-to-component&quot;;\nexport type &#123; BadgeProps &#125; from &quot;.&#x2F;badge&quot;;\n\nexport default attachPropertiesToComponent(Badge, &#123;\n  dot, &#x2F;&#x2F; Badge 增加 dot属性\n&#125;);</code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">import classNames from &quot;classnames&quot;;\nimport React from &quot;react&quot;;\nimport &#123; NativeProps, withNativeProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;native-props&quot;;\nimport &#123; withDefaultProps &#125; from &quot;..&#x2F;..&#x2F;utils&#x2F;with-default-props&quot;;\n\nconst classPrefix &#x3D; &#96;adm-badge&#96;;\n\nexport const dot &#x3D; Symbol(); &#x2F;&#x2F; ????\n\nexport type BadgeProps &#x3D; &#123;\n  content?: React.ReactNode | typeof dot;\n  color?: string;\n&#125; &amp; NativeProps&lt;&quot;--right&quot; | &quot;--top&quot;&gt;;\n\nexport const Badge &#x3D; withDefaultProps(&#123;\n  color: &quot;#FF411C&quot;,\n&#125;)&lt;BadgeProps&gt;((props) &#x3D;&gt; &#123;\n  const &#123; content, color, children &#125; &#x3D; props;\n\n  const isDot &#x3D; content &#x3D;&#x3D;&#x3D; dot; &#x2F;&#x2F; 判断是不是 dot\n\n  const badgeCls &#x3D; classNames(classPrefix, &#123;\n    [&#96;$&#123;classPrefix&#125;-fixed&#96;]: !!children,\n    [&#96;$&#123;classPrefix&#125;-dot&#96;]: isDot,\n  &#125;);\n  &#x2F;&#x2F; 有内容不是dot 渲染内容，是dot 不渲染内容\n  const element &#x3D; content\n    ? withNativeProps(\n        props,\n        &lt;div &#x2F;&#x2F; dot 是元素，不是伪元素\n          className&#x3D;&#123;badgeCls&#125;\n          style&#x3D;&#123;&#123;\n            backgroundColor: color,\n          &#125;&#125;\n        &gt;\n          &#123;!isDot &amp;&amp; content&#125;\n        &lt;&#x2F;div&gt;\n      )\n    : null;\n  &#x2F;&#x2F; 有子节点， 无子节点，直接渲染\n  return children ? (\n    &lt;div className&#x3D;&#123;&#96;$&#123;classPrefix&#125;-wrap&#96;&#125;&gt;\n      &#123;children&#125;\n      &#123;element&#125;\n    &lt;&#x2F;div&gt;\n  ) : (\n    element\n  );\n&#125;);</code></pre>\n\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">@class-prefix-badge: ~&quot;adm-badge&quot;;\n\n.@&#123;class-prefix-badge&#125;-wrap &#123;\n  display: inline-block;\n  position: relative;\n&#125;\n\n.@&#123;class-prefix-badge&#125; &#123;\n  display: inline-block;\n  color: #fff;\n  font-weight: normal;\n  text-align: center;\n  vertical-align: middle;\n  box-sizing: border-box;\n  min-width: 16px;\n  border-radius: 100px;\n  padding: 0 4px;\n  font-size: 9px;\n  line-height: 1.2;\n  white-space: nowrap;\n  --right: 0;\n  --top: 0;\n\n  &amp;-fixed &#123;\n    position: absolute;\n    right: var(--right);\n    top: var(--top);\n    transform: translate(50%, -50%);\n  &#125;\n\n  &amp;-dot &#123;\n    &#x2F;&#x2F;  元素dot\n    min-width: 10px;\n    width: 10px;\n    height: 10px;\n    border-radius: 5px;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"暂时放下\"><a href=\"#暂时放下\" class=\"headerlink\" title=\"暂时放下\"></a>暂时放下</h2><!-- <img src=\"http://t-blog-images.aijs.top/img/202208212104877.png\" /> 需删除 -->\n","text":"Mask 组件 getContainer见 &#x2F;&#x2F; renderToContainer import &#123; createPortal &#125; from &quot;react-dom&quot;; import &#123; ReactElemen...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Mask-%E7%BB%84%E4%BB%B6-getContainer\"><span class=\"toc-text\">Mask 组件 getContainer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#renderToBody\"><span class=\"toc-text\">renderToBody</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">客户端渲染判断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sleep\"><span class=\"toc-text\">sleep</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Space\"><span class=\"toc-text\">Space</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Image\"><span class=\"toc-text\">Image</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Floating-panel\"><span class=\"toc-text\">Floating-panel</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tabs-%E4%B8%8E-%E5%86%85%E5%AE%B9%E8%81%94%E5%8A%A8\"><span class=\"toc-text\">tabs 与 内容联动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#badge-%E7%9C%8B%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%94%BE%E6%9D%BE%E4%B8%8B\"><span class=\"toc-text\">badge 看个简单的放松下</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9A%82%E6%97%B6%E6%94%BE%E4%B8%8B\"><span class=\"toc-text\">暂时放下</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"移动端问题（待补充）","uid":"9ca59950df988675bcde5e82f2244716","slug":"2022-08-22mb","date":"2022-08-22T10:55:01.000Z","updated":"2022-09-16T13:54:56.314Z","comments":true,"path":"api/articles/2022-08-22mb.json","keywords":null,"cover":null,"text":"【移动端】移动端点击可点击元素时，出现蓝色默认背景色见 web页面放在移动端，点击button 标签或者添加了cursor:pointer 样式的标签，会出现 蓝色背景色， 解决方案： 给相应标签 或者直接在body 标签上添加 样式： &#96;&#96;&#96;css -w...","link":"","photos":[],"count_time":{"symbolsCount":663,"symbolsTime":"1 mins."},"categories":[{"name":"移动端适配","slug":"移动端适配","count":4,"path":"api/categories/移动端适配.json"}],"tags":[{"name":"移动端适配","slug":"移动端适配","count":4,"path":"api/tags/移动端适配.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"TypeScript-实操","uid":"e0a73b928a5d52222483c493ebd5de2e","slug":"2022-08-20ts","date":"2022-08-20T03:07:56.000Z","updated":"2022-09-17T07:48:05.585Z","comments":true,"path":"api/articles/2022-08-20ts.json","keywords":null,"cover":[],"text":"对于不能穷举的处理interface Option &#123; label: string; value: any; &#125; interface EnumOption &#123; &#x2F;** 价值观成绩 *&#x2F; valuesGrade: Option[];...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":13,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":14,"path":"api/tags/TypeScript.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}