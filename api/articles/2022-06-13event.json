{"title":"javascript event","uid":"30090ec9fe2f3c6d588fdab6524f755c","slug":"2022-06-13event","date":"2022-06-13T02:31:04.000Z","updated":"2023-08-04T06:07:10.007Z","comments":true,"path":"api/articles/2022-06-13event.json","keywords":null,"cover":null,"content":"<h2 id=\"现象描述\"><a href=\"#现象描述\" class=\"headerlink\" title=\"现象描述\"></a>现象描述</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">react_devtools_backend.js:4026 Warning: This synthetic event is reused for performance reasons. If you&#39;re seeing this, you&#39;re accessing the property &#96;target&#96; on a released&#x2F;nullified synthetic event. This is set to null. If you must keep the original synthetic event around, use event.persist(). See https:&#x2F;&#x2F;fb.me&#x2F;react-event-pooling for more information.</code></pre>\n\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">event.persist();</code></pre>\n\n<h2 id=\"代码描述及修改\"><a href=\"#代码描述及修改\" class=\"headerlink\" title=\"代码描述及修改\"></a>代码描述及修改</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nconst handleConfirmUpload &#x3D; useCallback(async (event, index: number) &#x3D;&gt; &#123;\n  event.persist(); &#x2F;&#x2F; 不加此处，导致上述问题\n  setConfirmFileReplace(true);\n  fileReplaceCache.current &#x3D; &#123;\n    event,\n    index,\n  &#125;;\n&#125;, []);\n&#x2F;&#x2F; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nconst handleCloseFileReplace &#x3D; useCallback(async () &#x3D;&gt; &#123;\n  setConfirmFileReplace(false);\n  fileReplaceCache.current &#x3D; null;\n&#125;, []);\n&#x2F;&#x2F; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nconst handleConfirmFileReplace &#x3D; useCallback(async () &#x3D;&gt; &#123;\n  if (fileReplaceCache.current) &#123;\n    handleUploadChange(fileReplaceCache.current?.event, fileReplaceCache.current?.index);\n  &#125;\n&#125;, [fileReplaceCache.current]);\n\n&#x2F;&#x2F; 为了保证此函数内部不变\nconst handleUploadChange &#x3D; useCallback(async (event, index: number) &#x3D;&gt; &#123;\n  const files &#x3D; event.target?.files;\n  if (!files || files?.length &#x3D;&#x3D;&#x3D; 0) return;\n&#125;, []);</code></pre>\n\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><p>点击 <a href=\"https://fb.me/react-event-pooling\" target=\"_blank\" >查看链接提示</a></p>\n<p><strong>Event Pooling</strong></p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p><p>This page is only relevant for React 16 and earlier, and for React Native.<br>这个页面只适用于 React 16 和更早的版本，以及 React Native。<br>React 17 on the web does not use event pooling.<br>React17 在 web 中没有使用事件循环<br>Read more about this change in React 17.</p>\n</div>\n<p>The SyntheticEvent objects are pooled. This means that the SyntheticEvent object will be reused and all properties will be nullified after the event handler has been called. For example, this won’t work:<br><em>SyntheticEvent 对象被合并。这意味着将重用 SyntheticEvent 对象，并且在调用事件处理程序后，所有属性都将为 null。例如，这将不起作用：</em></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function handleChange(e) &#123;\n  &#x2F;&#x2F; This won&#39;t work because the event object gets reused.\n  &#x2F;&#x2F; 这不起作用，因为事件对象被重用了。\n  setTimeout(() &#x3D;&gt; &#123;\n    console.log(e.target.value); &#x2F;&#x2F; Too late! 太迟了\n  &#125;, 100);\n&#125;</code></pre>\n\n<p>If you need to access event object’s properties after the event handler has run, you need to call e.persist():<br><em>如果需要在事件处理程序运行后访问事件对象的属性，则需要调用<code>e.persist()</code>：</em></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function handleChange(e) &#123;\n  &#x2F;&#x2F; Prevents React from resetting its properties:\n  &#x2F;&#x2F; 阻止React重置其属性\n  e.persist();\n\n  setTimeout(() &#x3D;&gt; &#123;\n    console.log(e.target.value); &#x2F;&#x2F; Works 没问题\n  &#125;, 100);\n&#125;</code></pre>\n","text":"现象描述react_devtools_backend.js:4026 Warning: This synthetic event is reused for performance reasons. If you&#39;re seeing this, you&#39;re ac...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":39,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":33,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E8%B1%A1%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">现象描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%8F%8F%E8%BF%B0%E5%8F%8A%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">代码描述及修改</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">原因分析</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"pinia源码分析 playground","uid":"cb01f973e2d0f78b875308680dd29577","slug":"2022-06-13vue-pinia","date":"2022-06-13T07:27:26.000Z","updated":"2022-09-16T13:54:56.142Z","comments":true,"path":"api/articles/2022-06-13vue-pinia.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/20220610172420.webp","text":"playground 运行是一个标准的 vue 项目 package.json&quot;scripts&quot;: &#123; &quot;release&quot;: &quot;node scripts&#x2F;release.mjs&quot;, &quot;siz...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"vue","slug":"vue","count":14,"path":"api/categories/vue.json"}],"tags":[{"name":"源码","slug":"源码","count":16,"path":"api/tags/源码.json"},{"name":"vue","slug":"vue","count":14,"path":"api/tags/vue.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"Vue Pinia","uid":"77d580d0d304de3429cbd4fdc2ebd7c6","slug":"2022-06-10vue-pinia","date":"2022-06-10T09:21:00.000Z","updated":"2022-09-16T13:54:56.140Z","comments":true,"path":"api/articles/2022-06-10vue-pinia.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/20220610172420.webp","text":"Pinia 特点💡 Intuitive直观的Stores are as familiar as components. API designed to let you write well organized stores.存储和组件是一样的。API设计了让你写好组织的存储。 🔑...","link":"","photos":[],"count_time":{"symbolsCount":"68k","symbolsTime":"1:02"},"categories":[{"name":"vue","slug":"vue","count":14,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":14,"path":"api/tags/vue.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}