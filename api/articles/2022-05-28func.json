{"title":"前端基础-编程范式-函数式编程简单了解","uid":"f35528e9b34223f99b96c0561880d949","slug":"2022-05-28func","date":"2022-05-28T07:25:33.000Z","updated":"2023-02-20T21:20:56.460Z","comments":true,"path":"api/articles/2022-05-28func.json","keywords":null,"cover":null,"content":"<h2 id=\"为什么要用函数编程\"><a href=\"#为什么要用函数编程\" class=\"headerlink\" title=\"为什么要用函数编程\"></a>为什么要用函数编程</h2><ol>\n<li>js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的<code>原型、原型链、继承</code>，还有对人不友好的<code>this</code> ；</li>\n<li>而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。</li>\n</ol>\n<p><strong>简单来说就是：面向对象的思想在 js 中不是很好用</strong></p>\n<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><p>函数式编程（functional programing）是编程范式之一。我们常见的范式还有面向过程、面向行为、面向对象等。</p>\n<p>范式：<code>简单说就是编程的方法论</code>。</p>\n<ol>\n<li><strong>面向函数式编程</strong>：它的思维方式是把现实世界中的事物和事物之间的联系，抽象到程序世界中。</li>\n<li><strong>面向对象编程</strong>：它的思维方式是把现实世界中的事物抽象成程序世界中的类和对象，然后通过封装，继承和多态来演示事物之间的联系。</li>\n<li><strong>面向过程编程</strong>：简单解释就是按照步骤来实现。</li>\n<li><strong>面向行为编程</strong>：它是函数式编程的衍生范型，将电脑运算平展为一系列的变化，并且避免使用程序指令以及堆叠的对象。</li>\n</ol>\n<h2 id=\"函数式编程特点：\"><a href=\"#函数式编程特点：\" class=\"headerlink\" title=\"函数式编程特点：\"></a>函数式编程特点：</h2><ol>\n<li>程序的本质：就是利用计算机的计算能力将输入转化成对应的输出。</li>\n<li>函数式编程中的函数：指的不是编程语言里的函数，而是数学意义上的映射关系。比如 y&#x3D;sin(x) 中 x 和 y 值的映射关系。</li>\n<li>纯函数：相同的输入获得相同的输出（无副作用）。</li>\n<li>函数式编程：就是对数据(函数)映射关系的抽象。</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li>高阶函数</li>\n<li>闭包</li>\n<li>纯函数</li>\n<li>柯里化</li>\n<li>组合函数</li>\n</ol>\n<h2 id=\"三大编程范式\"><a href=\"#三大编程范式\" class=\"headerlink\" title=\"三大编程范式\"></a>三大编程范式</h2><h3 id=\"编程范式有以下三种：\"><a href=\"#编程范式有以下三种：\" class=\"headerlink\" title=\"编程范式有以下三种：\"></a>编程范式有以下三种：</h3><ol>\n<li>面向对象编程</li>\n<li>面向过程编程</li>\n<li>面向函数编程</li>\n</ol>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><ol>\n<li>面向对象编程最大的特点是：以类、对象作为组织代码的单元以及它的四大特性。</li>\n<li>面向过程编程最大的特点是：以函数作为组织代码的单元，数据与方法相分离。</li>\n<li>函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。</li>\n<li>不过，它跟面向过程编程的区别在于，它的函数是无状态的。</li>\n</ol>\n<h3 id=\"何为无状态？\"><a href=\"#何为无状态？\" class=\"headerlink\" title=\"何为无状态？\"></a>何为无状态？</h3><ol>\n<li>简单点讲就是，函数内部涉及的变量都是局部变量</li>\n<li>不会像<code>面向对象编程</code>那样，共享类成员变量</li>\n<li>也不会像<code>面向过程编程</code>那样，共享全局变量</li>\n<li>函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。</li>\n</ol>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><ol>\n<li>不同的编程范式之间并不是截然不同的，总是有一些相同的编程规则。</li>\n<li>比如，不管是面向过程、面向对象还是函数式编程，它们都有变量、函数的概念，</li>\n<li>最顶层都要有 main 函数执行入口，来组装编程单元（类、函数等）。</li>\n<li>只不过，面向对象的编程单元是类或对象，面向过程的编程单元是函数，函数式编程的编程单元是无状态函数。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zoo.team/article/function-production\"></a><br><a href=\"https://blog.csdn.net/weixin_43871678/article/details/124617216\" target=\"_blank\" >三大编程范式</a></p>\n","text":"为什么要用函数编程 js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的原型、原型链、继承，还有对人不友好的this ； 而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。 简单来说就是...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":20,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">为什么要用函数编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">什么是函数式编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%89%B9%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">函数式编程特点：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%A4%A7%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">三大编程范式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%B8%89%E7%A7%8D%EF%BC%9A\"><span class=\"toc-text\">编程范式有以下三种：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">区别：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%95%E4%B8%BA%E6%97%A0%E7%8A%B6%E6%80%81%EF%BC%9F\"><span class=\"toc-text\">何为无状态？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"react useState 错误使用","uid":"e7a12532b015cb78e0adb01f9bc03b9e","slug":"2022-05-31bug","date":"2022-05-31T02:30:47.000Z","updated":"2022-09-20T12:23:35.406Z","comments":true,"path":"api/articles/2022-05-31bug.json","keywords":null,"cover":null,"text":"Shareconst Share: FC&lt;ShareProps&gt; &#x3D; (props) &#x3D;&gt; &#123; const &#123; entityType, entityCode &#125; &#x3D; props const [state...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"bug","slug":"bug","count":4,"path":"api/categories/bug.json"}],"tags":[{"name":"React","slug":"React","count":33,"path":"api/tags/React.json"},{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"wiki Laser Pen","uid":"2e69f09f2b5424b80304135ea166c436","slug":"2022-05-27wiki-laserPen","date":"2022-05-27T08:07:33.000Z","updated":"2022-09-16T13:54:56.121Z","comments":true,"path":"api/articles/2022-05-27wiki-laserPen.json","keywords":null,"cover":[],"text":"Laser PenLaser Pen 是一套用来在 web canvas 上绘制鼠标轨迹的工具集。 使用场景wiki全屏演示时候，为了便于听众跟随演讲者进度，给鼠标轨迹加上标记。 注：公司项目由于版权问题，不便演示 初步上手首先在你的项目中添加对 Laser Pen 的依赖： y...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"wiki","slug":"wiki","count":3,"path":"api/categories/wiki.json"}],"tags":[{"name":"wiki","slug":"wiki","count":4,"path":"api/tags/wiki.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}