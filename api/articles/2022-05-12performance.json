{"title":"浏览器首屏优化-首屏时间获取","uid":"b4153b96463af3b17371df43a1c660ca","slug":"2022-05-12performance","date":"2022-05-12T10:27:05.000Z","updated":"2022-05-26T14:12:56.675Z","comments":true,"path":"api/articles/2022-05-12performance.json","keywords":null,"cover":[],"content":"<p>白屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器出现第一个元素<br>首屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器第一屏渲染完成</p>\n<p>影响白屏时间的因素：网络，服务端性能，前端页面结构设计。<br>影响首屏时间的因素：白屏时间，资源下载执行时间。</p>\n<p>通常在head解析完，body开始渲染此时是白屏结束<br>白屏时间 &#x3D; firstPaint - performance.timing.navigationStart || pageStartTime</p>\n<p>常用方法</p>\n<ol>\n<li>首屏模块标签标记， 你觉得首屏完成的地方插入脚本</li>\n<li>同级首屏内加载最慢的图片&#x2F;iframe</li>\n</ol>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9sejV6LmNvbS9hc3NldHMvaW1nL3BlcmZvcm1hbmNlLnBuZw?x-oss-process=image/format,png\"></p>\n<p>左边红线代表的是网络传输层面的过程，右边红线代表了服务器传输回字节后浏览器的各种事件状态，这个阶段包含了浏览器对文档的解析，DOM 树构建，布局，绘制等等。<br><em>1. prompt for unload</em></p>\n<ul>\n<li>navigationStart: 表示从上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，这个值将和 fetchStart 相等。</li>\n</ul>\n<p><em>2. 前一个网页卸载</em></p>\n<ul>\n<li>unloadEventStart: 表示前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0。</li>\n<li>unloadEventEnd: 返回前一个页面 unload 时间绑定的回掉函数执行完毕的时间戳。</li>\n</ul>\n<p><em>3. 重定向</em></p>\n<ul>\n<li>redirectStart: 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0。</li>\n<li>redirectEnd: 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0。</li>\n</ul>\n<p><em>4. 使用 HTTP 请求</em></p>\n<ul>\n<li>fetchStart: 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前。</li>\n</ul>\n<p><em>5. 域名解析</em></p>\n<ul>\n<li>domainLookupStart&#x2F;domainLookupEnd: DNS 域名查询开始&#x2F;结束的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li>\n</ul>\n<p><em>6. tcp链接</em></p>\n<ul>\n<li>connectStart: HTTP（TCP）开始&#x2F;重新 建立连接的时间，如果是持久连接，则与 fetchStart 值相等。</li>\n<li>connectEnd: HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等。</li>\n</ul>\n<p><em>7. ssl建立</em></p>\n<ul>\n<li>secureConnectionStart: HTTPS 连接开始的时间，如果不是安全连接，则值为 0。</li>\n</ul>\n<p><em>8. 读取文档</em></p>\n<ul>\n<li>requestStart: HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存。</li>\n</ul>\n<p><em>9. 响应</em></p>\n<ul>\n<li>responseStart: HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存。</li>\n<li>responseEnd: HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存。</li>\n</ul>\n<p><em>10. 解析dom</em></p>\n<ul>\n<li>domLoading: 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件。</li>\n</ul>\n<p><em>11. dom可交互</em></p>\n<ul>\n<li>domInteractive: 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源。</li>\n</ul>\n<p><em>12. 页面内资源加载</em></p>\n<ul>\n<li>domContentLoadedEventStart: DOM 解析完成后，网页内资源加载开始的时间，在 DOMContentLoaded 事件抛出前发生。</li>\n<li>domContentLoadedEventEnd: DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）。</li>\n</ul>\n<p><em>13. dom树解析完成</em></p>\n<ul>\n<li>domComplete: DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件。</li>\n</ul>\n<p><em>14. load事件</em></p>\n<ul>\n<li>loadEventStart: load 事件发送给文档，也即 load 回调函数开始执行的时间。</li>\n<li>loadEventEnd: load 事件的回调函数执行完毕的时间。</li>\n</ul>\n<p>Performance 接口可以获取到当前页面与性能相关的信息。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n    &quot;timeOrigin&quot;: 1652338539312.5,\n    &quot;timing&quot;: &#123;\n        &quot;connectStart&quot;: 1652338539353,\n        &quot;navigationStart&quot;: 1652338539312,\n        &quot;loadEventEnd&quot;: 1652338542492,\n        &quot;domLoading&quot;: 1652338539823,\n        &quot;secureConnectionStart&quot;: 1652338539401,\n        &quot;fetchStart&quot;: 1652338539316,\n        &quot;domContentLoadedEventStart&quot;: 1652338540574,\n        &quot;responseStart&quot;: 1652338539807,\n        &quot;responseEnd&quot;: 1652338539828,\n        &quot;domInteractive&quot;: 1652338540574,\n        &quot;domainLookupEnd&quot;: 1652338539353,\n        &quot;redirectStart&quot;: 0,\n        &quot;requestStart&quot;: 1652338539505,\n        &quot;unloadEventEnd&quot;: 0,\n        &quot;unloadEventStart&quot;: 0,\n        &quot;domComplete&quot;: 1652338542489,\n        &quot;domainLookupStart&quot;: 1652338539353,\n        &quot;loadEventStart&quot;: 1652338542489,\n        &quot;domContentLoadedEventEnd&quot;: 1652338540575,\n        &quot;redirectEnd&quot;: 0,\n        &quot;connectEnd&quot;: 1652338539504\n    &#125;,\n    &quot;navigation&quot;: &#123;\n        &quot;type&quot;: 0,\n        &quot;redirectCount&quot;: 0\n    &#125;\n&#125;</code></pre>\n\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function getPerfermanceTiming() &#123;\n  let t &#x3D; performance.timing\n\n  &#x2F;&#x2F; 重定向结束时间 - 重定向开始时间\n  let redirect &#x3D; t.redirectEnd - t.redirectStart\n  &#x2F;&#x2F; DNS 查询开始时间 - fetech start 时间\n  let appCache &#x3D; t.domainLookupStart - t.fetchStart\n  &#x2F;&#x2F; DNS 查询结束时间 - DNS 查询开始时间\n  let dns &#x3D; t.domainLookupEnd - t.domainLookupStart\n  &#x2F;&#x2F; 完成 TCP 连接握手时间 - TCP 连接开始时间 \n  let tcp &#x3D; t.connectEnd - t.connectStart\n  &#x2F;&#x2F; 从请求开始到接收到第一个响应字符的时间 \n  let ttfb &#x3D; t.responseStart - t.requestStart\n  &#x2F;&#x2F; 资源下载时间，响应结束时间 - 响应开始时间\n  let contentDL &#x3D; t.responseEnd - t.responseStart\n  &#x2F;&#x2F; 从请求开始到响应结束的时间\n  let httpTotal &#x3D; t.responseEnd - t.requestStart\n  &#x2F;&#x2F; 从页面开始到 domContentLoadedEventEnd\n  let domContentloaded &#x3D; t.domContentLoadedEventEnd - t.navigationStart\n  &#x2F;&#x2F; 从页面开始到 loadEventEnd\n  let loaded &#x3D; t.loadEventEnd - t.navigationStart\n\n  let result &#x3D; [\n    &#123; key: &quot;Redirect&quot;, desc: &quot;网页重定向的耗时&quot;, value: redirect &#125;, \n    &#123; key: &quot;AppCache&quot;, desc: &quot;检查本地缓存的耗时&quot;, value: appCache &#125;,\n    &#123; key: &quot;DNS&quot;, desc: &quot;DNS查询的耗时&quot;, value: dns &#125;,\n    &#123; key: &quot;TCP&quot;, desc: &quot;TCP连接的耗时&quot;, value: tcp &#125;,\n    &#123; key: &quot;Waiting(TTFB)&quot;, desc: &quot;从客户端发起请求到接收到响应的时间 &#x2F; Time To First Byte&quot;, value: ttfb &#125;,\n    &#123; key: &quot;Content Download&quot;, desc: &quot;下载服务端返回数据的时间&quot;, value: contentDL &#125;,\n    &#123; key: &quot;HTTP Total Time&quot;, desc: &quot;http请求总耗时&quot;, value: httpTotal &#125;,\n    &#123; key: &quot;DOMContentLoaded&quot;, desc: &quot;dom加载完成的时间&quot;, value: domContentloaded &#125;,\n    &#123; key: &quot;Loaded&quot;, desc: &quot;页面load的总耗时&quot;, value: loaded &#125;\n  ]\n  return result\n&#125;\ngetPerfermanceTiming()\n</code></pre>\n<p><a href=\"https://blog.csdn.net/z9061/article/details/101454438\">Web 性能优化-首屏和白屏时间</a></p>\n","text":"白屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器出现第一个元素首屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器第一屏渲染完成 影响白屏时间的因素：网络，服务端性能，前端页面结构设计。影响首屏时间的因素：白屏时间，资源下载执行时间。 通常在head解析完，body开...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"performance","slug":"performance","count":1,"path":"api/categories/performance.json"}],"tags":[{"name":"前端","slug":"前端","count":5,"path":"api/tags/前端.json"},{"name":"performance","slug":"performance","count":1,"path":"api/tags/performance.json"}],"toc":"","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ModHeader","uid":"f31094f49d8642b9a610a9630bcdbff8","slug":"2022-05-13modeheader","date":"2022-05-13T06:59:19.000Z","updated":"2022-05-26T14:12:56.676Z","comments":true,"path":"api/articles/2022-05-13modeheader.json","keywords":null,"cover":[],"text":"通过不同请求头字段标识请求不同的环境 Requesr HeadersAccept: *&#x2F;* Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,zh-...","link":"","photos":[],"count_time":{"symbolsCount":685,"symbolsTime":"1 mins."},"categories":[{"name":"Chrome","slug":"Chrome","count":1,"path":"api/categories/Chrome.json"}],"tags":[{"name":"工具","slug":"工具","count":7,"path":"api/tags/工具.json"},{"name":"Chrome","slug":"Chrome","count":1,"path":"api/tags/Chrome.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"vscode插件 paste code to snippets","uid":"832da5e8309651301e718ddb27ca95fd","slug":"2022-05-11vscode","date":"2022-05-11T01:38:30.000Z","updated":"2022-05-26T14:12:56.675Z","comments":true,"path":"api/articles/2022-05-11vscode.json","keywords":null,"cover":[],"text":"粘贴代码，生成用户代码片段背景 其他插件具有共性，而不具特性 ，每次写代码，要么用第三方插件，现成的代码片段，时常不能满足日常开发需要 自定义代码片段，手写 费时费力，一般步骤，粘贴、修改、格式化 其他插件类似vscode宏变量的使用少之又少， 要么将开源插件定制化，要么重新开发...","link":"","photos":[],"count_time":{"symbolsCount":264,"symbolsTime":"1 mins."},"categories":[{"name":"vscode","slug":"vscode","count":2,"path":"api/categories/vscode.json"}],"tags":[{"name":"vscode","slug":"vscode","count":2,"path":"api/tags/vscode.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}