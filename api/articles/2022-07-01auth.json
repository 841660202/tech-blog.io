{"title":"授权与校验场景「简聊」","uid":"22d71efeaa5b73e832334cf42551f026","slug":"2022-07-01auth","date":"2022-07-01T09:12:26.000Z","updated":"2022-09-16T13:54:56.205Z","comments":true,"path":"api/articles/2022-07-01auth.json","keywords":null,"cover":null,"content":"<h2 id=\"最简单\"><a href=\"#最简单\" class=\"headerlink\" title=\"最简单\"></a>最简单</h2><p>用变量，模拟数据</p>\n<h2 id=\"session-cookie\"><a href=\"#session-cookie\" class=\"headerlink\" title=\"session + cookie\"></a>session + cookie</h2><p>每个用户对应一个会话</p>\n<h2 id=\"SSO-1\"><a href=\"#SSO-1\" class=\"headerlink\" title=\"SSO 1\"></a>SSO 1</h2><ul>\n<li>session + redis + cookie</li>\n</ul>\n<p>觉得有点奇葩，第二份<strong>核心项目</strong>遇到</p>\n<h2 id=\"jwt-redis\"><a href=\"#jwt-redis\" class=\"headerlink\" title=\"jwt + redis\"></a>jwt + redis</h2><p>第二份<strong>非核心项目</strong>遇到</p>\n<p><strong>以下是一般公司常用的方式，面试的时候，大家都在唠这个</strong></p>\n<h2 id=\"SSO-2\"><a href=\"#SSO-2\" class=\"headerlink\" title=\"SSO 2\"></a>SSO 2</h2><ul>\n<li>jwt + redis + cookie</li>\n</ul>\n<h2 id=\"第三方\"><a href=\"#第三方\" class=\"headerlink\" title=\"第三方\"></a>第三方</h2><ul>\n<li>授权 + SSO（ jwt + redis + cookie）</li>\n<li>扫码授权 + SSO（ jwt + redis + cookie）</li>\n</ul>\n<p>第三方使用最多的微信、支付宝、QQ、飞书，第三方授权一般通过回调的形式，把授权结果<code>code</code>返回个开发者</p>\n<h2 id=\"企业合规\"><a href=\"#企业合规\" class=\"headerlink\" title=\"企业合规\"></a>企业合规</h2><ul>\n<li>app 扫码+企业 web + SSO(jwt + redis + cookie)</li>\n</ul>\n<p>大公司需要做<strong>合规</strong>，尤其是上市公司要这些东东，所有用户数据全部来自公司内部系统，面试的时候，大家基本上不会谈这个，如果你给面试官唠了，肯定觉得你在胡说八道，因为下面的很灵活,场景和微信类似，你说扫码，面试官肯定认为你说的是上面<code>第三方</code>那套东西，然而完全不一样</p>\n<p>在扫码登录和确认登陆时候这个点分了多种（长链接、Websocket、MQTT、厂家通道推送，都可以实现）</p>\n<p>以我第三份工作为例：</p>\n<ul>\n<li><code>Flutter桌面端VPN</code> + <code>移动端</code>用了 MQTT</li>\n<li><code>Electron桌面端</code> + <code>移动端</code>, Electron 桌面端用定时器调,<code>移动端</code>MQTT</li>\n<li><code>扫码打开链接</code>，直接注入 cookie，而不是通过<code>回调</code>或者<code>redirect重定向</code></li>\n</ul>\n<p>之所以没用厂家通道，因为公司原生部门的厂家通道需要改造才能用，由于改造成本的存在，不提供。总之麻烦～，换了个 MQTT 方案</p>\n<p>mobile 原生(「<code>RN</code>、<code>Flutter</code>、<code>IOS</code>、<code>安卓</code>、<code>Weex</code>、<code>uniapp</code>、<code>ionic</code>」)分的细点,我遇到过的都列出来了，简单来说就是 IOS 和安卓，至于鸿蒙啥的就不说了</p>\n<p>总结：这个吧，就相当于，公司开发了自己的<code>微信桌面window/mac</code> + <code>微信手机</code></p>\n<h2 id=\"webview-cookie-注入\"><a href=\"#webview-cookie-注入\" class=\"headerlink\" title=\"webview cookie 注入\"></a>webview cookie 注入</h2><p><code>react-native-webview</code>向 h5 应用注入 cookie，<code>走 SSO 验证实现免登</code>， 原生当然也OK的</p>\n","text":"最简单用变量，模拟数据 session + cookie每个用户对应一个会话 SSO 1 session + redis + cookie 觉得有点奇葩，第二份核心项目遇到 jwt + redis第二份非核心项目遇到 以下是一般公司常用的方式，面试的时候，大家都在唠这个 SSO ...","link":"","photos":[],"count_time":{"symbolsCount":914,"symbolsTime":"1 mins."},"categories":[{"name":"auth","slug":"auth","count":1,"path":"api/categories/auth.json"}],"tags":[{"name":"auth","slug":"auth","count":1,"path":"api/tags/auth.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%AE%80%E5%8D%95\"><span class=\"toc-text\">最简单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#session-cookie\"><span class=\"toc-text\">session + cookie</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSO-1\"><span class=\"toc-text\">SSO 1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jwt-redis\"><span class=\"toc-text\">jwt + redis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSO-2\"><span class=\"toc-text\">SSO 2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9\"><span class=\"toc-text\">第三方</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%81%E4%B8%9A%E5%90%88%E8%A7%84\"><span class=\"toc-text\">企业合规</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#webview-cookie-%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">webview cookie 注入</span></a></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-js算法","uid":"b6eefb99ab4e0f88e52602483fde65dd","slug":"2022-07-04js","date":"2022-07-04T07:31:24.000Z","updated":"2022-09-16T13:54:56.209Z","comments":true,"path":"api/articles/2022-07-04js.json","keywords":null,"cover":[],"text":"排序冒泡排序 选择排序 插入排序 归并排序 希尔排序 快速排序 &#x2F;* 快排是冒泡的一种改进，基于分治思想 *&#x2F; const arr2 &#x3D; [2, 44, 1, 0, -22, 56, -78]; function quickSort2(arr) &#...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":31,"path":"api/tags/前端基础.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"react hook 使用 bug","uid":"e5dbf22be09b32f376c35e2a002b6557","slug":"2022-07-01bug","date":"2022-07-01T03:16:39.000Z","updated":"2022-09-16T15:01:35.762Z","comments":true,"path":"api/articles/2022-07-01bug.json","keywords":null,"cover":[],"text":"问题Rendered more hooks than during the previous render. 解决 两种方式解决： 勾子前置 不用这个勾子 总结勾子不能在条件语句中使用 这个要注意并不是一定这种形式 if (条件) &#123; &#x2F;&#x2F; 如果条件...","link":"","photos":[],"count_time":{"symbolsCount":507,"symbolsTime":"1 mins."},"categories":[{"name":"bug","slug":"bug","count":4,"path":"api/categories/bug.json"}],"tags":[{"name":"React","slug":"React","count":13,"path":"api/tags/React.json"},{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"比你优秀的人，比你更努力！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}