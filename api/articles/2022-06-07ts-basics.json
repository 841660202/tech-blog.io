{"title":"2.Typescript 基础","uid":"3d6d9d5bd9a34b12b2d2da5941501c4f","slug":"2022-06-07ts-basics","date":"2022-06-06T07:56:08.000Z","updated":"2022-09-16T14:59:05.302Z","comments":true,"path":"api/articles/2022-06-07ts-basics.json","keywords":null,"cover":"https://img0.baidu.com/it/u=86492913,3057347241&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=208","content":"<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>Welcome to the first page of the handbook. If this is your first experience with TypeScript - you may want to start at one of the ‘Getting Started’ guides<br><code>欢迎来到 TypeScript 手册的第一页。如果您是第一次使用 TypeScript - 您可能想要开始一个&#39;Getting Started&#39;指南</code></p>\n<p>Each and every value in JavaScript has a set of behaviors you can observe from running different operations. That sounds abstract, but as a quick example, consider some operations we might run on a variable named message.<br><code>每个和所有的值在 JavaScript 中都有一组行为可以观察从运行不同的操作。这会感觉很抽象，但是作为一个快速的例子，考虑一些我们可能运行的操作的变量名称 message。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; Accessing the property &#39;toLowerCase&#39;\n&#x2F;&#x2F; on &#39;message&#39; and then calling it\nmessage.toLowerCase();\n&#x2F;&#x2F; Calling &#39;message&#39;\nmessage();</code></pre>\n\n<p>If we break this down, the first runnable line of code accesses a property called toLowerCase and then calls it. The second one tries to call message directly.<br><code>如果 我们将这个分解，第一个可运行的行代码访问一个属性叫做 toLowerCase 并且调用它。第二个尝试直接调用 message。</code><br>But assuming we don’t know the value of message - and that’s pretty common - we can’t reliably say what results we’ll get from trying to run any of this code. The behavior of each operation depends entirely on what value we had in the first place.<br><code>但是假设我们不知道 message 的值 - 并且这是很常见的 - 我们不可以可靠地说什么结果我们会得到运行这些代码。每个操作的行为取决于我们本身的值。</code></p>\n<ul>\n<li>Is message callable? <code>message 是可调用的吗？</code></li>\n<li>Does it have a property called toLowerCase on it? <code>message 有一个属性叫做 toLowerCase 吗？</code></li>\n<li>If it does, is toLowerCase even callable? <code>如果是，是否 toLowerCase 可调用？</code></li>\n<li>If both of these values are callable, what do they return? <code>如果这两个值都是可调用的，它们会返回什么？</code></li>\n</ul>\n<p>The answers to these questions are usually things we keep in our heads when we write JavaScript, and we have to hope we got all the details right.<br><code>这些问题的答案通常是我们在写 JavaScript 时保留在我们的脑中，并且我们必须希望我们拿到所有的细节正确。</code><br>Let’s say message was defined in the following way.<br><code>让我们假设 message 被定义为以下的方式。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const message &#x3D; &quot;Hello World!&quot;;</code></pre>\n\n<p>As you can probably guess, if we try to run message.toLowerCase(), we’ll get the same string only in lower-case.<br><code>如果我们试着运行 message.toLowerCase()，我们会得到一个只有小写字母的字符串。</code><br>What about that second line of code? If you’re familiar with JavaScript, you’ll know this fails with an exception:<br><code>如果您熟悉 JavaScript，您会知道这个失败了一个异常：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; TypeError: message is not a function</code></pre>\n\n<p>It’d be great if we could avoid mistakes like this.<br><code>我们应该能避免这样的错误。</code><br>When we run our code, the way that our JavaScript runtime chooses what to do is by figuring out the type of the value - what sorts of behaviors and capabilities it has. That’s part of what that TypeError is alluding to - it’s saying that the string “Hello World!” cannot be called as a function.<br><code>当我们运行我们的代码，我们的 JavaScript 运行时通过分析值的类型来决定如何做。这是它引用的 TypeError 的一部分 - 它说明 &quot;Hello World!&quot; 不能被调用作为函数。</code><br>For some values, such as the primitives string and number, we can identify their type at runtime using the typeof operator. But for other things like functions, there’s no corresponding runtime mechanism to identify their types. For example, consider this function:<br><code>对于某些值，如字符串和数字，我们可以在运行时通过 typeof 操作符来识别它的类型。但是对于其他的东西，没有相应的运行时机制来识别它们的类型。例如，让我们来看这个函数：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function fn(x) &#123;\n  return x.flip();\n&#125;</code></pre>\n\n<p>We can observe by reading the code that this function will only work if given an object with a callable flip property, but JavaScript doesn’t surface this information in a way that we can check while the code is running. The only way in pure JavaScript to tell what fn does with a particular value is to call it and see what happens. This kind of behavior makes it hard to predict what code will do before it runs, which means it’s harder to know what your code is going to do while you’re writing it.<br><code>我们可以通过阅读代码, 看到这个函数只有在给定一个可调用 flip 属性的对象时才能工作，但 JavaScript 没有一种方式可以在运行代码时来识别 fn 的行为。只有在调用它时才能知道 fn 的行为，这种行为难以预测，这意味着在写代码时难以知道你的代码会做什么。</code><br>Seen in this way, a type is the concept of describing which values can be passed to fn and which will crash. JavaScript only truly provides dynamic typing - running the code to see what happens.<br><code>在这种方式中，一个类型是描述哪些值可以传给 fn，哪些会崩溃的概念。JavaScript 只是提供了动态类型定义 - 运行代码来看看会发生什么。</code><br>The alternative is to use a static type system to make predictions about what code is expected before it runs.<br><code>另一种方式是使用静态类型系统来预测在运行代码之前会发生什么。</code></p>\n<h2 id=\"Static-type-checking\"><a href=\"#Static-type-checking\" class=\"headerlink\" title=\"Static type-checking\"></a>Static type-checking</h2><p><code>静态类型检查</code><br>Think back to that TypeError we got earlier from trying to call a string as a function. Most people don’t like to get any sorts of errors when running their code - those are considered bugs! And when we write new code, we try our best to avoid introducing new bugs.<br><code>想起那个 TypeError 我们以前从尝试调用一个字符串作为函数时得到的。大多数人不喜欢在运行他们的代码时得到任何类型的错误，这些错误被称为 bug！而当我们写新代码时，我们尽可能地避免引入新的 bug。</code><br>If we add just a bit of code, save our file, re-run the code, and immediately see the error, we might be able to isolate the problem quickly; but that’s not always the case. We might not have tested the feature thoroughly enough, so we might never actually run into a potential error that would be thrown! Or if we were lucky enough to witness the error, we might have ended up doing large refactorings and adding a lot of different code that we’re forced to dig through.<br><code>如果我们添加些点代码，保存我们的文件，重新运行代码，并立即看到错误，我们可能会快速地发现问题；但这并不总是如此。我们可能没有测试特性的充分程度，所以我们可能没有真正发生可能会抛出的错误！或者如果我们能够看到错误，我们可能已经做了大量的重构和添加了很多不同的代码，我们被迫要探索它们。</code><br>Ideally, we could have a tool that helps us find these bugs before our code runs. That’s what a static type-checker like TypeScript does. Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.<br><code>最好的方式是我们可以在我们的代码运行之前，有一个工具帮我们找到这些 bug。这是 TypeScript 的静态类型检查器做的。静态类型系统描述了我们的值在运行我们的程序时的形状和行为。一个类型检查器像 TypeScript 使用这些信息，告诉我们当可能会出现问题时。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const message &#x3D; &quot;hello!&quot;;\n\nmessage();\n&#x2F;&#x2F; This expression is not callable.\n&#x2F;&#x2F;   Type &#39;String&#39; has no call signatures.</code></pre>\n\n<p>Running that last sample with TypeScript will give us an error message before we run the code in the first place.<br><code>运行这个最后一个示例，TypeScript 将在第一个代码之前报错。</code></p>\n<h2 id=\"Non-exception-Failures\"><a href=\"#Non-exception-Failures\" class=\"headerlink\" title=\"Non-exception Failures\"></a>Non-exception Failures</h2><p><code>非异常失败</code><br>So far we’ve been discussing certain things like runtime errors - cases where the JavaScript runtime tells us that it thinks something is nonsensical. Those cases come up because the ECMAScript specification has explicit instructions on how the language should behave when it runs into something unexpected.<br><code>直到现在，我们都讨论了一些关于运行时错误的事情，比如说，当 JavaScript 运行时认为某些东西是无效的。这些情况出现的原因是 ECMAScript 规范明确指出了在运行时如何应该行为。</code><br>For example, the specification says that trying to call something that isn’t callable should throw an error. Maybe that sounds like “obvious behavior”, but you could imagine that accessing a property that doesn’t exist on an object should throw an error too. Instead, JavaScript gives us different behavior and returns the value undefined:<br><code>比如说，规范指出了尝试调用不可调用的东西应该抛出一个错误。可能会认为这是“明显的行为”，但你可以想象一下，访问一个对象上不存在的属性应该抛出一个错误。而 JavaScript 给我们不同的行为，返回值 undefined：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const user &#x3D; &#123;\n  name: &quot;Daniel&quot;,\n  age: 26,\n&#125;;\nuser.location; &#x2F;&#x2F; returns undefined</code></pre>\n\n<p>Ultimately, a static type system has to make the call over what code should be flagged as an error in its system, even if it’s “valid” JavaScript that won’t immediately throw an error. In TypeScript, the following code produces an error about location not being defined:<br><code>最终，一个静态类型系统必须要在它的系统中，告诉我们应该把哪些代码标记为错误的代码，即使它是“有效的 JavaScript”，也不会立即抛出错误。在 TypeScript 中，下面的代码会报错：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const user &#x3D; &#123;\n  name: &quot;Daniel&quot;,\n  age: 26,\n&#125;;\n\nuser.location;\n&#x2F;&#x2F; Property &#39;location&#39; does not exist on type &#39;&#123; name: string; age: number; &#125;&#39;.</code></pre>\n\n<p>While sometimes that implies a trade-off in what you can express, the intent is to catch legitimate bugs in our programs. And TypeScript catches a lot of legitimate bugs.<br><code>在某些情况下，这意味着一个交换，在你能表达的范围内，在你的程序中，你可以把一些有效的 JavaScript 抛出错误。而 TypeScript 捕获很多有效的错误。</code><br>For example: typos,<br><code>比如说，拼写错误，</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const announcement &#x3D; &quot;Hello World!&quot;;\n\n&#x2F;&#x2F; How quickly can you spot the typos?\nannouncement.toLocaleLowercase();\nannouncement.toLocalLowerCase();\n\n&#x2F;&#x2F; We probably meant to write this...\nannouncement.toLocaleLowerCase();</code></pre>\n\n<p>uncalled functions,<br><code>未调用的函数，</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function flipCoin() &#123;\n  &#x2F;&#x2F; Meant to be Math.random()\n  return Math.random &lt; 0.5;\n  &#x2F;&#x2F; Operator &#39;&lt;&#39; cannot be applied to types &#39;() &#x3D;&gt; number&#39; and &#39;number&#39;.\n&#125;</code></pre>\n\n<p>or basic logic errors.<br><code>或基本的逻辑错误。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const value &#x3D; Math.random() &lt; 0.5 ? &quot;a&quot; : &quot;b&quot;;\nif (value !&#x3D;&#x3D; &quot;a&quot;) &#123;\n  &#x2F;&#x2F; ...\n&#125; else if (value &#x3D;&#x3D;&#x3D; &quot;b&quot;) &#123;\n  &#x2F;&#x2F; This condition will always return &#39;false&#39; since the types &#39;&quot;a&quot;&#39; and &#39;&quot;b&quot;&#39; have no overlap.\n  &#x2F;&#x2F; Oops, unreachable\n&#125;</code></pre>\n\n<h2 id=\"Types-for-Tooling\"><a href=\"#Types-for-Tooling\" class=\"headerlink\" title=\"Types for Tooling\"></a>Types for Tooling</h2><p><code>类型为工具</code><br>TypeScript can catch bugs when we make mistakes in our code. That’s great, but TypeScript can also prevent us from making those mistakes in the first place.<br><code>TypeScript 可以捕获我们在我们的代码中做错误的错误。这很好，但 TypeScript 可以防止我们做错误。</code><br>The type-checker has information to check things like whether we’re accessing the right properties on variables and other properties. Once it has that information, it can also start suggesting which properties you might want to use.<br><code>类型检查器有信息来检查变量和其他属性是否正确。一旦有这些信息，它也可以开始提建议你应该使用哪些属性。</code><br>That means TypeScript can be leveraged for editing code too, and the core type-checker can provide error messages and code completion as you type in the editor. That’s part of what people often refer to when they talk about tooling in TypeScript.<br><code>这意味着 TypeScript 可以用于编辑代码，并且核心类型检查器可以提供错误消息和代码补全。这是人们通常在说讨论工具时所提到的。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import express from &quot;express&quot;;\nconst app &#x3D; express();\n\napp.get(&quot;&#x2F;&quot;, function (req, res) &#123;\n  res.sen\n    &#x2F;&#x2F; send\n    &#x2F;&#x2F; sendDate\n    &#x2F;&#x2F; sendfile\n    &#x2F;&#x2F; sendFile\n    &#x2F;&#x2F; sendStatus\n&#125;);\n\napp.</code></pre>\n\n<p>TypeScript takes tooling seriously, and that goes beyond completions and errors as you type. An editor that supports TypeScript can deliver “quick fixes” to automatically fix errors, refactorings to easily re-organize code, and useful navigation features for jumping to definitions of a variable, or finding all references to a given variable. All of this is built on top of the type-checker and is fully cross-platform, so it’s likely that your favorite editor has TypeScript support available.<br><code>TypeScript 也深深地认识到工具，并且这也包括了完成和错误的补全，你在输入时可以自动修复错误，重新组织代码，以及寻找变量的定义，或寻找所有引用的变量。这全部是基于类型检查器的，并且是完全的跨平台，所以你可能喜欢的编辑器有 TypeScript 的支持。</code></p>\n<h2 id=\"tsc-the-TypeScript-compiler\"><a href=\"#tsc-the-TypeScript-compiler\" class=\"headerlink\" title=\"tsc, the TypeScript compiler\"></a>tsc, the TypeScript compiler</h2><p><code>tsc</code>，TypeScript 编译器<br>We’ve been talking about type-checking, but we haven’t yet used our type-checker. Let’s get acquainted with our new friend tsc, the TypeScript compiler. First we’ll need to grab it via npm.<br><code>我们已经讲述了类型检查，但我们还没有使用我们的类型检查器。我们需要通过 npm 来获取 tsc，TypeScript 编译器。</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -g typescript</code></pre>\n\n<p>This installs the TypeScript Compiler tsc globally. You can use npx or similar tools if you’d prefer to run tsc from a local node_modules package instead.<br><code>这将安装 TypeScript 编译器 tsc 在全局。如果你想从本地的 node_modules 包里运行 tsc，可以使用 npx 或类似的工具。</code><br>Now let’s move to an empty folder and try writing our first TypeScript program: hello.ts:<br><code>现在我们移动到一个空文件夹，并尝试写我们的第一个 TypeScript 程序：hello.ts：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; Greets the world.\nconsole.log(&quot;Hello world!&quot;);</code></pre>\n\n<p>Notice there are no frills here; this “hello world” program looks identical to what you’d write for a “hello world” program in JavaScript. And now let’s type-check it by running the command tsc which was installed for us by the typescript package.<br><code>通过运行 tsc 命令，我们可以检查我们的程序。</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tsc hello.ts\n</code></pre>\n\n<p>Tada!<br><code>拍拍拍！</code><br>Wait, “tada” what exactly? We ran tsc and nothing happened! Well, there were no type errors, so we didn’t get any output in our console since there was nothing to report.<br><code>等等，“拍拍拍”，什么意思？我们运行 tsc，没有任何事情发生！</code><br>But check again - we got some file output instead. If we look in our current directory, we’ll see a hello.js file next to hello.ts. That’s the output from our hello.ts file after tsc compiles or transforms it into a plain JavaScript file. And if we check the contents, we’ll see what TypeScript spits out after it processes a .ts file:<br><code>但再检查一次，我们会看到一个 hello.js 文件，它在 hello.ts 后面。这是 tsc 编译或转换成一个纯 JavaScript 文件的 hello.ts 的输出。如果我们检查内容，我们会看到 TypeScript 在处理 .ts 文件后打印出来的内容：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; Greets the world.\nconsole.log(&quot;Hello world!&quot;);</code></pre>\n\n<p>In this case, there was very little for TypeScript to transform, so it looks identical to what we wrote. The compiler tries to emit clean readable code that looks like something a person would write. While that’s not always so easy, TypeScript indents consistently, is mindful of when our code spans across different lines of code, and tries to keep comments around.<br><code>在这种情况下，TypeScript 尝试输出一个清洁的可读代码，看起来像一个人写的代码。这并不总是如此简单，TypeScript 缩进一致，注意代码的不同行，并尝试保持注释在同一行。</code><br>What about if we did introduce a type-checking error? Let’s rewrite hello.ts:<br><code>如果我们把 hello.ts 中的 console.log 改成 console.logs，我们会发现什么？我们再次重写 hello.ts：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; This is an industrial-grade general-purpose greeter function:\nfunction greet(person, date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date&#125;!&#96;);\n&#125;\n\ngreet(&quot;Brendan&quot;);</code></pre>\n\n<p>If we run tsc hello.ts again, notice that we get an error on the command line!<br><code>如果我们运行 tsc hello.ts 再次，我们会发现在命令行上出现一个错误！</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">Expected 2 arguments, but got 1.</code></pre>\n\n<p>TypeScript is telling us we forgot to pass an argument to the greet function, and rightfully so. So far we’ve only written standard JavaScript, and yet type-checking was still able to find problems with our code. Thanks TypeScript!<br><code>TypeScript 提醒我们没有传递参数给 greet 函数，并且正确地。直到现在，我们只写了标准 JavaScript，然而类型检查仍然可以找到我们的代码的问题。感谢 TypeScript！</code></p>\n<h2 id=\"Emitting-with-Errors\"><a href=\"#Emitting-with-Errors\" class=\"headerlink\" title=\"Emitting with Errors\"></a>Emitting with Errors</h2><p><code>发射错误</code><br>One thing you might not have noticed from the last example was that our hello.js file changed again. If we open that file up then we’ll see that the contents still basically look the same as our input file. That might be a bit surprising given the fact that tsc reported an error about our code, but this is based on one of TypeScript’s core values: much of the time, you will know better than TypeScript.<br><code>一个你可能没有注意到的事情是，我们的 hello.js 文件变了一次。如果我们打开这个文件，我们会看到它的内容仍然基本和我们的输入文件一样。这可能是一个很糟的情况，因为 tsc 报告了我们的代码的错误，但这是基于 TypeScript 的核心值：很多时候，你会更了解更多的事情。</code><br>To reiterate from earlier, type-checking code limits the sorts of programs you can run, and so there’s a tradeoff on what sorts of things a type-checker finds acceptable. Most of the time that’s okay, but there are scenarios where those checks get in the way. For example, imagine yourself migrating JavaScript code over to TypeScript and introducing type-checking errors. Eventually you’ll get around to cleaning things up for the type-checker, but that original JavaScript code was already working! Why should converting it over to TypeScript stop you from running it?<br><code>重复上一段内容，类型检查代码限制了你可以运行的程序，因此有一个交换，如果你的类型检查器找到了可接受的东西，那么你可以运行它。但是，有时候，这些检查会拖慢你的程序。例如，假设你是一个 JavaScript 的移植者，并且你把类型检查错误插入到你的代码中。最终，你会把它们清理掉，但是原来的 JavaScript 代码已经已经正常运行了！为什么你会把它移植到 TypeScript 中，然后停止运行它？</code><br>So TypeScript doesn’t get in your way. Of course, over time, you may want to be a bit more defensive against mistakes, and make TypeScript act a bit more strictly. In that case, you can use the noEmitOnError compiler option. Try changing your hello.ts file and running tsc with that flag:<br><code>因此，TypeScript 不会拖慢你。但是，随着时间的推移，你可能会想要更加安全，并且使 TypeScript 变得更严格。在这种情况下，你可以使用 noEmitOnError 编译器选项。试着把 hello.ts 文件中的代码改一下，然后运行 tsc 并且使用这个选项：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">tsc --noEmitOnError hello.ts</code></pre>\n\n<p>You’ll notice that hello.js never gets updated.<br><code>hello.js 不会被更新。</code></p>\n<h2 id=\"Explicit-Types\"><a href=\"#Explicit-Types\" class=\"headerlink\" title=\"Explicit Types\"></a>Explicit Types</h2><p><code>显式类型</code><br>Up until now, we haven’t told TypeScript what person or date are. Let’s edit the code to tell TypeScript that person is a string, and that date should be a Date object. We’ll also use the toDateString() method on date.<br><code>直到现在，我们都没有告诉 TypeScript 什么是人或日期。我们现在编辑代码，让 TypeScript 知道 person 是一个字符串，而 date 应该是一个 Date 对象。我们也使用 date 的 toDateString() 方法。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;</code></pre>\n\n<p>What we did was add type annotations on person and date to describe what types of values greet can be called with. You can read that signature as ”greet takes a person of type string, and a date of type Date“.<br><code>我们做了一个类型标注，让 TypeScript 知道 greet 可以被调用的时候，person 的类型是 string，而 date 的类型是 Date。</code><br>With this, TypeScript can tell us about other cases where greet might have been called incorrectly. For example…<br><code>这样，TypeScript 可以告诉我们其他情况下 greet 可能会被调用错误。例如…</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\ngreet(&quot;Maddison&quot;, Date());\n&#x2F;&#x2F; Argument of type &#39;string&#39; is not assignable to parameter of type &#39;Date&#39;.</code></pre>\n\n<p>Huh? TypeScript reported an error on our second argument, but why?<br><code>哎？TypeScript 在第二个参数上报错了，但是为什么？</code><br>Perhaps surprisingly, calling Date() in JavaScript returns a string. On the other hand, constructing a Date with new Date() actually gives us what we were expecting.<br><code>可能就是因为 JavaScript 中的 Date() 返回一个字符串，而 new Date() 则会返回我们期望的结果。</code><br>Anyway, we can quickly fix up the error:<br><code>然后，我们可以快速修复错误：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\n\ngreet(&quot;Maddison&quot;, new Date());</code></pre>\n\n<p>Keep in mind, we don’t always have to write explicit type annotations. In many cases, TypeScript can even just infer (or “figure out”) the types for us even if we omit them.<br><code>记住，我们不是总是要写明类型标注。在大多数情况下，TypeScript 也可以自动推断（或者说认为）类型，即使我们没有写明类型标注。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let msg &#x3D; &quot;hello there!&quot;;\n\nlet msg: string;</code></pre>\n\n<p>Even though we didn’t tell TypeScript that msg had the type string it was able to figure that out. That’s a feature, and it’s best not to add annotations when the type system would end up inferring the same type anyway.<br><code>即使我们没有告诉 TypeScript msg 的类型是 string，它也能够自动推断出来。这是一个特性，并且当类型系统自动推断出相同类型的时候，不要写明类型标注。</code><br>:::tip</p>\n<p>the message bubble inside the code sample above. That is what your editor would show if you had hovered over the word.<br><code>在上面的代码段中，你的编辑器会显示一个消息泡。如果你鼠标悬停在这个单词上，那么你的编辑器会显示这个消息泡。</code><br>:::</p>\n<h2 id=\"Erased-Types\"><a href=\"#Erased-Types\" class=\"headerlink\" title=\"Erased Types\"></a>Erased Types</h2><p><code>擦除类型</code><br>Let’s take a look at what happens when we compile the above function greet with tsc to output JavaScript:<br><code>我们看看如果我们用 tsc 编译上面的函数 greet，它会输出 JavaScript 代码：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&quot;use strict&quot;;\nfunction greet(person, date) &#123;\n  console.log(\n    &quot;Hello &quot;.concat(person, &quot;, today is &quot;).concat(date.toDateString(), &quot;!&quot;)\n  );\n&#125;\ngreet(&quot;Maddison&quot;, new Date());</code></pre>\n\n<p>Notice two things here:<br><code>注意这里有两件事情：</code><br>Our person and date parameters no longer have type annotations.<br><code>我们的 person 和 date 参数没有类型标注。</code><br>Our “template string” - that string that used backticks (the <code>character) - was converted to plain strings with concatenations (+).</code>我们的模板字符串（使用 字符）已经被转换成了纯字符串，并且使用了 + 字符串连接。<code>More on that second point later, but let’s now focus on that first point. Type annotations aren’t part of JavaScript (or ECMAScript to be pedantic), so there really aren’t any browsers or other runtimes that can just run TypeScript unmodified. That’s why TypeScript needs a compiler in the first place - it needs some way to strip out or transform any TypeScript-specific code so that you can run it. Most TypeScript-specific code gets erased away, and likewise, here our type annotations were completely erased.</code>TypeScript 不是 JavaScript（或者说 ECMAScript）的一部分，所以不会有浏览器或其他运行时可以直接运行 TypeScript 的情况。因此 TypeScript 需要一个编译器，以便我们可以去掉或转换 TypeScript 的任何特定代码，以便我们可以运行它。大多数 TypeScript 特定代码都会被去掉，反之，这里的类型标注也会被去掉。&#96;</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>Remember: Type annotations never change the runtime behavior of your program.<br><code>记住：类型标注不会改变你的程序的运行时行为。</code>\n</div>\n<h2 id=\"Downleveling\"><a href=\"#Downleveling\" class=\"headerlink\" title=\"Downleveling\"></a>Downleveling</h2><p><code>降级</code><br>One other difference from the above was that our template string was rewritten from<br><code>我们的模板字符串是从</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;;</code></pre>\n\n<p>to</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&quot;Hello &quot; + person + &quot;, today is &quot; + date.toDateString() + &quot;!&quot;;</code></pre>\n\n<p>Why did this happen?<br><code>为什么这样发生了？</code><br>Template strings are a feature from a version of ECMAScript called ECMAScript 2015 (a.k.a. ECMAScript 6, ES2015, ES6, etc. - don’t ask). TypeScript has the ability to rewrite code from newer versions of ECMAScript to older ones such as ECMAScript 3 or ECMAScript 5 (a.k.a. ES3 and ES5). This process of moving from a newer or “higher” version of ECMAScript down to an older or “lower” one is sometimes called downleveling.<br><code>模板字符串是 ECMAScript 2015 的一个特性（或者说 ECMAScript 6，ES2015，ES6 等）。TypeScript 有能力将从更新的 ECMAScript 移到更旧的 ECMAScript，比如 ECMAScript 3 或 ECMAScript 5（或者说 ES3 和 ES5）。这种移动的过程称为降级。</code><br>By default TypeScript targets ES3, an extremely old version of ECMAScript. We could have chosen something a little bit more recent by using the target option. Running with –target es2015 changes TypeScript to target ECMAScript 2015, meaning code should be able to run wherever ECMAScript 2015 is supported. So running tsc –target es2015 hello.ts gives us the following output:<br><code>默认情况下，TypeScript 目标 ES3，一个非常老的 ECMAScript 版本。我们可以选择一个更新的版本，使用 target 选项。运行 tsc --target es2015 hello.ts 就会得到以下的输出：</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function greet(person, date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\ngreet(&quot;Maddison&quot;, new Date());</code></pre>\n\n<p>While the default target is ES3, the great majority of current browsers support ES2015. Most developers can therefore safely specify ES2015 or above as a target, unless compatibility with certain ancient browsers is important.<br><code>默认目标是 ES3，大多数当前浏览器都支持 ES2015。大多数开发人员可以安全地指定 ES2015 或以上作为目标，除非需要与某些古老的浏览器兼容。</code></p>\n<h2 id=\"Strictness\"><a href=\"#Strictness\" class=\"headerlink\" title=\"Strictness\"></a>Strictness</h2><p><code>严格</code><br>Different users come to TypeScript looking for different things in a type-checker. Some people are looking for a more loose opt-in experience which can help validate only some parts of their program, and still have decent tooling. This is the default experience with TypeScript, where types are optional, inference takes the most lenient types, and there’s no checking for potentially null&#x2F;undefined values. Much like how tsc emits in the face of errors, these defaults are put in place to stay out of your way. If you’re migrating existing JavaScript, that might be a desirable first step.<br><code>不同的用户到 TypeScript 上来看，有不同的意图。有人想要一个更宽松的选择，这可以帮助验证某些部分的程序，并且仍然有很好的工具。这是 TypeScript 默认的行为，其中类型是可选的，推断会接受更宽松的类型，并且没有检查可能 null/undefined 的值。和 tsc 在出现错误的时候一样，这些默认值被放在了你的脚跟上（兜底：这些默认选项并不会阻碍你的开发）。如果你正在迁移已有的 JavaScript，那么这可能是一个最佳的第一步。</code><br>In contrast, a lot of users prefer to have TypeScript validate as much as it can straight away, and that’s why the language provides strictness settings as well. These strictness settings turn static type-checking from a switch (either your code is checked or not) into something closer to a dial. The further you turn this dial up, the more TypeScript will check for you. This can require a little extra work, but generally speaking it pays for itself in the long run, and enables more thorough checks and more accurate tooling. When possible, a new codebase should always turn these strictness checks on.<br><code>不同的用户喜欢立刻验证程序，而不是等到最后。这是 TypeScript 的语言提供了严格性设置，这些设置可以改变静态类型检查的行为。这些设置可以改变静态类型检查的行为，而不是一个开关。这些设置越高，TypeScript 越会检查更多的信息。这可能需要一点额外的工作，但一般来说，这能提供更好的工具，并且能更好地支持你的代码。当可能的时候，一个新的代码应该总是开启这些严格性检查。</code><br>TypeScript has several type-checking strictness flags that can be turned on or off, and all of our examples will be written with all of them enabled unless otherwise stated. The strict flag in the CLI, or “strict”: true in a tsconfig.json toggles them all on simultaneously, but we can opt out of them individually. The two biggest ones you should know about are noImplicitAny and strictNullChecks.<br><code>TypeScript 有多个严格性标志，可以开启或关闭，所有的示例都将使用所有的标志，除非特别说明。CLI 中的 strict 开关，或 tsconfig.json 中的 strict: true 开启了所有的标志，但是我们可以单独关闭它们。两个最大的，你应该知道的是 noImplicitAny 和 strictNullChecks。</code></p>\n<h2 id=\"noImplicitAny\"><a href=\"#noImplicitAny\" class=\"headerlink\" title=\"noImplicitAny\"></a>noImplicitAny</h2><p><code>无隐式any</code><br>Recall that in some places, TypeScript doesn’t try to infer types for us and instead falls back to the most lenient type: any. This isn’t the worst thing that can happen - after all, falling back to any is just the plain JavaScript experience anyway.<br><code>在某些地方，TypeScript 不会为我们自动推断类型，而是使用最宽松的类型：any。这并不是最差的情况，因为仍然是 JavaScript 的经验。</code><br>However, using any often defeats the purpose of using TypeScript in the first place. The more typed your program is, the more validation and tooling you’ll get, meaning you’ll run into fewer bugs as you code. Turning on the noImplicitAny flag will issue an error on any variables whose type is implicitly inferred as any.<br><code>使用 any 很容易让你的程序变得更加不可靠。因为更加类型化的程序，你会发现更多的错误，并且更加容易地调试。开启 noImplicitAny 标志会在任何自动推断类型为 any 的变量上发出错误。</code></p>\n<h2 id=\"strictNullChecks\"><a href=\"#strictNullChecks\" class=\"headerlink\" title=\"strictNullChecks\"></a>strictNullChecks</h2><p><code>严格null</code><br>By default, values like null and undefined are assignable to any other type. This can make writing some code easier, but forgetting to handle null and undefined is the cause of countless bugs in the world - some consider it<code> a billion dollar mistake!</code> The <code>strictNullChecks</code> flag makes handling null and undefined more explicit, and spares us from worrying about whether we forgot to handle null and undefined.<br><code>默认情况下，null 和 undefined 可以赋值给任何类型。这可以让写一些代码更容易，但是忘记处理 null 和 undefined 就会导致世界上的很多错误，有人认为这是一百亿美元错误！ strictNullChecks 可以让处理 null 和 undefined 更加明确，并且让我们不用担心是否忘记处理 null 和 undefined。</code></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#static-type-checking\">Typescript The Basics</a></p>\n","text":"The BasicsWelcome to the first page of the handbook. If this is your first experience with TypeScript - you may want to start at one of the ...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":11,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":12,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#The-Basics\"><span class=\"toc-text\">The Basics</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Static-type-checking\"><span class=\"toc-text\">Static type-checking</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Non-exception-Failures\"><span class=\"toc-text\">Non-exception Failures</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Types-for-Tooling\"><span class=\"toc-text\">Types for Tooling</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tsc-the-TypeScript-compiler\"><span class=\"toc-text\">tsc, the TypeScript compiler</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Emitting-with-Errors\"><span class=\"toc-text\">Emitting with Errors</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Explicit-Types\"><span class=\"toc-text\">Explicit Types</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Erased-Types\"><span class=\"toc-text\">Erased Types</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Downleveling\"><span class=\"toc-text\">Downleveling</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Strictness\"><span class=\"toc-text\">Strictness</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#noImplicitAny\"><span class=\"toc-text\">noImplicitAny</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#strictNullChecks\"><span class=\"toc-text\">strictNullChecks</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"Don't repeat yourself！Faster and better！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"3.Typescript 常见类型","uid":"746ca231a136437ea4011b4445608ad1","slug":"2022-06-08ts-Everyday Types","date":"2022-06-06T08:40:41.000Z","updated":"2022-09-16T14:58:54.538Z","comments":true,"path":"api/articles/2022-06-08ts-Everyday Types.json","keywords":null,"cover":"https://img0.baidu.com/it/u=86492913,3057347241&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=208","text":"Everyday Types常见类型In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corre...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":11,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":12,"path":"api/tags/TypeScript.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"Don't repeat yourself！Faster and better！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"1.Typescript起步","uid":"bb89616b2d7e7f4e050ed00ae2d71539","slug":"2022-06-08ts-start","date":"2022-06-06T01:58:32.000Z","updated":"2022-09-16T14:59:28.569Z","comments":true,"path":"api/articles/2022-06-08ts-start.json","keywords":null,"cover":"https://img0.baidu.com/it/u=86492913,3057347241&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=208","text":"说明此文及后续的几篇是对Typescript官方原文的翻译，方便阅读 Get Startedtypescript 起步，分别针对 4 类不同的程序开发者进行引导， 对号入座 新手程序猿，没有接触过任何开发语言 JS 开发者 Java&#x2F;C#开发 [跳过] 函数式编程人员 ...","link":"","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":11,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":12,"path":"api/tags/TypeScript.json"}],"author":{"name":"陈哈喽","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"Don't repeat yourself！Faster and better！","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}