{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"2022-05-13design_mode","date":"2022-05-13T09:01:15.000Z","updated":"2022-05-26T14:12:56.676Z","comments":true,"path":"api/articles/2022-05-13design_mode.json","keywords":null,"cover":null,"content":"<h2 id=\"先聊用到过哪些，背后的设计模式是什么\"><a href=\"#先聊用到过哪些，背后的设计模式是什么\" class=\"headerlink\" title=\"先聊用到过哪些，背后的设计模式是什么\"></a>先聊用到过哪些，背后的设计模式是什么</h2><ol>\n<li>实例化一个 axios 实例，全局都来使用它 <em>单例模式</em></li>\n<li>兄弟组件通信,事件监听 <em>观察者模式</em></li>\n<li>构造函数继承、类的继承 <em>构造函数模式</em></li>\n<li>实例化不同的实例 <em>工厂模式</em></li>\n<li>优化中的<code>事件代理</code><em>代理模式</em></li>\n<li>esm、commonjs<em>模块模式</em></li>\n</ol>\n<p><em>熟悉而又陌生</em>：熟悉的是一直在用，陌生的是学名竟然是这些。我都有点怀疑了，这是真的吗？是真的吗？～～～</p>\n<p><img \n   src=\"https://img1.baidu.com/it/u=1902986975,2375222058&fm=253&fmt=auto&app=138&f=JPEG?w=535&h=500\" \n   width=100 style=\"border-radius: 10px\" \n   /></p>\n   <div style=\"font-size: 20px; color: orange;margin-top: 30px\">来～来～来～，我们继续。。。</div>\n\n<h2 id=\"啥呀\"><a href=\"#啥呀\" class=\"headerlink\" title=\"啥呀\"></a>啥呀</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>“设计模式(英语 design pattern)是对面向对象设计中<code>反复出现的问题的解决方案</code>。这个术语是在1990年代由Erich Gamma等人从建筑设计领域<code>引入到</code>计算机科学中来的。”</p></blockquote>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><ul>\n<li>作用：访问控制</li>\n<li>场景：事件代理、Proxy、Object.defineProperty</li>\n</ul>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><ul>\n<li>定义：唯一实例，全局可访问</li>\n<li>场景：请求实例、全局缓存、线程池、window 对象、登录浮框</li>\n<li>实现：已经创建过的直接返回，不重复创建</li>\n</ul>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><ul>\n<li>作用：创建同一类对象</li>\n<li>分类：<em>简单工厂_、_方法工厂</em></li>\n</ul>\n<h3 id=\"1-简单工厂\"><a href=\"#1-简单工厂\" class=\"headerlink\" title=\"1. 简单工厂\"></a>1. 简单工厂</h3><ul>\n<li>例如：项目中根据用户权限渲染不同的页面，在不同权限等级用户的构造函数中，保存用户可以看到的页面</li>\n<li>优点：一个正确的参数，就可以获取到所需要的对象，无需知道其创建的具体细节</li>\n<li>缺点：函数会成为一个超级函数，难以维护，简单工厂适用于创建少量对象，对象的逻辑不能复杂</li>\n</ul>\n<h3 id=\"2-工厂方法\"><a href=\"#2-工厂方法\" class=\"headerlink\" title=\"2. 工厂方法\"></a>2. 工厂方法</h3><ul>\n<li>本质：将创建对象的工作，推迟到子类中，这样核心类就变成抽象类</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">let UserFactory &#x3D; function (type) &#123;\n  if (this instanceof UserFactory) &#123;\n    return new this[type]();\n  &#125; else &#123;\n    return new UserFactory(type);\n  &#125;\n&#125;;\n\n&#x2F;&#x2F; 工厂方法，函数的原型中设置所有对象的构造函数\n\nUserFactory.prototype &#x3D; &#123;\n  SuperAdmin: function () &#123;\n    this.name &#x3D; &quot;超级管理员&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;, &quot;应用管理&quot;, &quot;权限管理&quot;];\n  &#125;,\n  Admin: function () &#123;\n    this.name &#x3D; &quot;管理员&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;];\n  &#125;,\n  NormalUser: function () &#123;\n    this.name &#x3D; &quot;普通用户&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;];\n  &#125;,\n&#125;;\n\n&#x2F;&#x2F; 调用\nlet superAdmin &#x3D; new UserFactory(&quot;SuperAdmin&quot;);\nlet admin &#x3D; new UserFactory(&quot;Admin&quot;);\nlet normalUser &#x3D; new UserFactory(&quot;NormalUser&quot;);</code></pre>\n\n<h3 id=\"3-抽象工厂\"><a href=\"#3-抽象工厂\" class=\"headerlink\" title=\"3. 抽象工厂\"></a>3. 抽象工厂</h3><ul>\n<li></li>\n</ul>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><h2 id=\"👀-观察者模式\"><a href=\"#👀-观察者模式\" class=\"headerlink\" title=\"👀 观察者模式\"></a>👀 观察者模式</h2><ul>\n<li>定义： 对象间的一种一对多的依赖关系</li>\n<li>作用：一个对象状态发生变化时，所有依赖他的对象，都将得到通知</li>\n<li>优点：解耦</li>\n<li>组成：发布者、订阅者</li>\n<li>场景：事件监听、eventBus</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">document.body.addEventListener(&quot;click&quot;, function () &#123;&#125;, false);</code></pre>\n\n<h2 id=\"混合模式\"><a href=\"#混合模式\" class=\"headerlink\" title=\"混合模式\"></a>混合模式</h2><h2 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h2><ul>\n<li>作用：避免全局污染，按需暴露</li>\n<li>实现：多采用闭包</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var Person &#x3D; (function () &#123;\n  var name &#x3D; &quot;xxx&quot;;\n  function sayName(params) &#123;\n    console.log(name);\n  &#125;\n  return &#123;\n    name,\n    sayName,\n  &#125;;\n&#125;)();</code></pre>\n","text":"先聊用到过哪些，背后的设计模式是什么 实例化一个 axios 实例，全局都来使用它 单例模式 兄弟组件通信,事件监听 观察者模式 构造函数继承、类的继承 构造函数模式 实例化不同的实例 工厂模式 优化中的事件代理代理模式 esm、commonjs模块模式 熟悉而又陌生：熟悉的是一...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%88%E8%81%8A%E7%94%A8%E5%88%B0%E8%BF%87%E5%93%AA%E4%BA%9B%EF%BC%8C%E8%83%8C%E5%90%8E%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">先聊用到过哪些，背后的设计模式是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%95%A5%E5%91%80\"><span class=\"toc-text\">啥呀</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">策略模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">代理模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">单例模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">工厂模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">1. 简单工厂</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 工厂方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">3. 抽象工厂</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">构造函数模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%F0%9F%91%80-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">👀 观察者模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">混合模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">模块模式</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Slate 学习","uid":"38b6e3ab42ce78e34a964ff2e90b3a7d","slug":"2022-04-29slate-lean","date":"2022-05-16T13:00:00.000Z","updated":"2022-05-28T03:47:02.803Z","comments":true,"path":"api/articles/2022-04-29slate-lean.json","keywords":null,"cover":"https://img2.baidu.com/it/u=2057256038,1983468493&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500","text":"文档slate 中文文档slate 英文文档 是什么 Slate 是一个 完全 可定制的富文本编辑框架。通过 Slate，你可以构建出类似 Medium、Dropbox Paper 或者 Canvas 这样使用直观、富交互、体验业已成为 Web 应用标杆的编辑器。同时，你也无需担...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"wiki","slug":"wiki","count":3,"path":"api/categories/wiki.json"}],"tags":[{"name":"wiki","slug":"wiki","count":4,"path":"api/tags/wiki.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"ant design form设置值 !== 获取值","uid":"e2b55be84d65cc914ce2f0d3a3e083d3","slug":"2022-05-13react","date":"2022-05-13T07:39:33.000Z","updated":"2022-09-15T13:40:54.152Z","comments":true,"path":"api/articles/2022-05-13react.json","keywords":null,"cover":[],"text":"有意思的事 今天维护项目遇到一个有意思的事，直观感受，设置值，再取出来，貌似没毛病 &#x2F;&#x2F; ... const [values, setValues] &#x3D; useState&lt;Record&lt;string, any&gt;&gt;() cons...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"react","slug":"react","count":18,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":13,"path":"api/tags/react.json"},{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}