{"title":"react-redux 源码1","uid":"83401137c3fcd92a859b6d9e289c2c88","slug":"2022-05-24react-redux","date":"2022-05-24T05:58:32.000Z","updated":"2022-09-16T14:57:54.111Z","comments":true,"path":"api/articles/2022-05-24react-redux.json","keywords":null,"cover":null,"content":"<h2 id=\"react-redux官方介绍\"><a href=\"#react-redux官方介绍\" class=\"headerlink\" title=\"react-redux官方介绍\"></a>react-redux官方介绍</h2><ul>\n<li>官方UI绑定层。 React Redux is the <code>official React UI bindings layer</code> for Redux. </li>\n<li>从redux的store读数据。 It lets your React components <code>read data from a Redux store</code>,</li>\n<li>触发行为给store来更新状态。and <code>dispatch actions to the store to update state</code>.</li>\n</ul>\n<h2 id=\"react-redux-源码\"><a href=\"#react-redux-源码\" class=\"headerlink\" title=\"react-redux 源码\"></a>react-redux 源码</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.\n├── alternate-renderers.ts\n├── components\n│   ├── Context.ts\n│   ├── Provider.tsx\n│   └── connect.tsx # 大部分代码都在这里\n├── connect # 给 connect.tsx使用\n│   ├── invalidArgFactory.ts\n│   ├── mapDispatchToProps.ts\n│   ├── mapStateToProps.ts\n│   ├── mergeProps.ts\n│   ├── selectorFactory.ts\n│   ├── verifySubselectors.ts\n│   └── wrapMapToProps.ts\n├── exports.ts\n├── hooks\n│   ├── useDispatch.ts\n│   ├── useReduxContext.ts\n│   ├── useSelector.ts\n│   └── useStore.ts\n├── index.ts\n├── next.ts\n├── types.ts\n└── utils\n    ├── Subscription.ts\n    ├── batch.ts\n    ├── bindActionCreators.ts\n    ├── isPlainObject.ts\n    ├── reactBatchedUpdates.native.ts\n    ├── reactBatchedUpdates.ts\n    ├── shallowEqual.ts\n    ├── useIsomorphicLayoutEffect.native.ts\n    ├── useIsomorphicLayoutEffect.ts\n    ├── useSyncExternalStore.ts\n    ├── verifyPlainObject.ts\n    └── warning.ts</code></pre>\n<h2 id=\"packge-json\"><a href=\"#packge-json\" class=\"headerlink\" title=\"packge.json\"></a>packge.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#x2F;&#x2F; packge.json\n&#123;\n  &quot;name&quot;: &quot;react-redux&quot;,\n  &quot;version&quot;: &quot;8.0.2&quot;,\n  &quot;description&quot;: &quot;Official React bindings for Redux&quot;,\n  &quot;keywords&quot;: [\n    &quot;react&quot;,\n    &quot;reactjs&quot;,\n    &quot;redux&quot;\n  ],\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;author&quot;: &quot;Dan Abramov &lt;dan.abramov@me.com&gt; (https:&#x2F;&#x2F;github.com&#x2F;gaearon)&quot;,\n  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&quot;,\n  &quot;repository&quot;: &quot;github:reduxjs&#x2F;react-redux&quot;,\n  &quot;bugs&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&#x2F;issues&quot;,\n  &#x2F;&#x2F; 找找入口，入口有3种：\n  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;index.js&quot;, &#x2F;&#x2F; 常规操作入口\n  &quot;types&quot;: &quot;.&#x2F;es&#x2F;index.d.ts&quot;, &#x2F;&#x2F; 类型入口\n  &quot;unpkg&quot;: &quot;dist&#x2F;react-redux.js&quot;, &#x2F;&#x2F; cdn入口\n  &quot;module&quot;: &quot;es&#x2F;index.js&quot;,&#x2F;&#x2F;esm入口\n  &#x2F;&#x2F; npm发布上传的文件\n  &quot;files&quot;: [\n    &quot;dist&quot;,\n    &quot;lib&quot;,\n    &quot;src&quot;, &#x2F;&#x2F; 一般用于开发阶段代码调试,soucemap\n    &quot;es&quot;\n  ],\n  &quot;scripts&quot;: &#123;\n    &#x2F;&#x2F; 脚本不看了...\n  &#125;,\n  &#x2F;&#x2F; 配置了依赖项，这些依赖项不需要在本包安装，在项目中安装即可\n  &quot;peerDependencies&quot;: &#123;\n    &quot;@types&#x2F;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;@types&#x2F;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react-native&quot;: &quot;&gt;&#x3D;0.59&quot;,\n    &quot;redux&quot;: &quot;^4&quot;\n  &#125;,\n  &quot;peerDependenciesMeta&quot;: &#123;\n    &quot;@types&#x2F;react&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;@types&#x2F;react-dom&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;react-dom&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;react-native&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;redux&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;\n  &#125;,\n  &#x2F;&#x2F; 发布后，业务开发者使用，需要安装，&#x2F;&#x2F;自动安装\n  &quot;dependencies&quot;: &#123;\n    &quot;@babel&#x2F;runtime&quot;: &quot;^7.12.1&quot;,\n    &quot;@types&#x2F;hoist-non-react-statics&quot;: &quot;^3.3.1&quot;,\n    &quot;@types&#x2F;use-sync-external-store&quot;: &quot;^0.0.3&quot;,\n    &quot;hoist-non-react-statics&quot;: &quot;^3.3.2&quot;,\n    &quot;react-is&quot;: &quot;^18.0.0&quot;,\n    &quot;use-sync-external-store&quot;: &quot;^1.0.0&quot;\n  &#125;,\n  &#x2F;&#x2F; 开发阶段需要用到的，一般是examples中demo使用\n  &quot;devDependencies&quot;: &#123;\n    &#x2F;&#x2F;...\n  &#125;\n&#125;</code></pre>\n<h2 id=\"exports-ts\"><a href=\"#exports-ts\" class=\"headerlink\" title=\"exports.ts\"></a>exports.ts</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">export &#123;\n  Provider, &#x2F;&#x2F; import Provider from &#39;.&#x2F;components&#x2F;Provider&#39;\n\n  ReactReduxContext, &#x2F;&#x2F; import &#123; ReactReduxContext &#125; from &#39;.&#x2F;components&#x2F;Context&#39;\n\n  connect, &#x2F;&#x2F; import connect from &#39;.&#x2F;components&#x2F;connect&#39;\n\n  useDispatch, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;\n  createDispatchHook, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;\n\n  useSelector, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;\n  createSelectorHook, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;\n\n  useStore, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;\n  createStoreHook, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;\n\n  shallowEqual, &#x2F;&#x2F; import shallowEqual from &#39;.&#x2F;utils&#x2F;shallowEqual&#39;\n&#125;\n</code></pre>\n\n<h2 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h2><p>先看下 ，最熟悉的api</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&#x2F;&#x2F; components&#x2F;Provider.tsx\n&#x2F;&#x2F; 这个组件做的事情\n&#x2F;&#x2F; 1. 合并浏览器和服务器的状态\n&#x2F;&#x2F; 2. 对于同构的应用，处理subscription订阅\nfunction Provider&lt;A extends Action &#x3D; AnyAction&gt;(&#123;\n  store,\n  context,\n  children,\n  serverState,\n&#125;: ProviderProps&lt;A&gt;) &#123;\n  &#x2F;&#x2F; 1.useMemo，对入参进行格式化「处理了store和 服务端的 serverState」\n  const contextValue &#x3D; useMemo(() &#x3D;&gt; &#123;\n    const subscription &#x3D; createSubscription(store)\n    return &#123;\n      store,\n      subscription,\n      getServerState: serverState ? () &#x3D;&gt; serverState : undefined,\n    &#125;\n  &#125;, [store, serverState])\n  &#x2F;&#x2F; 2.之前的state状态从store中直接获取\n  const previousState &#x3D; useMemo(() &#x3D;&gt; store.getState(), [store])\n  &#x2F;&#x2F; 3.同构相关，跳过\n  useIsomorphicLayoutEffect(() &#x3D;&gt; &#123;\n    const &#123; subscription &#125; &#x3D; contextValue\n    subscription.onStateChange &#x3D; subscription.notifyNestedSubs\n    subscription.trySubscribe()\n\n    if (previousState !&#x3D;&#x3D; store.getState()) &#123;\n      subscription.notifyNestedSubs()\n    &#125;\n    return () &#x3D;&gt; &#123;\n      subscription.tryUnsubscribe()\n      subscription.onStateChange &#x3D; undefined\n    &#125;\n  &#125;, [contextValue, previousState])\n  &#x2F;&#x2F; 4.react-redux上下文\n  const Context &#x3D; context || ReactReduxContext\n\n  &#x2F;&#x2F; @ts-ignore &#39;AnyAction&#39; is assignable to the constraint of type &#39;A&#39;, but &#39;A&#39; could be instantiated with a different subtype\n  return &lt;Context.Provider value&#x3D;&#123;contextValue&#125;&gt;&#123;children&#125;&lt;&#x2F;Context.Provider&gt; &#x2F;&#x2F; 这行代码是不是非常熟悉了\n&#125;\n\nexport default Provider\n</code></pre>\n<h2 id=\"ReactReduxContext\"><a href=\"#ReactReduxContext\" class=\"headerlink\" title=\"ReactReduxContext\"></a>ReactReduxContext</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&#x2F;&#x2F; .&#x2F;components&#x2F;Context.tsx\n&#x2F;&#x2F; 这个组件做的事情\n&#x2F;&#x2F; 1.创建个createContext\n&#x2F;&#x2F; 2.给个名字displayName\n\n&#x2F;&#x2F; ...类型代码不关注\nexport const ReactReduxContext &#x3D;&#x2F;*#__PURE__*&#x2F; React.createContext&lt;ReactReduxContextValue&gt;(null as any)\n\n&#x2F;&#x2F; ...类型代码不关注\n\nif (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;\n  ReactReduxContext.displayName &#x3D; &#39;ReactRedux&#39;\n&#125;\n\nexport default ReactReduxContext</code></pre>\n<h2 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&#x2F;&#x2F; .&#x2F;components&#x2F;connect.tsx\n&#x2F;&#x2F; 这个文件比较长，先不看\n&#x2F;&#x2F; hoist-non-react-statics这个依赖可以帮助我们自动拷贝非React的静态方法</code></pre>\n<h2 id=\"useDispatch、createDispatchHook\"><a href=\"#useDispatch、createDispatchHook\" class=\"headerlink\" title=\"useDispatch、createDispatchHook\"></a>useDispatch、createDispatchHook</h2><p>把ts类型删删，看上去更简单了</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; .&#x2F;hooks&#x2F;useDispatch\n&#x2F;&#x2F; 用createDispatchHook钩子工厂创建了个钩子useDispatch\nexport function createDispatchHook(context) &#123;\n  &#x2F;&#x2F; TODO: createStoreHook下面再看，先跳过\n  const useStore &#x3D; context &#x3D;&#x3D;&#x3D; ReactReduxContext ? useDefaultStore : createStoreHook(context)\n  return function useDispatch() &#123;\n    const store &#x3D; useStore()\n    &#x2F;&#x2F; @ts-ignore\n    return store.dispatch\n  &#125;\n&#125;\n&#x2F;**\n * A hook to access the redux &#96;dispatch&#96; function.\n *\n * @returns &#123;any|function&#125; redux store&#39;s &#96;dispatch&#96; function\n *\n * @example\n *\n * import React, &#123; useCallback &#125; from &#39;react&#39;\n * import &#123; useDispatch &#125; from &#39;react-redux&#39;\n *\n * export const CounterComponent &#x3D; (&#123; value &#125;) &#x3D;&gt; &#123;\n *   const dispatch &#x3D; useDispatch()\n *   const increaseCounter &#x3D; useCallback(() &#x3D;&gt; dispatch(&#123; type: &#39;increase-counter&#39; &#125;), [])\n *   return (\n *     &lt;div&gt;\n *       &lt;span&gt;&#123;value&#125;&lt;&#x2F;span&gt;\n *       &lt;button onClick&#x3D;&#123;increaseCounter&#125;&gt;Increase counter&lt;&#x2F;button&gt;\n *     &lt;&#x2F;div&gt;\n *   )\n * &#125;\n *&#x2F;\nexport const useDispatch &#x3D; &#x2F;*#__PURE__*&#x2F; createDispatchHook()\n</code></pre>\n<h2 id=\"useSelector、createSelectorHook\"><a href=\"#useSelector、createSelectorHook\" class=\"headerlink\" title=\"useSelector、createSelectorHook\"></a>useSelector、createSelectorHook</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&#x2F;&#x2F; .&#x2F;hooks&#x2F;useSelector\n&#x2F;&#x2F; 用 createSelectorHook 钩子工厂创建了个钩子 useSelector\n\nlet useSyncExternalStoreWithSelector &#x3D; notInitialized as uSESWS\nexport const initializeUseSelector &#x3D; (fn: uSESWS) &#x3D;&gt; &#123;\n  useSyncExternalStoreWithSelector &#x3D; fn\n&#125;\n\nconst refEquality: EqualityFn&lt;any&gt; &#x3D; (a, b) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; b\n\n&#x2F;&#x2F; 下面的代码保留范型，Selected\nexport function createSelectorHook(\n  context &#x3D; ReactReduxContext\n): &lt;TState &#x3D; unknown, Selected &#x3D; unknown&gt;(\n  selector: (state: TState) &#x3D;&gt; Selected,\n  equalityFn?: EqualityFn&lt;Selected&gt;\n) &#x3D;&gt; Selected &#123;\n  const useReduxContext &#x3D;\n    context &#x3D;&#x3D;&#x3D; ReactReduxContext\n      ? useDefaultReduxContext\n      : () &#x3D;&gt; useContext(context)\n\n  return function useSelector(\n    selector,\n    equalityFn &#x3D; refEquality\n  ) &#123;\n\n    const &#123; store, subscription, getServerState &#125; &#x3D; useReduxContext()!\n\n    const selectedState &#x3D; useSyncExternalStoreWithSelector(\n      subscription.addNestedSub,\n      store.getState,\n      getServerState || store.getState,\n      selector,\n      equalityFn\n    )\n\n    useDebugValue(selectedState) &#x2F;&#x2F; 标记\n\n    return selectedState\n  &#125;\n&#125;\n\n&#x2F;**\n * A hook to access the redux store&#39;s state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param &#123;Function&#125; selector the selector function\n * @param &#123;Function&#x3D;&#125; equalityFn the function that will be used to determine equality\n *\n * @returns &#123;any&#125; the selected state\n *\n * @example\n *\n * import React from &#39;react&#39;\n * import &#123; useSelector &#125; from &#39;react-redux&#39;\n *\n * export const CounterComponent &#x3D; () &#x3D;&gt; &#123;\n *   const counter &#x3D; useSelector(state &#x3D;&gt; state.counter)\n *   return &lt;div&gt;&#123;counter&#125;&lt;&#x2F;div&gt;\n * &#125;\n *&#x2F;\nexport const useSelector &#x3D; &#x2F;*#__PURE__*&#x2F; createSelectorHook()</code></pre>\n<h2 id=\"useStore、createStoreHook\"><a href=\"#useStore、createStoreHook\" class=\"headerlink\" title=\"useStore、createStoreHook\"></a>useStore、createStoreHook</h2><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">\n&#x2F;&#x2F; 1.用钩子工厂创建了个钩子\n&#x2F;&#x2F; 2.从   const &#123; store &#125; &#x3D; useReduxContext()! 获取store\n\n&#x2F;**\n * Hook factory, which creates a &#96;useStore&#96; hook bound to a given context.\n *\n * @param &#123;React.Context&#125; [context&#x3D;ReactReduxContext] Context passed to your &#96;&lt;Provider&gt;&#96;.\n * @returns &#123;Function&#125; A &#96;useStore&#96; hook bound to the specified context.\n *&#x2F;\nexport function createStoreHook&lt;\n  S &#x3D; unknown,\n  A extends BasicAction &#x3D; AnyAction\n  &#x2F;&#x2F; @ts-ignore\n&gt;(context?: Context&lt;ReactReduxContextValue&lt;S, A&gt;&gt; &#x3D; ReactReduxContext) &#123;\n  const useReduxContext &#x3D;\n    &#x2F;&#x2F; @ts-ignore\n    context &#x3D;&#x3D;&#x3D; ReactReduxContext\n      ? useDefaultReduxContext\n      : () &#x3D;&gt; useContext(context)\n  return function useStore&lt;\n    State &#x3D; S,\n    Action extends BasicAction &#x3D; A\n    &#x2F;&#x2F; @ts-ignore\n  &gt;() &#123;\n    const &#123; store &#125; &#x3D; useReduxContext()!\n    &#x2F;&#x2F; @ts-ignore\n    return store as Store&lt;State, Action&gt;\n  &#125;\n&#125;\n\n&#x2F;**\n * A hook to access the redux store.\n *\n * @returns &#123;any&#125; the redux store\n *\n * @example\n *\n * import React from &#39;react&#39;\n * import &#123; useStore &#125; from &#39;react-redux&#39;\n *\n * export const ExampleComponent &#x3D; () &#x3D;&gt; &#123;\n *   const store &#x3D; useStore()\n *   return &lt;div&gt;&#123;store.getState()&#125;&lt;&#x2F;div&gt;\n * &#125;\n *&#x2F;\nexport const useStore &#x3D; &#x2F;*#__PURE__*&#x2F; createStoreHook()</code></pre>\n\n<h2 id=\"connect-1\"><a href=\"#connect-1\" class=\"headerlink\" title=\"connect\"></a>connect</h2><p> 见：react-redux 源码2</p>\n","text":"react-redux官方介绍 官方UI绑定层。 React Redux is the official React UI bindings layer for Redux. 从redux的store读数据。 It lets your React components read ...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"React","slug":"React","count":34,"path":"api/categories/React.json"}],"tags":[{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"},{"name":"react-redux","slug":"react-redux","count":2,"path":"api/tags/react-redux.json"},{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#react-redux%E5%AE%98%E6%96%B9%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">react-redux官方介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#react-redux-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">react-redux 源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#packge-json\"><span class=\"toc-text\">packge.json</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#exports-ts\"><span class=\"toc-text\">exports.ts</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Provider\"><span class=\"toc-text\">Provider</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ReactReduxContext\"><span class=\"toc-text\">ReactReduxContext</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#connect\"><span class=\"toc-text\">connect</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useDispatch%E3%80%81createDispatchHook\"><span class=\"toc-text\">useDispatch、createDispatchHook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useSelector%E3%80%81createSelectorHook\"><span class=\"toc-text\">useSelector、createSelectorHook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useStore%E3%80%81createStoreHook\"><span class=\"toc-text\">useStore、createStoreHook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#connect-1\"><span class=\"toc-text\">connect</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"react-redux  源码2","uid":"d512c56f4cbf1792b4d8bab0668985ad","slug":"2022-05-24react-redux2","date":"2022-05-24T13:15:31.000Z","updated":"2022-09-16T14:57:51.357Z","comments":true,"path":"api/articles/2022-05-24react-redux2.json","keywords":null,"cover":[],"text":"源码版本&quot;version&quot;: &quot;8.0.2&quot;, Provider 主要作用通过subscription调用redux中store的subscription产生订阅，订阅内容是onStateChange的回调 通过react的Provider...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"React","slug":"React","count":34,"path":"api/categories/React.json"}],"tags":[{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"},{"name":"react-redux","slug":"react-redux","count":2,"path":"api/tags/react-redux.json"},{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"flex width:0","uid":"eb38c4ce852a081263435b4198b57084","slug":"2022-05-23width0","date":"2022-05-23T09:16:21.000Z","updated":"2023-02-20T21:20:56.459Z","comments":true,"path":"api/articles/2022-05-23width0.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/flex.webp","text":"flex 嵌套内部元素宽度默认 100%，撑开父元素，父元素的根元素限制最大宽度，子元素并不受 flex 控制 遇到多次了，这次是维护其他同事的代码，又撞见了，说明这个问题很常见，一个不留神，就踩到了 根元素 …… - 父元素flex …… flex - 子元素flex(默认宽度...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"CSS","slug":"CSS","count":4,"path":"api/categories/CSS.json"}],"tags":[{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"},{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}