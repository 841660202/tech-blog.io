{"title":"flex width:0","uid":"eb38c4ce852a081263435b4198b57084","slug":"2022-05-23width0","date":"2022-05-23T09:16:21.000Z","updated":"2023-02-20T21:20:56.459Z","comments":true,"path":"api/articles/2022-05-23width0.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/flex.webp","content":"<h2 id=\"flex-嵌套\"><a href=\"#flex-嵌套\" class=\"headerlink\" title=\"flex 嵌套\"></a>flex 嵌套</h2><p>内部元素宽度默认 100%，撑开父元素，父元素的根元素限制最大宽度，子元素并不受 flex 控制</p>\n<p>遇到多次了，这次是维护其他同事的代码，又撞见了，说明这个问题很常见，一个不留神，就踩到了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">根元素\n  ……\n  - 父元素flex\n  …… flex\n   - 子元素flex(默认宽度100%)\n</code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.doc-tree-base-title-node .doc-tree-base-title-text &gt; a &#123;\n  display: flex;\n  align-items: center;\n  color: #777;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex: 1;\n&#125;</code></pre>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><img src=\"http://t-blog-images.aijs.top/img/20220523171556.webp\"></p>\n<p>观察下发现，flex 是嵌套的，最外层的还是 flex，一层一层，最外层的宽度，却是由最内层的宽度决定（这个调试可以看到）</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><ul>\n<li>图 1</li>\n</ul>\n<p><img src=\"http://t-blog-images.aijs.top/img/20220523171802.webp\"></p>\n<ul>\n<li>图 2</li>\n</ul>\n<p><img src=\"http://t-blog-images.aijs.top/img/20220523171918.webp\"></p>\n<ul>\n<li>图 3</li>\n</ul>\n<p><img src=\"http://t-blog-images.aijs.top/img/20220523172024.webp\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>图 1 元素没有宽度，宽度默认是<code>100%</code></p>\n<p>图 1 到图 3 是由 a 标签子元素撑开的，宽度是<code>100%</code>,加上操作按钮，元素宽度超 100%</p>\n<p>而在侧边树结构的最外层设置了<code>max-width: 500px</code>,而内部子元素尺寸却是<code>599.48 x 36</code></p>\n<p>显然是不合理的</p>\n<h2 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">根元素\n ……\n - 父元素flex\n …… flex\n  - 子元素flex(默认宽度设置宽度0 或者其他小点的宽度，越小越好)\n</code></pre>\n\n<p><img src=\"http://t-blog-images.aijs.top/img/20220523173256.webp\"></p>\n<h2 id=\"什么原因导致的\"><a href=\"#什么原因导致的\" class=\"headerlink\" title=\"什么原因导致的\"></a>什么原因导致的</h2><h2 id=\"知识点回顾\"><a href=\"#知识点回顾\" class=\"headerlink\" title=\"知识点回顾\"></a>知识点回顾</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex\" target=\"_blank\" >MDN flex</a></p>\n<h3 id=\"flex-的特点\"><a href=\"#flex-的特点\" class=\"headerlink\" title=\"flex 的特点\"></a>flex 的特点</h3><p>语法</p>\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">&#x2F;* 关键字值 *&#x2F;\nflex: auto;\nflex: initial;\nflex: none;\n\n&#x2F;* 一个值, 无单位数字: flex-grow *&#x2F;\nflex: 2;\n\n&#x2F;* 一个值, width&#x2F;height: flex-basis *&#x2F;\nflex: 10em;\nflex: 30px;\nflex: min-content;\n\n&#x2F;* 两个值: flex-grow | flex-basis *&#x2F;\nflex: 1 30px;\n\n&#x2F;* 两个值: flex-grow | flex-shrink *&#x2F;\nflex: 2 2;\n\n&#x2F;* 三个值: flex-grow | flex-shrink | flex-basis *&#x2F;\nflex: 2 2 10%;\n\n&#x2F;*全局属性值 *&#x2F;\nflex: inherit;\nflex: initial;\nflex: unset;\n</code></pre>\n\n<p>可以使用一个，两个或三个值来指定 flex 属性。</p>\n<h4 id=\"单值语法\"><a href=\"#单值语法\" class=\"headerlink\" title=\"单值语法\"></a>单值语法</h4><p><strong>单值语法</strong>: 值必须为以下其中之一:</p>\n<ol>\n<li>一个无单位数(<code>&lt;number&gt;</code>): 它会被当作 flex:<code>&lt;number&gt;</code> 1 0; 解释：<code>&lt;flex-shrink&gt;</code>的值被假定为 1，然后<code>&lt;flex-basis&gt;</code> 的值被假定为 0。</li>\n<li>一个有效的宽度(width)值: 它会被当作 <code>&lt;flex-basis&gt;</code>的值。</li>\n<li>关键字 none，auto 或 initial.</li>\n</ol>\n<h4 id=\"双值语法\"><a href=\"#双值语法\" class=\"headerlink\" title=\"双值语法\"></a>双值语法</h4><p><strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。第二个值必须为以下之一：</p>\n<ol>\n<li>一个无单位数：它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li>\n<li>一个有效的宽度值: 它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li>\n</ol>\n<h4 id=\"三值语法\"><a href=\"#三值语法\" class=\"headerlink\" title=\"三值语法\"></a>三值语法</h4><p><strong>三值语法</strong>:</p>\n<ol>\n<li>第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li>\n<li>第二个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li>\n<li>第三个值必须为一个有效的宽度值， 并且它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li>\n</ol>\n<p>可以看到单值，作为双值处理</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">flex-shrink: 1;\nflex-basis: 0;</code></pre>\n\n<h3 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h3><p>自来看下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis\" target=\"_blank\" >flex-base</a></p>\n<p>查看文档后发现，文档上没说关于<code>flex-basic: 0 </code>的事情,给了个演示，也看不出来想表达什么</p>\n<p><a href=\"https://blog.csdn.net/u010951953/article/details/124145786\" target=\"_blank\" >flex-basis 属性的含义</a></p>\n<p><a href=\"https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/#flex-basis-property\" target=\"_blank\" >w3c flex-basis-property</a></p>\n<p>flex 布局一般由 flex 容器（display 属性值为 flex 或 inline-flex）和其子元素（后文亦称 flex 子项或 flex item）构成。flex-basis 属性一般作用在 flex 子项上，它定义了：在 flex 容器分配剩余空间前 flex 子项在主轴方向上的初始尺寸。flex 子项在主轴方向上的实际尺寸是根据元素自身尺寸、flex-basis、flex-grow、flex-shrink 等属性共同决定的。如何计算实际尺寸不是本文重点，不继续展开。</p>\n<h3 id=\"flex-basis-0px-与-0\"><a href=\"#flex-basis-0px-与-0\" class=\"headerlink\" title=\"flex-basis:0px 与 0%\"></a>flex-basis:0px 与 0%</h3><p>如果 flex-basis 的值为百分数，且它 flex 容器的尺寸没有被显式设置，此时 flex-basis 的值会被解析为 content</p>\n<p>content 值会根据 flex 子项的内容（指 flex 子项的子元素尺寸）来计算实际尺寸，多数情况下效果与 max-content 值一致，就是说 flex 子项的子元素有多长其主轴初始值就有多长</p>\n<h3 id=\"flex-1\"><a href=\"#flex-1\" class=\"headerlink\" title=\"flex: 1\"></a>flex: 1</h3><p>在浏览器中，flex: 1 的 flex-basis 值为什么不是 W3C 文档中提到的 0 ？</p>\n<p>当使用 flex 属性但又省略不写它其中的 flex-basis 值时，会将 flex-basis 设置为 0.</p>\n<p>这里的 0 单位是 px 还是 % 我们在 Chrome 浏览器里就能验证：</p>\n<img src=\"http://t-blog-images.aijs.top/img/20220523181618.webp\" width=400  style=\"object-fit: content\"/>\n\n<p>答案是 px.</p>\n<p>这段是 2015 年修正日志里的，意思是将之前 flex 简写语法里的 flex-basis 的解析值从 0% 恢复为原来的 0.</p>\n<p>注意： 这个值的解析规则经历了 0px -&gt; 0% -&gt; 0px 的变化，这是 W3C flex 标准文档的视角。</p>\n<p>简而言之就是有兼容性问题。现在已有很多网页都利用了 flex 属性的这个特性来开发。如果简写语法里 flex-basis 的解析从 0% 变为 0px 会导致部分情况下 flex 容器塌陷，致使很多网页异常</p>\n<p><a href=\"https://blog.csdn.net/u010951953/article/details/124145786\" target=\"_blank\" >建议看原文</a></p>\n","text":"flex 嵌套内部元素宽度默认 100%，撑开父元素，父元素的根元素限制最大宽度，子元素并不受 flex 控制 遇到多次了，这次是维护其他同事的代码，又撞见了，说明这个问题很常见，一个不留神，就踩到了 根元素 …… - 父元素flex …… flex - 子元素flex(默认宽度...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"CSS","slug":"CSS","count":4,"path":"api/categories/CSS.json"}],"tags":[{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"},{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#flex-%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">flex 嵌套</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">调试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">修复</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%AF%BC%E8%87%B4%E7%9A%84\"><span class=\"toc-text\">什么原因导致的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">知识点回顾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flex-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">flex 的特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%80%BC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">单值语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%80%BC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">双值语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%80%BC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">三值语法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flex-basis\"><span class=\"toc-text\">flex-basis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flex-basis-0px-%E4%B8%8E-0\"><span class=\"toc-text\">flex-basis:0px 与 0%</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flex-1\"><span class=\"toc-text\">flex: 1</span></a></li></ol></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"react-redux 源码1","uid":"83401137c3fcd92a859b6d9e289c2c88","slug":"2022-05-24react-redux","date":"2022-05-24T05:58:32.000Z","updated":"2022-09-16T14:57:54.111Z","comments":true,"path":"api/articles/2022-05-24react-redux.json","keywords":null,"cover":null,"text":"react-redux官方介绍 官方UI绑定层。 React Redux is the official React UI bindings layer for Redux. 从redux的store读数据。 It lets your React components read ...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"React","slug":"React","count":34,"path":"api/categories/React.json"}],"tags":[{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"},{"name":"react-redux","slug":"react-redux","count":2,"path":"api/tags/react-redux.json"},{"name":"redux","slug":"redux","count":6,"path":"api/tags/redux.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"monorepo","uid":"98f521cd056816f8a9831692e48a6839","slug":"2022-05-23monorepo","date":"2022-05-23T06:45:12.000Z","updated":"2022-09-16T13:54:56.113Z","comments":true,"path":"api/articles/2022-05-23monorepo.json","keywords":null,"cover":"https://segmentfault.com/img/remote/1460000038683984","text":"背景 调试源码时候，总会遇到多包的仓库，遇到了不晓得如何调试 开发个库或者是插件之类的开发的比较混乱 经历多个项目的毒打，终于有时间学下monorepo lerna、yarn workspace 和java微服务架构代码很像 很多项目是 lerna+yarn workspace，...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"npm","slug":"npm","count":4,"path":"api/categories/npm.json"}],"tags":[{"name":"增效","slug":"增效","count":7,"path":"api/tags/增效.json"},{"name":"npm","slug":"npm","count":5,"path":"api/tags/npm.json"},{"name":"monorepo","slug":"monorepo","count":1,"path":"api/tags/monorepo.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"眼中有光，心中有梦，脚下有路","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}