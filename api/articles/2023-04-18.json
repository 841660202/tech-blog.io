{"title":"蓝湖图标 快速转化代码","uid":"477b27802f823769fb08932565755076","slug":"2023-04-18","date":"2023-04-18T08:09:58.000Z","updated":"2023-07-08T01:06:25.353Z","comments":true,"path":"api/articles/2023-04-18.json","keywords":null,"cover":[],"content":"<h2 id=\"蓝湖规则化下载图标\"><a href=\"#蓝湖规则化下载图标\" class=\"headerlink\" title=\"蓝湖规则化下载图标\"></a>蓝湖规则化下载图标</h2><h2 id=\"批量解压缩\"><a href=\"#批量解压缩\" class=\"headerlink\" title=\"批量解压缩\"></a>批量解压缩</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">#!&#x2F;bin&#x2F;bash\n\n# 创建保存压缩结果的文件夹\nmkdir unzipDir\n\n# 遍历当前文件夹及其子文件夹中的所有.png文件并进行压缩\nfind . -name &quot;*.zip&quot; -type f -print0 | while read -d $&#39;\\0&#39; file\ndo\n  # 获取文件所在目录相对于当前文件夹的路径，用于在输出文件夹中创建对应的文件夹\n  dir&#x3D;$(dirname &quot;$file&quot;)\n  relative_dir&#x3D;$&#123;dir#*&#x2F;&#125;\n  unzip $file  -d &quot;unzipDir&quot;\n  echo $file; # 拿到文件名批量进行编辑\ndone</code></pre>\n\n<h2 id=\"名字批量编辑，生成代码\"><a href=\"#名字批量编辑，生成代码\" class=\"headerlink\" title=\"名字批量编辑，生成代码\"></a>名字批量编辑，生成代码</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># step1. 去掉 _slices.zip 后缀\n# step2. 转化并格式化代码, 不会多行编辑的可以学习下vscode快捷键，见下面链接</code></pre>\n\n<h2 id=\"多行编辑参考文章\"><a href=\"#多行编辑参考文章\" class=\"headerlink\" title=\"多行编辑参考文章\"></a>多行编辑参考文章</h2><p><a href=\"/#/post/2022-09-17vscode-shortcuts\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-09-17vscode-shortcuts</a></p>\n<h2 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果\"></a>最终结果</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const s_2_bg &#x3D; require(&#39;.&#x2F;s_2_bg.png&#39;);\n\nconst rc_s_2_1 &#x3D; require(&#39;.&#x2F;rc_s_2_1.png&#39;);\nconst rc_s_2_2 &#x3D; require(&#39;.&#x2F;rc_s_2_2.png&#39;);\n\nconst rs_s_1 &#x3D; require(&#39;.&#x2F;rs_s_1.png&#39;);\nconst rs_s_2 &#x3D; require(&#39;.&#x2F;rs_s_2.png&#39;);\n\nconst setting &#x3D; require(&#39;.&#x2F;setting.png&#39;);\nconst btn_active &#x3D; require(&#39;.&#x2F;btn_active.png&#39;);\n\nconst warn_yellow &#x3D; require(&#39;.&#x2F;warn_yellow.png&#39;);\nconst warn_red &#x3D; require(&#39;.&#x2F;warn_red.png&#39;);\n\nconst step_1 &#x3D; require(&#39;.&#x2F;step_1.png&#39;);\nconst step_2 &#x3D; require(&#39;.&#x2F;step_2.png&#39;);\nconst step_3 &#x3D; require(&#39;.&#x2F;step_3.png&#39;);\n\nconst s_6_bg &#x3D; require(&#39;.&#x2F;s_6_bg.png&#39;);\n\nconst rs_s_6_5 &#x3D; require(&#39;.&#x2F;rs_s_6_5.png&#39;);\nconst rs_s_6_2 &#x3D; require(&#39;.&#x2F;rs_s_6_2.png&#39;);\nconst rs_s_6_1 &#x3D; require(&#39;.&#x2F;rs_s_6_1.png&#39;);\nconst rs_s_6_4 &#x3D; require(&#39;.&#x2F;rs_s_6_4.png&#39;);\nconst rs_s_6_3 &#x3D; require(&#39;.&#x2F;rs_s_6_3.png&#39;);\nconst rs_s_6_6 &#x3D; require(&#39;.&#x2F;rs_s_6_6.png&#39;);\n\nconst rc_s_6_5 &#x3D; require(&#39;.&#x2F;rc_s_6_5.png&#39;);\nconst rc_s_6_2 &#x3D; require(&#39;.&#x2F;rc_s_6_2.png&#39;);\nconst rc_s_6_4 &#x3D; require(&#39;.&#x2F;rc_s_6_4.png&#39;);\nconst rc_s_6_1 &#x3D; require(&#39;.&#x2F;rc_s_6_1.png&#39;);\nconst rc_s_6_6 &#x3D; require(&#39;.&#x2F;rc_s_6_6.png&#39;);\nconst rc_s_6_3 &#x3D; require(&#39;.&#x2F;rc_s_6_3.png&#39;);\n\nconst tip_1 &#x3D; require(&#39;.&#x2F;tip_1.png&#39;);\nconst tip_2 &#x3D; require(&#39;.&#x2F;tip_2.png&#39;);\n\nconst electricity_red &#x3D; require(&#39;.&#x2F;electricity_red.png&#39;);\nconst electricity_yellow &#x3D; require(&#39;.&#x2F;electricity_yellow.png&#39;);\nconst electricity_green &#x3D; require(&#39;.&#x2F;electricity_green.png&#39;);\n\nconst light_grey &#x3D; require(&#39;.&#x2F;light_grey.png&#39;);\nconst light_blue &#x3D; require(&#39;.&#x2F;light_blue.png&#39;);\n\nconst unchecked &#x3D; require(&#39;.&#x2F;unchecked.png&#39;);\nconst checked &#x3D; require(&#39;.&#x2F;checked.png&#39;);\n\nconst icons &#x3D; &#123;\n  s_2_bg,\n  rc_s_2_1,\n  rc_s_2_2,\n  rs_s_1,\n  rs_s_2,\n  setting,\n  btn_active,\n  warn_yellow,\n  warn_red,\n  step_1,\n  step_2,\n  step_3,\n  s_6_bg,\n  rs_s_6_5,\n  rs_s_6_2,\n  rs_s_6_1,\n  rs_s_6_4,\n  rs_s_6_3,\n  rs_s_6_6,\n  rc_s_6_5,\n  rc_s_6_2,\n  rc_s_6_4,\n  rc_s_6_1,\n  rc_s_6_6,\n  rc_s_6_3,\n  tip_1,\n  tip_2,\n  electricity_red,\n  electricity_yellow,\n  electricity_green,\n  light_grey,\n  light_blue,\n  unchecked,\n  checked,\n&#125;;</code></pre>\n\n<h2 id=\"含-xx-yy-文件名过滤\"><a href=\"#含-xx-yy-文件名过滤\" class=\"headerlink\" title=\"含 xx|yy 文件名过滤\"></a>含 xx|yy 文件名过滤</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">ls | grep -E &#39;car|metro_line|reach_|traffic_|transit_&#39;\n\n\n# car_0@2x.png\n# car_1@2x.png\n# car_2@2x.png\n# car_count_0@2x.png\n# car_count_1@2x.png\n# car_count_2@2x.png\n# metro_line_0@2x.png\n# metro_line_1@2x.png\n# metro_line_2@2x.png\n# reach_0@2x.png\n# reach_1@2x.png\n# traffic_dist_0@2x.png\n# traffic_dist_1@2x.png\n# traffic_dist_2@2x.png\n# traffic_mode_0@2x.png\n# traffic_mode_1@2x.png\n# traffic_mode_2@2x.png\n# traffic_start_0@2x.png\n# traffic_start_1@2x.png\n# transit_line_0@2x.png\n# transit_line_1@2x.png\n# transit_platform_0@2x.png\n# transit_platform_1@2x.png</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202306240906319.webp\" />\n\n<p>TODO: 将 ls 的内容输出给 py，然后使用 py 脚本生成代码</p>\n","text":"蓝湖规则化下载图标批量解压缩#!&#x2F;bin&#x2F;bash # 创建保存压缩结果的文件夹 mkdir unzipDir # 遍历当前文件夹及其子文件夹中的所有.png文件并进行压缩 find . -name &quot;*.zip&quot; -type f -pri...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"shell","slug":"shell","count":5,"path":"api/categories/shell.json"}],"tags":[{"name":"shell","slug":"shell","count":6,"path":"api/tags/shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%93%9D%E6%B9%96%E8%A7%84%E5%88%99%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%9B%BE%E6%A0%87\"><span class=\"toc-text\">蓝湖规则化下载图标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E8%A7%A3%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">批量解压缩</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8D%E5%AD%97%E6%89%B9%E9%87%8F%E7%BC%96%E8%BE%91%EF%BC%8C%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">名字批量编辑，生成代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E7%BC%96%E8%BE%91%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">多行编辑参考文章</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">最终结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AB-xx-yy-%E6%96%87%E4%BB%B6%E5%90%8D%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">含 xx|yy 文件名过滤</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go Method","uid":"5cdf9e167cb5f0e4541536dd6c2982d9","slug":"2023-04-18go","date":"2023-04-18T15:55:37.000Z","updated":"2023-05-15T13:17:32.994Z","comments":true,"path":"api/articles/2023-04-18go.json","keywords":null,"cover":null,"text":"方法模型func (接收器变量 接收器类型) 方法名(参数列表) (返回参数) &#123; 方法体 &#125; 方法中调用 使用类型的值，调用值接收器声明的方法时，会使用值的副本来执行，因此该类型的值并不会被改变。 使用类型的指针，调用值接收器声明的方法时，指针被解引为值的副...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Go","slug":"Go","count":19,"path":"api/categories/Go.json"}],"tags":[{"name":"Go","slug":"Go","count":19,"path":"api/tags/Go.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"React18 四个新hook","uid":"0c4a3dd6ecc4239de48c5ec997a9babe","slug":"2023-04-17useTansition","date":"2023-04-17T06:35:31.000Z","updated":"2023-05-15T13:17:32.992Z","comments":true,"path":"api/articles/2023-04-17useTansition.json","keywords":null,"cover":null,"text":"useTransition作用在不阻塞 UI 的情况下更新状态 动机 转换是可中断的，这让用户无需等待重新渲染完成即可单击离开。 转换可防止不需要的加载指示器，这使用户可以避免导航时出现不和谐的跳转。 场景及替换方案 只能在组件中使用 要开始转换以响应某些 prop 或自定义 H...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"React","slug":"React","count":39,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":33,"path":"api/tags/React.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}