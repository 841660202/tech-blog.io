{"title":"python 处理excel接口文档","uid":"381db769bebbedcb74ac2aee649ff3c8","slug":"2023-06-20tool","date":"2023-06-20T10:35:27.000Z","updated":"2023-07-08T01:06:25.363Z","comments":true,"path":"api/articles/2023-06-20tool.json","keywords":null,"cover":null,"content":"<h2 id=\"脚本工具\"><a href=\"#脚本工具\" class=\"headerlink\" title=\"脚本工具\"></a>脚本工具</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 需要安装  openpyxl\n\n# import xlrd\n\n# workbook &#x3D; xlrd.open_workbook(&#39;mit接口文档.xlsx&#39;)\n# sheet &#x3D; workbook.sheet_by_index(0)\n\n# for row in range(sheet.nrows):\n#     for col in range(sheet.ncols):\n#         print(sheet.cell(row, col).value)\n\n# xlrd.biffh.XLRDError: Excel xlsx file; not supported\n\nimport openpyxl\n\n# 打开 Excel 文件\nworkbook &#x3D; openpyxl.load_workbook(&#39;mit接口文档.xlsx&#39;)\n\n# 获取工作表\nsheet &#x3D; workbook.active\n\n# service遍历\n\n\ndef formatServices(sheet, head, serviceTpl):\n    content &#x3D; head\n    api_list &#x3D; []\n    data &#x3D; &#123;&#125;\n    # 遍历工作表\n    for rIndex, row in enumerate(sheet.iter_rows()):\n        if rIndex &#x3D;&#x3D; 0:\n            continue\n        comment &#x3D; &#39;&#39;\n        api &#x3D; &#39;&#39;\n        for index, cell in enumerate(row):\n            if index &#x3D;&#x3D; 2:\n                comment &#x3D; cell.value\n            if index &#x3D;&#x3D; 3:\n                api &#x3D; cell.value\n                if api is not None and api not in api_list:\n                    api_list.append(api)\n                    content &#x3D; parseService(\n                        api, serviceTpl, comment, content)\n                elif api is not None:\n                    print(&quot;API重复&quot;, api)\n            if index &#x3D;&#x3D; 8:\n                data &#x3D; cell.value\n                if api is not None and api not in api_list:\n                    api_list.append(api)\n                    content &#x3D; parseService(\n                        api, serviceTpl, comment, content)\n                elif api is not None:\n                    print(&quot;API重复&quot;, api)\n    return content\n\n\n# 打开一个名为 的文件，若不存在则自动创建\ndef writeFile(filename, txt):\n    with open(filename, mode&#x3D;&#39;w&#39;) as f:\n        f.write(txt)\n\n\n# 解析service数据\ndef parseService(api, serviceTpl, comment, content):\n    # 去除参数\n    # ValueError: not enough values to unpack (expected 2, got 1)\n    if &#39;?&#39; in api:\n        base_url, params &#x3D; api.split(&#39;?&#39;)\n    else:\n        base_url &#x3D; api\n        params &#x3D; None\n    # 分割 URL\n    s_list &#x3D; base_url.split(&#39;&#x2F;&#39;)\n    last_four &#x3D; s_list[-4:]\n    # 生成api名字\n    fun_name &#x3D; &#39;get&#39;+&#39;&#39;.join([word.title()\n                              for word in last_four])\n    # print(fun_name, api)\n    # 生成代码\n    func_str &#x3D; serviceTpl.format(\n        comment&#x3D;comment, api&#x3D;api, fun_name&#x3D;fun_name)\n\n    # print(func_str)\n    return content+func_str+&#39;\\n&#39;\n\n\n# 解析mock数据\ndef parseMock(api, mockTpl, comment, content):\n    pass\n\n\ndef formatMock(sheet, head, serviceTpl):\n    content &#x3D; head\n    api_list &#x3D; []\n    data &#x3D; &#123;&#125;\n    # 遍历工作表\n    for rIndex, row in enumerate(sheet.iter_rows()):\n        if rIndex &#x3D;&#x3D; 0:\n            continue\n        comment &#x3D; &#39;&#39;\n        api &#x3D; &#39;&#39;\n        for index, cell in enumerate(row):\n            if index &#x3D;&#x3D; 2:\n                comment &#x3D; cell.value\n            if index &#x3D;&#x3D; 3:\n                api &#x3D; cell.value\n                # TODO: API name\n                # if api is not None and api not in api_list:\n                #     api_list.append(api)\n                #     content &#x3D; parseService(\n                #         api, serviceTpl, comment, content)\n                # elif api is not None:\n                #     print(&quot;API重复&quot;, api)\n            if index &#x3D;&#x3D; 8:\n                data &#x3D; cell.value\n                # mock数据\n\n    return content\n\n\ndef run(sheet):\n    # 接口层\n    serviceHead &#x3D; &#39;&#39;&#39;\n    import &#123; fecthCacheFun &#125; from &#39;@&#x2F;utils&#39;;\n    import &#123; request &#125; from &#39;.&#x2F;request&#39;;\n    &#39;&#39;&#39;\n    serviceTpl &#x3D; &#39;&#39;&#39;\n    &#x2F;** &#123;comment&#125; *&#x2F;\n    export async function &#123;fun_name&#125;(params: &#123;&#123; source_id: number &#125;&#125;) &#123;&#123;\n        return request&lt;any&gt;(&#39;&#123;api&#125;&#39;, &#123;&#123;\n            method: &#39;GET&#39;,\n            params: fecthCacheFun(params),\n        &#125;&#125;);\n    &#125;&#125;\n    &#39;&#39;&#39;\n    serviceTxt &#x3D; formatServices(sheet, serviceHead, serviceTpl)\n    writeFile(&#39;service.ts&#39;, serviceTxt)\n\n    # mock层\n    mockHead &#x3D; &#39;&#39;&#39;\n    import &#123; Request, Response &#125; from &#39;express&#39;;\n\n    const waitTime &#x3D; (time: number &#x3D; 100) &#x3D;&gt; &#123;\n        return new Promise((resolve) &#x3D;&gt; &#123;\n            setTimeout(() &#x3D;&gt; &#123;\n            resolve(true);\n            &#125;, time);\n        &#125;);\n    &#125;;\n    &#39;&#39;&#39;\n    mockFunTpl &#x3D; &#39;&#39;&#39;\n    &#x2F;** &#123;comment&#125; *&#x2F;\n    async function getMacroTrafficBusFlow(req: Request, res: Response) &#123;&#123;\n        await waitTime(2000);\n        return res.json(&#123;&#123;&#123;body&#125;&#125;&#125;);\n    &#125;\n    &#39;&#39;&#39;\n\n    mockEnd &#x3D; &#39;&#39;&#39;\n    export default &#123;&#123;\n        &#123;serviceEndContent&#125;\n    &#125;&#125;\n    &#39;&#39;&#39;\n\n\n# 执行代码生成\nrun(sheet)\n</code></pre>\n\n<h2 id=\"python-输出脚本到剪切板\"><a href=\"#python-输出脚本到剪切板\" class=\"headerlink\" title=\"python 输出脚本到剪切板\"></a>python 输出脚本到剪切板</h2><p>你可以使用 Python 的第三方 <code>pyperclip</code> 库来将输出结果复制到剪贴板中。首先，你需要安装 <code>pyperclip</code> 库。可以使用以下命令使用 <code>pip</code> 工具来安装：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install pyperclip</code></pre>\n\n<p>下面是将字符串 “Hello, World!” 复制到剪切板的示例代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import pyperclip\n\nmessage &#x3D; &quot;Hello, World!&quot;\npyperclip.copy(message)</code></pre>\n\n<p>上面代码中，首先导入 <code>pyperclip</code> 模块，然后将要复制到剪贴板的字符串赋值给 <code>message</code> 变量。接着，使用 <code>pyperclip.copy()</code> 方法将字符串复制到剪切板中。现在你可以使用 <code>Ctrl + V</code> （Windows &#x2F; Linux）或 <code>Cmd + V</code> （macOS）粘贴到需要的位置。</p>\n","text":"脚本工具# 需要安装 openpyxl # import xlrd # workbook &#x3D; xlrd.open_workbook(&#39;mit接口文档.xlsx&#39;) # sheet &#x3D; workbook.sheet_by_index(0) # f...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"工具","slug":"工具","count":26,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":20,"path":"api/tags/工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">脚本工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E8%BE%93%E5%87%BA%E8%84%9A%E6%9C%AC%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF\"><span class=\"toc-text\">python 输出脚本到剪切板</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"chrome快捷键","uid":"607b644ddb65db98f35faca20e792e2f","slug":"2023-06-27chrome-shortcuts","date":"2023-06-27T10:17:24.000Z","updated":"2023-07-08T01:06:25.364Z","comments":true,"path":"api/articles/2023-06-27chrome-shortcuts.json","keywords":null,"cover":[],"text":"文档连接Documentation Chrome DevTools Commands and shortcuts Keyboard shortcuts for opening DevTools Action Mac Windows &#x2F; Linux 最后用哪个就打开哪个 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"shortcuts","slug":"shortcuts","count":1,"path":"api/categories/shortcuts.json"}],"tags":[{"name":"shortcuts","slug":"shortcuts","count":1,"path":"api/tags/shortcuts.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"Rust","uid":"cbad4469cc24cd0d14f8d940cd23f710","slug":"2023-06-15rust","date":"2023-06-15T08:21:09.000Z","updated":"2023-07-08T01:06:25.362Z","comments":true,"path":"api/articles/2023-06-15rust.json","keywords":null,"cover":[],"text":"Rustaceans 是啥Rustaceans 是 Rust 社区的成员，包括 Rust 的开发者、用户、贡献者、爱好者等。这个词来源于 Rust 的 Logo 中的小螃蟹（Crab），因此称 Rust 的使用者为 Rustaceans。 Rust 社区非常活跃，拥有众多的 Ru...","link":"","photos":[],"count_time":{"symbolsCount":"64k","symbolsTime":"58 mins."},"categories":[{"name":"Rust","slug":"Rust","count":1,"path":"api/categories/Rust.json"}],"tags":[{"name":"Rust","slug":"Rust","count":1,"path":"api/tags/Rust.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}