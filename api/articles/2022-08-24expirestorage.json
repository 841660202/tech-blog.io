{"title":"有过期机制的localStorage","uid":"b204c24ab6e396e5de06d4bc0adf7d2a","slug":"2022-08-24expirestorage","date":"2022-08-24T08:49:06.000Z","updated":"2022-09-16T13:54:56.316Z","comments":true,"path":"api/articles/2022-08-24expirestorage.json","keywords":null,"cover":[],"content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>对于一些数据不经常更新的数据，保持一定时间的新鲜的时候可以用于缓存</p>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><p><a href=\"https://juejin.cn/post/7068533397911502879\" target=\"_blank\" >见原文</a></p>\n<p>把原文代码改了下，主要对<code>JSON.parse</code>进行 fixed</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Storage.prototype.setStorageWithAge &#x3D; (key, value, expires &#x3D; 60 * 1000) &#x3D;&gt; &#123;\n  if (isNaN(expires) || expires &lt; 1)\n    throw new Error(&quot;expires must be a number&quot;);\n  const obj &#x3D; &#123;\n    data: value,\n    &#x2F;&#x2F;存储值\n    time: Date.now(),\n    &#x2F;&#x2F;存值时间戳\n    maxExpires: expires,\n    &#x2F;&#x2F;过期时间\n  &#125;;\n  localStorage.setItem(key, JSON.stringify(obj));\n&#125;;\n\nStorage.prototype.getStorageWithAge &#x3D; (key) &#x3D;&gt; &#123;\n  try &#123;\n    const &#123; data, time, maxExpires &#125; &#x3D; JSON.parse(localStorage.getItem(key));\n    if (time + maxExpires &lt; Date.now()) &#123;\n      localStorage.removeItem(key);\n      return undefined;\n    &#125;\n    return data;\n  &#125; catch (error) &#123;\n    return undefined; &#x2F;&#x2F; JSON.parse解析undefined时候直接返回\n  &#125;\n&#125;;\n\n&#x2F;&#x2F; 测试数据\nlocalStorage.setStorageWithAge(&quot;amingxiansen&quot;, &quot;测试过期时间&quot;, 5000);\nlocalStorage.getStorageWithAge(&quot;amingxiansen&quot;);</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202208241654212.webp\" />\n\n<p>注意：对于一些敏感数据，需要加密</p>\n","text":"场景对于一些数据不经常更新的数据，保持一定时间的新鲜的时候可以用于缓存 localStorage见原文 把原文代码改了下，主要对JSON.parse进行 fixed Storage.prototype.setStorageWithAge &#x3D; (key, value, e...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"存储","slug":"存储","count":1,"path":"api/categories/存储.json"}],"tags":[{"name":"存储","slug":"存储","count":1,"path":"api/tags/存储.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#localStorage\"><span class=\"toc-text\">localStorage</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ahooks源码","uid":"847fdfbf845470be05a2ff27391aae0c","slug":"2022-08-24ahooks","date":"2022-08-24T09:16:49.000Z","updated":"2022-09-16T13:54:56.315Z","comments":true,"path":"api/articles/2022-08-24ahooks.json","keywords":null,"cover":"https://ahooks.js.org/logo.svg","text":"背景随意看看，了解下，无固定顺序，全凭兴趣 useUpdate useUpdate 会返回一个函数，调用该函数会强制组件重新渲染。 import &#123; useCallback, useState &#125; from &quot;react&quot;; const u...","link":"","photos":[],"count_time":{"symbolsCount":"97k","symbolsTime":"1:28"},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"源码","slug":"源码","count":14,"path":"api/tags/源码.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"react hook 如何增加依赖更新","uid":"66abc3dc4231aab7cbe8387d3c356301","slug":"2022-08-23react-hook","date":"2022-08-23T08:25:15.000Z","updated":"2022-09-16T15:03:32.529Z","comments":true,"path":"api/articles/2022-08-23react-hook.json","keywords":null,"cover":[],"text":"背景想将，业务逻辑按钮组封装为 hook,在移动端和 pc 端之间进行逻辑复用。在详情页面使用时候，发现并没有生效 原因： 无法给 useActions，增加依赖项，类似 useEffect 的第二参数一样。 查询了 ahooks 的 hook，了解类似解决方案 useActio...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"React","slug":"React","count":28,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":22,"path":"api/tags/React.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"生活不止眼前的苟且，还有诗和远方","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}