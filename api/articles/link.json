{"title":"link","uid":"317fa629ebf2e28e8e30a2ac41c06f40","slug":"link","date":"2024-01-07T08:19:19.000Z","updated":"2023-08-09T06:53:54.807Z","comments":true,"path":"api/articles/link.json","keywords":null,"cover":[],"content":"<h2 id=\"认知\"><a href=\"#认知\" class=\"headerlink\" title=\"认知\"></a>认知</h2><ol>\n<li>横向对比</li>\n<li>纵向学习</li>\n<li><a href=\"/#/post/2023-02-23思考\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-23 思考</a></li>\n</ol>\n<h2 id=\"第三方链接\"><a href=\"#第三方链接\" class=\"headerlink\" title=\"第三方链接\"></a>第三方链接</h2><ol>\n<li><a href=\"https://juejin.cn/post/7204307381689532474\" target=\"_blank\" >2023 面试真题之框架篇</a></li>\n<li><a href=\"https://juejin.cn/post/7202904269535887418\" target=\"_blank\" >2023 前端面试真题之 JS 篇</a></li>\n<li><a href=\"https://juejin.cn/post/7203153899246780453\" target=\"_blank\" >2023 面试真题之 CSS 篇</a></li>\n<li><a href=\"https://juejin.cn/post/7203180003470311483\" target=\"_blank\" >2023 面试真题之浏览器篇</a></li>\n<li><a href=\"https://juejin.cn/post/7206912311562174523\" target=\"_blank\" >2023 面试真题之手写&amp;代码运行篇</a></li>\n<li><a href=\"https://juejin.cn/post/7202639428132274234\" target=\"_blank\" >金三银四，我为面试所准备的 100 道面试题以及答案，不看要遭老罪喽</a></li>\n<li><a href=\"https://juejin.cn/column/7186536961287389221\" target=\"_blank\" >面试秘笈</a></li>\n<li><a href=\"https://juejin.cn/post/7205517870976909370\" target=\"_blank\" >美团前端常考面试题（必备）</a></li>\n<li><a href=\"https://juejin.cn/post/7204844328111554615\" target=\"_blank\" >京东前端二面高频手写面试题（持续更新中）</a></li>\n<li><a href=\"https://juejin.cn/post/7204707115062411320\" target=\"_blank\" >2023 前端面试题总结</a></li>\n<li><a href=\"https://juejin.cn/post/7194400984490049573\" target=\"_blank\" >当面试官问我前端可以做的性能优化有哪些</a></li>\n<li><a href=\"https://www.cnblogs.com/sexintercourse/p/16904178.html\" target=\"_blank\" >Redux 与它的中间件：redux-thunk，redux-actions，redux-promise，redux-saga</a></li>\n<li><a href=\"https://juejin.cn/post/7197070078360322109?share_token=fa04810d-f263-4914-8d88-3b3628026a93\" target=\"_blank\" >2023 高频前端面试题合集之网络篇</a></li>\n<li><a href=\"https://juejin.cn/post/7205401322111500344?share_token=54e577dc-15c7-436c-97c9-c468454ec1cb\" target=\"_blank\" >面试官问我设计模式？我是这么回答的！其实你们都用过！</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_47450807/category_11593058.html\" target=\"_blank\" >js 面试题</a></li>\n<li><a href=\"https://juejin.cn/post/7204307381689532474\" target=\"_blank\" >2023 面试真题之框架篇</a></li>\n</ol>\n<h3 id=\"Redux-与它的中间件\"><a href=\"#Redux-与它的中间件\" class=\"headerlink\" title=\"Redux 与它的中间件\"></a>Redux 与它的中间件</h3><p>Redux 是一种用于管理应用程序状态的 JavaScript 库。它采用单一状态树（Single State Tree）的数据结构，将应用的所有状态存储在一个对象中，并通过纯函数来更新状态。Redux 的核心概念包括 Store、Action 和 Reducer。</p>\n<p>中间件（Middleware）是 Redux 中的一个重要概念，它是一种位于 Action 被发起后、到达 Reducer 之前的拦截器。中间件可以用于在 Redux 的数据流中进行额外的处理，例如日志记录、异步操作、路由跳转等。</p>\n<p>Redux 中的中间件可以通过<code>applyMiddleware</code>函数来引入。常见的 Redux 中间件有如下几种：</p>\n<ol>\n<li><p><strong>redux-thunk</strong>：用于处理异步操作，允许 Action 创建函数返回一个函数而不是一个纯对象。这使得我们可以在 Action 中进行异步的 API 调用等操作。</p>\n</li>\n<li><p><strong>redux-logger</strong>：用于记录 Redux 的 Action 和状态变化，方便调试和开发。</p>\n</li>\n<li><p><strong>redux-saga</strong>：用于处理更复杂的异步操作，支持使用 ES6 生成器来执行异步流程，提供更高级的异步处理能力。</p>\n</li>\n<li><p><strong>redux-promise</strong>：用于处理返回 Promise 的 Action，允许我们在 Action 中使用 Promise 来处理异步操作。</p>\n</li>\n<li><p><strong>redux-throttle</strong>：用于限制 Action 的触发频率，防止过于频繁的状态更新。</p>\n</li>\n</ol>\n<p>使用中间件可以让 Redux 在数据流中进行额外的处理，增强 Redux 的功能和灵活性。中间件的使用使得我们可以在 Redux 中处理更多种类的操作，让 Redux 适用于更多不同类型的应用场景。每个中间件都有自己的特点和用途，开发者可以根据实际需求选择合适的中间件来优化 Redux 的功能。</p>\n<h3 id=\"每个中间件使用示例\"><a href=\"#每个中间件使用示例\" class=\"headerlink\" title=\"每个中间件使用示例\"></a>每个中间件使用示例</h3><p>下面给出每个中间件的使用示例：</p>\n<ol>\n<li><strong>redux-thunk</strong>：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 安装redux-thunk：npm install redux-thunk\n\n&#x2F;&#x2F; 导入依赖\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport thunk from &#39;redux-thunk&#39;;\nimport rootReducer from &#39;.&#x2F;reducers&#39;;\n\n&#x2F;&#x2F; 创建store，并应用redux-thunk中间件\nconst store &#x3D; createStore(rootReducer, applyMiddleware(thunk));\n\n&#x2F;&#x2F; 定义异步Action创建函数\nconst fetchData &#x3D; () &#x3D;&gt; &#123;\n  return (dispatch) &#x3D;&gt; &#123;\n    dispatch(&#123; type: &#39;FETCH_START&#39; &#125;);\n    &#x2F;&#x2F; 模拟异步操作，例如API请求\n    setTimeout(() &#x3D;&gt; &#123;\n      dispatch(&#123; type: &#39;FETCH_SUCCESS&#39;, payload: data &#125;);\n    &#125;, 1000);\n  &#125;;\n&#125;;\n\n&#x2F;&#x2F; 调用异步Action创建函数\nstore.dispatch(fetchData());</code></pre>\n\n<ol start=\"2\">\n<li><strong>redux-logger</strong>：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 安装redux-logger：npm install redux-logger\n\n&#x2F;&#x2F; 导入依赖\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport logger from &#39;redux-logger&#39;;\nimport rootReducer from &#39;.&#x2F;reducers&#39;;\n\n&#x2F;&#x2F; 创建store，并应用redux-logger中间件\nconst store &#x3D; createStore(rootReducer, applyMiddleware(logger));\n\n&#x2F;&#x2F; 此时，每次dispatch action都会在控制台打印action和状态变化日志</code></pre>\n\n<ol start=\"3\">\n<li><strong>redux-saga</strong>：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 安装redux-saga：npm install redux-saga\n\n&#x2F;&#x2F; 导入依赖\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport createSagaMiddleware from &#39;redux-saga&#39;;\nimport &#123; all, call, put, takeEvery &#125; from &#39;redux-saga&#x2F;effects&#39;;\nimport rootReducer from &#39;.&#x2F;reducers&#39;;\n\n&#x2F;&#x2F; 定义一个Saga处理异步操作\nfunction* fetchDataSaga() &#123;\n  try &#123;\n    yield put(&#123; type: &#39;FETCH_START&#39; &#125;);\n    &#x2F;&#x2F; 模拟异步操作，例如API请求\n    const data &#x3D; yield call(fetchDataFromAPI);\n    yield put(&#123; type: &#39;FETCH_SUCCESS&#39;, payload: data &#125;);\n  &#125; catch (error) &#123;\n    yield put(&#123; type: &#39;FETCH_ERROR&#39;, payload: error.message &#125;);\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 创建saga中间件\nconst sagaMiddleware &#x3D; createSagaMiddleware();\n\n&#x2F;&#x2F; 创建store，并应用redux-saga中间件\nconst store &#x3D; createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\n&#x2F;&#x2F; 运行Saga\nfunction* rootSaga() &#123;\n  yield all([takeEvery(&#39;FETCH_DATA&#39;, fetchDataSaga)]);\n&#125;\n\nsagaMiddleware.run(rootSaga);\n\n&#x2F;&#x2F; 调用异步Action创建函数\nstore.dispatch(&#123; type: &#39;FETCH_DATA&#39; &#125;);</code></pre>\n\n<ol start=\"4\">\n<li><strong>redux-promise</strong>：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 安装redux-promise：npm install redux-promise\n\n&#x2F;&#x2F; 导入依赖\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport promiseMiddleware from &#39;redux-promise&#39;;\nimport rootReducer from &#39;.&#x2F;reducers&#39;;\n\n&#x2F;&#x2F; 创建store，并应用redux-promise中间件\nconst store &#x3D; createStore(rootReducer, applyMiddleware(promiseMiddleware));\n\n&#x2F;&#x2F; 定义返回Promise的Action\nconst fetchData &#x3D; () &#x3D;&gt; (&#123;\n  type: &#39;FETCH_DATA&#39;,\n  payload: fetchDataFromAPI(), &#x2F;&#x2F; 返回一个Promise\n&#125;);\n\n&#x2F;&#x2F; 调用返回Promise的Action\nstore.dispatch(fetchData());</code></pre>\n\n<ol start=\"5\">\n<li><strong>redux-throttle</strong>：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 安装redux-throttle：npm install redux-throttle\n\n&#x2F;&#x2F; 导入依赖\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport throttle from &#39;redux-throttle&#39;;\nimport rootReducer from &#39;.&#x2F;reducers&#39;;\n\n&#x2F;&#x2F; 创建store，并应用redux-throttle中间件\nconst store &#x3D; createStore(rootReducer, applyMiddleware(throttle(1000))); &#x2F;&#x2F; 限制每秒只能触发一次Action</code></pre>\n\n<p>这些是每个中间件的简单示例，实际使用中还可以根据具体的需求进行更复杂的配置和定制。</p>\n<h2 id=\"react-redux-是中间件吗\"><a href=\"#react-redux-是中间件吗\" class=\"headerlink\" title=\"react-redux 是中间件吗\"></a>react-redux 是中间件吗</h2><p>React-Redux 不是一个中间件，而是一个用于将 React 应用和 Redux 状态管理库结合在一起的桥接库。它提供了一些特定的组件和函数，使得在 React 应用中可以更方便地使用 Redux 来管理状态。</p>\n<p>React-Redux 主要包含两个核心组件：</p>\n<ol>\n<li><p><code>Provider</code> 组件：在应用的最顶层，将 Redux 的 store 作为 prop 传递给所有的子组件，使得每个组件都可以通过 <code>connect</code> 函数连接到 Redux 的状态。</p>\n</li>\n<li><p><code>connect</code> 函数：用于连接 React 组件和 Redux 的 store，将组件和状态进行绑定。通过 <code>connect</code> 函数，我们可以将 Redux 的状态映射到组件的 props 中，并将组件的事件和操作转化为 Redux 的 Action 和 Dispatch。</p>\n</li>\n</ol>\n<p>React-Redux 的主要作用是简化在 React 应用中使用 Redux 的流程，让开发者更容易地使用 Redux 进行状态管理。通过 React-Redux，我们可以在 React 组件中直接访问 Redux 的状态，而不需要手动编写订阅和更新逻辑。</p>\n<p>需要注意的是，虽然 React-Redux 本身不是一个中间件，但在 Redux 应用中，我们可能会同时使用其他中间件，比如上文提到的 <code>redux-thunk</code>、<code>redux-logger</code> 等。React-Redux 可以和这些中间件一起使用，从而增强 Redux 的功能和灵活性，使得在 React 应用中更方便地处理异步操作和调试状态变化。</p>\n<h2 id=\"redux-actions-与-redux-thunk\"><a href=\"#redux-actions-与-redux-thunk\" class=\"headerlink\" title=\"redux-actions 与 redux-thunk\"></a>redux-actions 与 redux-thunk</h2><p>使用 <code>redux-actions</code> 并不意味着就不需要 <code>redux-thunk</code>。它们是两个不同的库，分别解决了 Redux 应用中不同的问题。</p>\n<ol>\n<li><p><code>redux-actions</code>：它是一个用于简化创建 Redux action 和 reducer 的辅助库，主要用于减少编写冗长的 action 创建函数和 reducer switch 语句的代码。它提供了一组工具函数，如 <code>createAction</code> 和 <code>handleActions</code>，使得创建和管理 Redux action 和 reducer 更加简单和直观。</p>\n</li>\n<li><p><code>redux-thunk</code>：它是一个 Redux 中间件，用于处理异步操作。它允许我们在 action 创建函数中返回一个函数而不是一个纯对象，这样我们可以在 action 中执行异步的操作，例如 API 请求，并在请求成功后再派发新的 action 更新状态。</p>\n</li>\n</ol>\n<p>实际上，<code>redux-actions</code> 和 <code>redux-thunk</code> 可以一起使用，并且经常在实际的 Redux 应用中一起使用。<code>redux-actions</code> 简化了创建 action 和 reducer 的过程，使得代码更加清晰和易于维护，而 <code>redux-thunk</code> 则处理了异步操作，允许我们在 action 中执行异步任务。</p>\n<p>下面是一个示例代码，展示了如何同时使用 <code>redux-actions</code> 和 <code>redux-thunk</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 使用 redux-actions 创建 action 和 reducer\nimport &#123; createAction, handleActions &#125; from &#39;redux-actions&#39;;\n\nconst increment &#x3D; createAction(&#39;INCREMENT&#39;);\n\nconst reducer &#x3D; handleActions(\n  &#123;\n    [increment]: (state, action) &#x3D;&gt; &#123;\n      return &#123; ...state, count: state.count + 1 &#125;;\n    &#125;,\n  &#125;,\n  &#123; count: 0 &#125;\n);\n\n&#x2F;&#x2F; 使用 redux-thunk 处理异步操作\nimport &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;\nimport thunk from &#39;redux-thunk&#39;;\nimport api from &#39;.&#x2F;api&#39;; &#x2F;&#x2F; 假设有一个 API 模块\n\nconst fetchData &#x3D; () &#x3D;&gt; &#123;\n  return (dispatch) &#x3D;&gt; &#123;\n    dispatch(&#123; type: &#39;FETCH_START&#39; &#125;);\n    api\n      .fetchData()\n      .then((data) &#x3D;&gt; &#123;\n        dispatch(&#123; type: &#39;FETCH_SUCCESS&#39;, payload: data &#125;);\n      &#125;)\n      .catch((error) &#x3D;&gt; &#123;\n        dispatch(&#123; type: &#39;FETCH_ERROR&#39;, payload: error.message &#125;);\n      &#125;);\n  &#125;;\n&#125;;\n\nconst store &#x3D; createStore(reducer, applyMiddleware(thunk));\n\n&#x2F;&#x2F; dispatch 异步 action\nstore.dispatch(fetchData());</code></pre>\n\n<p>在这个示例中，我们同时使用了 <code>redux-actions</code> 创建了一个简单的增加计数的 action 和 reducer，以及使用了 <code>redux-thunk</code> 处理了一个异步的数据获取操作。这样，我们既可以简化创建 action 和 reducer 的过程，又可以处理异步操作，使得 Redux 应用更加强大和灵活。</p>\n<h3 id=\"我怎么觉得-redux-actions-并没有简化，只是以另一种形式存在\"><a href=\"#我怎么觉得-redux-actions-并没有简化，只是以另一种形式存在\" class=\"headerlink\" title=\"我怎么觉得 redux-actions 并没有简化，只是以另一种形式存在\"></a>我怎么觉得 redux-actions 并没有简化，只是以另一种形式存在</h3><p>您提出的观点是正确的。<code>redux-actions</code> 并不会真正简化 Redux 的核心机制，它只是提供了一种更抽象和直观的方式来创建 action 和 reducer。从某种程度上来说，<code>redux-actions</code> 更像是一种语法糖，而并非对 Redux 的基本概念进行本质性的简化。</p>\n<p>使用 <code>redux-actions</code> 的主要优点是它可以让我们在创建 action 和 reducer 的过程中避免编写冗长的 switch 语句和重复的代码。它提供了一组工具函数，如 <code>createAction</code> 和 <code>handleActions</code>，使得创建和管理 Redux action 和 reducer 更加简单和直观。这样，我们可以用更简洁的方式表达我们的意图，并使代码更易读、维护和扩展。</p>\n<p>然而，<code>redux-actions</code> 并不能改变 Redux 的核心概念和运行机制。Redux 本质上是一个状态管理库，依然需要通过 action、reducer 和 store 来管理状态的变化。使用 <code>redux-actions</code> 并不会让 Redux 变得更简单，它只是提供了一种更优雅的方式来处理 Redux 相关的代码。</p>\n<p>所以，如果您觉得 <code>redux-actions</code> 并没有真正简化 Redux，那是因为它并没有改变 Redux 的基本架构，而只是提供了一种更便捷的方式来创建 action 和 reducer。如果您对传统的方式更习惯，完全可以继续使用原生的 Redux action 和 reducer 的创建方式。选择使用 <code>redux-actions</code> 还是纯 Redux 取决于您个人的喜好和项目需求。</p>\n<h3 id=\"我觉得也没有更便捷的方式来创建-action-和-reducer\"><a href=\"#我觉得也没有更便捷的方式来创建-action-和-reducer\" class=\"headerlink\" title=\"我觉得也没有更便捷的方式来创建 action 和 reducer\"></a>我觉得也没有更便捷的方式来创建 action 和 reducer</h3><p>您的观点是正确的，创建 action 和 reducer 的方式是 <code>redux-actions</code> 的一个主要特点，但它确实并没有改变 Redux 的核心概念和运行机制。</p>\n<p>在使用 <code>redux-actions</code> 的情况下，创建 action 和 reducer 确实并没有变得更便捷，而是变得更抽象和直观。它主要通过提供一组工具函数，如 <code>createAction</code> 和 <code>handleActions</code>，来简化 action 和 reducer 的创建过程。</p>\n<p>例如，使用 <code>createAction</code> 可以将 action 的创建过程简化为一行代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createAction &#125; from &#39;redux-actions&#39;;\n\nconst increment &#x3D; createAction(&#39;INCREMENT&#39;);</code></pre>\n\n<p>而在纯 Redux 中，需要手动编写一个 action 创建函数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const increment &#x3D; () &#x3D;&gt; &#123;\n  return &#123; type: &#39;INCREMENT&#39; &#125;;\n&#125;;</code></pre>\n\n<p>虽然使用 <code>redux-actions</code> 并不能改变 Redux 的核心机制，但它确实提供了一种更优雅和简洁的方式来处理 action 和 reducer 的创建，从而使代码更加易读和维护。</p>\n<p>然而，个人偏好因素也是很重要的。如果您觉得纯 Redux 的方式更直观和易于理解，完全可以继续使用原生的 Redux 方法。选择使用 <code>redux-actions</code> 还是纯 Redux 取决于您的个人喜好和项目的需求。重要的是确保您理解和熟悉您所使用的工具，并根据项目的实际情况做出最合适的选择。</p>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ol>\n<li><a href=\"/#/post/2022-07-27性能优化\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-27 性能优化</a></li>\n<li><a href=\"/#/post/2022-05-12performance\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-12performance</a></li>\n<li><a href=\"/#/post/2023-02-12Web_Performance\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-12Web_Performance</a></li>\n<li><a href=\"/#/post/2023-02-14web_lcp\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-14web_lcp</a></li>\n<li><a href=\"/#/post/2023-02-14web_fid\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-14web_fid</a></li>\n<li><a href=\"/#/post/2023-02-14web_cls\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-14web_cls</a></li>\n<li><a href=\"/#/post/2023-02-19rn-performance\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-19rn-performance</a></li>\n<li><a href=\"/#/post/2023-02-19rn-performance-o\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-19rn-performance-o</a></li>\n<li><a href=\"https://blog.csdn.net/React_Community/article/details/123516458#comments_21364330\" target=\"_blank\" >React 性能分析神器 React Profiler 介绍</a></li>\n</ol>\n<h2 id=\"非常重要\"><a href=\"#非常重要\" class=\"headerlink\" title=\"非常重要\"></a>非常重要</h2><ol>\n<li><a href=\"/#/post/2022-09-19qa\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-09-19qa</a></li>\n<li><a href=\"/#/post/2022-11-01抽象相等比较\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-11-01 抽象相等比较</a></li>\n<li><a href=\"/#/post/2022-07-18设计模式\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-18 设计模式</a></li>\n<li><a href=\"/#/post/2022-10-27设计模式\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-27 设计模式</a></li>\n<li><a href=\"/#/post/2022-07-30js-scope\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-30js-scope</a></li>\n<li><a href=\"/#/post/2022-07-29js-eventloop\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-29js-eventloop</a></li>\n<li><a href=\"/#/post/2022-07-28js-fun\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-28js-fun</a></li>\n<li><a href=\"/#/post/2022-07-28js-closures\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-28js-closures</a></li>\n<li><a href=\"/#/post/2022-07-26http-CORS\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-26http-CORS</a></li>\n<li><a href=\"/#/post/2022-07-26http-connect\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-26http-connect</a> [230107]</li>\n<li><a href=\"/#/post/2022-07-19rn-架构变更\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-19rn-架构变更</a></li>\n<li><a href=\"/#/post/2022-07-17html\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-17html</a></li>\n<li><a href=\"/#/post/2022-07-17css\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-17css</a></li>\n<li><a href=\"/#/post/2022-07-15TCP\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-15TCP</a></li>\n<li><a href=\"/#/post/2022-07-15安全\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-15 安全</a></li>\n<li><a href=\"/#/post/2022-07-14webpack\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-14webpack</a>[undo]</li>\n<li><a href=\"/#/post/2022-06-15http\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-15http</a></li>\n<li><a href=\"/#/post/2022-05-11http\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-11http</a></li>\n</ol>\n<h2 id=\"冷门知识\"><a href=\"#冷门知识\" class=\"headerlink\" title=\"冷门知识\"></a>冷门知识</h2><ol>\n<li><a href=\"/#/post/2023-02-15web_storage\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-15web_storage</a></li>\n</ol>\n<h2 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h2><ol>\n<li><a href=\"/#/post/2022-11-23面试\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-11-23 面试</a></li>\n<li><a href=\"/#/post/2022-10-28移动适配\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-28 移动适配</a></li>\n<li><a href=\"/#/post/2022-10-24zhihu\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-24zhihu</a></li>\n<li><a href=\"/#/post/2022-10-23css-qa\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-23css-qa</a></li>\n<li><a href=\"/#/post/2022-10-21js-class\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-21js-class</a></li>\n<li><a href=\"/#/post/2022-10-19js 表达式\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-19js 表达式</a></li>\n<li><a href=\"/#/post/2022-10-18history\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-18history</a></li>\n<li><a href=\"/#/post/2022-10-14useSearchParams\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-14useSearchParams</a></li>\n<li><a href=\"/#/post/2022-10-09tailwindcss\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-09tailwindcss</a></li>\n<li><a href=\"/#/post/2022-09-26react-params\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-09-26react-params</a></li>\n<li><a href=\"/#/post/2022-09-25react范型\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-09-25react 范型</a></li>\n<li><a href=\"/#/post/2022-08-24expirestorage\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-08-24expirestorage</a></li>\n<li><a href=\"/#/post/2022-08-20ts\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-08-20ts</a></li>\n<li><a href=\"/#/post/2022-08-17es\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-08-17es</a></li>\n<li><a href=\"/#/post/2022-07-16http\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-16http</a></li>\n<li><a href=\"/#/post/2022-07-14js-arr\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-14js-arr</a></li>\n<li><a href=\"/#/post/2022-07-12cookie\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-12cookie</a></li>\n<li><a href=\"/#/post/2022-06-23axios\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-23axios</a></li>\n<li><a href=\"/#/post/2022-06-23点\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-23 点</a></li>\n<li><a href=\"/#/post/2022-06-22cos\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-22cos</a></li>\n<li><a href=\"/#/post/2022-06-22.history\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-22.history</a></li>\n<li><a href=\"/#/post/2022-06-16interview\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-16interview</a></li>\n<li><a href=\"/#/post/2022-06-10js-arr\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-10js-arr</a></li>\n<li><a href=\"/#/post/2022-06-10js-数据劫持\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-10js-数据劫持</a></li>\n<li><a href=\"/#/post/2022-06-09ts-util-type\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-09ts-util-type</a></li>\n<li><a href=\"/#/post/2022-06-05https\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-06-05https</a></li>\n<li><a href=\"/#/post/2022-05-31bug\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-31bug</a></li>\n<li><a href=\"/#/post/2022-05-28func\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-28func</a></li>\n<li><a href=\"/#/post/2022-05-26code\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-26code</a></li>\n<li><a href=\"/#/post/2022-05-23width0\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-23width0</a></li>\n<li><a href=\"/#/post/2022-05-23css\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-23css</a></li>\n<li><a href=\"/#/post/2022-05-09cors\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-09cors</a></li>\n<li><a href=\"/#/post/2022-05-08varible\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-08varible</a></li>\n<li><a href=\"/#/post/2022-05-08interview\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-08interview</a></li>\n<li><a href=\"/#/post/2022-10-16js\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-16js</a></li>\n</ol>\n<h2 id=\"也很重要\"><a href=\"#也很重要\" class=\"headerlink\" title=\"也很重要\"></a>也很重要</h2><ol>\n<li><a href=\"/#/post/2022-07-17css\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-17css</a></li>\n<li><a href=\"/#/post/2022-10-27设计模式\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-10-27 设计模式</a></li>\n<li><a href=\"/#/post/2022-05-03string\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-05-03string</a></li>\n<li><a href=\"/#/post/2022-07-04js\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-04js</a></li>\n<li><a href=\"/#/post/2022-07-16http\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-16http</a></li>\n<li><a href=\"/#/post/2023-02-17rn-native\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-17rn-native</a></li>\n<li><a href=\"/#/post/2023-02-16eventloop\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-16eventloop</a></li>\n<li><a href=\"/#/post/2023-02-20priorities\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-20priorities</a></li>\n<li><a href=\"/#/post/2023-02-05面试\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-05 面试</a></li>\n<li><a href=\"/#/post/2023-02-06不可变\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-06 不可变</a></li>\n<li><a href=\"/#/post/2023-02-11站点存储\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-11 站点存储</a></li>\n<li><a href=\"/#/post/2023-02-08GC\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-08GC</a></li>\n<li><a href=\"/#/post/2022-07-14js-arr\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-14js-arr</a></li>\n</ol>\n<h2 id=\"开放题\"><a href=\"#开放题\" class=\"headerlink\" title=\"开放题\"></a>开放题</h2><ol>\n<li><a href=\"/#/post/2023-02-18技术选型\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-18 技术选型</a></li>\n<li><a href=\"/#/post/2023-02-04工程化\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-04 工程化</a></li>\n</ol>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ol>\n<li><a href=\"/#/post/2023-02-12problem\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-12problem</a></li>\n</ol>\n<h2 id=\"新技术关注度\"><a href=\"#新技术关注度\" class=\"headerlink\" title=\"新技术关注度\"></a>新技术关注度</h2><ol>\n<li><a href=\"/#/post/2023-02-19react18\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2023-02-19react18</a></li>\n<li><a href=\"/#/post/2022-07-19rn-架构变更\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-19rn-架构变更</a></li>\n</ol>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li><a href=\"/#/post/2022-07-04js\" target=\"_blank\" >&#x2F;#&#x2F;post&#x2F;2022-07-04js</a></li>\n</ol>\n<h2 id=\"埋点-x2F-上报\"><a href=\"#埋点-x2F-上报\" class=\"headerlink\" title=\"埋点&#x2F;上报\"></a>埋点&#x2F;上报</h2><ol>\n<li><a href=\"https://blog.csdn.net/React_Community/article/details/124011226\" target=\"_blank\" >打通大前端最后一公里之前端埋点与日志系统架构设计</a></li>\n</ol>\n<h2 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h2><ol>\n<li><a href=\"https://blog.csdn.net/React_Community/article/details/123391387\" target=\"_blank\" >2022 年 微前端技术调研- 图文并茂</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/551206945\" target=\"_blank\" >将微前端做到极致-无界微前端方案</a></li>\n<li><a href=\"https://wujie-micro.github.io/doc/guide/plugin.html\" target=\"_blank\" >无界</a></li>\n</ol>\n<p>HTTPS 握手过程</p>\n<ol>\n<li>首先是 <code>tcp 的三次握手建立连接</code></li>\n<li>client 发送 <code>client-random</code> + <code>支持的加密算法集合</code></li>\n<li>server 收到信息，返回<code>选择一个加密算法</code>+ <code>server-random</code> + <code>证书</code></li>\n<li>client <code>验证证书有效性</code>，并用 <code>client-random</code>+<code>server-random</code> 生成 <code>pre-master</code> 通过, <code>服务器公钥加密 发送给 server</code></li>\n<li>server 收到 <code>premaster</code>，根据约定的加密算法对 <code>client-random</code>+<code>server-random</code>+<code>pre-master</code>（解密）生成 <code>master-secret</code>，<code>然后发送预定成功</code></li>\n<li>client 收到生成同样的 <code>master-secert</code>，<code>对称加密秘钥传输完毕</code></li>\n</ol>\n<p>作者：前端小魔女<br>链接：<a href=\"https://juejin.cn/post/7203504932995989560\">https://juejin.cn/post/7203504932995989560</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h2 id=\"浏览器验证证书\"><a href=\"#浏览器验证证书\" class=\"headerlink\" title=\"浏览器验证证书\"></a>浏览器验证证书</h2><p>在浏览器的菜单中点击“工具 or Internet 选项”，选择“内容”标签，点击“证书”按钮。当我们在访问该网站时，浏览器就会自动下载该网站的 SSL 证书，并对证书的安全性进行检查。浏览器需经过以下 5 个方面的检查后，才会在页面显示安全锁标志，正常显示部署了 SSL 证书的加密页面。</p>\n<ol>\n<li>检查 SSL 证书是否是由浏览器中“受信任的根证书颁发机构”颁发。</li>\n<li>检查 SSL 证书中的证书吊销列表。</li>\n<li>检查此 SSL 证书是否过期。</li>\n<li>检查部署此 SSL 证书的网站的域名是</li>\n</ol>\n<h2 id=\"SI-speed-index-速度指数\"><a href=\"#SI-speed-index-速度指数\" class=\"headerlink\" title=\"SI speed index 速度指数\"></a>SI speed index 速度指数</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Speed_index\" target=\"_blank\" >MDN Speed_index</a><br><img src=\"http://t-blog-images.aijs.top/img/202303091107211.webp\" /></p>\n<h2 id=\"Cumulative-Layout-Shift\"><a href=\"#Cumulative-Layout-Shift\" class=\"headerlink\" title=\"Cumulative Layout Shift\"></a>Cumulative Layout Shift</h2><p>Cumulative Layout Shift（CLS）是一种用于衡量网页稳定性的指标。它用于评估页面在加载过程中发生布局位移的情况，即在用户交互过程中，页面中的元素是否会发生意外的移动或变化，从而影响用户的体验。</p>\n<p>CLS 的计算方式是将页面中所有元素的布局位移情况进行累加，得到一个累积的数值。当用户在页面上进行交互（如点击按钮、输入表单等）时，如果页面中的元素发生位移，就会导致 CLS 值增加。<strong>较高的 CLS 值意味着页面中的元素在加载过程中频繁地发生位移，可能会导致用户点击错误的位置，或者导致用户误操作，降低用户体验。</strong></p>\n<p>为了提高页面的稳定性和降低 CLS 值，开发者可以采取以下措施：</p>\n<ol>\n<li><p><code>明确设置元素的尺寸</code>：在加载页面时，为页面中的元素明确设置尺寸（宽度和高度），避免因为内容的加载导致元素尺寸变化。</p>\n</li>\n<li><p><code>预留图片尺寸</code>：当加载图片时，为图片元素预留固定的尺寸，避免因为图片加载导致布局位移。</p>\n</li>\n<li><p><code>避免插入动态内容</code>：避免在页面加载完成后再动态插入内容，这可能会导致页面元素的位移。</p>\n</li>\n<li><p><code>使用动画过渡</code>：如果页面中有动画效果，使用 CSS 过渡或动画来平滑地进行元素的变化，避免突然的位移。</p>\n</li>\n</ol>\n<p>通过优化页面布局和动画效果，减少元素的布局位移，可以降低 CLS 值，提升页面的稳定性和用户体验。</p>\n<h2 id=\"生成脚本\"><a href=\"#生成脚本\" class=\"headerlink\" title=\"生成脚本\"></a>生成脚本</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var data &#x3D; &#39;&#39;;\nfor (let item of a) &#123;\n  _path &#x3D; item.filePath.replace(&#39;source&#x2F;_posts&#39;, &#39;&#x2F;#&#x2F;post&#39;).replace(&#39;.md&#39;, &#39;&#39;);\n  data +&#x3D; &#96;1. &lt;a href&#x3D;&quot;$&#123;_path&#125;&quot; target&#x3D;&quot;_blank&quot; &gt;$&#123;_path&#125;&lt;&#x2F;a&gt;\\n&#96;;\n&#125;\ncopy(data);</code></pre>\n","text":"认知 横向对比 纵向学习 &#x2F;#&#x2F;post&#x2F;2023-02-23 思考 第三方链接 2023 面试真题之框架篇 2023 前端面试真题之 JS 篇 2023 面试真题之 CSS 篇 2023 面试真题之浏览器篇 2023 面试真题之手写&amp;代码运...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"前端","slug":"前端","count":6,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":6,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E7%9F%A5\"><span class=\"toc-text\">认知</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">第三方链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redux-%E4%B8%8E%E5%AE%83%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">Redux 与它的中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">每个中间件使用示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#react-redux-%E6%98%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%90%97\"><span class=\"toc-text\">react-redux 是中间件吗</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redux-actions-%E4%B8%8E-redux-thunk\"><span class=\"toc-text\">redux-actions 与 redux-thunk</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E6%80%8E%E4%B9%88%E8%A7%89%E5%BE%97-redux-actions-%E5%B9%B6%E6%B2%A1%E6%9C%89%E7%AE%80%E5%8C%96%EF%BC%8C%E5%8F%AA%E6%98%AF%E4%BB%A5%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">我怎么觉得 redux-actions 并没有简化，只是以另一种形式存在</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E8%A7%89%E5%BE%97%E4%B9%9F%E6%B2%A1%E6%9C%89%E6%9B%B4%E4%BE%BF%E6%8D%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%88%9B%E5%BB%BA-action-%E5%92%8C-reducer\"><span class=\"toc-text\">我觉得也没有更便捷的方式来创建 action 和 reducer</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">性能优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">非常重要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">冷门知识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">常见面试题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%9F%E5%BE%88%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">也很重要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%94%BE%E9%A2%98\"><span class=\"toc-text\">开放题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E6%8A%80%E6%9C%AF%E5%85%B3%E6%B3%A8%E5%BA%A6\"><span class=\"toc-text\">新技术关注度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%8B%E7%82%B9-x2F-%E4%B8%8A%E6%8A%A5\"><span class=\"toc-text\">埋点&#x2F;上报</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">微前端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">浏览器验证证书</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SI-speed-index-%E9%80%9F%E5%BA%A6%E6%8C%87%E6%95%B0\"><span class=\"toc-text\">SI speed index 速度指数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Cumulative-Layout-Shift\"><span class=\"toc-text\">Cumulative Layout Shift</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">生成脚本</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"shp 转化成svg","uid":"678ea4635fbf5da941ca04bd2df09797","slug":"2023-08-05shp","date":"2023-08-05T11:21:49.000Z","updated":"2023-08-05T11:33:49.629Z","comments":true,"path":"api/articles/2023-08-05shp.json","keywords":null,"cover":null,"text":"绘制城市环路图实现过程 shp 数据 shp 转化成 svg mapshaper sketch 调整 svg 大小 d3js 绘制 svg 增加交互 参考链接基于 shp 完成 echarts map 的显示 ","link":"","photos":[],"count_time":{"symbolsCount":106,"symbolsTime":"1 mins."},"categories":[{"name":"可视化","slug":"可视化","count":1,"path":"api/categories/可视化.json"}],"tags":[{"name":"可视化","slug":"可视化","count":1,"path":"api/tags/可视化.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}