{"title":"前端基础-性能优化2","uid":"0ba6682e606bc81869a1a00491028270","slug":"2022-07-27性能优化","date":"2022-07-27T05:55:15.000Z","updated":"2022-07-29T14:29:47.249Z","comments":true,"path":"api/articles/2022-07-27性能优化.json","keywords":null,"cover":null,"content":"<h2 id=\"为什么速度很重要\"><a href=\"#为什么速度很重要\" class=\"headerlink\" title=\"为什么速度很重要\"></a>为什么速度很重要</h2><ul>\n<li>用户要求变高，爱挑毛病</li>\n<li>性能是留住用户的关键</li>\n<li>性能意味着提高转化率</li>\n<li>性能关乎用户体验</li>\n<li>性能影响人们</li>\n</ul>\n<details class=\"custom-details\">\n<summary>查看更多</summary>\n<p>消费者越来越依赖移动设备来访问数字内容和服务，如果您查看自己站点的分析，可能会看到这个故事正在您自己的数据中上演。消费者也比以往任何时候都要求更高，<strong>当他们权衡您网站上的体验时，他们不仅仅将您与您的竞争对手进行比较，他们还会根据他们每天使用的一流服务对您进行评级</strong>。</p>\n<p><strong>性能是留住用户的关键</strong></p>\n<p>性能直接影响公司的命运. 性能在任何在线企业的成功中都起着至关重要的作用。高性能网站比低性能网站更能吸引和留住用户。</p>\n<p>研究还表明，性能不佳会对业务目标产生负面影响。例如，</p>\n<ul>\n<li><code>Pinterest</code> 将感知等待时间减少了 40%，这将搜索引擎流量和注册量增加了 15% 。</li>\n<li><code>COOK</code> 将页面平均加载时间减少了 850 毫秒，从而将转化次数提高了 7%，将跳出率降低了 7%，并将每个会话的页面增加了 10% 。</li>\n<li><code>BBC</code> 发现他们的网站加载时间每增加一秒，他们就会失去 10% 的用户。</li>\n</ul>\n<p><strong>性能意味着提高转化率</strong></p>\n<p>留住用户对于提高转化率至关重要。慢速网站对收入有负面影响，而快速网站显示可以提高转化率。</p>\n<p>例如：</p>\n<ul>\n<li><p>对于 <code>Mobify</code> 而言，主页加载速度每提高 100 毫秒，基于会话的转化率就会增加 1.11%，平均年收入增加近 380,000 美元。此外，结账页面加载速度每提高 100 毫秒，基于会话的转化率就会增加 1.55%，从而使年均收入增加近 530,000 美元。</p>\n</li>\n<li><p>当 <code>AutoAnything</code> 将页面加载时间减少一半时，他们的销售额增长了 12% 到 13%。</p>\n</li>\n<li><p>零售商 <code>Furniture Village </code>审核了他们的网站速度，并制定了解决他们发现的问题的计划，导致页面加载时间降低了 20%，转化率提高了 10%。</p>\n</li>\n</ul>\n<p><strong>性能关乎用户体验</strong></p>\n<p>性能是良好用户体验的基础。当网站发布大量代码时，浏览器必须使用用户数以百万计的数据计算才能下载代码。移动设备的 CPU 能力和内存有限。它们经常被我们认为所谓的“少量”未优化的代码所淹没。这会导致性能不佳，从而导致无响应。了解我们人类的行为后就会知道，用户只有对低性能的应用程序忍无可忍时才会选择放弃。</p>\n<p><strong>性能影响人们</strong></p>\n<p>性能不佳的网站和应用程序也会给使用它们的人们带来实际成本</p>\n<p>随着移动用户继续在全球互联网用户中占据更大比例，请务必记住，其中许多用户通过移动 LTE、4G、3G 甚至 2G 网络访问互联网。正如 Calibre 的 Ben Schwarz 在关于现实世界性能的研究中指出的那样，预付费数据计划的成本正在下降，这反过来又使得过去无法负担的地方开始有能力访问互联网。移动设备和互联网接入不再是奢侈品。它们是日益互联的世界中导航和发挥作用所必需的常用工具。</p>\n<p>至少自 2011 年以来，总页面大小一直在稳步增加，而且这种趋势似乎还在继续。随着典型页面发送更多数据，用户必须更频繁地补充他们的计量数据计划，这会花费他们的资金。</p>\n<p>除了为用户节省资金外，快速和轻量级的用户体验对于处于危机中的用户也至关重要。医院、诊所和危机中心等公共资源拥有在线资源，可为用户提供他们在危机期间所需的重要和具体信息。虽然设计对于在压力时刻有效地呈现重要信息至关重要，但不能低估快速传递这些信息的重要性。这是我们工作的一部分。</p>\n</details>\n<h2 id=\"性能优化基础\"><a href=\"#性能优化基础\" class=\"headerlink\" title=\"性能优化基础\"></a>性能优化基础</h2><p>最佳实践（个人觉得按照<code>performance</code> API 来聊性能优化更贴切）</p>\n<ul>\n<li>从学习浏览器的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path\" target=\"_blank\" ><code>关键渲染路径(CRP- Critical rendering path)</code></a> 开始。了解这些会帮助你通晓如何提升浏览器的性能。</li>\n<li>使用 <code>资源提示（resource hints）</code> 例如 （<strong>预连接、预获取、预加载</strong>） <code>rel=preconnect</code>, <code>rel=dns-prefetch</code>, <code>rel=prefetch</code>, and <code>rel=preload</code></li>\n<li>压缩 <code>Js 代码</code>至最小。只为当前页面加载需要使用到的 js 代码</li>\n<li><code>CSS 性能因素</code></li>\n<li>在你的服务器（或者 CDN）上使用 <code>HTTP/2</code> 协议</li>\n<li>使用 <code>CDN</code> 托管静态资源，这样可以显著减少加载时间</li>\n<li>使用 <code>gzip</code>, <code>Brotli</code> 或者 <code>Zopfli</code> 压缩您的资源</li>\n<li>图片优化（如果可以，尽可能使用 css 动画或者 svg）</li>\n<li>在超出应用视口范围的部分使用懒加载，如果你这么做了，为 SEO 制定一个后备计划（例如为 bot traffic 渲染整个页面）</li>\n</ul>\n<h2 id=\"CSS-性能优化\"><a href=\"#CSS-性能优化\" class=\"headerlink\" title=\"CSS 性能优化\"></a>CSS 性能优化</h2><ul>\n<li><p>阻塞渲染优化</p>\n</li>\n<li><p>在 GPU 上呈现动画</p>\n</li>\n<li><p>will-change 属性</p>\n</li>\n<li><p>font-display 属性</p>\n</li>\n<li><p>contain 属性</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>页面在样式没有渲染完毕的情况下被绘制，在样式渲染完毕后又被刷新，这大概是很糟糕的用户体验 <code>FOUC - Flash Of Unstyled Content 文档样式闪烁</code>。因此，除非浏览器知道当前不需要 该 CSS，否则 该 CSS 将阻止渲染。浏览器只会在下载 CSS 和构建 CSSOM 之后绘制页面。<strong>浏览器遵循特定的渲染路径</strong>：绘制 paint 仅在布局 layout 之后进行，布局 layout 则在创建渲染树 render tree 之后进行，创建渲染树则需要在 DOM 和 CSSOM 树解析完成后进行。</p></blockquote>\n<p><strong>浏览器遵循特定的渲染路径</strong></p>\n<ol>\n<li>下载 CSS</li>\n<li>DOM 和 CSSOM 树解析完成</li>\n<li>创建渲染树 render tree</li>\n<li>布局 layout</li>\n<li>绘制 paint</li>\n</ol>\n<p><strong>优化方向</strong></p>\n<p>为了优化 CSSOM 的构造，<code>请删除不必要的样式</code>，<code>对 CSS 进行最小化，压缩和缓存</code>，<code>并将页面加载时不需要的 CSS 拆分为其他文件，以减少 CSS 渲染阻塞</code>。</p>\n<h3 id=\"阻塞渲染优化\"><a href=\"#阻塞渲染优化\" class=\"headerlink\" title=\"阻塞渲染优化\"></a>阻塞渲染优化</h3><p>CSS 可以使用媒体查询将样式应用在特定条件下。媒体查询对于响应式 Web 设计非常重要，可以帮助我们优化关键渲染路径。浏览器会阻塞渲染，直到它解析完全部的样式，但不会阻塞渲染它认为不会使用的样式，例如打印样式表。通过基于媒体查询将 CSS 分成多个文件，可以防止在下载未使用的 CSS 期间阻止渲染。为了创建非阻塞 CSS 链接，将不会立即使用的样式（例如打印样式）移动到单独的文件中，将 <link> 添加到 HTML 中，并添加媒体查询，在这种情况下说明它是打印样式表。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;styles.css&quot; &#x2F;&gt;\n&lt;!-- blocking --&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;print.css&quot; media&#x3D;&quot;print&quot; &#x2F;&gt;\n&lt;!-- not blocking --&gt;\n&lt;link\n  rel&#x3D;&quot;stylesheet&quot;\n  href&#x3D;&quot;mobile.css&quot;\n  media&#x3D;&quot;screen and (max-width: 480px)&quot;\n&#x2F;&gt;\n&lt;!-- not blocking on large screens --&gt;</code></pre>\n\n<p>默认情况下，浏览器假设每个指定的样式表都是阻塞渲染的。通过添加 media 属性附加媒体查询，告诉浏览器何时应用样式表。<strong>当浏览器看到一个它知道只会用于特定场景的样式表时，它仍会下载样式，但不会阻塞渲染</strong>。通过将 CSS 分成多个文件，主要的 阻塞渲染 文件（本例中为 styles.css）的大小变得更小，从而减少了渲染被阻塞的时间。</p>\n<h3 id=\"在-GPU-上呈现动画\"><a href=\"#在-GPU-上呈现动画\" class=\"headerlink\" title=\"在 GPU 上呈现动画\"></a>在 GPU 上呈现动画</h3><p>浏览器针对处理 CSS 动画和不会很好地触发重排（因此也导致重新绘制）的动画属性进行了优化。为了提高性能，可以将被动画化的节点从主线程移到 GPU 上。将导致合成的属性包括 <code>3D transforms (transform: translateZ(), rotate3d()，etc.)</code>，<code>animating transform</code> 和 <code>opacity</code>,<code> position: fixed</code>，<code>will-change</code>，和 <code>filter</code>。一些元素，例如 <code>&lt;video&gt;</code>, <code>&lt;canvas&gt;</code> 和 <code>&lt;iframe&gt;</code>，<span style=\"color: red\">也位于各自的图层上</span>。 将元素提升为图层（也称为合成）时，动画转换属性将在 GPU 中完成，从而改善性能，尤其是在移动设备上。</p>\n<p><strong>额～，怎么看像与“层叠上下文”有关呢， 7 阶层叠 ？</strong> <a href=\"http://v.aijs.top/post/2022-07-17css\" target=\"_blank\" >见</a></p>\n<h3 id=\"will-change-属性\"><a href=\"#will-change-属性\" class=\"headerlink\" title=\"will-change 属性\"></a>will-change 属性</h3><p>CSS will-change 属性告诉浏览器元素的哪些属性需要修改，使浏览器能够在元素实际更改之前设置优化，通过在实际更改前执行耗时的工作以提升性能。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">will-change: opacity, transform;</code></pre>\n\n<p>与“层叠上下文”有关</p>\n<h3 id=\"font-display-属性\"><a href=\"#font-display-属性\" class=\"headerlink\" title=\"font-display 属性\"></a>font-display 属性</h3><p>根据 <code>@font-face</code> 规则，<code>font-display</code> 属性定义了浏览器如何加载和显示字体文件，<strong>允许文本在字体加载或加载失败时显示回退字体</strong>。可以通过依靠折中无样式文本闪现使文本可见替代白屏来提高性能。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@font-face &#123;\n  font-family: someFont;\n  src: url(&#x2F;path&#x2F;to&#x2F;fonts&#x2F;someFont.woff) format(&quot;woff&quot;);\n  font-weight: 400;\n  font-style: normal;\n  font-display: fallback; &#x2F;&#x2F; 回滚\n&#125;</code></pre>\n\n<h3 id=\"contain-属性\"><a href=\"#contain-属性\" class=\"headerlink\" title=\"contain 属性\"></a>contain 属性</h3><p>CSS 的 contain 属性允许作者指示<code>元素及其内容尽可能独立于文档树的其余部分</code>。这允许浏览器针对 DOM 的有限区域而不是整个页面重新计算布局，样式，绘画，大小或它们的任意组合。</p>\n<p><strong>伪元素</strong></p>\n<h2 id=\"性能衡量\"><a href=\"#性能衡量\" class=\"headerlink\" title=\"性能衡量\"></a>性能衡量</h2><p><a href=\"http://v.aijs.top/post/2022-05-12performance\" target=\"_blank\" >前端基础-性能优化1</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Performance/CSS\" target=\"_blank\" >火狐家的 MDN CSS 性能优化</a></p>\n<p><a href=\"https://web.dev/i18n/zh/why-speed-matters/\" target=\"_blank\" >google 家的 web.dev why-speed-matters</a></p>\n<p><a href=\"https://www.cnblogs.com/zhimao/p/15068536.html\" target=\"_blank\" >(十三) 性能优化 CRP </a></p>\n<p><a href=\"https://blog.csdn.net/gongzhuxiaoxin/article/details/52454143\" target=\"_blank\" >什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？</a></p>\n","text":"为什么速度很重要 用户要求变高，爱挑毛病 性能是留住用户的关键 性能意味着提高转化率 性能关乎用户体验 性能影响人们 查看更多 消费者越来越依赖移动设备来访问数字内容和服务，如果您查看自己站点的分析，可能会看到这个故事正在您自己的数据中上演。消费者也比以往任何时候都要求更高，当他...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":26,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":28,"path":"api/tags/前端基础.json"},{"name":"performance","slug":"performance","count":2,"path":"api/tags/performance.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%9F%E5%BA%A6%E5%BE%88%E9%87%8D%E8%A6%81\"><span class=\"toc-text\">为什么速度很重要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">性能优化基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">CSS 性能优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BB%E5%A1%9E%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">阻塞渲染优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-GPU-%E4%B8%8A%E5%91%88%E7%8E%B0%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">在 GPU 上呈现动画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#will-change-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">will-change 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#font-display-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">font-display 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#contain-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">contain 属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E8%A1%A1%E9%87%8F\"><span class=\"toc-text\">性能衡量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端基础-js fun","uid":"a322cf7284390a12bce185742de4b746","slug":"2022-07-28js-fun","date":"2022-07-28T03:13:15.000Z","updated":"2022-08-01T12:46:55.449Z","comments":true,"path":"api/articles/2022-07-28js-fun.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202208011605439.webp","text":"思维导图 arguments arguments 对象不是一个 Array 。它类似于 Array，但除了 length 属性和索引元素之外没有任何 Array 属性 使用数组方法&#x2F;&#x2F; Array.prototype.slice.call function m...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":26,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":28,"path":"api/tags/前端基础.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-http 连接管理","uid":"28bb441cd50232946d7be5a33559cd7e","slug":"2022-07-26http-connect","date":"2022-07-26T13:53:35.000Z","updated":"2022-07-27T13:24:09.240Z","comments":true,"path":"api/articles/2022-07-26http-connect.json","keywords":null,"cover":[],"text":"HTTP&#x2F;1.x 的连接管理 短连接 HTTP&#x2F;1.0 默认是短连接(冷连接),每一个 HTTP 请求都由它自己独立的连接完成, TCP 协议握手耗费时间,TCP 可以保持更多的热连接来适应负载 查看更多 HTTP 最早期的模型，也是 HTTP&#x2F;1....","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":26,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":28,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":17,"path":"api/tags/面试.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}