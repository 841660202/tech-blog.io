{"title":"Web存储","uid":"3daa6efee784365da039127060479457","slug":"2023-02-15web_storage","date":"2023-02-15T07:12:05.000Z","updated":"2023-02-20T21:20:56.495Z","comments":true,"path":"api/articles/2023-02-15web_storage.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202302151705380.webp","content":"<img src=\"http://t-blog-images.aijs.top/img/202302151705380.webp\" style=\"width:600px;max-width:100%\" />\n\n<h2 id=\"Web-存储\"><a href=\"#Web-存储\" class=\"headerlink\" title=\"Web 存储\"></a>Web 存储</h2><ol>\n<li><code>SessionStorage</code> 特定于选项卡，其作用范围涵盖选项卡的整个生存期。它对于存储 IndexedDB 键等少量会话特定信息可能很有用。<ol>\n<li>此机制是同步的，会阻塞主线程，因此应谨慎使用。</li>\n<li>其大小限制约为 5MB，并且只能包含字符串。</li>\n<li>由于它特定于选项卡，因此无法从 web worker 或 service worker 进行访问。</li>\n</ol>\n</li>\n<li><code>LocalStorage</code><ol>\n<li>是同步的，会阻塞主线程，因此应避免使用。</li>\n<li>其大小限制约为 5MB，并且只能包含字符串。</li>\n<li>无法从 web worker 或 service worker 访问 LocalStorage。</li>\n</ol>\n</li>\n<li><code>Cookie</code>(重点聊)<ol>\n<li>有其用途，但不应该用于存储。</li>\n<li>Cookie 随每个 HTTP 请求一起发送，因此只能存储少量数据，数据一多就会显著增加每个 Web 请求的大小。</li>\n<li>Cookie 是同步的，不能从 Web worker 进行访问。</li>\n<li>与 LocalStorage 和 SessionStorage 一样，cookie 仅限于字符串。</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th>大小</th>\n<th>使用场景</th>\n<th>设置</th>\n<th>同步</th>\n<th>worker 进程</th>\n<th>是否跨域</th>\n<th>生命周期</th>\n<th>层级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SessionStorage</td>\n<td>5MB</td>\n<td>选项卡</td>\n<td>前端</td>\n<td>是</td>\n<td>不可访问</td>\n<td>否</td>\n<td>选项卡生存期间</td>\n<td>web 级</td>\n</tr>\n<tr>\n<td align=\"left\">LocalStorage</td>\n<td>5MB</td>\n<td>前端</td>\n<td>前端</td>\n<td>是</td>\n<td>不可访问</td>\n<td>否</td>\n<td>不清理，就存在</td>\n<td>web 级</td>\n</tr>\n<tr>\n<td align=\"left\">Cookie</td>\n<td>4KB</td>\n<td>个性化、跟踪、 前后端</td>\n<td>前端、服务端</td>\n<td>是</td>\n<td>不可访问</td>\n<td>允许跨域(配置 Domain 的情况)</td>\n<td>可会话、可持久</td>\n<td>HTTP 级</td>\n</tr>\n<tr>\n<td align=\"left\">IndexDB</td>\n<td>很大</td>\n<td>前端</td>\n<td>前端</td>\n<td>异步</td>\n<td>可访问</td>\n<td>不允许跨域</td>\n<td>可持久</td>\n<td>web 级</td>\n</tr>\n</tbody></table>\n<p><a href=\"/#/post/2023-02-11站点存储\" target=\"_blank\" >见：2023-02-11 站点存储</a></p>\n<h2 id=\"如何检查有多少可用存储？\"><a href=\"#如何检查有多少可用存储？\" class=\"headerlink\" title=\"如何检查有多少可用存储？\"></a>如何检查有多少可用存储？</h2><ol>\n<li>在许多浏览器中，您可以使用 <code>StorageManager</code> API 来确定来源的可用存储量及其目前使用的存储量。</li>\n<li>它<code>会报告 IndexedDB 和缓存 API 使用的总字节数</code>，还可以计算近似的可用剩余存储空间。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">if (navigator.storage &amp;&amp; navigator.storage.estimate) &#123;\n  &#x2F;&#x2F; https:&#x2F;&#x2F;fanyi.baidu.com&#x2F;?aldtype&#x3D;16047#en&#x2F;zh&#x2F;quota\n  const quota &#x3D; await navigator.storage.estimate(); &#x2F;&#x2F; quota：配额\n  &#x2F;&#x2F; quota.usage -&gt; 已用字节数。\n  &#x2F;&#x2F; quota.quota -&gt; 最大可用字节数。\n  const percentageUsed &#x3D; (quota.usage &#x2F; quota.quota) * 100;\n  console.log(&#96;您已使用可用存储的 $&#123;percentageUsed&#125;%。&#96;);\n  const remaining &#x3D; quota.quota - quota.usage;\n  console.log(&#96;您最多可以再写入 $&#123;remaining&#125; 个字节。&#96;);\n&#125;</code></pre>\n\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" >HTTP Cookie</a></p>\n<h2 id=\"cookie-主要用\"><a href=\"#cookie-主要用\" class=\"headerlink\" title=\"cookie 主要用\"></a>cookie 主要用</h2><ol>\n<li><code>会话状态管理</code> (如用户登录状态、购物车、游戏分数或其它需要记录的信息)</li>\n<li><code>个性化设置</code>（如用户自定义设置、主题和其他设置） 监听变化 <code>cookieStore.addEventListener(&quot;change&quot;, (event) =&gt; &#123;</code></li>\n<li><code>行为跟踪</code>（如跟踪分析用户行为等）</li>\n</ol>\n<h2 id=\"创建-Cookie\"><a href=\"#创建-Cookie\" class=\"headerlink\" title=\"创建 Cookie\"></a>创建 Cookie</h2><ol>\n<li>服务器收到 HTTP 请求后，服务器可以在响应标头里面添加一个或多个 Set-Cookie 选项。</li>\n<li>浏览器收到响应后通常会保存下 Cookie，并将其放在 HTTP Cookie 标头内，向同一服务器发出请求时一起发送</li>\n</ol>\n<h2 id=\"定义-Cookie-的生命周期\"><a href=\"#定义-Cookie-的生命周期\" class=\"headerlink\" title=\"定义 Cookie 的生命周期\"></a>定义 Cookie 的生命周期</h2><p>Cookie 的生命周期可以通过两种方式定义：</p>\n<ol>\n<li>会话期 Cookie 会在当前的会话结束之后删除。浏览器定义了“当前会话”结束的时间，一些浏览器重启时会使用会话恢复。这可能导致会话 cookie 无限延长。</li>\n<li>持久性 Cookie 在<code>过期时间（Expires）指定的日期</code>或<code>有效期（Max-Age）</code>指定的一段时间后被删除。</li>\n</ol>\n<h2 id=\"cookie-安全\"><a href=\"#cookie-安全\" class=\"headerlink\" title=\"cookie 安全\"></a>cookie 安全</h2><h3 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h3><ol>\n<li><code>XSS攻击</code></li>\n<li><code>固定会话攻击</code> 措施： 每当用户进行身份验证时，它都应重新生成并重新发送会话 Cookie，甚至是已经存在的会话 Cookie</li>\n<li><code>会话劫持</code></li>\n<li><code>中间人攻击</code></li>\n</ol>\n<h3 id=\"安全措施\"><a href=\"#安全措施\" class=\"headerlink\" title=\"安全措施\"></a>安全措施</h3><p>有两种方法可以确保 Cookie 被安全发送，并且不会被意外的参与者或脚本访问：<code>Secure 属性</code>和 <code>HttpOnly 属性</code></p>\n<ol>\n<li><p><code>限制 cookie 访问 Secure 属性</code>：</p>\n<ol>\n<li>使用上有限制： <code>本地主机 和 https</code> 可用</li>\n<li>Secure 不会阻止对 cookie 中敏感信息的访问。</li>\n<li>例如，有权访问客户端硬盘（或，如果未设置 HttpOnly 属性，则为 JavaScript）的人可以读取和修改它</li>\n</ol>\n</li>\n<li><p><code>限制 cookie 访问, HttpOnly 属性</code></p>\n<ol>\n<li>此类 Cookie 仅作用于服务器, <code>JavaScript Document.cookie API</code> 无法访问带有 HttpOnly 属性的 cookie。</li>\n<li>此预防措施有助于缓解跨站点脚本（XSS） (en-US)攻击。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Set-Cookie: id&#x3D;a3fWa; Expires&#x3D;Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre>\n</li>\n<li><p><code>双 cookie 验证</code> 如：django 表单</p>\n</li>\n<li><p><code>token</code></p>\n</li>\n</ol>\n<h2 id=\"定义-Cookie-发送的位置\"><a href=\"#定义-Cookie-发送的位置\" class=\"headerlink\" title=\"定义 Cookie 发送的位置\"></a>定义 Cookie 发送的位置</h2><p><code>Domain</code> 和 <code>Path</code> 标识定义了 <code>Cookie 的作用域</code>：即允许 Cookie 应该发送给哪些 URL</p>\n<h3 id=\"Domian\"><a href=\"#Domian\" class=\"headerlink\" title=\"Domian\"></a>Domian</h3><ol>\n<li><code>Domain 指定了哪些主机可以接受 Cookie</code>。</li>\n<li><code>如果不指定，该属性默认为同一 host 设置 cookie，不包含子域名</code>。</li>\n<li><code>如果指定了 Domain，则一般包含子域名</code>。</li>\n</ol>\n<h3 id=\"Path\"><a href=\"#Path\" class=\"headerlink\" title=\"Path\"></a>Path</h3><ol>\n<li>Path 属性指定了一个 URL 路径，该 URL 路径必须存在于请求的 URL 中，以便发送 Cookie 标头。</li>\n<li>以字符 %x2F (“&#x2F;”) 作为路径分隔符，并且子路径也会被匹配</li>\n</ol>\n<h3 id=\"SameSite\"><a href=\"#SameSite\" class=\"headerlink\" title=\"SameSite\"></a>SameSite</h3><ol>\n<li>SameSite 属性<code>允许服务器指定是否/何时通过跨站点请求发送</code>（其中站点由注册的域和方案定义：http 或 https）。</li>\n<li>这提供了一些针<code>对跨站点请求伪造攻击（CSRF）</code>的保护。它采用三个可能的值：<ol>\n<li><code>Strict</code></li>\n<li><code>Lax</code> 宽松</li>\n<li><code>None</code></li>\n</ol>\n</li>\n</ol>\n<p><strong>三个值</strong></p>\n<ol>\n<li><code>Strict</code>，cookie 仅发送到它来源的站点。</li>\n<li><code>Lax</code> 与 Strict 相似，只是在用户导航到 cookie 的源站点时发送 cookie。例如，通过跟踪来自外部站点的链接。</li>\n<li><code>None</code> 指定浏览器会<code>在同站请求和跨站请求下继续发送 cookie</code>，<code>要求在安全的上下文中（即：如果 SameSite=None，且还必须设置 Secure 属性, 如果没有设置 SameSite 属性，则将 cookie 视为 Lax）</code></li>\n<li><code>协议不同</code>：cookie 使用不同的方案（http: 或 https:）发送来自同一域的 cookie，则不再视为来自同一站点</li>\n</ol>\n<h3 id=\"与-SameSite-相关的站点知识\"><a href=\"#与-SameSite-相关的站点知识\" class=\"headerlink\" title=\"与 SameSite 相关的站点知识\"></a>与 SameSite 相关的站点知识</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Site\" target=\"_blank\" >站点（Site）</a></p>\n<p><strong>同一个站点结论</strong>：<code>与协议有关、前部分+可注册域有关、端口无关</code></p>\n<ol>\n<li>站点由域名的<code>可注册域部分</code>确定。可注册域<code>由公共后缀列表中的一个条目</code>加上<code>它之前的域名部分</code>组成</li>\n<li>在区分不同的站点时，也会考虑站点的协议（scheme）。这将使 <a href=\"http://vpl.ca/\">http://vpl.ca</a> 和 <a href=\"https://vpl.ca/\">https://vpl.ca</a> 成为不同的站点</li>\n</ol>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><ol>\n<li><p>同一个站点，因为 mozilla.org 的可注册域是相同的：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/\">https://developer.mozilla.org/zh-CN/docs/</a></li>\n<li><a href=\"https://support.mozilla.org/zh-CN/\">https://support.mozilla.org/zh-CN/</a></li>\n</ol>\n</li>\n<li><p>这些是同一个站点，因为端口不相关：</p>\n<ol>\n<li><a href=\"https://example.com:8080/\">https://example.com:8080</a></li>\n<li><a href=\"https://example.com/\">https://example.com</a></li>\n</ol>\n</li>\n<li><p>这些不是同一个站点，因为两个 URL 的可注册域不同：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/\">https://developer.mozilla.org/zh-CN/docs/</a></li>\n<li><a href=\"https://example.com/\">https://example.com</a></li>\n</ol>\n</li>\n<li><p>如果考虑协议（scheme），这些可能是相同的站点或不同的站点：</p>\n<ol>\n<li><a href=\"http://example.com/\">http://example.com</a></li>\n<li><a href=\"https://example.com/\">https://example.com</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"深度防御\"><a href=\"#深度防御\" class=\"headerlink\" title=\"深度防御\"></a>深度防御</h2><ol>\n<li><code>__Host-</code><br>如果 cookie 名称具有此前缀，<code>则仅当它也用 Secure 属性标记、从安全来源发送、不包括 Domain 属性，并将 Path 属性设置为 / 时</code>，它才在 Set-Cookie 标头中接受。这样，这些 cookie 可以被视为“domain-locked”。</li>\n<li><code>__Secure-</code><br>如果 cookie 名称具有此前缀，<code>则仅当它也用 Secure 属性标记，是从安全来源发送的</code>，它才在 Set-Cookie 标头中接受。该前缀限制要弱于 <code>__Host-</code> 前缀</li>\n</ol>\n<p><strong>满足一定条件，才在 Set-Cookie 标头中接受，可以理解为是种规则约束</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">cookie 名称</th>\n<th align=\"left\">Secure 属性标记</th>\n<th>从安全来源发送</th>\n<th>Domain 属性</th>\n<th>Path 属性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>__Host-&#123;name&#125;</code></td>\n<td align=\"left\">需要</td>\n<td>需要</td>\n<td>不包括</td>\n<td>设置为 &#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\"><code>__Secure-&#123;name&#125;</code></td>\n<td align=\"left\">需要</td>\n<td>需要</td>\n<td>可有可无</td>\n<td>可有可无</td>\n</tr>\n</tbody></table>\n<h2 id=\"HttpOnly-标记\"><a href=\"#HttpOnly-标记\" class=\"headerlink\" title=\"HttpOnly 标记\"></a>HttpOnly 标记</h2><ol>\n<li>如果未设置 HttpOnly 标记，你也可以从 JavaScript 访问现有的 Cookie。</li>\n<li>通过 JavaScript 创建的 Cookie 不能包含 HttpOnly 标志。</li>\n<li>JavaScript 可以通过跨站脚本攻击（XSS）的方式来窃取 Cookie。</li>\n<li>当机器处于不安全环境时，切记不能通过 HTTP Cookie 存储、传输敏感信息。</li>\n</ol>\n<h3 id=\"Cookie-相关规定\"><a href=\"#Cookie-相关规定\" class=\"headerlink\" title=\"Cookie 相关规定\"></a>Cookie 相关规定</h3><p>涉及使用 Cookie 的法律或法规包括：</p>\n<ol>\n<li>欧盟通用数据隐私法规（GDPR）</li>\n<li>欧盟的电子隐私权指令</li>\n<li>加州消费者隐私法</li>\n<li>这些规定具有全球影响力。它们适用于这些司法管辖区的用户访问的万维网上的任何站点（欧盟和加利福尼亚，但请注意，加利福尼亚州的法律仅适用于总收入超过 2500 万美元的实体）。</li>\n</ol>\n<p>这些法规包括以下要求：</p>\n<ol>\n<li>向用户表明你的站点使用 cookie。</li>\n<li>允许用户选择不接收某些或所有 cookie。</li>\n<li>允许用户在不接收 Cookie 的情况下使用大部分服务。</li>\n</ol>\n<h3 id=\"结合起来看\"><a href=\"#结合起来看\" class=\"headerlink\" title=\"结合起来看\"></a>结合起来看</h3><p>从性能 、<a href=\"/#/post/2023-02-15web_workers\" target=\"_blank\" >2023-02-15web_workers</a><br>、和 <a href=\"/#/post/2023-02-11站点存储\" target=\"_blank\" >2023-02-11 站点存储</a> 来看</p>\n<p>对于 longTask 耗性能的计算要放在 web workers 中进行处理，数据可能需要放到 indexDB 进行缓存</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" >HTTP Cookies</a></p>\n<p><a href=\"https://web.dev/i18n/zh/storage-for-the-web/\" target=\"_blank\" >Web 存储</a></p>\n<p><a href=\"https://blog.csdn.net/LeviDing/article/details/123540610\" target=\"_blank\" >监听 cookie</a></p>\n","text":" Web 存储 SessionStorage 特定于选项卡，其作用范围涵盖选项卡的整个生存期。它对于存储 IndexedDB 键等少量会话特定信息可能很有用。 此机制是同步的，会阻塞主线程，因此应谨慎使用。 其大小限制约为 5MB，并且只能包含字符串。 由于它特定于选项卡，因此无...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">Web 存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E6%9C%89%E5%A4%9A%E5%B0%91%E5%8F%AF%E7%94%A8%E5%AD%98%E5%82%A8%EF%BC%9F\"><span class=\"toc-text\">如何检查有多少可用存储？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cookie\"><span class=\"toc-text\">cookie</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cookie-%E4%B8%BB%E8%A6%81%E7%94%A8\"><span class=\"toc-text\">cookie 主要用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-Cookie\"><span class=\"toc-text\">创建 Cookie</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-Cookie-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">定义 Cookie 的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cookie-%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">cookie 安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%BB%E5%87%BB%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">攻击类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">安全措施</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-Cookie-%E5%8F%91%E9%80%81%E7%9A%84%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">定义 Cookie 发送的位置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Domian\"><span class=\"toc-text\">Domian</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Path\"><span class=\"toc-text\">Path</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SameSite\"><span class=\"toc-text\">SameSite</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-SameSite-%E7%9B%B8%E5%85%B3%E7%9A%84%E7%AB%99%E7%82%B9%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">与 SameSite 相关的站点知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E9%98%B2%E5%BE%A1\"><span class=\"toc-text\">深度防御</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HttpOnly-%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">HttpOnly 标记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cookie-%E7%9B%B8%E5%85%B3%E8%A7%84%E5%AE%9A\"><span class=\"toc-text\">Cookie 相关规定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%90%88%E8%B5%B7%E6%9D%A5%E7%9C%8B\"><span class=\"toc-text\">结合起来看</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浏览器与Node的事件循环(Event Loop)有何区别?","uid":"88793370bf9630dab6991762b90e11a7","slug":"2023-02-16eventloop","date":"2023-02-16T14:07:52.000Z","updated":"2023-05-15T13:17:32.977Z","comments":true,"path":"api/articles/2023-02-16eventloop.json","keywords":null,"cover":[],"text":"microtask 任务队列的执行时机不同 浏览器端，microtask 在事件循环的 macrotask 执行完之后执行 Node 端，microtask 在事件循环的各个阶段之间执行 参考链接浏览器与 Node 的事件循环(Event Loop)有何区别? ","link":"","photos":[],"count_time":{"symbolsCount":134,"symbolsTime":"1 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"性能优化-Web Workers","uid":"606d0004659da737e4ce8d55e7a861d1","slug":"2023-02-15web_workers","date":"2023-02-15T01:44:35.000Z","updated":"2023-02-20T21:20:56.496Z","comments":true,"path":"api/articles/2023-02-15web_workers.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/202302151701564.webp","text":"Web workers 是什么？ 为 Web 内容在后台线程中运行脚本提供了一种简单的方法 线程可以执行任务而不干扰用户界面 运行原理一个 worker 是使用一个构造函数创建的一个对象 (e.g. Worker()) 运行一个命名的 JavaScript 文件 这个文件包含将在...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/categories/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/tags/性能优化.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}