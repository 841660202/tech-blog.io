{"title":"react useState 错误使用","uid":"e7a12532b015cb78e0adb01f9bc03b9e","slug":"2022-05-31bug","date":"2022-05-31T02:30:47.000Z","updated":"2022-09-16T13:59:17.624Z","comments":true,"path":"api/articles/2022-05-31bug.json","keywords":null,"cover":null,"content":"<h2 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">const Share: FC&lt;ShareProps&gt; &#x3D; (props) &#x3D;&gt; &#123;\n  const &#123; entityType, entityCode &#125; &#x3D; props\n\n  const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;\n    value: props.value,\n    title: props.title,\n    shareId: props.shareId,\n    mappingPassword: props.mappingPassword,\n    passwordEnable: props.passwordEnable,\n    mappingState: props.mappingState,\n    expireTime: props.expireTime,\n    shortCode: props.shortCode,\n  &#125;)\n\n\n  const &#123; value &#125; &#x3D; state\n\n  ...\n\n  return (\n    &lt;div&gt;\n      &#123;renderBtn&#125;\n      &lt;ShareModal\n        entityType&#x3D;&#123;entityType&#125;\n        entityCode&#x3D;&#123;entityCode&#125;\n        &#123;...modalProps&#125;\n        state&#x3D;&#123;state&#125;\n        setState&#x3D;&#123;setState&#125;\n      &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;\n\nexport default Share\n\n</code></pre>\n\n<h2 id=\"ShareModal\"><a href=\"#ShareModal\" class=\"headerlink\" title=\"ShareModal\"></a>ShareModal</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">\ninterface ShareModalProps extends ModalFuncProps &#123;\n  entityType: EntityType\n  entityCode: string\n  className?: string\n  state: StateProps\n  setState: (state: StateProps) &#x3D;&gt; void\n&#125;\n\nconst Copy &#x3D; (&#123; text, children &#125;: &#123; text: string; children: string &#125;) &#x3D;&gt; &#123;\n  return (\n    &lt;CopyToClipboard\n      text&#x3D;&#123;text&#125;\n      onCopy&#x3D;&#123;() &#x3D;&gt; &#123;\n        message.success(&#39;链接已复制&#39;)\n      &#125;&#125;\n    &gt;\n      &lt;span&gt;&#123;children&#125;&lt;&#x2F;span&gt;\n    &lt;&#x2F;CopyToClipboard&gt;\n  )\n&#125;\n\nconst ShareModal: FC&lt;ShareModalProps&gt; &#x3D; (props) &#x3D;&gt; &#123;\n  const [form] &#x3D; HookForm.useForm()\n\n  const &#123; state, setState, entityType, entityCode, ...restProps &#125; &#x3D; props\n\n  const &#123; value, title, mappingPassword, shortCode, expireTime &#125; &#x3D; state\n\n  const &#123;\n    onChange: toggle,\n    resetPassword: reset,\n    update,\n  &#125; &#x3D; useShare(&#123;\n    entityCode,\n    entityType,\n    state,\n    setState,\n  &#125;)\n\n\n  ....\n\n  return (\n    &lt;Modal\n      &#123;...restProps&#125;\n      className&#x3D;&#123;styles[&#39;share-modal-wrap&#39;]&#125;\n      title&#x3D;&quot;链接分享&quot;\n      destroyOnClose\n      width&#x3D;&#123;420&#125;\n      footer&#x3D;&#123;null&#125;\n    &gt;\n      &lt;ConditionComponent isShow&#x3D;&#123;value&#125;&gt;\n        ....\n        &lt;HookForm form&#x3D;&#123;form&#125; style&#x3D;&#123;&#123; marginBottom: 10, width: &#39;100%&#39; &#125;&#125; layout&#x3D;&quot;vertical&quot;&gt;\n          &lt;HookForm.Item noStyle shouldUpdate&gt;\n            &#123;() &#x3D;&gt; &#123;\n              const &#123; url, mappingPassword, expireTime &#125; &#x3D; form.getFieldsValue()\n              const text &#x3D; &#96;$&#123;url&#125;（密码：$&#123;mappingPassword&#125;）《$&#123;title&#125;》$&#123;moment(\n                expireTime,\n              ).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)&#125;过期&#96;\n              return (\n                &lt;HookForm.Item name&#x3D;&quot;url&quot; label&#x3D;&quot;&quot;&gt;\n                  &lt;Input\n                    className&#x3D;&#123;styles[&#39;share-copy&#39;]&#125;\n                    addonAfter&#x3D;&#123;&lt;Copy text&#x3D;&#123;text&#125;&gt;复制链接和密码&lt;&#x2F;Copy&gt;&#125;\n                    disabled\n                  &#x2F;&gt;\n                &lt;&#x2F;HookForm.Item&gt;\n              )\n            &#125;&#125;\n          &lt;&#x2F;HookForm.Item&gt;\n        &lt;&#x2F;HookForm&gt;\n      &lt;&#x2F;ConditionComponent&gt;\n    &lt;&#x2F;Modal&gt;\n  )\n&#125;\n\nexport default ShareModal\n</code></pre>\n\n<h2 id=\"用户反馈\"><a href=\"#用户反馈\" class=\"headerlink\" title=\"用户反馈\"></a>用户反馈</h2><p>为什么分享的链接与要分享的链接对不上？</p>\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p>useCallback 受依赖项的影响，不更新，之前改过同事的代码，这次扫了一样，没有 callback，就这问题修改几个了</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><ul>\n<li>找了下数据<code>ShareModal</code>组件,看到两个入参<code>state, setState</code> ，我艹</li>\n<li>继续往上层找</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">&lt;ShareModal\n  entityType&#x3D;&#123;entityType&#125;\n  entityCode&#x3D;&#123;entityCode&#125;\n  &#123;...modalProps&#125;\n  state&#x3D;&#123;state&#125; &#x2F;&#x2F; 😓\n  setState&#x3D;&#123;setState&#125; &#x2F;&#x2F;😓\n&#x2F;&gt;</code></pre>\n\n<ul>\n<li>再往上找，useState 内部只执行一次，数据初始化完成不再改变</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;\n  value: props.value,\n  title: props.title,\n  shareId: props.shareId,\n  mappingPassword: props.mappingPassword,\n  passwordEnable: props.passwordEnable,\n  mappingState: props.mappingState,\n  expireTime: props.expireTime,\n  shortCode: props.shortCode,\n&#125;);\n\nconst &#123; value &#125; &#x3D; state;</code></pre>\n\n<ul>\n<li>这里代码这么写，其他地方肯定也有这样的写法，😓</li>\n</ul>\n<h2 id=\"改一下\"><a href=\"#改一下\" class=\"headerlink\" title=\"改一下\"></a>改一下</h2><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;&#125;);\n\nuseEffect(() &#x3D;&gt; &#123;\n  setState(&#123; ...props &#125;);\n&#125;, [props.shareId]);</code></pre>\n","text":"Shareconst Share: FC&lt;ShareProps&gt; &#x3D; (props) &#x3D;&gt; &#123; const &#123; entityType, entityCode &#125; &#x3D; props const [state...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"bug","slug":"bug","count":4,"path":"api/categories/bug.json"}],"tags":[{"name":"React","slug":"React","count":14,"path":"api/tags/React.json"},{"name":"bug","slug":"bug","count":6,"path":"api/tags/bug.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Share\"><span class=\"toc-text\">Share</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ShareModal\"><span class=\"toc-text\">ShareModal</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E5%8F%8D%E9%A6%88\"><span class=\"toc-text\">用户反馈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useCallback\"><span class=\"toc-text\">useCallback</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useState\"><span class=\"toc-text\">useState</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B9%E4%B8%80%E4%B8%8B\"><span class=\"toc-text\">改一下</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"再学Vue3-0 概览","uid":"98cc42407c73e25079ab5c02aa5f251b","slug":"2022-06-02vue-0","date":"2022-06-02T10:49:20.000Z","updated":"2022-09-16T13:54:56.122Z","comments":true,"path":"api/articles/2022-06-02vue-0.json","keywords":null,"cover":"http://t-blog-images.aijs.top/img/20220602185003.webp","text":"vue3 使用 proxy 重写了 vue2，并增加了组合式 api 以下思维导图以vue3 文档内容为依据，在学习过程中绘制 学习过程中对比了 vue3 和 react 很长一段时间没看vue了，vue3一直没接触，媳妇不学。万一哪天媳妇需要用vue3了，没人带岂不是要失业，赶...","link":"","photos":[],"count_time":{"symbolsCount":180,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":14,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":13,"path":"api/tags/vue.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"前端基础-编程范式-函数式编程简单了解","uid":"f35528e9b34223f99b96c0561880d949","slug":"2022-05-28func","date":"2022-05-28T07:25:33.000Z","updated":"2022-09-16T13:54:56.121Z","comments":true,"path":"api/articles/2022-05-28func.json","keywords":null,"cover":null,"text":"背景js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的原型、原型链、继承，还有对人不友好的 this ；而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。简单来说就是：面向对象的思想在...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":27,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/tags/前端基础.json"},{"name":"面试","slug":"面试","count":17,"path":"api/tags/面试.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}