{"title":"重新认识下 JSON.stringify","uid":"efb0473bb840c16eda737ab9fe4eecb0","slug":"2023-02-27json","date":"2023-02-27T05:32:04.000Z","updated":"2023-02-27T12:46:06.494Z","comments":true,"path":"api/articles/2023-02-27json.json","keywords":null,"cover":null,"content":"<h2 id=\"JSON-stringify-是什么\"><a href=\"#JSON-stringify-是什么\" class=\"headerlink\" title=\"JSON.stringify 是什么\"></a>JSON.stringify 是什么</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">JSON.stringify(value[, replacer [, space]])</code></pre>\n\n<ol>\n<li>将一个 JavaScript 对象或值转换为 JSON 字符串</li>\n</ol>\n<p><strong>replacer</strong><br><em>该字段决定处理哪些属性</em></p>\n<ol>\n<li>如果 replacer 是函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；</li>\n<li>如果如果 replacer 是数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；</li>\n<li>如果该参数为 null 或者未提供，则对象所有的属性都会被序列化</li>\n</ol>\n<p><strong>space</strong></p>\n<p><em>指定缩进用的空白字符串，用于美化输出（pretty-print）；</em></p>\n<ol>\n<li>如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；</li>\n<li>如果该参数为字符串（当字符串长度超过 10 个字母，取其前 10 个字母），该字符串将被作为空格；</li>\n<li>如果该参数没有提供（或者为 null），将没有空格</li>\n</ol>\n<h2 id=\"JSON-stringify-能做什么\"><a href=\"#JSON-stringify-能做什么\" class=\"headerlink\" title=\"JSON.stringify 能做什么\"></a>JSON.stringify 能做什么</h2><ol>\n<li>null 都会被处理成 <code>&#39;null&#39;</code></li>\n<li>boolean、字符串的<code>包装对象</code>在序列化过程中会被转化成原始值</li>\n<li>number,<code>NaN 和 Infinity 格式</code>的数值会被当做 null, 其他 number 的数据会被转化成 string</li>\n<li><code>以 symbol 为属性键的属性都会被完全忽略掉</code>，即便 replacer 参数中强制指定包含了它们</li>\n<li>undefined、函数、Symbol 值，在序列化过程中，会被<ol>\n<li>数组中，会被转化成 null</li>\n<li>非数组对象，会被忽略</li>\n<li>函数、<code>undefined </code>被单独转化时，会返回 <code>undefined</code>而不是字符串<code>&#39;undefined&#39;</code></li>\n</ol>\n</li>\n<li>对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误</li>\n<li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中</li>\n<li>被转化值有 toJSON 方法，直接调用该方法</li>\n<li>Date 日期调用了 toJSON() 将其转换为了 string 字符串（同 Date.toISOString()），因此会被当做字符串处理</li>\n<li>其他类型的对象，包括 Map&#x2F;Set&#x2F;WeakMap&#x2F;WeakSet，仅会序列化可枚举的属性</li>\n</ol>\n<p><strong>具体事例</strong>： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" >见</a></p>\n<h2 id=\"如何用-js-实现-JSON-stringify\"><a href=\"#如何用-js-实现-JSON-stringify\" class=\"headerlink\" title=\"如何用 js 实现 JSON.stringify\"></a>如何用 js 实现 JSON.stringify</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 数据类型\nconst isBase &#x3D; (val) &#x3D;&gt; val &#x3D;&#x3D;&#x3D; null || typeof val !&#x3D;&#x3D; &quot;object&quot;;\nconst isTypeObject &#x3D; (val) &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &quot;object&quot;;\n&#x2F;&#x2F; Object.prototype.toString\nconst toString &#x3D; Object.prototype.toString;\nconst isBoolean &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Boolean]&quot;;\nconst isBigInt &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object BigInt]&quot;;\nconst isSymbol &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Symbol]&quot;;\nconst isNull &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Null]&quot;;\nconst isString &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object String]&quot;;\nconst isUndefined &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Undefined]&quot;;\nconst isNumber &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Number]&quot;;\nconst isFunction &#x3D; (val) &#x3D;&gt; toString.call(v) &#x3D;&#x3D;&#x3D; &quot;[object Function]&quot;;\nconst isArray &#x3D; (val) &#x3D;&gt; toString.call(val) &#x3D;&#x3D;&#x3D; &quot;[object Array]&quot;;\nconst isObject &#x3D; (val) &#x3D;&gt; toString.call(val) &#x3D;&#x3D;&#x3D; &quot;[object Object]&quot;;\n\nvar escRE &#x3D; &#x2F;[\\\\&quot;\\u0000-\\u001F\\u2028\\u2029]&#x2F;g;\nvar escMap &#x3D; &#123; &#39;&quot;&#39;: &#39;\\\\&quot;&#39;, &quot;\\\\&quot;: &quot;\\\\\\\\&quot;, &quot;\\b&quot;: &quot;\\\\b&quot;, &quot;\\f&quot;: &quot;\\\\f&quot;, &quot;\\n&quot;: &quot;\\\\n&quot;, &quot;\\r&quot;: &quot;\\\\r&quot;, &quot;\\t&quot;: &quot;\\\\t&quot; &#125;;\n&#x2F;&#x2F; prettier-ignore\nvar escFunc &#x3D; function (m) &#123;return escMap[m] || &quot;\\\\u&quot; + (m.charCodeAt(0) + 0x10000).toString(16).substr(1);&#125;;\n\nfunction stringify(value) &#123;\n  if (isNull(value)) &#123;\n    return &quot;null&quot;;\n  &#125; else if (isNumber(value)) &#123;\n    return isFinite(value) ? value.toString() : &quot;null&quot;;\n  &#125; else if (isBoolean(value)) &#123;\n    return value.toString();\n  &#125; else if (isTypeObject(value)) &#123;\n    &#x2F;&#x2F;  对象类型\n    if (isFunction(value.toJSON)) &#123;\n      &#x2F;&#x2F; .toJSON\n      return stringify(value.toJSON());\n    &#125; else if (isArray(value)) &#123;\n      &#x2F;&#x2F; 数组\n      var res &#x3D; &quot;[&quot;;\n      for (var i &#x3D; 0; i &lt; value.length; i++) &#123;\n        res +&#x3D; (i ? &quot;, &quot; : &quot;&quot;) + stringify(value[i]);\n      &#125;\n      return res + &quot;]&quot;;\n    &#125; else if (isObject(value)) &#123;\n      &#x2F;&#x2F; 对象\n      var tmp &#x3D; [];\n      for (var k in value) &#123;\n        if (value.hasOwnProperty(k)) &#123;\n          tmp.push(stringify(k) + &quot;: &quot; + stringify(value[k]));\n        &#125;\n      &#125;\n      return &quot;&#123;&quot; + tmp.join(&quot;, &quot;) + &quot;&#125;&quot;;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 非必要的空字符去除\n  return &#39;&quot;&#39; + value.toString().replace(escRE, escFunc) + &#39;&quot;&#39;;\n&#125;\n\n&#x2F;&#x2F; var test_data_1 &#x3D; &#123; name: 1, age: 2, grades: [1, 2, 3] &#125;;\n&#x2F;&#x2F; console.log(&quot;deep&quot;, stringify(test_data_1));\n&#x2F;&#x2F; console.log(&quot;json&quot;, JSON.stringify(test_data_1));\n\nconst data &#x3D; &#123;\n  name: &#123; grades: [1, 23, 4] &#125;,\n  age: 2,\n  other: &#123; name: &#123; grades: [1, 23, 4] &#125; &#125;,\n&#125;;\n\nconsole.log(&quot;deep&quot;, stringify(data));\nconsole.log(&quot;json&quot;, JSON.stringify(data));</code></pre>\n\n<h2 id=\"js-实现-总结\"><a href=\"#js-实现-总结\" class=\"headerlink\" title=\"js 实现 总结\"></a>js 实现 总结</h2><ol>\n<li>如果是 null 直接转化成 string</li>\n<li>如果是有限的 number，转化成 string,否则转化成<code>&quot;null&quot;</code></li>\n<li>如果是 boolean,转化成 string</li>\n<li>如果是对象<ol>\n<li>对象有.toJSON 方法，直接调用该方法，然后进行递归处理</li>\n<li>如果是数组，数组外面拼接<code>[]</code>, 数组项递归处理</li>\n<li>如果是非数组对象，对象键和值都要做递归处理，然后拼接<code>&#123;&#125;</code>字符串</li>\n</ol>\n</li>\n<li>其他情况转化成 string，并去除空白字符</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" >JSON.stringify MDN</a></p>\n","text":"JSON.stringify 是什么JSON.stringify(value[, replacer [, space]]) 将一个 JavaScript 对象或值转换为 JSON 字符串 replacer该字段决定处理哪些属性 如果 replacer 是函数，则在序列化过程中，被...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":54,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":56,"path":"api/tags/前端基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON-stringify-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">JSON.stringify 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JSON-stringify-%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">JSON.stringify 能做什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%94%A8-js-%E5%AE%9E%E7%8E%B0-JSON-stringify\"><span class=\"toc-text\">如何用 js 实现 JSON.stringify</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#js-%E5%AE%9E%E7%8E%B0-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">js 实现 总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ant DatePicker","uid":"cd788e373bbe9a88ec776d20b310ec2f","slug":"2023-02-28datepicker","date":"2023-02-28T03:01:54.000Z","updated":"2023-02-28T12:42:55.929Z","comments":true,"path":"api/articles/2023-02-28datepicker.json","keywords":null,"cover":null,"text":"问题 这里首次使用 datepicker 的时候， 获取到时间含有十分秒： v = 1676429917 非第一次操作正常 这里修改方案，将 const _v: number = e?.startOf(&quot;d&quot;).valueOf() || 0; const on...","link":"","photos":[],"count_time":{"symbolsCount":668,"symbolsTime":"1 mins."},"categories":[{"name":"Bug","slug":"Bug","count":2,"path":"api/categories/Bug.json"}],"tags":[{"name":"Bug","slug":"Bug","count":2,"path":"api/tags/Bug.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"记一个老古董项目代码","uid":"e00426eb8e20267d75c9bea1f431c2ca","slug":"2023-02-27select","date":"2023-02-27T02:56:48.000Z","updated":"2023-02-27T12:46:06.495Z","comments":true,"path":"api/articles/2023-02-27select.json","keywords":null,"cover":[],"text":"背景周五晚上去上海，周末在上海加了两天班， 做公司项目，周日晚上 9 点回到杭州帮媳妇写老古董 demo（贼充实 😭） 事情经过 媳妇公司的另一个银行项目组业务，要在原有的 java web 项目给下拉选择功能， 增加是否可选的控制，很费劲的哦：不给你看代码，只是说用的 jque...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"jQuery","slug":"jQuery","count":1,"path":"api/categories/jQuery.json"}],"tags":[{"name":"jQuery","slug":"jQuery","count":1,"path":"api/tags/jQuery.json"}],"author":{"name":"举手摘月亮","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>举手向苍穹，并非一定要摘到星月</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}