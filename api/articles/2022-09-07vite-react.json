{"title":"vite react antd","uid":"f16e7439b5860073efd517d55c41d5e5","slug":"2022-09-07vite-react","date":"2022-09-07T08:44:51.000Z","updated":"2022-09-13T12:02:49.180Z","comments":true,"path":"api/articles/2022-09-07vite-react.json","keywords":null,"cover":[],"content":"<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p><strong>方案 1: nextjs + sun (antd)</strong></p>\n<p>之前部门用的公司（前端基建二次封装）的这套组合，被现在的部门嫌弃</p>\n<p><strong>方案 2: @umijs&#x2F;max</strong></p>\n<p>试用了 umijs&#x2F;max MFSU, 在开发更新体验上还是觉得慢</p>\n<p><strong>方案 3: vite + react + antd + ahooks + axios + antv + canvas(svg) + ts + i18next</strong></p>\n<ul>\n<li>react 读 hook 部分源码</li>\n<li>ahooks 读过源码</li>\n<li>axios 读过源码</li>\n<li>canvas(svg) 部分可视化定制要求高，antv 无法实现</li>\n<li>i18next 对外系统需要多语言，没有使用公司多语言平台的原因，项目不大，没必要，更何况，当前部门希望创新</li>\n</ul>\n<p>最终选择了这套方案</p>\n<p>没用 redux 原因：全局使用 context，局部使用 hooks 组合的方式</p>\n<h3 id=\"ts-全局声明配置\"><a href=\"#ts-全局声明配置\" class=\"headerlink\" title=\"ts 全局声明配置\"></a>ts 全局声明配置</h3><h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;target&quot;: &quot;ESNext&quot;,\n    &quot;useDefineForClassFields&quot;: true,\n    &quot;lib&quot;: [&quot;DOM&quot;, &quot;DOM.Iterable&quot;, &quot;ESNext&quot;],\n    &quot;allowJs&quot;: false,\n    &quot;skipLibCheck&quot;: true,\n    &quot;esModuleInterop&quot;: false,\n    &quot;allowSyntheticDefaultImports&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;moduleResolution&quot;: &quot;Node&quot;,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;paths&quot;: &#123;\n      &quot;@&#x2F;*&quot;: [&quot;.&#x2F;src&#x2F;*&quot;],\n      &quot;@&#x2F;components&#x2F;*&quot;: [&quot;.&#x2F;src&#x2F;components&#x2F;*&quot;]\n    &#125;\n  &#125;,\n  &quot;include&quot;: [&quot;src&quot;],\n  &quot;references&quot;: [&#123; &quot;path&quot;: &quot;.&#x2F;tsconfig.node.json&quot; &#125;]\n&#125;</code></pre>\n\n<p>配置完成仍然提示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Cannot find module &#39;@&#x2F;components&#x2F;test&#39; or its corresponding type declarations.</code></pre>\n\n<p>解决： vscode 重新启动</p>\n<p><a href=\"https://blog.csdn.net/q95548854/article/details/121899607\" target=\"_blank\" >终极解决 TS 或者 Vetur 报错，Cannot find module ‘@&#x2F;xx&#x2F;xxx‘，找不到*.vue 等编译问题</a></p>\n<h3 id=\"打包优化\"><a href=\"#打包优化\" class=\"headerlink\" title=\"打包优化\"></a>打包优化</h3><img src=\"http://t-blog-images.aijs.top/img/202209071639635.webp\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202209071640618.webp\" />\n\n<p><strong>见完整配置</strong></p>\n<ul>\n<li>移除日志</li>\n<li>移除 debuger</li>\n<li>集成 lodash 测试下打包优化</li>\n<li>antd 按需加载</li>\n<li>antd 定制主题</li>\n<li>请求工具封装</li>\n</ul>\n<h3 id=\"打包分析\"><a href=\"#打包分析\" class=\"headerlink\" title=\"打包分析\"></a>打包分析</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">open .&#x2F;stats.html -a Google\\ Chrome</code></pre>\n\n<img src=\"http://t-blog-images.aijs.top/img/202209081109070.webp\" />\n\n<p>考虑到项目中仅用到图表</p>\n<p>所以将 <code>@ant-design/charts</code> 替换为 <code>@ant-design/plots</code> 子包试用</p>\n<p>包大小降低了一丢丢，感觉不对</p>\n<h3 id=\"如何部署\"><a href=\"#如何部署\" class=\"headerlink\" title=\"如何部署\"></a>如何部署</h3><p>这是一个问题，之前我看有同事，用 vite 开发，用 webpack 打包部署</p>\n<p>打包问题，最终变成<code>vite 产物</code> <code>dist</code> 部署问题。</p>\n<p>我也尝试了多次使用 next 部署方案，进行部署，由于不晓得运维内部是如何写 dockerfile 的，所以是各种报错</p>\n<img src=\"http://t-blog-images.aijs.top/img/202209131956944.png\" />\n<img src=\"http://t-blog-images.aijs.top/img/202209131955989.png\" />\n\n<p>Dockerfile</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">FROM nginx:1.15.0\n\nADD .docker&#x2F;nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf\nADD .docker &#x2F;\n\nCOPY  .&#x2F;dist &#x2F;www&#x2F;\n\nRUN chmod -R 755 &#x2F;www\n\nCMD [ &quot;sh&quot;, &quot;&#x2F;start.sh&quot; ]\n</code></pre>\n\n<p><strong>start.sh</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 注入环境变量\nsed -i &quot;s&#x2F;\\(&lt;head&gt;\\)&#x2F;\\1&lt;script&gt;window.ENV&#x3D;&#39;$TYA_ENV&#39;;window.REGION&#x3D;&#39;$TYA_REGION&#39;&lt;\\&#x2F;script&gt;&#x2F;&quot; &quot;&#x2F;www&#x2F;index.html&quot;\n\nnginx -g &quot;daemon off;&quot;\n</code></pre>\n\n<p><strong>nginx</strong></p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">server &#123;\n    listen       80;\n    server_name  localhost;\n\n    location &#x3D;&#x2F;health &#123;\n        return 200 ok;\n    &#125;\n\n    # 这个路径是业务方自己要加的，在上传组件的时候，他们希望直接使用脚本上传组件，通过这个接口获取 token数据\n    location &#x2F;_&#x2F;token &#123;\n         add_header Content-Type &#39;text&#x2F;html&#39;;\n         add_header Cache-Control &#39;no-store&#39;; &#x2F;&#x2F; 缓存\n         return 200 $cookie_SSO_USER_TOKEN;\n    &#125;\n\n    location &#x2F; &#123;\n        add_header Cache-Control &#39;no-store&#39;; &#x2F;&#x2F; 缓存\n        if_modified_since off; &#x2F;&#x2F; 缓存\n        etag off; &#x2F;&#x2F; 缓存\n        expires -1; &#x2F;&#x2F; 缓存\n        root &#x2F;www&#x2F;;\n        index          index.html;\n        try_files $uri &#x2F;index.html;\n    &#125;\n\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    gzip_comp_level 2;\n    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;\n    gzip_vary off;\n    gzip_disable &quot;MSIE [1-6]\\.&quot;;\n    error_page   500 502 503 504  &#x2F;50x.html;\n&#125;</code></pre>\n\n<h2 id=\"开发中…\"><a href=\"#开发中…\" class=\"headerlink\" title=\"开发中…\"></a>开发中…</h2><p>以上内容，最近会补全，在写业务</p>\n<h2 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h2><img src=\"http://t-blog-images.aijs.top/img/202209091405085.webp\" />\n\n<h2 id=\"打包预览-404\"><a href=\"#打包预览-404\" class=\"headerlink\" title=\"打包预览 404\"></a>打包预览 404</h2><p>预览默认启动 index.html,肯定没有这个 react-router-dom 的路径 ，会走到 404</p>\n<p>修改 index.html 代码</p>\n<details class=\"custom-details\">\n<summary>index.html</summary>\n<p><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;Keywords&quot; content&#x3D;&quot;项目&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;Description&quot; content&#x3D;&quot;项目&quot; &#x2F;&gt;\n    &lt;!-- &lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;svg+xml&quot; href&#x3D;&quot;&#x2F;vite.svg&quot; &#x2F;&gt; --&gt;\n    &lt;link\n      rel&#x3D;&quot;shortcut icon&quot;\n      href&#x3D;&quot;https:&#x2F;&#x2F;images.com&#x2F;rms-static&#x2F;4d08a150-2f4a-11ed-acd5-2f6ea556a3fd-1662623168485.ico&quot;\n      type&#x3D;&quot;image&#x2F;x-icon&quot;\n    &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;碳项目&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;&#x2F;src&#x2F;main.tsx&quot;&gt;&lt;&#x2F;script&gt;\n\n    &lt;!-- fix代码，将&#x2F;index.html 改为 &#x2F; --&gt;\n    &lt;script&gt;\n      if (window.location.pathname &#x3D;&#x3D;&#x3D; &quot;&#x2F;index.html&quot;) &#123;\n        window.location.pathname &#x3D; &quot;&#x2F;&quot;;\n      &#125;\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n</p>\n</details>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><details class=\"custom-details\">\n<summary>tree -L 2 -I node_modules</summary>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── dist\n│   ├── index.html\n│   ├── static\n│   └── vite.svg\n├── index.html\n├── package.json\n├── pnpm-lock.yaml\n├── public\n│   └── vite.svg\n├── src\n│   ├── @types &#x2F;&#x2F; ts全局类型\n│   ├── App.css\n│   ├── App.tsx &#x2F;&#x2F; 入口\n│   ├── assets &#x2F;&#x2F; 资源\n│   ├── components &#x2F;&#x2F; 组件\n│   ├── consts &#x2F;&#x2F; 常量\n│   ├── context &#x2F;&#x2F; react context\n│   ├── hooks &#x2F;&#x2F; react hooks\n│   ├── i18n &#x2F;&#x2F; 多语言 i18n\n│   ├── index.css\n│   ├── layout &#x2F;&#x2F; 布局\n│   ├── main.tsx\n│   ├── pages &#x2F;&#x2F; 页面\n│   ├── router &#x2F;&#x2F; 路由\n│   ├── services &#x2F;&#x2F; 接口\n│   ├── temp &#x2F;&#x2F; 临时测试\n│   ├── utils &#x2F;&#x2F; 工具函数\n│   └── vite-env.d.ts\n├── stats.html &#x2F;&#x2F; 打包分析产物\n├── tsconfig.json &#x2F;&#x2F; ts 配置\n├── tsconfig.node.json\n└── vite.config.ts &#x2F;&#x2F; vite 配置\n\n17 directories, 15 files</code></pre>\n\n</p>\n</details>\n<details class=\"custom-details\">\n<summary>tree -L 2 src</summary>\n<p><pre class=\"line-numbers language-none\"><code class=\"language-none\">src\n├── @types\n│   ├── index.d.ts\n│   └── react-i18next\n├── App.css\n├── App.tsx\n├── assets\n│   ├── favicon.ico\n│   └── react.svg\n├── components\n│   ├── auth\n│   ├── bar.tsx\n│   ├── condition\n│   ├── error\n│   ├── iconfont\n│   ├── loading\n│   ├── login\n│   ├── pageContainer\n│   ├── test.module.less\n│   ├── test.tsx\n│   └── trans\n├── consts\n├── context\n│   └── global-context.ts\n├── hooks\n├── i18n\n│   ├── config.ts\n│   ├── en\n│   └── zh\n├── index.css\n├── layout\n│   ├── base-layout\n│   └── bread\n├── main.tsx\n├── pages\n│   ├── home\n│   ├── mod-conf\n│   ├── switchlogin\n│   ├── target-conf\n│   └── target-monitor\n├── router\n│   ├── index.tsx\n│   └── routerGuard.tsx\n├── services\n├── temp\n│   └── App\\ copy.tsx\n├── utils\n│   └── request.ts\n└── vite-env.d.ts\n\n31 directories, 17 files</code></pre>\n\n</p>\n</details>\n<h2 id=\"完整配置\"><a href=\"#完整配置\" class=\"headerlink\" title=\"完整配置\"></a>完整配置</h2><details class=\"custom-details\">\n<summary>package.json</summary>\n<p><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;smart-carbon&quot;,\n  &quot;private&quot;: true,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;type&quot;: &quot;module&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;vite&quot;,\n    &quot;build&quot;: &quot;tsc &amp;&amp; vite build&quot;,\n    &quot;preview&quot;: &quot;vite preview&quot; &#x2F;&#x2F; 注意避坑 404\n  &#125;,\n  &quot;dependencies&quot;: &#123;\n    &quot;@ant-design&#x2F;icons&quot;: &quot;^4.7.0&quot;,\n    &quot;@ant-design&#x2F;plots&quot;: &quot;^1.2.2&quot;, &#x2F;&#x2F; @ant-design&#x2F;charts的一个子包，还是有点大； 之后可以学习下svg、canvas绘图，这样打出的内容非常小\n    &quot;ahooks&quot;: &quot;^3.7.0&quot;,\n    &quot;antd&quot;: &quot;^4.23.0&quot;,\n    &quot;axios&quot;: &quot;^0.27.2&quot;,\n    &quot;classnames&quot;: &quot;^2.3.1&quot;,\n    &quot;i18next&quot;: &quot;^21.9.1&quot;,\n    &quot;lodash&quot;: &quot;^4.17.21&quot;, &#x2F;&#x2F; 这个依赖完全是为了测试vite lodash 打成bundle\n    &quot;moment&quot;: &quot;^2.29.4&quot;,\n    &quot;react&quot;: &quot;^18.2.0&quot;,\n    &quot;react-dom&quot;: &quot;^18.2.0&quot;,\n    &quot;react-i18next&quot;: &quot;^11.18.6&quot;,\n    &quot;react-router-dom&quot;: &quot;^6.3.0&quot;,\n    &quot;rollup-plugin-external-globals&quot;: &quot;^0.6.1&quot;,\n    &quot;vite-plugin-imp&quot;: &quot;^2.3.0&quot;\n  &#125;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;@types&#x2F;lodash&quot;: &quot;^4.14.184&quot;,\n    &quot;@types&#x2F;node&quot;: &quot;^18.7.15&quot;,\n    &quot;@types&#x2F;react&quot;: &quot;^18.0.17&quot;,\n    &quot;@types&#x2F;react-dom&quot;: &quot;^18.0.6&quot;,\n    &quot;@vitejs&#x2F;plugin-react&quot;: &quot;^2.1.0&quot;,\n    &quot;less&quot;: &quot;^4.1.3&quot;,\n    &quot;rollup&quot;: &quot;^2.79.0&quot;,\n    &quot;rollup-plugin-terser&quot;: &quot;^7.0.2&quot;,\n    &quot;rollup-plugin-visualizer&quot;: &quot;^5.8.1&quot;,\n    &quot;typescript&quot;: &quot;^4.6.4&quot;,\n    &quot;vite&quot;: &quot;^3.1.0&quot;,\n    &quot;vite-plugin-compression&quot;: &quot;^0.5.1&quot;\n  &#125;\n&#125;</code></pre>\n\n</p>\n</details>\n<details class=\"custom-details\">\n<summary>vite.config.ts</summary>\n<p><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; vite.config.ts\nimport &#123; defineConfig &#125; from &quot;vite&quot;;\nimport react from &quot;@vitejs&#x2F;plugin-react&quot;;\n&#x2F;&#x2F;@ts-ignore\nimport path from &quot;path&quot;;\nimport vitePluginImp from &quot;vite-plugin-imp&quot;;\nimport externalGlobals from &quot;rollup-plugin-external-globals&quot;;\nimport viteCompression from &quot;vite-plugin-compression&quot;;\nimport &#123; terser &#125; from &quot;rollup-plugin-terser&quot;;\nimport &#123; visualizer &#125; from &quot;rollup-plugin-visualizer&quot;;\nconst __dirname &#x3D; path.resolve();\n&#x2F;&#x2F; 一些需要单独打成bundle的文件\nconst chunk1 &#x3D; [&quot;react&quot;, &quot;react-router-dom&quot;, &quot;react-dom&quot;];\nconst chunk2 &#x3D; [&quot;moment&quot;, &quot;@ant-design&#x2F;icons&quot;, &quot;ahooks&quot;];\nconst chunk3 &#x3D; [&quot;lodash&quot;];\nconst chunk4 &#x3D; [&quot;axios&quot;];\nconst antdChunk &#x3D; [&quot;antd&quot;];\nconst plotsChunk &#x3D; [&quot;@ant-design&#x2F;plots&quot;];\n\nconst build &#x3D; &#123;\n  rollupOptions: &#123;\n    output: &#123;\n      &#x2F;&#x2F; 文件指纹\n      chunkFileNames: &quot;static&#x2F;js&#x2F;[name].[hash].js&quot;,\n      entryFileNames: &quot;static&#x2F;js&#x2F;[name].[hash].js&quot;,\n      &#x2F;&#x2F; 分类输出\n      assetFileNames: &quot;static&#x2F;[ext]&#x2F;[name].[hash].[ext]&quot;,\n      &#x2F;&#x2F; 手动chunk\n      manualChunks: &#123;\n        vendor: chunk1,\n        vendor2: chunk2,\n        vendor3: chunk3,\n        vendor4: chunk4,\n        plots: plotsChunk,\n        antd: antdChunk,\n      &#125;,\n    &#125;,\n  &#125;,\n  chunkSizeWarningLimit: 1024,\n&#125;;\n\nconst server &#x3D; &#123;\n  port: 3006,\n  open: &quot;&#x2F;index.html&quot;,\n  proxy: &#123;\n    &quot;&#x2F;api&quot;: &#123;\n      target: &quot;http:&#x2F;&#x2F;localhost:3032&quot;,\n      changeOrigin: true,\n      &#x2F;&#x2F; rewrite: (path) &#x3D;&gt; path.replace(&#x2F;^\\&#x2F;api&#x2F;, &#39;&#39;)\n    &#125;,\n  &#125;,\n&#125;;\n\nconst plugins &#x3D; [\n  react(),\n  vitePluginImp(&#123;\n    libList: [\n      &#x2F;&#x2F; antd 按需引入\n      &#123;\n        libName: &quot;antd&quot;,\n        style: (name) &#x3D;&gt; &#96;antd&#x2F;es&#x2F;$&#123;name&#125;&#x2F;style&#96;,\n      &#125;,\n    ],\n  &#125;),\n  externalGlobals(&#123;\n    &#x2F;&#x2F; &quot;@ant-design&#x2F;charts&quot;: &quot;window.charts&quot;\n  &#125;),\n  &#x2F;&#x2F; vite打包优化 - 压缩\n  viteCompression(&#123;\n    verbose: true,\n    disable: false,\n    threshold: 10240,\n    algorithm: &quot;gzip&quot;,\n    ext: &quot;.gz&quot;,\n  &#125;),\n  &#x2F;&#x2F; vite 打包优化 - 移除 日志&#x2F;debugger\n  terser(&#123;\n    compress: &#123;\n      defaults: false,\n      &#x2F;&#x2F; drop_console: true,\n    &#125;,\n    mangle: &#123;\n      eval: true,\n      module: true,\n      toplevel: true,\n      safari10: true,\n      properties: false,\n    &#125;,\n    &#x2F;&#x2F; 不输出注释\n    output: &#123;\n      comments: false,\n    &#125;,\n  &#125;),\n  &#x2F;&#x2F; vite 打包分析\n  visualizer(),\n];\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;vitejs.dev&#x2F;config&#x2F;\nexport default defineConfig(&#123;\n  plugins,\n  css: &#123;\n    &#x2F;&#x2F; 配置antd主题\n    preprocessorOptions: &#123;\n      less: &#123;\n        javascriptEnabled: true,\n        modifyVars: &#123;\n          &#x2F;&#x2F; 在这里自定义主题色等样式\n          &quot;@primary-color&quot;: &quot;#646cff&quot;, &#x2F;&#x2F;设置antd主题色\n        &#125;,\n      &#125;,\n    &#125;,\n    &#x2F;&#x2F; 模块化样式，启用小驼峰\n    modules: &#123;\n      localsConvention: &quot;camelCase&quot;,\n    &#125;,\n  &#125;,\n  &#x2F;&#x2F; 路径别名，简化长路径引入，看着不舒服\n  resolve: &#123;\n    alias: &#123;\n      &quot;~&quot;: path.resolve(__dirname, &quot;.&#x2F;&quot;), &#x2F;&#x2F; 根路径\n      &quot;@&quot;: path.resolve(__dirname, &quot;src&quot;), &#x2F;&#x2F; src 路径\n    &#125;,\n  &#125;,\n  server,\n  build,\n&#125;);</code></pre>\n\n</p>\n</details>\n<details class=\"custom-details\">\n<summary>ts 全局声明配置</summary>\n<p>优点：必要的全局声明，可以极大减少 typescipt 类型的引入</p>\n<p>&#x2F;src&#x2F;@types</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── index.d.ts\n└── react-i18next\n    └── index.d.ts\n\n1 directory, 2 files\n</code></pre>\n\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; react-i18next\n&#x2F;&#x2F;     └── index.d.ts\nimport &quot;react-i18next&quot;;\nimport &#123; resources &#125; from &quot;..&#x2F;..&#x2F;src&#x2F;i18n&#x2F;config&quot;;\n\ndeclare module &quot;react-i18next&quot; &#123;\n  type DefaultResources &#x3D; typeof resources[&quot;en&quot;];\n  interface Resources extends DefaultResources &#123;&#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; index.d.ts\ndeclare interface MenuConfig &#123;\n  name: string | React.ReactNode;\n  icon?: React.ReactNode;\n  path?: string;\n  asPath?: string;\n  pattern?: RegExp;\n  isMenu?: boolean;\n  hidden?: boolean;\n  routes?: MenuConfig[];\n  onClick?: () &#x3D;&gt; void;\n  layout?: React.ReactNode;\n  component?: React.ReactNode;\n  icon?: React.ReactNode;\n  isShow?: boolean;\n  pageName?: string;\n  redirect?: string;\n&#125;\n\ndeclare interface IResultData&lt;T&gt; &#123;\n  code: string; &#x2F;&#x2F; 响应码\n  result?: T; &#x2F;&#x2F; 数据\n  data?: T;\n  success: boolean; &#x2F;&#x2F; 是否成功(true：成功，false：失败)\n  msg?: string; &#x2F;&#x2F; 错误信息(请求成功时无该字段)\n  errorMsg?: string;\n  message?: string;\n&#125;</code></pre>\n\n\n</details>\n<h2 id=\"i18n-ally-插件\"><a href=\"#i18n-ally-插件\" class=\"headerlink\" title=\"i18n-ally 插件\"></a>i18n-ally 插件</h2><p>插件之前安装好的，大概在几个月前，使用还是正常的，经历过几次 vscode 升级，嗝屁了</p>\n<p>试着重新安装了几次，确定不行，断定是配置出的问题，可视化配置，直接搜 <code>i18n</code></p>\n<img src=\"http://t-blog-images.aijs.top/img/202209131951465.png\" />\n\n<p>以下为<code>setting.json</code>统一配置（不在每个项目中建立啥的配置文件，麻烦）， 直接在<code>setting.json</code>中配置如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;i18n-ally.extract.autoDetect&quot;: true,\n&quot;i18n-ally.extract.keyMaxLength&quot;: 1,\n&quot;i18n-ally.theme.annotation&quot;: &quot;rgba(153, 153, 153, .8)&quot;,\n&quot;i18n-ally.theme.annotationBorder&quot;: &quot;rgba(153, 153, 153, .8)&quot;,\n&quot;i18n-ally.theme.annotationMissing&quot;: &quot;#d37070&quot;,\n&quot;i18n-ally.theme.annotationMissingBorder&quot;: &quot;#d37070&quot;,\n&quot;i18n-ally.extract.parsers.html&quot;: &#123;\n\n&#125;,\n&quot;i18n-ally.displayLanguage&quot;: &quot;zh&quot;,\n&quot;i18n-ally.enabledFrameworks&quot;: [\n  &quot;react&quot;,\n  &quot;vue&quot;\n],\n&quot;i18n-ally.extract.ignoredByFiles&quot;: &#123;\n\n&#125;\n</code></pre>\n\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><a href=\"https://github.com/841660202/vite-react-template\" target=\"_blank\" >github 私有仓库</a></p>\n","text":"技术选型方案 1: nextjs + sun (antd) 之前部门用的公司（前端基建二次封装）的这套组合，被现在的部门嫌弃 方案 2: @umijs&#x2F;max 试用了 umijs&#x2F;max MFSU, 在开发更新体验上还是觉得慢 方案 3: vite + rea...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"vite","slug":"vite","count":1,"path":"api/categories/vite.json"}],"tags":[{"name":"vite","slug":"vite","count":1,"path":"api/tags/vite.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">技术选型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ts-%E5%85%A8%E5%B1%80%E5%A3%B0%E6%98%8E%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">ts 全局声明配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#proxy\"><span class=\"toc-text\">proxy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#alias\"><span class=\"toc-text\">alias</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">打包优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E5%88%86%E6%9E%90\"><span class=\"toc-text\">打包分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">如何部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E4%B8%AD%E2%80%A6\"><span class=\"toc-text\">开发中…</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">记录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E9%A2%84%E8%A7%88-404\"><span class=\"toc-text\">打包预览 404</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">项目结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">完整配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#i18n-ally-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">i18n-ally 插件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">源码</span></a></li></ol>","author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Object & Proxy & Reflect","uid":"2499c4fff2bdb496a8144270f16e71e0","slug":"2022-09-08obj&proxy","date":"2022-09-08T13:40:12.000Z","updated":"2022-09-08T23:42:10.145Z","comments":true,"path":"api/articles/2022-09-08obj&proxy.json","keywords":null,"cover":null,"text":"Proxy 的 hanlder 13 方法apply用于拦截函数的调用 语法 var p &#x3D; new Proxy(target, &#123; apply: function ( target &#x2F;**目标对象（函数） 约束： target 必须是可被调用的。也...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"前端基础","slug":"前端基础","count":27,"path":"api/categories/前端基础.json"}],"tags":[{"name":"前端基础","slug":"前端基础","count":29,"path":"api/tags/前端基础.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"nest 413","uid":"86597b4f3663d14f1511e64b4a45dce2","slug":"2022-09-06nestjs","date":"2022-09-06T12:44:35.000Z","updated":"2022-09-07T12:19:35.896Z","comments":true,"path":"api/articles/2022-09-06nestjs.json","keywords":null,"cover":[],"text":"有问题的项目import &#123; NestFactory &#125; from &quot;@nestjs&#x2F;core&quot;; import &#123; NestExpressApplication &#125; from &quot;@nestjs&#x...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"nest","slug":"nest","count":1,"path":"api/categories/nest.json"}],"tags":[{"name":"nest","slug":"nest","count":1,"path":"api/tags/nest.json"}],"author":{"name":"陈海龙","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/avatar.jpeg","link":"/","description":"需要就学呗，多大点事😂","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}