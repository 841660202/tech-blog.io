{"title":"桌面级水印","uid":"cfd47c3df01979bd39595f08e8ed4f50","slug":"2023-08-04watermark","date":"2023-08-04T05:41:23.000Z","updated":"2023-08-04T06:01:56.601Z","comments":true,"path":"api/articles/2023-08-04watermark.json","keywords":null,"cover":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>企业级桌面打码，避免员工截图乱发</p>\n<h2 id=\"激活-windows-跳转-“设置”以激活-windows，这个水印的实现原理\"><a href=\"#激活-windows-跳转-“设置”以激活-windows，这个水印的实现原理\" class=\"headerlink\" title=\"激活 windows 跳转 “设置”以激活 windows，这个水印的实现原理\"></a>激活 windows 跳转 “设置”以激活 windows，这个水印的实现原理</h2><p>激活 Windows 操作系统时，有时会出现桌面右下角的水印提示，告诉用户要激活 Windows，并提供跳转链接到“设置”页面以进行激活。这个水印的实现原理是通过操作系统的用户界面和系统服务来实现的。</p>\n<p>具体实现原理可能会因不同的 Windows 版本而有所不同，以下是一种可能的实现方式：</p>\n<ol>\n<li><p><strong>系统服务监控激活状态：</strong> Windows 操作系统中有一个系统服务，负责管理和监控激活状态，该服务在系统启动时会自动运行，并负责检查系统是否已激活。如果系统未激活，该服务会触发一个事件。</p>\n</li>\n<li><p><strong>事件通知中心：</strong> 检测到系统未激活的事件会被发送到 Windows 的事件通知中心。</p>\n</li>\n<li><p><strong>通知显示：</strong> 事件通知中心负责在桌面上显示通知，其中包括一个水印提示，告诉用户系统需要激活，并提供跳转链接到“设置”页面。</p>\n</li>\n<li><p><strong>链接到“设置”页面：</strong> 用户点击水印中的“设置”链接后，系统会打开“设置”应用，并直接导航到激活页面。</p>\n</li>\n<li><p><strong>激活页面：</strong> 在“设置”应用中，有专门的激活页面，用户可以在此处输入有效的激活密钥，或者使用其他可用的激活方法来激活 Windows。</p>\n</li>\n</ol>\n<p>这个实现原理可以保持系统激活状态的监控，并在系统未激活时及时提醒用户。这样的设计有助于促使用户激活 Windows 操作系统，以确保其正版合法使用。请注意，这只是一种可能的实现方式，实际的实现细节可能会因不同的 Windows 版本和更新而有所变化。</p>\n<h2 id=\"这个水印总是展示在顶层？\"><a href=\"#这个水印总是展示在顶层？\" class=\"headerlink\" title=\"这个水印总是展示在顶层？\"></a>这个水印总是展示在顶层？</h2><p>通常情况下，Windows 操作系统中的激活水印会显示在桌面的右下角，并且通常会位于其他窗口的顶层。这样设计的目的是确保水印能够在用户界面的可见位置，不会被其他应用程序窗口遮挡。</p>\n<p>当有多个窗口同时打开时，水印可能会被其他应用程序窗口部分遮挡，但通常情况下，Windows 会将激活水印设为“置顶”窗口，以确保它始终显示在其他应用程序窗口之上。这样，即使有其他活动窗口，激活水印也能始终可见。</p>\n<p>请注意，激活水印的显示方式可能会因 Windows 版本、用户界面设置以及可能存在的第三方软件干扰而有所不同。但是，Windows 通常会采取措施确保激活水印的可见性，以提醒用户激活操作系统。</p>\n<h2 id=\"electron-能否实现这个效果，-中文回答\"><a href=\"#electron-能否实现这个效果，-中文回答\" class=\"headerlink\" title=\"electron 能否实现这个效果， 中文回答\"></a>electron 能否实现这个效果， 中文回答</h2><p>是的，Electron 可以实现在桌面应用程序中展示类似于 Windows 激活水印的效果。Electron 是一个基于 Web 技术栈的跨平台桌面应用程序开发框架，它允许开发者使用 HTML、CSS 和 JavaScript 来构建桌面应用程序。通过 Electron，开发者可以自定义应用程序界面，包括在桌面上显示通知、水印等效果。</p>\n<p>要实现类似的效果，你可以使用 Electron 的 API 来创建自定义的通知或者在界面上显示水印。在 Electron 中，你可以使用<code>electron.Notification</code> API 来创建通知，或者使用<code>&lt;div&gt;</code>等 HTML 元素来实现水印效果。</p>\n<p>例如，你可以使用以下代码在 Electron 应用程序中显示一个简单的通知：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; app, Notification &#125; &#x3D; require(&#39;electron&#39;);\n\napp.whenReady().then(() &#x3D;&gt; &#123;\n  const notification &#x3D; new Notification(&#123;\n    title: &#39;提示&#39;,\n    body: &#39;请激活Windows系统！&#39;,\n  &#125;);\n  notification.show();\n&#125;);</code></pre>\n\n<p>如果你希望在应用程序界面上显示水印，你可以使用 HTML 和 CSS 来实现，例如：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Electron App&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        background-color: #f0f0f0;\n        position: relative;\n      &#125;\n\n      .watermark &#123;\n        position: absolute;\n        bottom: 20px;\n        right: 20px;\n        font-size: 14px;\n        color: rgba(0, 0, 0, 0.3);\n        transform: rotate(-20deg);\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, Electron!&lt;&#x2F;h1&gt;\n    &lt;div class&#x3D;&quot;watermark&quot;&gt;请激活Windows系统&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>以上代码只是示例，并不是完整的 Electron 应用程序代码。你需要结合 Electron 的主进程和渲染进程来实现完整的应用程序功能。</p>\n<p>总结来说，通过 Electron 的灵活性，你可以实现在桌面应用程序中展示类似于 Windows 激活水印的效果。你可以根据自己的需求使用通知或者在界面上创建自定义元素来实现该效果。</p>\n<h2 id=\"tauri-app-如何实现这个效果，中文回答\"><a href=\"#tauri-app-如何实现这个效果，中文回答\" class=\"headerlink\" title=\"tauri.app 如何实现这个效果，中文回答\"></a>tauri.app 如何实现这个效果，中文回答</h2><p>Tauri 是一个用于构建跨平台原生桌面应用程序的开源工具集，基于 Rust 和 Web 技术栈。要在 Tauri 应用程序中实现在桌面全屏加水印并不影响用户操作的效果，你可以通过自定义 Tauri 的窗口和界面来实现。</p>\n<p>以下是一个简单的示例，展示如何使用 Tauri 在桌面全屏加水印并保持穿透效果，让用户可以操作其他应用程序而不受水印干扰：</p>\n<ol>\n<li><p>首先，确保你已经按照 Tauri 的文档创建了一个 Tauri 项目，并且可以成功运行应用程序。</p>\n</li>\n<li><p>打开 <code>src-tauri/main.rs</code> 文件，这是 Tauri 应用程序的主入口文件。</p>\n</li>\n<li><p>在 <code>main.rs</code> 中，找到创建窗口的部分，可能是类似下面的代码：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">fn main() &#123;\n    tauri::Builder::default()\n        .invoke_handler(tauri::generate_handler![...])\n        .run(tauri::generate_context!())\n        .expect(&quot;error while running tauri application&quot;);\n&#125;</code></pre>\n\n<ol start=\"4\">\n<li>在创建窗口的代码块中，使用 Tauri 的 API 来设置窗口属性，实现全屏和穿透效果：</li>\n</ol>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">fn main() &#123;\n    let fullscreen &#x3D; true; &#x2F;&#x2F; 是否全屏\n    let title &#x3D; &quot;My Tauri App&quot;; &#x2F;&#x2F; 窗口标题\n    let transparent &#x3D; true; &#x2F;&#x2F; 窗口是否透明\n\n    let mut config &#x3D; tauri::WindowBuilder::new()\n        .title(title)\n        .inner_size(tauri::dpi::PhysicalSize::new(800, 600)); &#x2F;&#x2F; 设置窗口大小\n\n    if fullscreen &#123;\n        config &#x3D; config.fullscreen(None); &#x2F;&#x2F; 全屏\n    &#125;\n\n    if transparent &#123;\n        config &#x3D; config.transparent(true); &#x2F;&#x2F; 窗口透明\n    &#125;\n\n    tauri::Builder::default()\n        .invoke_handler(tauri::generate_handler![...])\n        .run(tauri::generate_context!())\n        .expect(&quot;error while running tauri application&quot;);\n&#125;</code></pre>\n\n<ol start=\"5\">\n<li>接下来，在 Tauri 应用程序中添加一个 HTML 文件，用于显示水印。你可以在项目的 <code>src-tauri</code> 目录下创建一个新文件夹，例如 <code>assets</code>，然后在其中添加一个 HTML 文件，例如 <code>watermark.html</code>：</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Watermark&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        pointer-events: none; &#x2F;* 禁止水印捕获鼠标事件 *&#x2F;\n        z-index: 9999; &#x2F;* 保证水印显示在其他内容之上 *&#x2F;\n      &#125;\n      .watermark &#123;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%) rotate(-20deg);\n        font-size: 24px;\n        color: rgba(0, 0, 0, 0.3);\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;watermark&quot;&gt;请激活Windows系统&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<ol start=\"6\">\n<li>在 Tauri 应用程序的 <code>main.rs</code> 中添加代码，将水印 HTML 加载到 Tauri 窗口中：</li>\n</ol>\n<pre class=\"line-numbers language-rust\" data-language=\"rust\"><code class=\"language-rust\">fn main() &#123;\n    &#x2F;&#x2F; ... 其他代码 ...\n\n    let watermark_html &#x3D; include_str!(&quot;assets&#x2F;watermark.html&quot;);\n    config &#x3D; config.html(watermark_html); &#x2F;&#x2F; 将水印HTML加载到窗口\n\n    &#x2F;&#x2F; ... 其他代码 ...\n\n    tauri::Builder::default()\n        .invoke_handler(tauri::generate_handler![...])\n        .run(tauri::generate_context!())\n        .expect(&quot;error while running tauri application&quot;);\n&#125;</code></pre>\n\n<p>通过以上步骤，你已经在 Tauri 应用程序中实现了在桌面全屏加水印的效果，并保持水印不影响用户操作其他应用程序。请注意，这只是一个简单示例，实际的 Tauri 应用程序可能需要更多的定制和功能来实现复杂的需求。你可以根据自己的需求对代码进行进一步优化和扩展。</p>\n","text":"背景企业级桌面打码，避免员工截图乱发 激活 windows 跳转 “设置”以激活 windows，这个水印的实现原理激活 Windows 操作系统时，有时会出现桌面右下角的水印提示，告诉用户要激活 Windows，并提供跳转链接到“设置”页面以进行激活。这个水印的实现原理是通过操...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"桌面端","slug":"桌面端","count":1,"path":"api/categories/桌面端.json"}],"tags":[{"name":"桌面端","slug":"桌面端","count":1,"path":"api/tags/桌面端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BF%80%E6%B4%BB-windows-%E8%B7%B3%E8%BD%AC-%E2%80%9C%E8%AE%BE%E7%BD%AE%E2%80%9D%E4%BB%A5%E6%BF%80%E6%B4%BB-windows%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B0%B4%E5%8D%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">激活 windows 跳转 “设置”以激活 windows，这个水印的实现原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%99%E4%B8%AA%E6%B0%B4%E5%8D%B0%E6%80%BB%E6%98%AF%E5%B1%95%E7%A4%BA%E5%9C%A8%E9%A1%B6%E5%B1%82%EF%BC%9F\"><span class=\"toc-text\">这个水印总是展示在顶层？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#electron-%E8%83%BD%E5%90%A6%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%95%88%E6%9E%9C%EF%BC%8C-%E4%B8%AD%E6%96%87%E5%9B%9E%E7%AD%94\"><span class=\"toc-text\">electron 能否实现这个效果， 中文回答</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tauri-app-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%95%88%E6%9E%9C%EF%BC%8C%E4%B8%AD%E6%96%87%E5%9B%9E%E7%AD%94\"><span class=\"toc-text\">tauri.app 如何实现这个效果，中文回答</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"shp 转化成svg","uid":"678ea4635fbf5da941ca04bd2df09797","slug":"2023-08-05shp","date":"2023-08-05T11:21:49.000Z","updated":"2023-08-05T11:33:49.629Z","comments":true,"path":"api/articles/2023-08-05shp.json","keywords":null,"cover":null,"text":"绘制城市环路图实现过程 shp 数据 shp 转化成 svg mapshaper sketch 调整 svg 大小 d3js 绘制 svg 增加交互 参考链接基于 shp 完成 echarts map 的显示 ","link":"","photos":[],"count_time":{"symbolsCount":106,"symbolsTime":"1 mins."},"categories":[{"name":"可视化","slug":"可视化","count":1,"path":"api/categories/可视化.json"}],"tags":[{"name":"可视化","slug":"可视化","count":1,"path":"api/tags/可视化.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"ms","uid":"257b42f1eacc94add6ea6e75adb48c69","slug":"2023-07-24ms","date":"2023-07-24T07:41:13.000Z","updated":"2023-08-13T03:13:20.175Z","comments":true,"path":"api/articles/2023-07-24ms.json","keywords":null,"cover":null,"text":"var let const 区别 使用 var 具有全局或函数作用域，存在变量提升，可以重复声明，变量值可修改。 使用 let 具有块级作用域，不存在变量提升，不能重复声明，变量值可修改。 使用 const 具有块级作用域，不存在变量提升，不能重复声明，变量值不可修改（但对象和数...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"面试","slug":"面试","count":5,"path":"api/categories/面试.json"}],"tags":[{"name":"面试","slug":"面试","count":20,"path":"api/tags/面试.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>多学一点，多想一点，多做一点</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}