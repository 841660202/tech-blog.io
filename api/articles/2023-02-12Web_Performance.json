{"title":"Web performance","uid":"e2a10815e593824fa56e5bdca444887f","slug":"2023-02-12Web_Performance","date":"2023-02-12T13:59:56.000Z","updated":"2023-02-20T21:20:56.492Z","comments":true,"path":"api/articles/2023-02-12Web_Performance.json","keywords":null,"cover":[],"content":"<h2 id=\"Web-Performance\"><a href=\"#Web-Performance\" class=\"headerlink\" title=\"Web_Performance\"></a>Web_Performance</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance\" target=\"_blank\" >Web 性能</a></p>\n<h2 id=\"Animation-performance-and-frame-rate\"><a href=\"#Animation-performance-and-frame-rate\" class=\"headerlink\" title=\"Animation performance and frame rate\"></a>Animation performance and frame rate</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Animation_performance_and_frame_rate\" target=\"_blank\">Animation performance and frame rate</a></p>\n<p><strong>对于动画媒体</strong></p>\n<ol>\n<li><code>文件动画</code>： 例如视频和动画 gif，主要的性能问题是文件大小——下载文件的速度足够快而不会对性能产生负面影响是最大的问题。</li>\n<li><code>代码动画</code>：基于代码的动画，无论是 <code>CSS、SVG、&lt;canvas&gt;、webGL</code> 还是其他 JavaScript 动画，即使带宽占用很小，也会导致性能问题。这些动画会消耗 CPU 和&#x2F;或导致卡顿。</li>\n<li><code>操作不当导致更卡</code>：动画可以让网站感觉更快、响应更快，但如果操作不当，动画也会让网站感觉更慢、更卡顿</li>\n<li><code>CSS动画优于JS动画</code>：与使用 JavaScript 的动画元素相比，CSS 动画可以更容易地创建。它们还可以提供更好的性能，因为它们让浏览器更好地控制何时渲染帧，并在必要时丢弃帧。</li>\n</ol>\n<p><strong>CSS 属性成本</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">财产种类</th>\n<th align=\"left\">成本</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">影响元素几何或位置的属性会触发样式重新计算、布局和重绘。</td>\n<td align=\"left\">重新计算、布局、绘制</td>\n<td>left 、max-width、border-width、margin-left、font-size</td>\n</tr>\n<tr>\n<td align=\"left\">不影响几何或位置但不在其自己的层中呈现的属性不会触发布局。</td>\n<td align=\"left\">重新计算、–、绘制</td>\n<td>color</td>\n</tr>\n<tr>\n<td align=\"left\">在它们自己的层中呈现的属性甚至不会触发重绘，因为更新是在组合中处理的。</td>\n<td align=\"left\">重新计算、–、–</td>\n<td>transform opacity</td>\n</tr>\n</tbody></table>\n<h2 id=\"CSS-动画与-JavaScript-动画的性能\"><a href=\"#CSS-动画与-JavaScript-动画的性能\" class=\"headerlink\" title=\"CSS 动画与 JavaScript 动画的性能\"></a>CSS 动画与 JavaScript 动画的性能</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/CSS_JavaScript_animation_performance\" target=\"_blank\">CSS 动画与 JavaScript 动画的性能</a></p>\n<p><strong>多方式生成 web 动画</strong></p>\n<ol>\n<li>CSS transition 和 animation</li>\n<li>基于 JavaScript 的动画（使用 requestAnimationFrame()）</li>\n</ol>\n<h2 id=\"关键渲染路径\"><a href=\"#关键渲染路径\" class=\"headerlink\" title=\"关键渲染路径\"></a>关键渲染路径</h2><p>Critical rendering path</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path\" target=\"_blank\">关键渲染路径</a></p>\n<ol>\n<li>关键渲染路径是浏览器将 <code>HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列</code>。优化关键渲染路径可提高渲染性能。</li>\n<li>关键渲染路径包含了 <code>文档对象模型(DOM)</code>，<code>CSS 对象模型 (CSSOM)</code>，<code>渲染树和布局</code></li>\n</ol>\n<p><strong>提升页面加载速度需要通过</strong></p>\n<ol>\n<li>被加载资源的优先级、控制它们加载的顺序和减小这些资源的体积。性能提示包含<ol>\n<li><code>异步和延迟</code>：通过异步、延迟加载</li>\n<li><code>数量</code>：消除非关键资源来减少关键资源的请求数量，</li>\n<li><code>体积</code>：优化必须的请求数量和每个请求的文件体积，</li>\n<li><code>资源加载顺序</code>：通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"延迟加载-懒加载\"><a href=\"#延迟加载-懒加载\" class=\"headerlink\" title=\"延迟加载 (懒加载)\"></a>延迟加载 (懒加载)</h2><p>Lazy loading</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading\" target=\"_blank\">延迟加载 (懒加载)</a></p>\n<h3 id=\"Lazy-loading-是什么\"><a href=\"#Lazy-loading-是什么\" class=\"headerlink\" title=\"Lazy loading 是什么\"></a>Lazy loading 是什么</h3><p>延迟加载 (懒加载) 是一种<code>将资源标识为非阻塞（非关键）资源</code>并<code>仅在需要时加载它们</code>的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间</p>\n<h3 id=\"Lazy-loading-策略\"><a href=\"#Lazy-loading-策略\" class=\"headerlink\" title=\"Lazy loading 策略\"></a>Lazy loading 策略</h3><p>代码拆分 可以将 JavaScript、CSS 和 HTML 分割成小块，以发送最少的代码提供关键信息，以优化页面加载时间。其余的部分可以在需要时加载</p>\n<ol>\n<li><code>JS</code>: 脚本类型模块 任何类型为 type&#x3D;”module” 的脚本标签都被视为一个 JavaScript 模块，并且默认情况下会被延迟</li>\n<li><code>CSS</code>: 默认情况下，CSS 被视为渲染阻塞资源，因此，在 CSSOM 被构造完成之前，浏览器不会渲染任何已处理的内容。CSS 必须很薄，才能尽快交付，建议使用媒体类型和查询实现非阻塞渲染</li>\n<li><code>Fonts</code>: 默认情况下，字体请求会延迟到构造渲染树之前，这可能会导致文本渲染延迟</li>\n<li><code>Images and iframes</code>:<ol>\n<li>增加 <code>loading=&quot;lazy&quot;</code>。 可用于指示浏览器延迟加载屏幕外的图像&#x2F;iframe，直到用户滚动到它们附近</li>\n<li><code>&lt;picture&gt; &lt;source</code></li>\n<li>图像的 srcset</li>\n</ol>\n</li>\n<li><code>Polyfill</code> 包含此 Polyfill 以支持较旧且当前不兼容的浏览器：<ol>\n<li>加载属性 Polyfill</li>\n<li>增加 async 异步加载 <a href=\"https://github.com/mfranzke/loading-attribute-polyfill#image-wrapped-in-a-picture-tag\" target=\"_blank\" >见</a></li>\n</ol>\n</li>\n<li><code>交叉观察者</code> API Intersection Observers 允许用户知道观察到的元素何时进入或退出浏览器的视口</li>\n<li><code>事件处理程序</code> 当浏览器的兼容性至关重要时，有以下几种选择：<ol>\n<li><code>支持</code>: <code>IntersectionObserver</code>就用，</li>\n<li><code>不支持</code>: <code>回退到低版本</code>：以滚动，调整大小或改变方向的事件处理程序，来确定特定元素是否在视口中</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Navigation-and-resource-timings\"><a href=\"#Navigation-and-resource-timings\" class=\"headerlink\" title=\"Navigation and resource timings\"></a>Navigation and resource timings</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings\" target=\"_blank\">Navigation and resource timings</a></p>\n<p><a href=\"/#/post/2022-05-12performance\" target=\"_blank\" >2022-05-12performance</a></p>\n<p><strong>非常重要‼️ <code>performanceTiming API</code> 被弃用，但被所有浏览器支持，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceNavigationTiming\" target=\"_blank\" >performanceNavigationTiming</a> 是新的 API</strong></p>\n<h3 id=\"performanceTiming\"><a href=\"#performanceTiming\" class=\"headerlink\" title=\"performanceTiming\"></a>performanceTiming</h3><img src=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings/screen_shot_2019-05-03_at_1.06.27_pm.png\" />\n\n<h4 id=\"计算时间\"><a href=\"#计算时间\" class=\"headerlink\" title=\"计算时间\"></a>计算时间</h4><p>我们可以使用这些值来衡量感兴趣的特定时间：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 第一个字节的时间\nconst ttfb &#x3D; time.responseStart - time.navigationStart;\n&#x2F;&#x2F; 页面加载时间\nlet pageloadtime &#x3D; time.loadEventStart - time.navigationStart;\n&#x2F;&#x2F; DNS 查找时间\nconst dns &#x3D; time.domainLookupEnd - time.domainLookupStart;\n&#x2F;&#x2F; TCP握手所花费的时间是连接开始和连接结束之间的时间：\nconst tcp &#x3D; time.connectEnd - time.connectStart;\n&#x2F;&#x2F; SSL协商\n&#x2F;&#x2F; 如果使用安全连接，secureConnectionStart则为truthysecureConnectionStart ，并且和时间requestStart差值大于 0。\nconst ssl &#x3D; time.requestStart - time.secureConnectionStart;</code></pre>\n\n<h4 id=\"性能输入-API\"><a href=\"#性能输入-API\" class=\"headerlink\" title=\"性能输入 API\"></a>性能输入 API</h4><p>上面的一般性能计时已弃用，但完全受支持。我们现在有了<code> Performance Entry API</code>，它提供了在导航和资源加载过程中标记和测量时间的功能。您还可以创建标记</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">performance.getEntriesByType(&quot;navigation&quot;).forEach((navigation) &#x3D;&gt; &#123;\n  console.dir(navigation);\n&#125;);\n\nperformance.getEntriesByType(&quot;resource&quot;).forEach((resource) &#x3D;&gt; &#123;\n  console.dir(resource);\n&#125;);\n\nperformance.getEntriesByType(&quot;mark&quot;).forEach((mark) &#x3D;&gt; &#123;\n  console.dir(mark);\n&#125;);\n\nperformance.getEntriesByType(&quot;measure&quot;).forEach((measure) &#x3D;&gt; &#123;\n  console.dir(measure);\n&#125;);\n\nperformance.getEntriesByType(&quot;paint&quot;).forEach((paint) &#x3D;&gt; &#123;\n  console.dir(paint);\n&#125;);\n\nperformance.getEntriesByType(&quot;frame&quot;).forEach((frame) &#x3D;&gt; &#123;\n  console.dir(frame);\n&#125;);</code></pre>\n\n<h3 id=\"performanceNavigationTiming\"><a href=\"#performanceNavigationTiming\" class=\"headerlink\" title=\"performanceNavigationTiming\"></a>performanceNavigationTiming</h3><img src=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/timestamp-diagram.svg\" />\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const observer &#x3D; new PerformanceObserver((list) &#x3D;&gt; &#123;\n  list.getEntries().forEach((entry) &#x3D;&gt; &#123;\n    console.log(entry.toJSON());\n  &#125;);\n&#125;);\n\nobserver.observe(&#123; entryTypes: [&quot;navigation&quot;] &#125;);</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/toJSON#using_the_tojson_method\" target=\"_blank\" >PerformanceNavigationTiming.toJSON()</a></p>\n<h2 id=\"优化启动性能\"><a href=\"#优化启动性能\" class=\"headerlink\" title=\"优化启动性能\"></a>优化启动性能</h2><p>Optimizing startup performance</p>\n<img src=\"http://t-blog-images.aijs.top/img/202302131930823.webp\" />\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Optimizing_startup_performance\" target=\"_blank\">优化启动性能</a></p>\n<h3 id=\"异步化\"><a href=\"#异步化\" class=\"headerlink\" title=\"异步化\"></a>异步化</h3><ol>\n<li><code>脚本异步化</code>：在需要异步执行的脚本标签上使用 defer 或 async 属性</li>\n<li><code>多线程解码</code>：如果你需要解码资源文件（比如，解码 JPEG 文件并将其转换为原始纹理数据，以便随后在 WebGL 中使用），最好在 workers 里做这件事</li>\n<li><code>并行数据处理</code>：所有能并行的数据处理都应该并行化</li>\n<li><code>非关键不加载</code>： 在你启动的 HTML 文件中，不要包含不会在关键路径下出现的脚本或样式表。只在需要时加载他们</li>\n<li><code>非关键不渲染</code>：不要强迫 Web 引擎构建不需要的 DOM，一种简单的“hack”的方式是把你的 HTML 留在文档里，但是在外层包裹注释</li>\n<li><code>按需渲染</code>：当文档的一部分需要被渲染时，加载被注释的 HTML</li>\n<li><code>优化程度</code>：优化到 10s 以内</li>\n</ol>\n<h3 id=\"数据大小\"><a href=\"#数据大小\" class=\"headerlink\" title=\"数据大小\"></a>数据大小</h3><ol>\n<li><code>小的启动快</code>：尽力优化游戏数据的体积，</li>\n<li><code>小的处理快</code>：小一些的文件下载和处理都比大文件快。</li>\n</ol>\n<h3 id=\"下载时间\"><a href=\"#下载时间\" class=\"headerlink\" title=\"下载时间\"></a>下载时间</h3><ol>\n<li><code>硬件</code>：应该考虑买个速度越快越好托管服务器。</li>\n<li><code>压缩</code>：还应该考虑压缩数据，尽可能缩小其体积。</li>\n<li><code>拆解</code>：合理拆分文件大小</li>\n<li><code>缓存</code>：数据缓存</li>\n</ol>\n<h3 id=\"GPU-因素-如游戏帧率展示\"><a href=\"#GPU-因素-如游戏帧率展示\" class=\"headerlink\" title=\"GPU 因素, 如游戏帧率展示\"></a>GPU 因素, 如游戏帧率展示</h3><p>编译着色器，以及将纹理传输到 GPU 会占用时间，特别是在比较复杂的游戏中。<br>尽管这也会发生在本地 (非 Web ) 游戏中，但还是会很恼人。不要不告诉用户游戏实际上还在启动中就这么做。</p>\n<ol>\n<li>编译着色器，以及将纹理传输到 GPU 会占用时间</li>\n<li>暗示用户，间接告诉他，换高端设备</li>\n</ol>\n<h3 id=\"主观因素-转移用户注意力\"><a href=\"#主观因素-转移用户注意力\" class=\"headerlink\" title=\"主观因素 - 转移用户注意力\"></a>主观因素 - 转移用户注意力</h3><ol>\n<li>你可以在启动过程中做一些事情来使用户专注于其上，这会让时间看起来过得更快些。</li>\n<li>就游戏而言，可以考虑播放一些背景音乐或者显示漂亮的<code>启动画面</code>；</li>\n<li>在运算执行期间，更新你的<code>进度提示</code>，改变显示内容，或者做任何你想做的事情：这有助于用户知晓应用正在做一些工作，而不是一声不吭地呆在那儿。</li>\n</ol>\n<h2 id=\"综合监控和真实用户监控\"><a href=\"#综合监控和真实用户监控\" class=\"headerlink\" title=\"综合监控和真实用户监控\"></a>综合监控和真实用户监控</h2><p>Performance Monitoring: RUM vs. synthetic monitoring</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Rum-vs-Synthetic\" target=\"_blank\">综合监控和真实用户监控 </a></p>\n<h2 id=\"Performance-budgets\"><a href=\"#Performance-budgets\" class=\"headerlink\" title=\"Performance budgets\"></a>Performance budgets</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Performance_budgets\" target=\"_blank\">Performance budgets</a></p>\n<h2 id=\"性能基础知识\"><a href=\"#性能基础知识\" class=\"headerlink\" title=\"性能基础知识\"></a>性能基础知识</h2><p>Performance fundamentals</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Fundamentals\" target=\"_blank\">Performance fundamentals</a></p>\n<p>性能意味着效率</p>\n<h3 id=\"三个问题\"><a href=\"#三个问题\" class=\"headerlink\" title=\"三个问题\"></a>三个问题</h3><ol>\n<li>什么是性能?</li>\n<li>浏览器平台如何帮助改进它?</li>\n<li>可以使用哪些工具和过程来测试和改进它?</li>\n</ol>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ol>\n<li>网络监视器 network</li>\n<li>JavaScript 探查器 profile</li>\n<li>performance</li>\n<li>Performance-Analyser</li>\n<li>performance monitor<img src=\"http://t-blog-images.aijs.top/img/202302132242239.gif\" /></li>\n<li>rendering<img src=\"http://t-blog-images.aijs.top/img/202302132245360.webp\" /></li>\n<li><a href=\"https://github.com/thedaviddias/Front-End-Performance-Checklist#performance-tools\" target=\"_blank\" >见</a></li>\n<li>PageSpeed Insights</li>\n<li>web-vitals &amp; web-vitals-report</li>\n</ol>\n<h2 id=\"Populating-the-page-how-browsers-work\"><a href=\"#Populating-the-page-how-browsers-work\" class=\"headerlink\" title=\"Populating the page: how browsers work\"></a>Populating the page: how browsers work</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work\" target=\"_blank\">Populating the page: how browsers work</a></p>\n<h2 id=\"Recommended-Web-Performance-Timings-How-long-is-too-long\"><a href=\"#Recommended-Web-Performance-Timings-How-long-is-too-long\" class=\"headerlink\" title=\"Recommended Web Performance Timings: How long is too long?\"></a>Recommended Web Performance Timings: How long is too long?</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/How_long_is_too_long\" target=\"_blank\">Recommended Web Performance Timings: How long is too long?</a></p>\n<h2 id=\"了解延迟\"><a href=\"#了解延迟\" class=\"headerlink\" title=\"了解延迟\"></a>了解延迟</h2><p>Understanding latency</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Understanding_latency\" target=\"_blank\">了解延迟</a></p>\n<h2 id=\"DNS-预获取\"><a href=\"#DNS-预获取\" class=\"headerlink\" title=\"DNS 预获取\"></a>DNS 预获取</h2><p>Using dns-prefetch</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/dns-prefetch\" target=\"_blank\">DNS 预获取</a></p>\n<h2 id=\"一些优化指标\"><a href=\"#一些优化指标\" class=\"headerlink\" title=\"一些优化指标\"></a>一些优化指标</h2><img src=\"http://t-blog-images.aijs.top/img/202302142241384.webp\" style=\"width:500px;max-width:100%\"/>\n\n<ol>\n<li><a href=\"/#/post/2023-02-14web_lcp\" target=\"_blank\" >见：2023-02-14web_lcp</a></li>\n<li><a href=\"/#/post/2023-02-14web_fid\" target=\"_blank\" >见：2023-02-14web_fid</a></li>\n<li><a href=\"/#/post/2023-02-14web_cls\" target=\"_blank\" >见：2023-02-14web_cls</a></li>\n<li><a href=\"https://web.dev/ttfb/\" target=\"_blank\" >Time to First Byte 首字节时间 (TTFB)</a></li>\n<li><a href=\"https://web.dev/tti/\" target=\"_blank\" >Time to Interactive 可交互时间 (TTI)</a></li>\n</ol>\n<h2 id=\"测量工具对比\"><a href=\"#测量工具对比\" class=\"headerlink\" title=\"测量工具对比\"></a>测量工具对比</h2><table>\n<thead>\n<tr>\n<th align=\"left\">工具名</th>\n<th align=\"left\">LCP</th>\n<th>FID</th>\n<th>CLS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://github.com/GoogleChrome/web-vitals\" target=\"_blank\" >web-vitals 脚本库</a></td>\n<td align=\"left\">✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma/related?hl=zh-CN\" target=\"_blank\" >Web 指标扩展程序 </a></td>\n<td align=\"left\">✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.chrome.com/docs/devtools/\" target=\"_blank\" >Chrome 开发者工具</a></td>\n<td align=\"left\">✔</td>\n<td>✘（使用 TBT 代替）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://developer.chrome.com/docs/lighthouse/overview/\" target=\"_blank\" >灯塔 </a></td>\n<td align=\"left\">✔</td>\n<td>✘（使用 TBT 代替）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h2 id=\"原型链也会搞性能\"><a href=\"#原型链也会搞性能\" class=\"headerlink\" title=\"原型链也会搞性能\"></a>原型链也会搞性能</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E6%80%A7%E8%83%BD\" target=\"_blank\" >在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://juejin.cn/post/6940656977919868959\" target=\"_blank\" >浏览器的 performance API 与页面首屏加载分析</a></p>\n<p><a href=\"https://web.dev/vitals/\" target=\"_blank\" >Web 指标</a></p>\n","text":"Web_PerformanceWeb 性能 Animation performance and frame rateAnimation performance and frame rate 对于动画媒体 文件动画： 例如视频和动画 gif，主要的性能问题是文件大小——下载文件的速...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/categories/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/tags/性能优化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-Performance\"><span class=\"toc-text\">Web_Performance</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Animation-performance-and-frame-rate\"><span class=\"toc-text\">Animation performance and frame rate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E5%8A%A8%E7%94%BB%E4%B8%8E-JavaScript-%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">CSS 动画与 JavaScript 动画的性能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">关键渲染路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD-%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">延迟加载 (懒加载)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lazy-loading-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Lazy loading 是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lazy-loading-%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">Lazy loading 策略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Navigation-and-resource-timings\"><span class=\"toc-text\">Navigation and resource timings</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#performanceTiming\"><span class=\"toc-text\">performanceTiming</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">计算时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E8%BE%93%E5%85%A5-API\"><span class=\"toc-text\">性能输入 API</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#performanceNavigationTiming\"><span class=\"toc-text\">performanceNavigationTiming</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">优化启动性能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%8C%96\"><span class=\"toc-text\">异步化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">数据大小</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">下载时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPU-%E5%9B%A0%E7%B4%A0-%E5%A6%82%E6%B8%B8%E6%88%8F%E5%B8%A7%E7%8E%87%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">GPU 因素, 如游戏帧率展示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A7%82%E5%9B%A0%E7%B4%A0-%E8%BD%AC%E7%A7%BB%E7%94%A8%E6%88%B7%E6%B3%A8%E6%84%8F%E5%8A%9B\"><span class=\"toc-text\">主观因素 - 转移用户注意力</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%BC%E5%90%88%E7%9B%91%E6%8E%A7%E5%92%8C%E7%9C%9F%E5%AE%9E%E7%94%A8%E6%88%B7%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">综合监控和真实用户监控</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Performance-budgets\"><span class=\"toc-text\">Performance budgets</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">性能基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">三个问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">工具</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Populating-the-page-how-browsers-work\"><span class=\"toc-text\">Populating the page: how browsers work</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Recommended-Web-Performance-Timings-How-long-is-too-long\"><span class=\"toc-text\">Recommended Web Performance Timings: How long is too long?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3%E5%BB%B6%E8%BF%9F\"><span class=\"toc-text\">了解延迟</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DNS-%E9%A2%84%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">DNS 预获取</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">一些优化指标</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E9%87%8F%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">测量工具对比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B9%9F%E4%BC%9A%E6%90%9E%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">原型链也会搞性能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"性能指标 - LCP","uid":"c0c40ac20df205f0ad9a5f01d2cefd4b","slug":"2023-02-14web_lcp","date":"2023-02-14T13:19:15.000Z","updated":"2023-02-20T21:20:56.495Z","comments":true,"path":"api/articles/2023-02-14web_lcp.json","keywords":null,"cover":"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZZU8Z7TMKXmzZT2mCjJU.svg","text":"Largest Contentful Paint (LCP)最大内容绘制，测量加载性能。为了提供良好的用户体验，LCP 应在页面首次开始加载后的 2.5 秒内发生 导致 LCP 不佳的最常见原因是： 缓慢的服务器响应速度 阻塞渲染的 JavaScript 和 CSS 缓慢的资源加...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/categories/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":9,"path":"api/tags/性能优化.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}},"next_post":{"title":"问题复盘","uid":"6a9933d3674afa3ae34e90758b20e9f5","slug":"2023-02-12problem","date":"2023-02-12T03:15:27.000Z","updated":"2023-02-20T21:20:56.493Z","comments":true,"path":"api/articles/2023-02-12problem.json","keywords":null,"cover":null,"text":"技术上优化上 包优化： wiki-ui 组件库拖慢业务项目的问题 开发优化：webpack 在开发阶段，启动更新慢的问题，使用 vite 进行开发环境的替换，实现 vite 开发环境，webpack 生产环境 发布更新：使用模块联邦解决微应用问题，实现业务拆分 性能优化：imme...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"复盘","slug":"复盘","count":7,"path":"api/categories/复盘.json"}],"tags":[{"name":"复盘","slug":"复盘","count":7,"path":"api/tags/复盘.json"}],"author":{"name":"十三","slug":"blog-author","avatar":"http://t-blog-images.aijs.top/img/202303171118970.webp","link":"/","description":"<div><p>自律，为了更好的自己</p><p>眼中有光，心中有梦，脚下有路</p><div>","socials":{"github":"https://github.com/841660202","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/web_longboss","juejin":"","customs":{}}}}}