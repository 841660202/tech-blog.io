{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"const data = { authList: [ { labelId: \"0000\", delegatedUserList: [ { authType: \"02\", authAmt: \"\", delegatedUser: \"name_a\", }, { authType: \"0...","date":"2022-11-01T13:45:33.865Z","updated":"2022-11-01T13:45:33.863Z","comments":true,"path":"api/pages/test/check copy.js","covers":null,"excerpt":"","content":"const data = {\n  authList: [\n    {\n      labelId: \"0000\",\n      delegatedUserList: [\n        {\n          authType: \"02\",\n          authAmt: \"\",\n          delegatedUser: \"name_a\",\n        },\n        {\n          authType: \"02\",\n          authAmt: \"1\",\n          delegatedUser: \"name_b\",\n        },\n      ],\n    },\n    {\n      labelId: \"0001\",\n      delegatedUserList: [\n        {\n          authType: \"01\",\n          authAmt: \"\",\n          delegatedUser: \"name_a\",\n        },\n        {\n          authType: \"02\",\n          authAmt: \"\",\n          delegatedUser: \"name_b\",\n        },\n      ],\n    },\n    {\n      labelId: \"0002\",\n      delegatedUserList: [\n        {\n          authType: \"01\",\n          authAmt: \"\",\n          delegatedUser: \"name_a\",\n        },\n        {\n          authType: \"02\",\n          authAmt: \"\",\n          delegatedUser: \"name_b\",\n        },\n      ],\n    },\n  ],\n};\n\n// authType: 01, 最少有一个需要填写的\n\n/**\n * 校验授权数据为空\n * @param {*} data 待校验数据，满足\n * @param {*} authType 授权类型：默认对 ‘01’进行校验\n * @param {*} emptyValues 空值配置项默认 ['']，可以配置 ['', undefined, null, 0]空值\n * @returns false: 检验不通过，true,检验通过\n */\nfunction checkAuthAmt(data, authType = \"01\", emptyValues = [\"\"]) {\n  // 按照人员进行分组\n  const groupsByUser = [];\n  // 默认每个authList的子项， delegatedUserList是有序的，即：[user1, user2]\n  data?.authList?.forEach((authItem) => {\n    authItem?.delegatedUserList?.forEach((authUserInfoItem, index) => {\n      if (groupsByUser[index]) {\n        // 已经有数据\n        groupsByUser[index].push(authUserInfoItem);\n      } else {\n        // 没有数据\n        groupsByUser[index] = [].concat(authUserInfoItem);\n      }\n    });\n  });\n\n  let oks = [];\n\n  for (const records of groupsByUser) {\n    // 一个用户所有数据校验的结果\n    const authTypeArr = records.filter(\n      (record) => record.authType === authType\n    );\n    if (authTypeArr.length != records.length) {\n      oks.push(true);\n      continue;\n    }\n    const everyIsEmpty = authTypeArr.every((record) =>\n      emptyValues.includes(record.authAmt)\n    );\n\n    // console.log(\"records\", records);\n    console.log(\"authTypeArr\", authTypeArr);\n    console.log(\"everyIsEmpty\", everyIsEmpty);\n    console.log(\"------------------\");\n    // 每个都满足空值\n    if (\n      everyIsEmpty &&\n      authTypeArr.length > 0 /**排除空数组，每一项都是空的情况 */\n    ) {\n      // isok = false;\n      // 利用 forEach的特点，可以通过return终止循环\n      oks.push(true);\n    }\n\n    if (!isok) return;\n  }\n\n  return isok;\n}\n\nconsole.log(\"checkAuthAmt(data);\", checkAuthAmt(data));\n","count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"toc":""}