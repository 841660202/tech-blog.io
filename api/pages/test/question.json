{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"var let const 区别： 版本： var 是 es6 之前， const、let es6 之后， 分类： 在 es6 之前只有全局作用域和函数作用域， const、let 块级作用域 提升：三者都会有变量提升，但是 let const 有暂时性死区，没执行声明出，提前使...","date":"2022-09-17T07:48:05.689Z","updated":"2022-09-17T07:48:05.689Z","comments":true,"path":"api/pages/test/question.json","covers":null,"excerpt":"","content":"<h2 id=\"var-let-const-区别：\"><a href=\"#var-let-const-区别：\" class=\"headerlink\" title=\"var let const 区别：\"></a>var let const 区别：</h2><ol>\n<li>版本： var 是 es6 之前， const、let es6 之后，</li>\n<li>分类： 在 es6 之前只有全局作用域和函数作用域， const、let 块级作用域</li>\n<li>提升：三者都会有变量提升，但是 let const 有暂时性死区，没执行声明出，提前使用会报错</li>\n<li>重复：var 可以重复声明、重复赋值，let 不可以重复声明，单可重复赋值，const 不可重复声明和赋值</li>\n<li>存储：全局 var 是存储到 Gloabl 上的，let const 是存储到 Script 上的</li>\n<li>默认： 默认情况下是 var 声明</li>\n<li>函数：函数声明提升优先于 var</li>\n</ol>\n<h2 id=\"作用域：\"><a href=\"#作用域：\" class=\"headerlink\" title=\"作用域：\"></a>作用域：</h2><ol>\n<li>什么是执行上下文？</li>\n<li>什么是词法环境？</li>\n<li>什么是作用域？</li>\n<li>什么是作用域链？</li>\n</ol>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><ol>\n<li>什么是原型</li>\n<li>什么是原型链</li>\n<li>Number、Boolean 包装类型的原型链是怎样的？</li>\n<li>instanceof</li>\n<li>事例与构造函数之间的关系</li>\n<li>new 的 this 指向</li>\n</ol>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ol>\n<li>聊下 this 指向问题</li>\n<li>new 做了哪些事情</li>\n<li>箭头函数与普通函数区别</li>\n</ol>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p>背景、出现的原因、解决了什么问题、如何解决的</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h2 id=\"类-class\"><a href=\"#类-class\" class=\"headerlink\" title=\"类 class\"></a>类 class</h2><ol>\n<li>单例模式</li>\n<li>什么是函数式编程</li>\n<li>什么是面向对象编程</li>\n<li>什么是面向过程编程</li>\n</ol>\n<h2 id=\"typescript\"><a href=\"#typescript\" class=\"headerlink\" title=\"typescript\"></a>typescript</h2><ol>\n<li>type 与 interface 的区别</li>\n</ol>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ol>\n<li>聊下 key</li>\n<li>diff [单节点、多节点]</li>\n<li>hooks 产生的原因</li>\n<li>useEffect 执行特点</li>\n<li>生命周期</li>\n<li>父子组件挂载、更新、卸载的顺序</li>\n<li>合成事件的捕获和冒泡如何实现</li>\n<li>父子组件合成事件的捕获和冒泡执行顺序</li>\n</ol>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><ol>\n<li>git rebase 与 git merge</li>\n</ol>\n","count_time":{"symbolsCount":697,"symbolsTime":"1 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#var-let-const-%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">var let const 区别：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%9A\"><span class=\"toc-text\">作用域：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">原型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this\"><span class=\"toc-text\">this</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">事件循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB-class\"><span class=\"toc-text\">类 class</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#typescript\"><span class=\"toc-text\">typescript</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React\"><span class=\"toc-text\">React</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#git\"><span class=\"toc-text\">git</span></a></li></ol>"}