{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// // --- // // title: tree // // date: 2022-08-23 15:31:09 // // categories: tree // // tags: [tree] // // cover: // // --- // // ## mysql ...","date":"2022-09-26T12:16:19.529Z","updated":"2022-09-26T12:16:19.529Z","comments":true,"path":"api/pages/test/树/index.js","covers":[],"excerpt":"","content":"// // ---\n// // title: tree\n// // date: 2022-08-23 15:31:09\n// // categories: tree\n// // tags: [tree]\n// // cover:\n// // ---\n\n// // ## mysql 存储的几种方式\n\n// // <a href=\"https://www.zhihu.com/question/20417447\" target=\"_blank\" >见</a>\n\n// // <img src=\"http://t-blog-images.aijs.top/img/202208231531157.webp\" />\n\n// // 1,4 用过， 2 见过（当前公司 DHR 系统组织架构在用）\n\n// // ## js 获取树某个节点\n\n// // 场景：编辑树节点，刷新树数据，进行编辑节点回显，某些情况下，树节点被转移他人，当前节点不需要回显\n\n// // ### 代码\n\n// // ```ts\n// /**\n//  *\n//  * @param {要查询的节点key} targetValue\n//  * @param {数组形式，树数据} data\n//  * @returns\n//  */\n// const findTreeNodeByKey = (\n//   tree: TreeNode[],\n//   targetValue: string | number,\n//   options = {\n//     find_field: \"id\",\n//     children: \"children\",\n//   }\n// ) => {\n//   let result = null;\n//   const ffindeNodeByKey = (\n//     data: TreeNode[],\n//     skey: string | number,\n//     options\n//   ) => {\n//     const loop = (_data, options) => {\n//       _data.forEach((item) => {\n//         if (item[find_field] === skey) {\n//           result = item;\n//         }\n//         if (item[options.children]) {\n//           loop(item[options.children], options);\n//         }\n//       });\n//     };\n\n//     return loop(data, options);\n//   };\n//   ffindeNodeByKey(tree, targetValue, options);\n//   return result;\n// };\n// // ```\n\n// // ### 测试数据\n\n// // :::details 测试数据详情\n// // ```js\nconst data = [\n  {\n    id: 0,\n    parentId: null,\n    bizName: \"所有业务\",\n    child: [\n      {\n        id: 1,\n        parentId: 0,\n        bizName: \"APP项目组1\",\n        child: [\n          {\n            id: 2,\n            parentId: 1,\n            bizName: \"APP项目组-1\",\n          },\n          {\n            id: 27,\n            parentId: 1,\n            bizName: \"测试\",\n          },\n        ],\n      },\n      {\n        id: 3,\n        parentId: 0,\n        bizName: \"0-APP项目组\",\n        child: [\n          {\n            id: 29,\n            parentId: 3,\n            bizName: \"测试业务线\",\n          },\n          {\n            id: 42,\n            parentId: 3,\n            bizName: \"测试acl\",\n          },\n        ],\n      },\n      {\n        id: 5,\n        parentId: 0,\n        bizName: \"测试的业务线4\",\n        child: [\n          {\n            id: 23,\n            parentId: 5,\n            bizName: \"业务线测试\",\n          },\n        ],\n      },\n      {\n        id: 6,\n        parentId: 0,\n        bizName: \"测试的业务线5\",\n        child: [\n          {\n            id: 24,\n            parentId: 6,\n            bizName: \"测试测试业务线报错\",\n          },\n        ],\n      },\n      {\n        id: 8,\n        parentId: 0,\n        bizName: \"测试的业务线8\",\n        child: [\n          {\n            id: 25,\n            parentId: 8,\n            bizName: \"开发测试的业务线21\",\n          },\n          {\n            id: 26,\n            parentId: 8,\n            bizName: \"开发测试的业务线22\",\n          },\n        ],\n      },\n      {\n        id: 9,\n        parentId: 0,\n        bizName: \"测试的业务线9\",\n      },\n    ],\n  },\n];\n// // ```\n// // :::\n// // ### 测试结果\n\n// // ```js\n// console.log(\"res - 2\", findTreeNodeByKey(2, data));\n// console.log(\"res - 1326\", findTreeNodeByKey(13, data));\n// // console.log(\"res - 0\", findTreeNodeByKey(0, data));\n// console.log(\"res - 996\", findTreeNodeByKey(996, data));\n// // ```\n\n// // ## js 获取某个节点, 对应的路径\n\n// // - 路径 type=path\n// // - 父节点组 type=item\n\n// // ### 代码\n\n// // ```js\n\n/**\n *\n * @param {数组：树data} tree\n * @param {目标值} targetValue\n * @param {配置信息} options\n * @returns\n */\nfunction findNodePaths(tree, targetValue, options) {\n  const defaultOptions = {\n    find_field: \"id\", // 与 targetValue匹配的字段\n    path_field: \"id\", // 生成路径的字段\n    separator: \",\", // 路径字段分隔符\n    type: \"path\", // path / item\n    children: \"children\",\n  };\n  console.log(\"options\", options);\n  options = {\n    ...defaultOptions,\n    ...options,\n  };\n  // 首先我们先定义个数组，用来保存路径节点id\n  let nodePathArray = [];\n\n  // (tree为目标树，targetId为目标节点id)\n  function getNodeRoute(tree, targetValue, options) {\n    for (let index = 0; index < tree.length; index++) {\n      if (tree[index][options.children]) {\n        let endRecursiveLoop = getNodeRoute(\n          tree[index][options.children],\n          targetValue,\n          options\n        );\n        console.log(\"endRecursiveLoop\", endRecursiveLoop);\n        if (endRecursiveLoop) {\n          if (options.type === \"path\") {\n            nodePathArray.push(tree[index][options.path_field]);\n          } else {\n            nodePathArray.push(tree[index]);\n          }\n          return true;\n        }\n      }\n      if (tree[index][options.find_field] === targetValue) {\n        if (options.type === \"path\") {\n          nodePathArray.push(tree[index][options.path_field]);\n        } else {\n          nodePathArray.push(tree[index]);\n        }\n        return true;\n      }\n    }\n  }\n  // 转化成数组\n  let _tree = [];\n  if (Array.isArray(tree)) {\n    _tree = tree;\n  } else {\n    _tree = [tree];\n  }\n\n  getNodeRoute(_tree, targetValue, options);\n  console.log(\"nodePathArray\", nodePathArray);\n\n  if (options.type === \"path\") {\n    return nodePathArray.reverse().join(options.separator);\n  } else {\n    return nodePathArray.reverse();\n  }\n}\n// ```\n\n// ### 测试\n\n// ```js\nconst paths = findNodePaths(data, 81); //查找id为112的节点路径\nconsole.log(paths);\n\nconst pathItems = findNodePaths(data, 81, { type: \"item\" }); //查找id为112的节点路径\nconsole.log(pathItems);\n// ```\n","count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"toc":""}