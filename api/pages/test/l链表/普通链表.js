{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// 链表节点 class Node { constructor(element) { this.element = element; this.next = null; } } // 链表 class LinkedList { constructor() { this.head...","date":"2022-09-15T14:26:11.116Z","updated":"2022-09-15T14:26:11.116Z","comments":true,"path":"api/pages/test/l链表/普通链表.js","covers":null,"excerpt":"","content":"// 链表节点\nclass Node {\n  constructor(element) {\n    this.element = element;\n    this.next = null;\n  }\n}\n\n// 链表\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.length = 0; // length 同数组length与下标关系\n  }\n  // 添加元素\n  append(element) {\n    let node = new Node(element);\n    let current = null; // 指针\n\n    if (this.head === null) {\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.length++;\n  }\n  // 任意位置插入元素\n  insert(position, element) {\n    if (position >= 0 && position <= this.length) {\n      let node = new Node(element);\n      let current = this.head;\n      let previous = null;\n      let index = 0;\n      if (position === 0) {\n        this.head = node;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        node.next = current;\n        previous.next = node;\n      }\n      this.length++;\n      return true;\n    }\n    return false;\n  }\n  // 移除指定位置元素\n  removeAt(position) {\n    if (position > -1 && position < this.length) {\n      let current = this.head;\n      let previous = null;\n      let index = 0;\n\n      if (position === 0) {\n        this.head = current.next;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        previous.next = current.next;\n      }\n      this.length--;\n      return current.element;\n    }\n    return null;\n  }\n  // 寻找元素下标\n  findIndex(element) {\n    let current = this.head;\n    let index = -1;\n    while (current) {\n      if (element === current.element) {\n        return index + 1;\n      }\n      index++;\n      current = current.next;\n    }\n    return -1;\n  }\n\n  // 删除指定文档\n  remove(element) {\n    let index = this.findIndex(element);\n    return this.removeAt(index);\n  }\n\n  isEmpty() {\n    return !this.length;\n  }\n\n  size() {\n    return this.length;\n  }\n\n  toString() {\n    let current = this.head;\n    let string = \"\";\n    while (current) {\n      string += `->${current.element}`;\n      current = current.next;\n    }\n    return string;\n  }\n}\n\nvar ll = new LinkedList();\n\nconsole.log(ll);\n\nll.append(2);\nll.append(6);\nll.append(24);\nll.append(152);\nconsole.log(\"ll\", ll);\nll.insert(3, 18);\nconsole.log(ll);\n\nconsole.log(ll.findIndex(24));\n\nconsole.log(ll.toString())\n","count_time":{"symbolsCount":933,"symbolsTime":"1 mins."},"toc":""}