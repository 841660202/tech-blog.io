{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"const data = [ { delegateUserList: [ { startDate: \"\", endDate: \"\", userId: 1 }, { startDate: \"\", endDate: \"\", userId: 2 }, ], }, // 测试数据1 //...","date":"2022-12-18T03:04:36.751Z","updated":"2022-11-14T13:46:33.288Z","comments":true,"path":"api/pages/test/表头/table.js","covers":null,"excerpt":"","content":"const data = [\n  {\n    delegateUserList: [\n      { startDate: \"\", endDate: \"\", userId: 1 },\n      { startDate: \"\", endDate: \"\", userId: 2 },\n    ],\n  },\n  // 测试数据1\n  // {\n  //   delegateUserList: [\n  //     { startDate: \"2022-11-14\", endDate: \"\", userId: 1 },\n  //     { startDate: \"\", endDate: \"\", userId: 2 },\n  //   ],\n  // },\n  // {\n  //   delegateUserList: [\n  //     { startDate: \"\", endDate: \"2022-11-15\", userId: 1 },\n  //     { startDate: \"\", endDate: \"\", userId: 2 },\n  //   ],\n  // },\n  // {\n  //   delegateUserList: [\n  //     { startDate: \"\", endDate: \"\", userId: 1 },\n  //     { startDate: \"2022-11-16\", endDate: \"\", userId: 2 },\n  //   ],\n  // },\n  // {\n  //   delegateUserList: [\n  //     { startDate: \"\", endDate: \"\", userId: 1 },\n  //     { startDate: \"\", endDate: \"2022-11-17\", userId: 2 },\n  //   ],\n  // },\n  // 测试数据2\n  // {\n  //   delegateUserList: [\n  //     { startDate: \"2020-11-14\", endDate: \"2020-11-15\", userId: 1 },\n  //     { startDate: \"2020-11-16\", endDate: \"2020-11-17\", userId: 2 },\n  //   ],\n  // },\n  {\n    delegateUserList: [\n      { startDate: \"\", endDate: \"2020-11-15\", userId: 1 },\n      { startDate: \"\", endDate: \"2020-11-17\", userId: 2 },\n    ],\n  },\n];\n/*================================================= 深度克隆 start =========================*/\nfunction isObject(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Object]\";\n}\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n}\nfunction deepClone(obj) {\n  let result;\n  if (typeof obj == \"object\") {\n    result = isArray(obj) ? [] : {}; // 空对象接收\n    for (let i in obj) {\n      result[i] =\n        isObject(obj[i]) || isArray(obj[i]) ? deepClone(obj[i]) : obj[i];\n    }\n  } else {\n    result = obj;\n  }\n  return result;\n}\n/*================================================= 深度克隆 end =========================*/\n/**\n * 查找存在字段对应的值返回\n * @param {*} data\n * @param {*} index\n * @param {*} field\n */\nfunction returnColumnUserExistDate(data = [], userIndex, field) {\n  for (const record of data) {\n    const value = record.delegateUserList[userIndex][field];\n    if (value) {\n      return value;\n    }\n  }\n}\n/**\n * 补全data[0]的字段\n * @param {*} data\n */\nfunction fillFirstRecordData(data) {\n  const firstRecord = deepClone(data[0]);\n  // 1. data[0]数据是否完整-不完整， 不完整的数据，需要进行完善\n  firstRecord?.delegateUserList?.forEach((user, userIndex) => {\n    if (!user.startDate || !user.endDate) {\n      // 缺失startDate字段\n      if (!user.startDate) {\n        // 找到了以找到的为准，没找到则以之前的值返回\n        user.startDate =\n          returnColumnUserExistDate(data, userIndex, \"startDate\") ??\n          user.startDate;\n      }\n      // 缺失endDate字段\n      if (!user.endDate) {\n        // 找到了以找到的为准，没找到则以之前的值返回\n        user.endDate =\n          returnColumnUserExistDate(data, userIndex, \"endDate\") ?? user.endDate;\n      }\n    }\n  });\n  // 2. data[0]数据是否完整-完整， 不需要做任何处理\n  console.log(JSON.stringify(firstRecord, null, 2));\n  return firstRecord;\n}\n\nconst firstRecord = fillFirstRecordData(data);\n","count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"toc":""}