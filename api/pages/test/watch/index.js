{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// 是否为基础数据类型 const isBaseDataType = (val) => val === null || typeof val !== \"object\"; // 深度比较两个对象的差异 function deepDiffCompare(a, b, diffResu...","date":"2023-02-20T21:20:56.517Z","updated":"2023-02-20T21:20:56.517Z","comments":true,"path":"api/pages/test/watch/index.js","covers":null,"excerpt":"","content":"// 是否为基础数据类型\nconst isBaseDataType = (val) => val === null || typeof val !== \"object\";\n\n// 深度比较两个对象的差异\nfunction deepDiffCompare(a, b, diffResult, k = \"root\") {\n  // 基本数据类型\n  if (isBaseDataType(a) || isBaseDataType(b)) {\n    // return a === b;\n    if (a !== b) {\n      diffResult[k] = b;\n    } else {\n      // console.log(\"数据一致忽略\");\n    }\n  } else {\n    const propsA = Object.keys(a);\n    const propsB = Object.keys(b);\n    const uukeys = new Set([...propsA, ...propsB]);\n    // 键对应相等\n    uukeys.forEach((key) => deepDiffCompare(a[key], b[key], diffResult, key));\n  }\n}\n// 必填数据\nconst requireds = [\"sex\"];\n// 模拟数据\nconst old = { name: 1, age: 2, dog: { name: \"小狗\", do: \"汪汪叫\" } };\nconst newValue = { name: 1, age: 2, sex: 1 };\n// 执行比较测试\nhandleCompare(old, newValue);\n\n// 这里涉及到函数声明提升，写在后面不影响使用\nfunction handleCompare(old, newValue, onChange) {\n  let diffResult = {};\n\n  deepDiffCompare(old, newValue, diffResult);\n\n  // console.log(\"diffResult\", diffResult);\n  // 变化的数据，在必填数据中，则hasChange为true, 否则为false\n  const hasChange = Object.keys(diffResult).some((k) => requireds.includes(k));\n\n  // console.log(\"hasChange\", hasChange);\n  hasChange && onChange?.();\n}\n// vue中使用\n// watch: {\n//   'submitForm': {\n//      handler(val, oldVal) {\n//       console.log('c changed')\n//       handleCompare(oldVal, val, ()=>{\n//         this.clearTableData()\n//       })\n//     },\n//     deep: true\n//   }\n//  }\n","count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"toc":""}