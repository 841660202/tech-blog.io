{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"// 1. 柯里化简化操作 // 2. 闭包进行缓存 // 3. 校验实效性，是否发送请求更新缓存 // 4. export const _undefined = void 0; export function cacheRequestHelper() { // 函数存放位置 c...","date":"2023-02-20T21:20:56.500Z","updated":"2023-02-20T21:20:56.500Z","comments":true,"path":"api/pages/test/closure/cache.js","covers":null,"excerpt":"","content":"// 1. 柯里化简化操作\n// 2. 闭包进行缓存\n// 3. 校验实效性，是否发送请求更新缓存\n// 4.\n\nexport const _undefined = void 0;\nexport function cacheRequestHelper() {\n  // 函数存放位置\n  const fnMapper = new Map();\n  const observer = {\n    // 写\n    subscribe: (key, fn) => {\n      const e = fnMapper.get(key);\n      // 数据转化成数组\n      if (e) {\n        e.push(fn);\n      } else {\n        fnMapper.set(key, [fn]);\n      }\n    },\n    // 读\n    publish: (key, res) => {\n      const e = fnMapper.get(key) || [];\n      e.forEach(fn) => {\n        fn.call(null, res);\n      };\n    },\n  };\n\n  // 数据存放位置\n  const mapper = new Map();\n\n  // 获取缓存数据\n  function getInfo(args) {\n    const keys = Array.from(mapper.keys());\n    const key = keys.find((item) => {\n      if (isEqual(item, args)) {\n        return true;\n      }\n    });\n    return mapper.get(key);\n  }\n\n  // 柯里化\n  // api 是函数类型\n  return (api) => {\n    //\n    return (...args) => {\n      // 读缓存数据，进行判断\n      const info = getInfo(args);\n\n      if (info === null || info === _undefined ? _undefined : info.result) {\n        return Promise.resolve(info.result);\n      }\n      // 无缓存\n      if (!info) {\n        mapper.set(args, {\n          fetched: true,\n          key: args,\n        });\n\n        // 接口请求\n        return api.apply(null, args).then((res) => {\n          const v = mapper.get(args);\n          if (v) {\n            v.result = res;\n          } else {\n            mapper.set(args, {\n              fetched: true,\n              result: res,\n              key: args,\n            });\n          }\n          // 发布\n          observer.publish(args /* = info.key */, res);\n          return res;\n        });\n        \n        // 有缓存\n      } else {\n        return new Promise((resolve, reject) => {\n          observer.subscribe(info.key, (res) => {\n            resolve(res);\n          });\n        });\n      }\n    };\n  };\n}\n","count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"toc":""}