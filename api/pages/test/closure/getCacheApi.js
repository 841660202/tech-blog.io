{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"\"use strict\"; var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) { function adopt(value) { return valu...","date":"2023-02-20T21:20:56.507Z","updated":"2023-02-20T21:20:56.507Z","comments":true,"path":"api/pages/test/closure/getCacheApi.js","covers":null,"excerpt":"","content":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApiWithCache = exports.getCacheFunc = void 0;\n/**\n * 使用method、api、params 生成唯一key,作为缓存的键\n * @param options\n * @returns\n */\nfunction genGetApiCacheKey(options) {\n    const paramsPath = formGetQueryParams(options.params || {});\n    let _paramsPath = paramsPath ? `?${paramsPath}` : \"\";\n    return `${options.method || \"Get\"} ${options.api}${_paramsPath}`;\n}\n/**\n *  格式get请求的查询数据\n * @param params\n * @returns\n */\nfunction formGetQueryParams(params) {\n    const queryParams = Object.keys(params)\n        .map((key) => `${key}=${params[key]}`)\n        .join(\"&\");\n    return queryParams;\n}\n// @ts-ignore\nDate.prototype.add = function (n, type) {\n    let timestamp = this.getTime();\n    switch (type) {\n        case \"s\":\n            timestamp = timestamp + n * 1000;\n            break;\n        case \"m\":\n            timestamp = timestamp + n * 60 * 1000;\n            break;\n        case \"h\":\n            timestamp = timestamp + n * 60 * 60 * 1000;\n            break;\n        default:\n            throw new Error(\"need type\");\n    }\n    return timestamp;\n};\n/**\n * 检测时间是否有效\n * @param expire\n * @param now\n * @returns\n */\nfunction isValid(lastTimeStamp, diff = 3.5, type = \"s\", now = new Date().getTime()) {\n    const valid = \n    // @ts-ignore\n    lastTimeStamp && new Date(lastTimeStamp).add(diff, type).valueOf() > now;\n    console.log(\"valid\", valid);\n    return valid;\n}\n/**\n * 模拟请求数据\n * @param params\n * @returns\n */\nfunction mockApiBack(params) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve({ success: true, result: params });\n        }, 500);\n    });\n}\n/**\n * 使用闭包进行数据缓存，刷新后缓存会销毁重建\n * @returns\n */\nconst getCacheFunc = () => {\n    const CACHEOBJ = {};\n    return (options) => {\n        console.log(\"options\", options);\n        const cacheKey = genGetApiCacheKey(options);\n        let result = CACHEOBJ[cacheKey];\n        console.log(\"CACHEOBJ\", CACHEOBJ);\n        if (!result || !isValid(result.timestamp)) {\n            console.log(\"缓存失效，接口获取=>>>>>>>>>>>>>>>>>>>>>\", cacheKey);\n            return mockApiBack(options).then((res) => {\n                CACHEOBJ[cacheKey] = Object.assign(Object.assign({}, res), { timestamp: new Date().getTime() });\n                result = CACHEOBJ[cacheKey];\n                return result;\n            });\n        }\n        else {\n            console.log(\"读缓存数据\");\n            return new Promise((resolve) => resolve(result));\n        }\n    };\n};\nexports.getCacheFunc = getCacheFunc;\nexports.getApiWithCache = (0, exports.getCacheFunc)();\n// 测试数据\n(0, exports.getApiWithCache)({ method: \"Get\", api: \"/hello\" });\n(0, exports.getApiWithCache)({ method: \"Get\", api: \"/hello/world\" });\nlet h = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {\n    const d = yield (0, exports.getApiWithCache)({\n        method: \"Get\",\n        api: \"/hello\",\n        params: { name: 1, age: 2 },\n    });\n    console.log(\"d\", d);\n}), 1000 * 1);\nsetTimeout(() => {\n    clearInterval(h);\n}, 1000 * 4);\n","count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"toc":""}