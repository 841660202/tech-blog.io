{"title":"k8s","uid":"be49a2122c73fcfb8561d43727fee0a4","text":"k8s 是什么k8s 如何安装k8s 为什么最少 3 个 masterk8s 如何控制 node如何进行 iterm 多服务器操作scp 命令如何使用？有教程吗？如何安装环境为什么要配置 host如何安装 yuml K8S 的内置资源 Pod:K8S 最小的调度单元，可以将一组密...","date":"2022-11-05T06:50:49.000Z","updated":"2022-11-06T13:08:01.324Z","comments":true,"path":"api/pages/test/2022-11-05k8s.json","covers":[],"excerpt":"","content":"<h2 id=\"k8s-是什么\"><a href=\"#k8s-是什么\" class=\"headerlink\" title=\"k8s 是什么\"></a>k8s 是什么</h2><h2 id=\"k8s-如何安装\"><a href=\"#k8s-如何安装\" class=\"headerlink\" title=\"k8s 如何安装\"></a>k8s 如何安装</h2><h2 id=\"k8s-为什么最少-3-个-master\"><a href=\"#k8s-为什么最少-3-个-master\" class=\"headerlink\" title=\"k8s 为什么最少 3 个 master\"></a>k8s 为什么最少 3 个 master</h2><h2 id=\"k8s-如何控制-node\"><a href=\"#k8s-如何控制-node\" class=\"headerlink\" title=\"k8s 如何控制 node\"></a>k8s 如何控制 node</h2><h2 id=\"如何进行-iterm-多服务器操作\"><a href=\"#如何进行-iterm-多服务器操作\" class=\"headerlink\" title=\"如何进行 iterm 多服务器操作\"></a>如何进行 iterm 多服务器操作</h2><h2 id=\"scp-命令如何使用？有教程吗？\"><a href=\"#scp-命令如何使用？有教程吗？\" class=\"headerlink\" title=\"scp 命令如何使用？有教程吗？\"></a>scp 命令如何使用？有教程吗？</h2><h2 id=\"如何安装环境\"><a href=\"#如何安装环境\" class=\"headerlink\" title=\"如何安装环境\"></a>如何安装环境</h2><h2 id=\"为什么要配置-host\"><a href=\"#为什么要配置-host\" class=\"headerlink\" title=\"为什么要配置 host\"></a>为什么要配置 host</h2><h2 id=\"如何安装-yuml\"><a href=\"#如何安装-yuml\" class=\"headerlink\" title=\"如何安装 yuml\"></a>如何安装 yuml</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><img src=\"http://t-blog-images.aijs.top/img/202211051500924.png\" />\n\n<img src=\"http://t-blog-images.aijs.top/img/202211051501475.png\" />\n\n<!-- http://t-blog-images.aijs.top/img/202211061102460.png 删除 -->\n\n<h2 id=\"K8S-的内置资源\"><a href=\"#K8S-的内置资源\" class=\"headerlink\" title=\"K8S 的内置资源\"></a>K8S 的内置资源</h2><ul>\n<li><p>Pod:K8S 最小的调度单元，可以将一组密切关联的容器组成一个逻辑单元，在这个单元里容器之间可以更好的共享资源。</p>\n</li>\n<li><p>Deployment:主要用于无状态应用，用来部署多个副本的 Pod,并且在 Pod 出现异常时帮助应用及时恢复正常。</p>\n</li>\n<li><p>Statefulset:主要用于有状态应用，可以控制 Pod 的启动顺序，为 Pod 绑定不同的存储等。</p>\n</li>\n<li><p>Job&#x2F;CronJob:用于一次性和周期性的任务。</p>\n</li>\n<li><p>Daemonset：通常用来部署后台常驻任务，会在每台 Vorker 节点启</p>\n</li>\n<li><p>Service:应用的访问入口，通过 selector 选择具有指定 labelf 的 Pod,为其提供服务发现和负载均衡的功能，每个 Service 都可以通过 CoreDNS 获取到其对应的 IP。</p>\n</li>\n<li><p>Ingress:提供 K8S 集群外部访问应用。</p>\n</li>\n<li><p>Configmap、Secret:描述应用的配置和密钥等数据。</p>\n</li>\n<li><p>PV、PVC、HostPath、EmptyDir:描述应用的各类存储。</p>\n</li>\n</ul>\n<p>控制器逻辑</p>\n<ul>\n<li>观察：通过监控 kubernetes 资源对象变化的事件来获取当前对象状态，我们只需要注入 EventHandler 让 client-go 将变化的事件对象信息放入 WorkQueue 中。</li>\n<li>分析：确定当前状态和期望状态的不同，由 Vorker 完成。</li>\n<li>执行：执行能够驱动对象当前状态变化的操作，由 Worker 完成。</li>\n<li>更新：更新对象的当前状态，由 Vorker 完成。</li>\n</ul>\n<p>Client 类型</p>\n<ul>\n<li>RESTClient：最基础的客户端，提供最基本的封装</li>\n<li>Clientset:是一个 Client 的集合，在 Clientset 中包含了所有 K8S 内置资源的 Client,通过 Clientset 便可以很方便的操作如 Pod、Service 这些资源</li>\n<li>dynamicclient 动态客户端，可以操作任意 K8S 的资源，包括 CRD 定义的资源</li>\n<li>DiscoveryClient：用于发现 K8S 提供的资源组、资源版本和资源信息，比如：kubectl api-resources</li>\n</ul>\n<p><a href=\"https://github.com/BackendDoc/kubernetes\" target=\"_blank\" >使用一条命令创建 k8s 单机集群，低配置的电脑也可以运行 k8s 集群</a></p>\n<p>基础概念: 什么是 Pod 控制器类型 K8S 网络通迅模式<br>k8s: 构建 K8S 集群<br>资源清单：资源 资源清单的语法 编写 Pod Pod 的生命周期***<br>Pod 控制器：各种控制器的特点以及使用定义方式<br>服务发现：SVC 原理及其构建方式</p>\n<p>存储：黨握多种存储类型的特点 并且能够在不同环境中选择合适的存储方案（有自己的简众）<br>调度器：黨握调度器原理 能够根据要求把 Pod 定义到想要的范点运行</p>\n<p>安全：集群的认证 鉴权 访问控制原理及其流程<br>HELM: linux yum 黨握 HELM 原理 HELM 模板自定义 HELM 部署一些常用插件</p>\n<p>运维：修改 Kubeadm 达到证书可用期限为 10 年 能够构建高可用的 Kubernet 集群</p>\n<p>高可用集群副杰数据最好是&gt;&#x3D;3 奇数个</p>\n<ul>\n<li>APISERVER:所有服务访问统一入口</li>\n<li>CrontrollerManager:维待副本期望数目</li>\n<li>Scheduler:负责介绍任务选择合适的节点进行分配任务</li>\n<li>ETCD:键值对数据库储存 K8S 集群所有重要信息（持久化）</li>\n<li>kubelet:直接跟容器引擎交互实现容器的生命周期管理</li>\n<li>Kuhe-proxy:负责写入规则至 IPTABLES、IPVS 实现服务映射访问的</li>\n<li>COREDNS:可以为集群中的 SVC 创建一个域名 IP 的对应关系解析</li>\n<li>DASHBOARD:给 K8S 集群提供个 B&#x2F;S 结构访间体系</li>\n<li>INGRESS CONTROLLER:官方只能实现四层代理，INGRESS 可以实现七层代理</li>\n<li>FEDERATION:提供一个可以跨集群中心多 K8S 统一管理功能</li>\n<li>PROMETHEUS:提供 K8S 集群的监控能力</li>\n<li>ELK:提供 K8S 集群只志统一分析介入平台</li>\n</ul>\n<h3 id=\"控制器类型\"><a href=\"#控制器类型\" class=\"headerlink\" title=\"控制器类型\"></a>控制器类型</h3><p>ReplicationController 用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收。<br>在新版本的 Kubernetes 中建议使用 ReplicaSet 来取代 ReplicationControlle</p>\n<p>ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，并且<br>ReplicaSet 支持集合式的 selector</p>\n<p>虽然 ReplicaSet 可以独立使用，但一般还是建议使用 Deployment 来自动管理<br>ReplicaSet,这样就无需担心跟其他机制的不兼容问题（比如 ReplicaSet 不支持<br>rolling-update 但 Deployment 支持)</p>\n<p>Horizontal Pod Autoscaling 仅适用于 Deployment 和 ReplicaSet,在 V1 版本中仅支持根据 Pod 的 cPU 利用率扩所容，在 vlalpha 版本中，支持根据内存和用户自定义的 metric 扩缩容</p>\n<p>StatefulSet 是为了解决有状态服务的问题（对应 Deployments 和 ReplicaSets 是为无状态服务而设计)，其应用场景包括：<br>*稳定的持久化存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现<br>*稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service(即没有 Cluster IP 的 Service)来实现<br>*有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从 0 到 N-l,在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running 和 Ready 状态），基于 init containers 来实现<br>*有序收缩，有序删除（即从 N-1 到 0）</p>\n<p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们<br>新增一个 Pod。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建<br>的所有 Pod<br>使用 DaemonSet 的一些典型用法：<br>*运行集群存储 daemon,例如在每个 Node 上运行 glusterd、ceph。<br>*在每个 Node 上运行日志收集 daemon,例如 fluentd、logstash。 *在每个 Node 上运行监控 daemon,例如 Prometheus Node Exporter</p>\n<p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束<br>Cron Job 管理基于时间的 Job,即：<br>*在给定时间点只运行一次<br>*周期性地在给定时间点运行</p>\n<p>网络通信</p>\n<p>Kubernetes 的网络模型假定了所有 Pod 都在一个可以直接连通的扁平的网络空间中，这在<br>GCE(Google Compute Engine)里面是现成的网络模型，Kubernetes 假定这个网络己经存在。<br>而在私有云里搭建 Kubernetes 集群，就不能假定这个网络已经存在了。我们需要自己实现这<br>个网络假设，将不同节点上的 Docker 容器之间的互相访问先打通，然后运行 Kubernetes</p>\n<p>同一个 Pod 内的多个容器之间：IO<br>各 Pod 之间的通讯：Overlay Network<br>Pod 与 Service 之间的通讯：各节点的 Iptables 规则</p>\n<img src=\"http://t-blog-images.aijs.top/img/202211061313394.png\" />\n<img src=\"http://t-blog-images.aijs.top/img/202211061315365.png\" />\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/454961874\" target=\"_blank\" >shell</a></p>\n<p><a href=\"https://blog.csdn.net/yyfgw/article/details/120835774\" target=\"_blank\" >scp</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43874301/article/details/120704903\" target=\"_blank\" >多窗口同时操作</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_46380571/article/details/108095237\" target=\"_blank\" >多窗口同时操作</a></p>\n","count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#k8s-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">k8s 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#k8s-%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">k8s 如何安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#k8s-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%B0%91-3-%E4%B8%AA-master\"><span class=\"toc-text\">k8s 为什么最少 3 个 master</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#k8s-%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6-node\"><span class=\"toc-text\">k8s 如何控制 node</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C-iterm-%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">如何进行 iterm 多服务器操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scp-%E5%91%BD%E4%BB%A4%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%EF%BC%9F%E6%9C%89%E6%95%99%E7%A8%8B%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">scp 命令如何使用？有教程吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">如何安装环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%85%8D%E7%BD%AE-host\"><span class=\"toc-text\">为什么要配置 host</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85-yuml\"><span class=\"toc-text\">如何安装 yuml</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#K8S-%E7%9A%84%E5%86%85%E7%BD%AE%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">K8S 的内置资源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%99%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">控制器类型</span></a></li></ol></li></ol>"}