[{"id":"c370dd6ecfc84fe9fdfa77b1a6f29341","title":"待办事项","content":"&#x2F;&#x2F; 1. headless-recorder\n&#x2F;&#x2F; 2. lightHouse https:&#x2F;&#x2F;blog.csdn.net&#x2F;tangdou369098655&#x2F;article&#x2F;details&#x2F;122531766\n&#x2F;&#x2F; 3. 博客封面生成\n&#x2F;&#x2F; 4. 装饰器模式 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;decorator\n&#x2F;&#x2F; 5. iconfont自定义图标 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;decorator\n&#x2F;&#x2F; 6. 函数式编程 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;function-production\n&#x2F;&#x2F; 7. 换肤 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;theme-scss\n&#x2F;&#x2F; 8.[x] vscode setting sync 另一台电脑配置无法同步到本电脑\n&#x2F;&#x2F; 9.[x]item2本机重新配置\n&#x2F;&#x2F; 10.[x]vscode 代码片段在md上失效了\n&#x2F;&#x2F; 11. typescript 工具类型源码\n&#x2F;&#x2F; 12. react源码\n&#x2F;&#x2F; 13. ocr桌面端工具 可以借鉴：想使用 tauri 搞，没遇到好的截屏\n&#x2F;&#x2F;                     1. https:&#x2F;&#x2F;github.com&#x2F;wulkano&#x2F;Kap  react + Electron开发\n&#x2F;&#x2F;                     2. vscode插件 ImageToText\n\n好的博客&#x2F;&#x2F; 1.JerryWang_汪子熙  https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;99b8712e8850\n","slug":"todo","date":"2022-12-14T03:59:59.000Z","categories_index":"Todo","tags_index":"Todo","author_index":"陈海龙"},{"id":"c3d5408da05b02828c848a49ca35cf59","title":"修补node_modules下源码","content":"背景之前在简书上记录过，没迁移简书文章，所以重新记录\n由于hexo-theme-aurora代码配色不是很友好，需要自定义配色，又不想改其 github 上代码，直接处理node_modules下的配色文件\n安装 patch-packagepatch-package 包可以通过 npm 进行安装。\nnpm i patch-package --save-dev\n\n或者也可以通过 yarn 进行安装。\nyarn add patch-package -D\n\n修改包代码&#x2F;node_modules&#x2F;某包名下，按需修改\n\n创建补丁在修改依赖包内容后，就可以运行 patch-package 创建 patch 文件了。\nyarn patch-package 包名 # 使用 yarn\n\n运行后通常会在项目根目录下的 patches 目录中创建一个名为 包名+version.patch 的文件。将该 patch 文件提交至版本控制中，即可在之后应用该补丁了。例如：\n👑 ~&#x2F;Desktop&#x2F;other&#x2F;blog&#x2F;technology-blog git:(main) ✗ $ yarn patch-package hexo-theme-aurora\nyarn run v1.4.0\n$ &#x2F;Users&#x2F;haotian&#x2F;Desktop&#x2F;other&#x2F;blog&#x2F;technology-blog&#x2F;node_modules&#x2F;.bin&#x2F;patch-package hexo-theme-aurora\npatch-package 6.4.7\n• Creating temporary folder\n• Installing hexo-theme-aurora@1.5.5 with yarn\n• Diffing your files with clean files\n✔ Created file patches&#x2F;hexo-theme-aurora+1.5.5.patch\n\n💡 hexo-theme-aurora is on GitHub! To draft an issue based on your patch run\n\n    yarn patch-package hexo-theme-aurora --create-issue\n\n✨  Done in 5.48s.\n\n配置 npm 脚本钩子完成上述操作后，最后还需要修改 package.json 的内容，在 scripts 中加入”postinstall”: “patch-package”。\n&quot;scripts&quot;: &#123;\n  &quot;postinstall&quot;: &quot;patch-package&quot;\n&#125;\n\n验证清理 node_modules项目根目录别搞错了,简单粗暴点，直接全清掉\nrm -rf node_modules &amp;&amp; yarn\n\n运行结果👑 ~&#x2F;Desktop&#x2F;other&#x2F;blog&#x2F;technology-blog git:(main) ✗ $ yarn\nyarn install v1.4.0\n[1&#x2F;4] 🔍  Resolving packages...\n[2&#x2F;4] 🚚  Fetching packages...\n[3&#x2F;4] 🔗  Linking dependencies...\nwarning &quot;hexo &gt; nunjucks@3.2.3&quot; has unmet peer dependency &quot;chokidar@^3.3.0&quot;.\nwarning &quot;hexo-browsersync &gt; browser-sync &gt; socket.io &gt; engine.io &gt; ws@8.2.3&quot; has unmet peer dependency &quot;bufferutil@^4.0.1&quot;.\nwarning &quot;hexo-browsersync &gt; browser-sync &gt; socket.io &gt; engine.io &gt; ws@8.2.3&quot; has unmet peer dependency &quot;utf-8-validate@^5.0.2&quot;.\nwarning &quot;hexo-renderer-marked &gt; jsdom@19.0.0&quot; has unmet peer dependency &quot;canvas@^2.5.0&quot;.\nwarning &quot;hexo-renderer-marked &gt; jsdom &gt; ws@8.5.0&quot; has unmet peer dependency &quot;bufferutil@^4.0.1&quot;.\nwarning &quot;hexo-renderer-marked &gt; jsdom &gt; ws@8.5.0&quot; has unmet peer dependency &quot;utf-8-validate@^5.0.2&quot;.\nwarning &quot;hexo-theme-aurora &gt; pinia@2.0.13&quot; has unmet peer dependency &quot;@vue&#x2F;composition-api@^1.4.0&quot;.\nwarning &quot;hexo-theme-aurora &gt; pinia@2.0.13&quot; has unmet peer dependency &quot;typescript@&gt;&#x3D;4.4.4&quot;.\nwarning &quot;hexo-theme-aurora &gt; pinia &gt; vue-demi@0.12.5&quot; has unmet peer dependency &quot;@vue&#x2F;composition-api@^1.0.0-rc.1&quot;.\n[4&#x2F;4] 📃  Building fresh packages...\n$ yarn patch-package # 看这里，在运行修补\nyarn run v1.4.0\n$ &#x2F;Users&#x2F;haotian&#x2F;Desktop&#x2F;other&#x2F;blog&#x2F;technology-blog&#x2F;node_modules&#x2F;.bin&#x2F;patch-package\npatch-package 6.4.7\nApplying patches...\nhexo-theme-aurora@1.5.5 ✔\n✨  Done in 1.00s.\n✨  Done in 13.93s.\n\n\n提交代码将 patches 提交到代码仓库，以后在其他机器上，直接安装依赖包即可。\n注意事项npx patch-package hexo-theme-aurora\n\n这个命令使用 npm 运行的，可能不会成功，使用yarn patch-package hexo-theme-aurora\n👑 ~&#x2F;Desktop&#x2F;other&#x2F;blog&#x2F;technology-blog git:(main) ✗ $ npx patch-package  hexo-theme-aurora\npatch-package 6.4.7\n• Creating temporary folder\n• Installing hexo-theme-aurora@1.5.5 with yarn\nwarning package.json: No license field\nwarning No license field\nerror An unexpected error occurred: &quot;https:&#x2F;&#x2F;registry.npmjs.org&#x2F;axios: ETIMEDOUT&quot;.\nError: https:&#x2F;&#x2F;registry.npmjs.org&#x2F;core-js: ETIMEDOUT\n    at Timeout._onTimeout (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;yarn&#x2F;lib&#x2F;cli.js:132130:19)\n    at listOnTimeout (node:internal&#x2F;timers:557:17)\n\n参考链接hexo-theme-aurora&#x2F;issues&#x2F;168patch-package\n","slug":"2022-06-09patch-package","date":"2022-06-09T01:51:48.000Z","categories_index":"npm","tags_index":"npm","author_index":"陈海龙"},{"id":"effcb24e596d83e2df5140f38213b656","title":"10.Typescript 工具类型","content":"TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.Typescript提供了一些帮助类型转换的工具类型，这些工具类型可以在全局范围内使用。\nPartialReleased: 2.1\nConstructs a type with all properties of Type set to optional. This utility will return a type that represents all subsets of a given type.构造一个具有所有属性类型的可选属性的类型。这个工具将返回一个表示给定类型的所有子集的类型。\n&#x2F;&#x2F; Example\ninterface Todo &#123;\n  title: string;\n  description: string;\n&#125;\n\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) &#123;\n  return &#123; ...todo, ...fieldsToUpdate &#125;;\n&#125;\n\nconst todo1 &#x3D; &#123;\n  title: &quot;organize desk&quot;,\n  description: &quot;clear clutter&quot;,\n&#125;;\n\nconst todo2 &#x3D; updateTodo(todo1, &#123;\n  description: &quot;throw out trash&quot;,\n&#125;);\n\n原理使用映射类型（Mapped Types）\n\n首先通过 keyof T，遍历出类型 T 的所有属性，然后通过 in 操作符进行遍历，最后在属性后加上?，将属性变为可选属性。\n注意 这个 in 不是收缩类型操作符in ,而是映射类型中的in\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;blob&#x2F;HEAD&#x2F;src&#x2F;lib&#x2F;es5.d.ts#L1517\ntype Partial&lt;T&gt; &#x3D; &#123;\n  [P in keyof T]?: T[P];\n&#125;;\n\nRequiredReleased:2.8\nConstructs a type consisting of all properties of Type set to required. The opposite of Partial.构造一个具有所有属性类型的必需属性的类型。与Partial相反。\n&#x2F;&#x2F; Example\ninterface Props &#123;\na?: number;\nb?: string;\n&#125;\n\nconst obj: Props &#x3D; &#123; a: 5 &#125;;\n\nconst obj2: Required&lt;Props&gt; &#x3D; &#123; a: 5 &#125;;\nProperty &#39;b&#39; is missing in type &#39;&#123; a: number; &#125;&#39; but required in type &#39;Required&lt;Props&gt;&#39;.\n\n原理原理：使用映射类型（Mapped Types） 用于将 T 类型的所有属性设置为必选状态，首先通过 keyof T，取出类型 T 的所有属性， 然后通过 in 操作符进行遍历，最后在属性后的 ? 前加上 -，将属性变为必选属性。\n这里顺便讲下-这个符号的作用，这是 TypeScript 2.8 为映射类型增加了添加或删除特定修饰符的能力。具体来说，readonly 和?映射类型中的属性修饰符现在可以加上+或-前缀，以指示应该添加或删除该修饰符，当然一般+号是可以省略的。ts 官网 类型操作符&#x2F;映射类型\ntype Required&lt;T&gt; &#x3D; &#123;\n  [P in keyof T]-?: T[P];\n&#125;;\n\nReadonlyReleased:2.1\nConstructs a type with all properties of Type set to readonly, meaning the properties of the constructed type cannot be reassigned.构造一个具有所有属性类型的只读属性的类型。\n&#x2F;&#x2F; Example\ninterface Todo &#123;\n  title: string;\n&#125;\n\nconst todo: Readonly&lt;Todo&gt; &#x3D; &#123;\n  title: &quot;Delete inactive users&quot;,\n&#125;;\n\ntodo.title &#x3D; &quot;Hello&quot;;\n&#x2F;&#x2F; Cannot assign to &#39;title&#39; because it is a read-only property.\n\nThis utility is useful for representing assignment expressions that will fail at runtime (i.e. when attempting to reassign properties of a frozen object).这个工具是用来表示在运行时将失败的赋值表达式的用途（即尝试重新分配一个冻结对象的属性）。Object.freeze\nfunction freeze&lt;Type&gt;(obj: Type): Readonly&lt;Type&gt;;\n\n原理原理：使用映射类型（Mapped Types） 接收两个泛型，K 为 string | number | symbol 可以继承的类型，这三个也是对象 key 所支持的基础类型，然后通过 in 操作符对 K 进行遍历，每一个属性的类型为 T 类型。\ntype Record&lt;K extends string | number | symbol, T&gt; &#x3D; &#123;\n  [P in K]: T;\n&#125;;\n\nRecord&lt;Keys, Type&gt;Released:2.1\nConstructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.用于构造一个对象类型，它所有的key(键)都是Keys类型，它所有的value(值)都是Type类型。这个工具类型可以被用于映射一个类型的属性到另一个类型。\n&#x2F;&#x2F; Example\ninterface CatInfo &#123;\n  age: number;\n  breed: string;\n&#125;\n\ntype CatName &#x3D; &quot;miffy&quot; | &quot;boris&quot; | &quot;mordred&quot;;\n\nconst cats: Record&lt;CatName, CatInfo&gt; &#x3D; &#123;\n  miffy: &#123; age: 10, breed: &quot;Persian&quot; &#125;,\n  boris: &#123; age: 5, breed: &quot;Maine Coon&quot; &#125;,\n  mordred: &#123; age: 16, breed: &quot;British Shorthair&quot; &#125;,\n&#125;;\n\ncats.boris;\n\nconst cats: Record&lt;CatName, CatInfo&gt;;\n\n原理使用映射类型（Mapped Types）\n接收两个泛型，K 为 string | number | symbol 可以继承的类型，这三个也是对象 key 所支持的基础类型，然后通过 in 操作符对 K 进行遍历，每一个属性的类型为 T 类型。\ntype Record&lt;K extends string | number | symbol, T&gt; &#x3D; &#123;\n  [P in K]: T;\n&#125;;\n\nPick&lt;Type, Keys&gt;Released:2.1\nConstructs a type by picking the set of properties Keys (string literal or union of string literals) from Type.用于构造一个对象类型，它所有的key(键)都是Keys类型，它所有的value(值)都是Type类型。这个工具类型可以被用于映射一个类型的属性到另一个类型。\n&#x2F;&#x2F; Example\ninterface Todo &#123;\n  title: string;\n  description: string;\n  completed: boolean;\n&#125;\n\ntype TodoPreview &#x3D; Pick&lt;Todo, &quot;title&quot; | &quot;completed&quot;&gt;;\n\nconst todo: TodoPreview &#x3D; &#123;\n  title: &quot;Clean room&quot;,\n  completed: false,\n&#125;;\n\ntodo;\n\n&#x2F;&#x2F; const todo: TodoPreview;\n\n原理从 T 类型中提取部分属性，作为新的返回类型。\ntype Pick&lt;T, K extends keyof T&gt; &#x3D; &#123;\n  [P in K]: T[P];\n&#125;;\n\nOmit&lt;Type, Keys&gt;Released:3.5\nConstructs a type by picking all properties from Type and then removing Keys (string literal or union of string literals).用于构造一个类型，它是从Type类型里面过滤了一些属性Keys(Keys是字符串字面量 或者 字符串字面量的联合类型)\n&#x2F;&#x2F; Example\ninterface Todo &#123;\n  title: string;\n  description: string;\n  completed: boolean;\n  createdAt: number;\n&#125;\n\ntype TodoPreview &#x3D; Omit&lt;Todo, &quot;description&quot;&gt;;\n\nconst todo: TodoPreview &#x3D; &#123;\n  title: &quot;Clean room&quot;,\n  completed: false,\n  createdAt: 1615544252770,\n&#125;;\n\ntodo;\n\n&#x2F;&#x2F; const todo: TodoPreview;\n\ntype TodoInfo &#x3D; Omit&lt;Todo, &quot;completed&quot; | &quot;createdAt&quot;&gt;;\n\nconst todoInfo: TodoInfo &#x3D; &#123;\n  title: &quot;Pick up kids&quot;,\n  description: &quot;Kindergarten closes at 5pm&quot;,\n&#125;;\n\ntodoInfo;\n\n&#x2F;&#x2F; const todoInfo: TodoInfo\n\n原理使用 keyof 类型操作符号、extends、类型操作符 Exclude、 类型操作符 Pick\n\n结合 Pick 和 Exclude 方法，提取出不含 K 属性的类型。\n1.keyof T 返回的是联合类型\n2.extends\n3.Exclude&lt;T, K&gt; 返回的是联合类型， 可以接收一个联合类型和一个联合类型，返回一个联合类型\n4.把 K 中的 key, 从 T 中排除掉，剩下的就是 Omit 的类型。\n\ntype Omit&lt;T, K extends keyof T&gt; &#x3D; Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;\n\nExclude&lt;UnionType, ExcludedMembers&gt;Released:2.8\nConstructs a type by excluding from UnionType all union members that are assignable to ExcludedMembers.用于构造一个类型，它是从UnionType联合类型里面排除了所有可以赋给ExcludedMembers的类型。\n&#x2F;&#x2F; Example;\ntype T0 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot;&gt;;\n&#x2F;&#x2F; type T0 &#x3D; &quot;b&quot; | &quot;c&quot;;\n\ntype T1 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;b&quot;&gt;;\n&#x2F;&#x2F; type T1 &#x3D; &quot;c&quot;;\n\ntype T2 &#x3D; Exclude&lt;string | number | (() &#x3D;&gt; void), Function&gt;;\n&#x2F;&#x2F; type T2 &#x3D; string | number;\n\nextends 关键字不学 extends，Exclude 和 Extract，很难理解\nextends 关键字在 TS 编程中出现的频率挺高的，而且不同场景下代表的含义不一样，特此总结一下：\n\n表示继承&#x2F;拓展的含义\n\n表示约束的含义\n\n表示分配的含义\n\n\n\n\n表示继承&#x2F;拓展extends 是 ts 里一个很常见的关键字，同时也是 es6 里引入的一个新的关键字。在 js 里，extends 一般和 class 一起使用\n\nes6 继承父类的方法和属性\n\nclass Animal &#123;\n  kind &#x3D; &quot;animal&quot;;\n  constructor(kind) &#123;\n    this.kind &#x3D; kind;\n  &#125;\n  sayHello() &#123;\n    console.log(&#96;Hello, I am a $&#123;this.kind&#125;!&#96;);\n  &#125;\n&#125;\n\nclass Dog extends Animal &#123;\n  constructor(kind) &#123;\n    super(kind);\n  &#125;\n  bark() &#123;\n    console.log(&quot;wang wang&quot;);\n  &#125;\n&#125;\n\nconst dog &#x3D; new Dog(&quot;dog&quot;);\ndog.name; &#x2F;&#x2F;  &#x3D;&gt; &#39;dog&#39;\ndog.sayHello(); &#x2F;&#x2F; &#x3D;&gt; Hello, I am a dog!\n\n这里 Dog 继承了父类的 sayHello 方法，因为可以在 Dog 实例 dog 上调用。\n\nts 继承某个类型在 ts 里，extends 除了可以像 js 继承值，还可以继承&#x2F;扩展类型：\n\ninterface Animal &#123;\n  kind: string;\n&#125;\n\ninterface Dog extends Animal &#123;\n  bark(): void;\n&#125;\n&#x2F;&#x2F; Dog &#x3D;&gt; &#123; name: string; bark(): void &#125;\n\n\n\n泛型约束在书写泛型的时候，我们往往需要对类型参数作一定的限制，比如希望传入的参数都有 name 属性的数组我们可以这么写：\nfunction getCnames&lt;T extends &#123; name: string &#125;&gt;(entities: T[]): string[] &#123;\n  return entities.map((entity) &#x3D;&gt; entity.cname);\n&#125;\n\n这里 extends 对传入的参数作了一个限制，就是 entities 的每一项可以是一个对象，但是必须含有类型为 string 的 cname 属性。\n再比如，redux 里 dispatch 一个 action，必须包含 type 属性：\n&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;841660202&#x2F;redux&#x2F;blob&#x2F;2edd0363271af46e327e118f3d92e78e258bf0cd&#x2F;src&#x2F;types&#x2F;store.ts#L83\n\n&#x2F;&#x2F; Dispatch\nexport interface Dispatch&lt;A extends Action &#x3D; AnyAction&gt; &#123;\n  &lt;T extends A&gt;(action: T, ...extraArgs: any[]): T;\n&#125;\n\n&#x2F;&#x2F; AnyAction\nexport interface AnyAction extends Action &#123;\n  &#x2F;&#x2F; Allows any extra properties to be defined in an action.\n  [extraProps: string]: any;\n&#125;\n&#x2F;&#x2F; Action\nexport interface Action&lt;T &#x3D; any&gt; &#123;\n  type: T;\n&#125;\n\n&#x2F;&#x2F; 上述代码 简化\ninterface Dispatch&lt;T extends &#123; type: string &#125;&gt; &#123;\n  (action: T): T;\n&#125;\n\n条件类型与高阶类型SomeType extends OtherType ? TrueType : FalseType;\n\n\nWhen the type on the left of the extendsis assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).当左边的类型可以赋值给右边的类型，那么你就会得到第一个分支的类型，否则你就会得到第二个分支的类型。\nextends 还有一大用途就是用来判断一个类型是不是可以分配给另一个类型，这在写高级类型的时候非常有用，举个 ????：\ntype Human &#x3D; &#123;\n  name: string;\n&#125;;\ntype Duck &#x3D; &#123;\n  name: string;\n&#125;;\ntype Bool &#x3D; Duck extends Human ? &quot;yes&quot; : &quot;no&quot;; &#x2F;&#x2F; Bool &#x3D;&gt; &#39;yes&#39;\n\n在 vscode 里或者 ts playground 里输入这段代码，你会发现 Bool 的类型是’yes’。这是因为 Human 和 Duck 的类型完全相同，或者说 Human 类型的一切约束条件，Duck 都具备；换言之，类型为 Human 的值可以分配给类型为 Duck 的值（分配成功的前提是，Duck 里面得的类型得有一样的），反之亦然。需要理解的是，这里 A extends B，是指类型 A 可以分配给类型 B，而不是说类型 A 是类型 B 的子集。稍微扩展下来详细说明这个问题：\ntype Human &#x3D; &#123;\n  name: string;\n  occupation: string;\n&#125;;\ntype Duck &#x3D; &#123;\n  name: string;\n&#125;;\ntype Bool &#x3D; Duck extends Human ? &quot;yes&quot; : &quot;no&quot;; &#x2F;&#x2F; Bool &#x3D;&gt; &#39;no&#39;\n\n当我们给 Human 加上一个 occupation 属性，发现此时 Bool 是’no’，这是因为 Duck 没有类型为 string 的 occupation 属性，类型 Duck 不满足类型 Human 的类型约束。因此，A extends B，是指类型 A 可以分配给类型 B，而不是说类型 A 是类型 B 的子集，理解 extends 在类型三元表达式里的用法非常重要。\n继续看示例\ntype A1 &#x3D; &quot;x&quot; extends &quot;x&quot; ? string : number; &#x2F;&#x2F; string\ntype A2 &#x3D; &quot;x&quot; | &quot;y&quot; extends &quot;x&quot; ? string : number; &#x2F;&#x2F; number\n\ntype P&lt;T&gt; &#x3D; T extends &quot;x&quot; ? string : number;\ntype A3 &#x3D; P&lt;&quot;x&quot; | &quot;y&quot;&gt;; &#x2F;&#x2F; ?\n\nA1 和 A2 是 extends 条件判断的普通用法，和上面的判断方法一样。\nP 是带参数 T 的泛型类型，其表达式和 A1，A2 的形式完全相同，A3 是泛型类型 P 传入参数’x’ | ‘y’得到的类型，如果将’x’ | ‘y’带入泛型类的表达式，可以看到和 A2 类型的形式是完全一样的，那是不是说明，A3 和 A2 的类型就是完全一样的呢？\n有兴趣可以自己试一试，这里就直接给结论了\ntype P&lt;T&gt; &#x3D; T extends &quot;x&quot; ? string : number;\ntype A3 &#x3D; P&lt;&quot;x&quot; | &quot;y&quot;&gt;; &#x2F;&#x2F; A3 的类型是 string | number\n\n是不是很反直觉？这个反直觉结果的原因就是所谓的分配条件类型（Distributive Conditional Types）\nWhen conditional types act on a generic type, they become distributive when given a union type当条件类型作用于泛型类型时，它们变成分配条件类型（Distributive Conditional Types）\n这句话翻译过来也还是看不懂，大白话\n\n\n\n\n\n\n\n\n\n对于使用 extends 关键字的条件类型（即上面的三元表达式类型），如果 extends 前面的参数是一个泛型类型，当传入该参数的是联合类型，则使用分配律计算最终的结果。分配律是指，将联合类型的联合项拆成单项，分别代入条件类型，然后将每个单项代入得到的结果再联合起来，得到最终的判断结果。\nIf we plug a union type into ToArray, then the conditional type will be applied to each member of that union.如果将联合类型传入 ToArray，则条件类型将会应用到联合类型的每一个成员。\n还是用上面的例子说明\ntype P&lt;T&gt; &#x3D; T extends &quot;x&quot; ? string : number;\ntype A3 &#x3D; P&lt;&quot;x&quot; | &quot;y&quot;&gt;; &#x2F;&#x2F; A3 的类型是 string | number\n\n该例中，extends 的前参为 T，T 是一个泛型参数。在 A3 的定义中，给 T 传入的是’x’和’y’的联合类型’x’ | ‘y’，满足分配律，于是’x’和’y’被拆开，分别代入 P\nP&lt;&#39;x&#39; | &#39;y&#39;&gt; &#x3D;&gt; P&lt;&#39;x&#39;&gt; | P&lt;&#39;y&#39;&gt;\n\n&#39;x&#39;代入得到\n\n&#39;x&#39; extends &#39;x&#39; ? string : number &#x3D;&gt; string\n\n&#39;y&#39;代入得到\n\n&#39;y&#39; extends &#39;x&#39; ? string : number &#x3D;&gt; number\n\n然后将每一项代入得到的结果联合起来，得到 string | number\n\n\n总之，满足两个要点即可适用分配律：第一，参数是泛型类型，第二，代入参数的是联合类型\n特殊的 never\n&#x2F;&#x2F; never 是所有类型的子类型\ntype A1 &#x3D; never extends &quot;x&quot; ? string : number; &#x2F;&#x2F; string\n\ntype P&lt;T&gt; &#x3D; T extends &quot;x&quot; ? string : number;\ntype A2 &#x3D; P&lt;never&gt;; &#x2F;&#x2F; never\n\n上面的示例中，A2 和 A1 的结果竟然不一样，看起来 never 并不是一个联合类型，所以直接代入条件类型的定义即可，获取的结果应该和 A1 一直才对啊？\n实际上，这里还是条件分配类型在起作用。never 被认为是空的联合类型，也就是说，没有联合项的联合类型，所以还是满足上面的分配律，然而因为没有联合项可以分配，所以 P的表达式其实根本就没有执行，所以 A2 的定义也就类似于永远没有返回的函数一样，是 never 类型的。\n防止条件判断中的分配\ntype P&lt;T&gt; &#x3D; [T] extends [&quot;x&quot;] ? string : number;\ntype A1 &#x3D; P&lt;&quot;x&quot; | &quot;y&quot;&gt;; &#x2F;&#x2F; number\ntype A2 &#x3D; P&lt;never&gt;; &#x2F;&#x2F; string\n\n在条件判断类型的定义中，将泛型参数使用[]括起来，即可阻断条件判断类型的分配，此时，传入参数 T 的类型将被当做一个整体，不再分配。\n\n\n原理(注意)\n\n\n\n\n\nTIP\n需前置学习 extends 关键字\n\n\n\n源码很简单，判断联合类型 T 是否可以赋值给联合类型 U，是则返回 never，否则返回 T\nnever 是一个特殊的类型，在这里可以表示为空的联合类型，在于与其他类型的联合后，结果为其他类型。\n没有遍历，怎么也能实现呢? 这里还涉及到extends条件类型的特殊情况，extends的前参T如果是一个泛型参数。对于使用extends关键字的条件类型（即上面的三元表达式类型），如果extends前面的参数是一个泛型类型，当传入该参数的是联合类型，两个类型会成为分配条件类型（Distributive Conditional Types）。分配条件类型是指，将联合类型的联合项拆成单项，分别代入条件类型，然后将每个单项代入得到的结果再联合起来，得到最终的判断结果。\n\ntype Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T;\n\nExtract&lt;Type, Union&gt;Released:2.8\nConstructs a type by extracting from Type all union members that are assignable to Union.用于构造一个类型，它是从Type类型里面提取了所有可以赋给Union的类型。\n&#x2F;&#x2F; Example\ntype T0 &#x3D; Extract&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;f&quot;&gt;;\n&#x2F;&#x2F; type T0 &#x3D; &quot;a&quot;;\n\ntype T1 &#x3D; Extract&lt;string | number | (() &#x3D;&gt; void), Function&gt;;\n&#x2F;&#x2F; type T1 &#x3D; () &#x3D;&gt; void;\n\n原理(注意)\n\n\n\n\n\nTIP\n需前置学习 extends 关键字\n\n\n原理：与 Exclude 相反，判断联合类型 T 是否可以赋值给联合类型 U，是则返回 T，否则返回 never。\ntype Extract&lt;T, U&gt; &#x3D; T extends U ? T : never;\n\nNonNullableReleased:2.8\nConstructs a type by excluding null and undefined from Type.用于构造一个类型，这个类型从Type中排除了所有的null、undefined的类型。\n&#x2F;&#x2F; Example\ntype T0 &#x3D; NonNullable&lt;string | number | undefined&gt;;\n\n&#x2F;&#x2F; type T0 &#x3D; string | number;\n\ntype T1 &#x3D; NonNullable&lt;string[] | null | undefined&gt;;\n\n&#x2F;&#x2F; type T1 &#x3D; string[];\n\n原理判断 T 是否可以赋值给 null 或者 undefined 类型，是则返回 never，否则返回 T，如果这段看不明白的可以再看下 Exclude 那段关于 extends 的补充说明。\ntype NonNullable&lt;T&gt; &#x3D; T extends null | undefined ? never : T;\n\nParametersReleased:3.1\nConstructs a tuple type from the types used in the parameters of a function type Type.用于根据所有Type中函数类型的参数构造一个元祖类型。\n&#x2F;&#x2F; Example\ndeclare function f1(arg: &#123; a: number; b: string &#125;): void;\n\ntype T0 &#x3D; Parameters&lt;() &#x3D;&gt; string&gt;;\n&#x2F;&#x2F; type T0 &#x3D; []\n\ntype T1 &#x3D; Parameters&lt;(s: string) &#x3D;&gt; void&gt;;\n&#x2F;&#x2F; type T1 &#x3D; [s: string]\n\ntype T2 &#x3D; Parameters&lt;&lt;T&gt;(arg: T) &#x3D;&gt; T&gt;;\n&#x2F;&#x2F; type T2 &#x3D; [arg: unknown]\n\ntype T3 &#x3D; Parameters&lt;typeof f1&gt;;\n&#x2F;&#x2F; type T3 &#x3D; [arg: &#123;\n&#x2F;&#x2F;   a: number;\n&#x2F;&#x2F;   b: string;\n&#x2F;&#x2F; &#125;]\n\ntype T4 &#x3D; Parameters&lt;any&gt;;\n&#x2F;&#x2F; type T4 &#x3D; unknown[]\n\ntype T5 &#x3D; Parameters&lt;never&gt;;\n&#x2F;&#x2F; type T5 &#x3D; never\n\ntype T6 &#x3D; Parameters&lt;string&gt;;\n&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; type T6 &#x3D; never\n\ntype T7 &#x3D; Parameters&lt;Function&gt;;\n&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.\n\ntype T7 &#x3D; never;\n\n原理：\nParameters 首先约束参数 T 必须是个函数类型\n判断 T 是否是函数类型，如果是则使用 infer P 暂时存一下函数的参数类型，直接用 P 即可得到这个类型并返回，否则就返回 never\n\ntype Parameters&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (\n  ...args: infer P\n) &#x3D;&gt; any\n  ? P\n  : never;\n\n这里用到了infer，infer P标记一个泛型，表示这个泛型是一个待推断的类型，并且可以直接使用。\nConstructorParameters构造参数类型Released:3.1\nConstructs a tuple or array type from the types of a constructor function type. It produces a tuple type with all the parameter types (or the type never if Type is not a function).构造一个从构造函数类型Type中提取的元组或数组类型。如果Type不是函数，则生成never类型。\n&#x2F;&#x2F; Example\ntype T0 &#x3D; ConstructorParameters&lt;ErrorConstructor&gt;;\n&#x2F;&#x2F; type T0 &#x3D; [message?: string]\n\ntype T1 &#x3D; ConstructorParameters&lt;FunctionConstructor&gt;;\n&#x2F;&#x2F; type T1 &#x3D; string[]\n\ntype T2 &#x3D; ConstructorParameters&lt;RegExpConstructor&gt;;\n&#x2F;&#x2F; type T2 &#x3D; [pattern: string | RegExp, flags?: string]\n\ntype T3 &#x3D; ConstructorParameters&lt;any&gt;;\n&#x2F;&#x2F; type T3 &#x3D; unknown[]\n\ntype T4 &#x3D; ConstructorParameters&lt;Function&gt;;\n&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.\n\n&#x2F;&#x2F; type T4 &#x3D; never\n\nReturnTypeReleased:2.8\nConstructs a type consisting of the return type of function Type.用于构造一个含有Type函数的返回值的类型。\n&#x2F;&#x2F; Example\ndeclare function f1(): &#123; a: number; b: string &#125;;\n\ntype T0 &#x3D; ReturnType&lt;() &#x3D;&gt; string&gt;;\n&#x2F;&#x2F; type T0 &#x3D; string\n\ntype T1 &#x3D; ReturnType&lt;(s: string) &#x3D;&gt; void&gt;;\n&#x2F;&#x2F; type T1 &#x3D; void\n\ntype T2 &#x3D; ReturnType&lt;&lt;T&gt;() &#x3D;&gt; T&gt;;\n&#x2F;&#x2F; type T2 &#x3D; unknown\n\ntype T3 &#x3D; ReturnType&lt;&lt;T extends U, U extends number[]&gt;() &#x3D;&gt; T&gt;;\n&#x2F;&#x2F; type T3 &#x3D; number[]\n\ntype T4 &#x3D; ReturnType&lt;typeof f1&gt;;\n&#x2F;&#x2F; type T4 &#x3D; &#123;\n&#x2F;&#x2F; a: number;\n&#x2F;&#x2F; b: string;\n&#x2F;&#x2F; &#125;\n\ntype T5 &#x3D; ReturnType&lt;any&gt;;\n&#x2F;&#x2F; type T5 &#x3D; any\n\ntype T6 &#x3D; ReturnType&lt;never&gt;;\n&#x2F;&#x2F; type T6 &#x3D; never\n\ntype T7 &#x3D; ReturnType&lt;string&gt;;\n&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; type T7 &#x3D; any\n\ntype T8 &#x3D; ReturnType&lt;Function&gt;;\n&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.\n\n&#x2F;&#x2F; type T8 &#x3D; any\n\n原理与 Parameters 类似\nReturnType 首先约束参数 T 必须是个函数类型判断 T 是否是函数类型，如果是则使用 infer R 暂时存一下函数的返回值类型，后面的语句直接用 R 即可得到这个类型并返回，否则就返回 any\ntype ReturnType&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (\n  ...args: any\n) &#x3D;&gt; infer R\n  ? R\n  : any;\n\nInstanceTypeReleased:2.8\nConstructs a type consisting of the instance type of a constructor function in Type.返回构造函数类型T的实例类型\n&#x2F;&#x2F; Example\nclass C &#123;\n  x &#x3D; 0;\n  y &#x3D; 0;\n&#125;\n\ntype T0 &#x3D; InstanceType&lt;typeof C&gt;;\n&#x2F;&#x2F; type T0 &#x3D; C\n\ntype T1 &#x3D; InstanceType&lt;any&gt;;\n&#x2F;&#x2F; type T1 &#x3D; any\n\ntype T2 &#x3D; InstanceType&lt;never&gt;;\n&#x2F;&#x2F; type T2 &#x3D; never\n\ntype T3 &#x3D; InstanceType&lt;string&gt;;\n&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; type T3 &#x3D; any\n\ntype T4 &#x3D; InstanceType&lt;Function&gt;;\n&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.\n&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.\n\n&#x2F;&#x2F; type T4 &#x3D; any\n原理type InstanceType&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: any) =&gt; infer R ? R : any与ResultType 类似type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any;\nThisParameterTypeReleased:3.3\nExtracts the type of the this parameter for a function type, or unknown if the function type has no this parameter.用于提取一个函数类型Type的this (opens new window)参数类型，返回unknown (opens new window)如果这个函数类型没有this参数。\n&#x2F;&#x2F; Example\nfunction toHex(this: Number) &#123;\n  return this.toString(16);\n&#125;\n\nfunction numberToString(n: ThisParameterType&lt;typeof toHex&gt;) &#123;\n  return toHex.apply(n);\n&#125;\n\nOmitThisParameterReleased:3.3\nRemoves the this parameter from Type. If Type has no explicitly declared this parameter, the result is simply Type. Otherwise, a new function type with no this parameter is created from Type. Generics are erased and only the last overload signature is propagated into the new function type.用于移除一个函数类型Type的this (opens new window)参数类型。如果Type没有明确的声明this 类型，那么这个返回的结果就是Type，不然的话，就返回一个新的函数类型，基于Type，但不再有this参数。范型会被抹去，只有最后重载的签名被传播进了返回的新的函数类型。\n&#x2F;&#x2F; Example\nfunction toHex(this: Number) &#123;\n  return this.toString(16);\n&#125;\n\nconst fiveToHex: OmitThisParameter&lt;typeof toHex&gt; &#x3D; toHex.bind(5);\n\nconsole.log(fiveToHex());\n\nThisTypeReleased:2.3\nThis utility does not return a transformed type. Instead, it serves as a marker for a contextual this type. Note that the noImplicitThis flag must be enabled to use this utility.这个类型不返回一个转换过的类型，它被用作标记一个上下文的this类型。注意下如果想使用这个工具类型，noImplicitThis (opens new window)的flag必须启用。\n&#x2F;&#x2F; Example\ntype ObjectDescriptor&lt;D, M&gt; &#x3D; &#123;\n  data?: D;\n  methods?: M &amp; ThisType&lt;D &amp; M&gt;; &#x2F;&#x2F; Type of &#39;this&#39; in methods is D &amp; M\n&#125;;\n\nfunction makeObject&lt;D, M&gt;(desc: ObjectDescriptor&lt;D, M&gt;): D &amp; M &#123;\n  let data: object &#x3D; desc.data || &#123;&#125;;\n  let methods: object &#x3D; desc.methods || &#123;&#125;;\n  return &#123; ...data, ...methods &#125; as D &amp; M;\n&#125;\n\nlet obj &#x3D; makeObject(&#123;\n  data: &#123; x: 0, y: 0 &#125;,\n  methods: &#123;\n    moveBy(dx: number, dy: number) &#123;\n      this.x +&#x3D; dx; &#x2F;&#x2F; Strongly typed this\n      this.y +&#x3D; dy; &#x2F;&#x2F; Strongly typed this\n    &#125;,\n  &#125;,\n&#125;);\n\nobj.x &#x3D; 10;\nobj.y &#x3D; 20;\nobj.moveBy(5, 5);\n\nIn the example above, the methods object in the argument to makeObject has a contextual type that includes ThisType&lt;D &amp; M&gt; and therefore the type of this in methods within the methods object is { x: number, y: number } &amp; { moveBy(dx: number, dy: number): number }. Notice how the type of the methods property simultaneously is an inference target and a source for the this type in methods.在上面的示例中，makeObject的参数中的methods对象包含了一个上下文类型，该类型包含了ThisType&lt;D &amp; M&gt;，因此methods对象中的this类型是&#123; x: number, y: number &#125; &amp; &#123; moveBy(dx: number, dy: number): number &#125;。请注意，methods属性的类型同时是一个推断目标和一个methods对象中的this类型的源。The ThisType marker interface is simply an empty interface declared in lib.d.ts. Beyond being recognized in the contextual type of an object literal, the interface acts like any empty interface.ThisType&lt;T&gt;标记接口是在lib.d.ts中声明的空接口。它只是在对象字面量的上下文类型中被识别而已，该接口的行为与空接口一样。\nIntrinsic String Manipulation Types内部字符串操作类型UppercaseLowercaseCapitalizeUncapitalize\nTo help with string manipulation around template string literals, TypeScript includes a set of types which can be used in string manipulation within the type system. You can find those in the Template Literal Types documentation.为了帮助模板字符串操作，TypeScript包含一组可以在字符串操作中使用的类型。你可以在模板字符串类型文档中找到它们。\n参考链接typescript handbook utility-types工具类型Typescript 中的 extends 关键字Exclude 与 Extract 前置学习项Typescript Classes extends-clauses彻底搞懂 typescript 工具类型及其原理 该文有错误内容，要注意哦\n","slug":"2022-06-09ts-util-type","date":"2022-06-08T14:49:28.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"29a670518a826389296f8915224ed71e","title":"9.Typescript手册 模块","content":"JavaScript has a long history of different ways to handle modularizing code. TypeScript having been around since 2012, has implemented support for a lot of these formats, but over time the community and the JavaScript specification has converged on a format called ES Modules (or ES6 modules). You might know it as the import&#x2F;export syntax.JavaScript 有很长的历史，不同的方式来处理代码的模块化。TypeScript 从 2012 年开始，就支持了大量的模块化格式，但是，在过去的时间，社区和 JavaScript 规范一致地聚合了一个模块化格式，叫做 ES Modules（或 ES6 模块）。你可能会知道它叫做 import/export 语法。\nES Modules was added to the JavaScript spec in 2015, and by 2020 had broad support in most web browsers and JavaScript runtimes.ES Modules 在 2015 年添加到 JavaScript 规范，2020 年已经有广泛的支持在大部分的 web 浏览器和 JavaScript 运行时。For focus, the handbook will cover both ES Modules and its popular pre-cursor CommonJS module.exports &#x3D; syntax, and you can find information about the other module patterns in the reference section under Modules.为了获得焦点，本手册将介绍 ES Modules 和其常用的先行模块 CommonJS module.exports = 同义词，并且你可以在 Modules 下的参考节中找到其他模块模式的信息。\nHow JavaScript Modules are DefinedIn TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module.在 TypeScript 中，只要文件包含一个顶层的 import 或 export 就被视为一个模块。Conversely, a file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).反之，一个没有顶层的 import 或 export 声明的文件就被视为一个脚本，其内容可以在全局作用域中使用（并且也可以作为模块使用）。Modules are executed within their own scope, not in the global scope. This means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the export forms. Conversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the import forms.模块是在自己的作用域中执行的，不是在全局作用域中执行的。这意味着在模块中声明的变量，函数，类，接口等等，只有在显式的使用 export 声明的时候才能在模块外被访问。反之，要从其他模块中消费一个变量，函数，类，接口等等，必须使用 import 声明来导入。\nNon-modules非模块Before we start, it’s important to understand what TypeScript considers a module. The JavaScript specification declares that any JavaScript files without an export or top-level await should be considered a script and not a module.在开始之前，我们需要明白 TypeScript 认为什么是模块。JavaScript 规范定义了任何没有 export 或 top-level await 的 JavaScript 文件都被视为脚本而不是模块。Inside a script file variables and types are declared to be in the shared global scope, and it’s assumed that you’ll either use the outFile compiler option to join multiple input files into one output file, or use multiple  tags in your HTML to load these files (in the correct order!).在脚本文件中，变量和类型被声明为共享的全局作用域，并且我们假设你会使用 outFile 编译选项将多个输入文件合并成一个输出文件，或者使用多个 &lt;script&gt; 标签在你的 HTML 中加载这些文件（按照正确的顺序）。If you have a file that doesn’t currently have any imports or exports, but you want to be treated as a module, add the line:如果你有一个文件，它目前没有任何 import 或 export 声明，但是你想被视为一个模块，那么添加这一行：\nexport &#123;&#125;;\n\nwhich will change the file to be a module exporting nothing. This syntax works regardless of your module target.这种语法对于你的模块目标无论如何都是可行的。\nModules in TypeScriptTypeScript 中的模块Additional Reading:附加阅读：Impatient JS (Modules)不知道模块的 TypeScriptMDN: JavaScript ModulesMDN：JavaScript 模块There are three main things to consider when writing module-based code in TypeScript:在 TypeScript 中写模块基础的代码时，要考虑三个主要问题：Syntax: What syntax do I want to use to import and export things?语法：我想要使用什么语法来导入和导出东西？Module Resolution: What is the relationship between module names (or paths) and files on disk?模块解析：模块名（或路径）和磁盘上的文件之间的关系是什么？Module Output Target: What should my emitted JavaScript module look like?模块输出目标：我的输出的 JavaScript 模块应该怎样看？\nES Module SyntaxES 模块语法A file can declare a main export via export default:一个文件可以通过 export default 声明一个主要的导出：\n&#x2F;&#x2F; @filename: hello.ts\nexport default function helloWorld() &#123;\n  console.log(&quot;Hello, world!&quot;);\n&#125;\n\nThis is then imported via:这是通过以下方式导入的：\nimport helloWorld from &quot;.&#x2F;hello.js&quot;;\nhelloWorld();\n\nIn addition to the default export, you can have more than one export of variables and functions via the export by omitting default:除了默认导出，你还可以有多个导出的变量和函数，通过将 default 去掉：\n&#x2F;&#x2F; @filename: maths.ts\nexport var pi &#x3D; 3.14;\nexport let squareTwo &#x3D; 1.41;\nexport const phi &#x3D; 1.61;\n\nexport class RandomNumberGenerator &#123;&#125;\n\nexport function absolute(num: number) &#123;\nif (num &lt; 0) return num \\* -1;\n  return num;\n&#125;\n\nThese can be used in another file via the import syntax:这些可以在另一个文件中通过导入语法使用：\nimport &#123; pi, phi, absolute &#125; from &quot;.&#x2F;maths.js&quot;;\n\nconsole.log(pi);\nconst absPhi &#x3D; absolute(phi);\n\n&#x2F;&#x2F; const absPhi: number;\n\nAdditional Import Syntax附加导入语法An import can be renamed using a format like import {old as new}:一个导入可以通过这样的格式：import &#123;old as new&#125;：\nimport &#123; pi as π &#125; from &quot;.&#x2F;maths.js&quot;;\n\nconsole.log(π);\n\n&#x2F;&#x2F; (alias) var π: number\n&#x2F;&#x2F; import π\n\nYou can mix and match the above syntax into a single import:你可以混合这些语法到一个单独的导入：\n&#x2F;&#x2F; @filename: maths.ts\nexport const pi &#x3D; 3.14;\nexport default class RandomNumberGenerator &#123;&#125;\n\n&#x2F;&#x2F; @filename: app.ts\nimport RandomNumberGenerator, &#123; pi as π &#125; from &quot;.&#x2F;maths.js&quot;;\n\nRandomNumberGenerator;\n\n&#x2F;&#x2F; (alias) class RandomNumberGenerator\n&#x2F;&#x2F; import RandomNumberGenerator\n\nconsole.log(π);\n\n&#x2F;&#x2F; (alias) const π: 3.14\n&#x2F;&#x2F; import π\n\nYou can take all of the exported objects and put them into a single namespace using * as name:你可以将所有导出的对象放到一个单独的命名空间，使用 \\* as name：\n&#x2F;&#x2F; @filename: app.ts\nimport \\* as math from &quot;.&#x2F;maths.js&quot;;\n\nconsole.log(math.pi);\nconst positivePhi &#x3D; math.absolute(math.phi);\n\n&#x2F;&#x2F; const positivePhi: number\n\nYou can import a file and not include any variables into your current module via import \"./file\":你可以通过 import &quot;./file&quot; 导入一个文件，并且不包含任何变量到当前模块：\n&#x2F;&#x2F; @filename: app.ts\nimport &quot;.&#x2F;maths.js&quot;;\n\nconsole.log(&quot;3.14&quot;);\n\nIn this case, the import does nothing. However, all of the code in maths.ts was evaluated, which could trigger side-effects which affect other objects.在这种情况下，导入并没有什么事情。但是，maths.ts 中的所有代码都会被评估，这可能会触发其他对象的副作用。\nTypeScript Specific ES Module SyntaxTypeScript 特定的 ES 模块语法Types can be exported and imported using the same syntax as JavaScript values:类型可以使用相同的语法来导出和导入 JavaScript 值：\n&#x2F;&#x2F; @filename: animal.ts\nexport type Cat &#x3D; &#123; breed: string; yearOfBirth: number &#125;;\n\nexport interface Dog &#123;\n  breeds: string[];\n  yearOfBirth: number;\n&#125;\n\n&#x2F;&#x2F; @filename: app.ts\nimport &#123; Cat, Dog &#125; from &quot;.&#x2F;animal.js&quot;;\ntype Animals &#x3D; Cat | Dog;\n\nTypeScript has extended the import syntax with two concepts for declaring an import of a type:TypeScript 已经扩展了导入类型的语法，它有两个概念来声明导入类型：\nimport type\n&#x2F;&#x2F; Which is an import statement which can only import types:\n&#x2F;&#x2F; 只能导入类型的导入语句：\n&#x2F;&#x2F; @filename: animal.ts\nexport type Cat &#x3D; &#123; breed: string; yearOfBirth: number &#125;;\n&#x2F;&#x2F; &#39;createCatName&#39; cannot be used as a value because it was imported using &#39;import type&#39;.\n&#x2F;&#x2F; &#39;createCatName&#39; 不能被用作值，因为它被导入使用了 &#39;import type&#39;。\nexport type Dog &#x3D; &#123; breeds: string[]; yearOfBirth: number &#125;;\nexport const createCatName &#x3D; () &#x3D;&gt; &quot;fluffy&quot;;\n\n&#x2F;&#x2F; @filename: valid.ts\nimport type &#123; Cat, Dog &#125; from &quot;.&#x2F;animal.js&quot;;\nexport type Animals &#x3D; Cat | Dog;\n\n&#x2F;&#x2F; @filename: app.ts\nimport type &#123; createCatName &#125; from &quot;.&#x2F;animal.js&quot;;\nconst name &#x3D; createCatName();\n\nInline type imports内联类型导入\nTypeScript 4.5 also allows for individual imports to be prefixed with type to indicate that the imported reference is a type:TypeScript 4.5 可以使用 type 前缀来声明导入的引用是一个类型：\n&#x2F;&#x2F; @filename: app.ts\nimport &#123; createCatName, type Cat, type Dog &#125; from &quot;.&#x2F;animal.js&quot;;\n\nexport type Animals &#x3D; Cat | Dog;\nconst name &#x3D; createCatName();\n\nTogether these allow a non-TypeScript transpiler like Babel, swc or esbuild to know what imports can be safely removed.这些同时允许一个非 TypeScript 编译器，如 Babel、swc 或 esbuild 知道哪些导入可以安全地移除。\nES Module Syntax with CommonJS BehaviorES 模块语法与 CommonJS 行为TypeScript has ES Module syntax which directly correlates to a CommonJS and AMD require. Imports using ES Module are for most cases the same as the require from those environments, but this syntax ensures you have a 1 to 1 match in your TypeScript file with the CommonJS output:TypeScript 有 ES 模块语法，它相对于 CommonJS 和 AMD require。使用 ES Module 的导入是为了大多数情况下与这些环境的 require 一致，但这种语法确保了你的 TypeScript 文件与 CommonJS 输出有一个 1 到 1 的匹配。\nimport fs &#x3D; require(&quot;fs&quot;);\nconst code &#x3D; fs.readFileSync(&quot;hello.ts&quot;, &quot;utf8&quot;);\n\nYou can learn more about this syntax in the modules reference page.你可以在模块参考页面了解更多关于这种语法。\nCommonJS SyntaxCommonJS 语法\nCommonJS is the format which most modules on npm are delivered in. Even if you are writing using the ES Modules syntax above, having a brief understanding of how CommonJS syntax works will help you debug easier.CommonJS 是 npm 上大多数模块的格式。即使你正在使用上面的 ES 模块语法，也会有一个简单的了解 CommonJS 语法的方式帮助你调试更容易。\nExporting导出\nIdentifiers are exported via setting the exports property on a global called module.标识符通过设置 module.exports 属性来导出。\nfunction absolute(num: number) &#123;\n    if (num &lt; 0) return num \\* -1;\n    return num;\n&#125;\n\nmodule.exports &#x3D; &#123;\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n  absolute,\n&#125;;\n\nThen these files can be imported via a require statement:然后，这些文件可以通过 require 语句来导入：\nconst maths &#x3D; require(&quot;maths&quot;);\nmaths.pi;\n\n&#x2F;&#x2F; any;\n\nOr you can simplify a bit using the destructuring feature in JavaScript:或者，你可以使用 JavaScript 的解构特性来简化一些：\nconst &#123; squareTwo &#125; &#x3D; require(&quot;maths&quot;);\nsquareTwo;\n\n&#x2F;&#x2F; const squareTwo: any;\n\nCommonJS and ES Modules interopCommonJS 和 ES 模块的互操作\nThere is a mis-match in features between CommonJS and ES Modules regarding the distinction between a default import and a module namespace object import. TypeScript has a compiler flag to reduce the friction between the two different sets of constraints with esModuleInterop.在 CommonJS 和 ES 模块之间存在不匹配的特性，关于默认导入和模块命名空间对象导入的区别。TypeScript 有一个编译器标志来减少 CommonJS 和 ES 模块之间的摩擦。\nTypeScript’s Module Resolution OptionsTypeScript 的模块解析选项\nModule resolution is the process of taking a string from the import or require statement, and determining what file that string refers to.模块解析是从 import 或 require 语句中获取字符串，并确定该字符串所引用的文件。\nTypeScript includes two resolution strategies: Classic and Node. Classic, the default when the compiler option module is not commonjs, is included for backwards compatibility. The Node strategy replicates how Node.js works in CommonJS mode, with additional checks for .ts and .d.ts.TypeScript 包含两种解析策略：经典和 Node。经典，默认情况下，当编译器选项 module 不是 commonjs 时，包含了向后兼容性。Node 策略重复了 Node.js 在 CommonJS 模式下工作的方式，并且添加了 .ts 和 .d.ts 的检查。There are many TSConfig flags which influence the module strategy within TypeScript: moduleResolution, baseUrl, paths, rootDirs.在 TypeScript 中，有很多 TSConfig 标志影响模块策略：moduleResolution、baseUrl、paths、rootDirs。For the full details on how these strategies work, you can consult the Module Resolution.关于如何工作的详细信息，你可以参考模块解析。\nTypeScript’s Module Output OptionsTypeScript 的模块输出选项There are two options which affect the emitted JavaScript output:有两个影响输出的 JavaScript 的选项：\n\ntarget which determines which JS features are downleveled (converted to run in older JavaScript runtimes) and which are left intacttarget 是指定哪些 JS 特性被下游（转换为在旧的 JavaScript 运行时运行），哪些被保留。\nmodule which determines what code is used for modules to interact with each othermodule 是指定哪些代码用于模块交互。\n\nWhich target you use is determined by the features available in the JavaScript runtime you expect to run the TypeScript code in. That could be: the oldest web browser you support, the lowest version of Node.js you expect to run on or could come from unique constraints from your runtime - like Electron for example.哪个目标你使用是由你期望在 JavaScript 运行时运行 TypeScript 代码的功能决定的。这可能是：最旧的 web 浏览器，最低版本的 Node.js，或者来自你运行时的唯一约束 - 例如，Electron。All communication between modules happens via a module loader, the compiler option module determines which one is used. At runtime the module loader is responsible for locating and executing all dependencies of a module before executing it.模块之间的通信都是通过模块加载器来完成的，编译器选项 module 是指定哪个被使用。在运行时，模块加载器负责定位并执行所有模块的依赖之前执行它。For example, here is a TypeScript file using ES Modules syntax, showcasing a few different options for module:例如，这里是一个使用 ES Modules 语法的 TypeScript 文件，展示了一些模块的选项：\nimport &#123; valueOfPi &#125; from &quot;.&#x2F;constants.js&quot;;\n\nexport const twoPi &#x3D; valueOfPi _ 2;\n\nES2020import &#123; valueOfPi &#125; from &quot;.&#x2F;constants.js&quot;;\nexport const twoPi &#x3D; valueOfPi _ 2;\n\nCommonJS&quot;use strict&quot;;\nObject.defineProperty(exports, &quot;\\_\\_esModule&quot;, &#123; value: true &#125;);\nexports.twoPi &#x3D; void 0;\nconst constants_js_1 &#x3D; require(&quot;.&#x2F;constants.js&quot;);\nexports.twoPi &#x3D; constants_js_1.valueOfPi \\* 2;\n\nUMD(function (factory) &#123;\n  if (typeof module &#x3D;&#x3D;&#x3D; &quot;object&quot; &amp;&amp; typeof module.exports &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;\n    var v &#x3D; factory(require, exports);\n    if (v !&#x3D;&#x3D; undefined) module.exports &#x3D; v;\n  &#125;\n  else if (typeof define &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; define.amd) &#123;\n    define([&quot;require&quot;, &quot;exports&quot;, &quot;.&#x2F;constants.js&quot;], factory);\n  &#125;\n&#125;)(function (require, exports) &#123;\n  &quot;use strict&quot;;\n  Object.defineProperty(exports, &quot;\\_\\_esModule&quot;, &#123; value: true &#125;);\n  exports.twoPi &#x3D; void 0;\n  const constants_js_1 &#x3D; require(&quot;.&#x2F;constants.js&quot;);\n  exports.twoPi &#x3D; constants_js_1.valueOfPi \\* 2;\n&#125;);\n\n\nNote that ES2020 is effectively the same as the original index.ts.ES2020 是一样的于原始 index.ts。You can see all of the available options and what their emitted JavaScript code looks like in the TSConfig Reference for module.你可以看到所有可用的选项和他们的输出 JavaScript 代码的样子在 module 的 TSConfig 参考中。\nTypeScript namespacesTypeScript 命名空间TypeScript has its own module format called namespaces which pre-dates the ES Modules standard. This syntax has a lot of useful features for creating complex definition files, and still sees active use in DefinitelyTyped. While not deprecated, the majority of the features in namespaces exist in ES Modules and we recommend you use that to align with JavaScript’s direction. You can learn more about namespaces in the namespaces reference page.TypeScript 有自己的模块格式命名空间，它是先期的 ES Modules 标准。这种语法具有很多有用的功能创建复杂的定义文件，仍然在 DefinitelyTyped 中有活跃使用。尽管不被弃用，大多数的功能在命名空间中存在于 ES Modules，我们建议你使用它与 JavaScript 的方向对齐。你可以在命名空间参考页面上了解更多关于命名空间。\n","slug":"2022-06-08ts-modules","date":"2022-06-08T14:47:47.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"14464d0b7865c234ecdc15847ed605ff","title":"8.Typescript手册 类","content":"","slug":"2022-06-08ts-classes","date":"2022-06-08T06:21:19.000Z","categories_index":"","tags_index":"","author_index":"陈海龙"},{"id":"62218ddca7698d868da0d101af067d2c","title":"7.Typescript手册 类型操作","content":"ts 类型如何调试\n不是代码逻辑如何调试，没想到\n\nts 自定义类型如何打印\n不是 js 的结果如何打印，没想到\n\nCreating Types from Types从已有类型中创建类型\nTypeScript 的类型系统非常强大，因为它允许表达类型的另一种表达方式。最简单的方式是泛型，我们实际上有一大堆的类型操作符可用。还可以表达类型的另一种表达方式，就是把已有的值作为类型。通过合并多种类型操作符，我们可以表达复杂的操作和值，这里我们将介绍以另一个类型或值为基础如何表达一个新类型。\n简单来说：使用 范型 或 6种表达式 来创建新类型\n\n范型 - 类型需要参数\n\nKeyof Type Operator - 用 keyof 操作去创建新类型\n\nTypeof Type Operator - 用 typeof 操作去创建新类型\n\nIndexed Access Types - 使用 Type[‘a’]语法去访问一个类型的一部分\n\nConditional Types - 类型行为像 if 语句一样\n\nMapped Types - 通过映射已有类型的每个属性来创建新类型\n\nTemplate Literal Types - 通过模板字符串来改变属性的映射类型\n\n\nKeyof Type Operator\n这个操作符可以获取一个对象的所有 key，返回一个字符串或者数字的联合类型，接下来的类型 P 是这个类型的类型：\n\ntype P1 &#x3D; keyof any; &#x2F;&#x2F; 提示：type P1 &#x3D; string | number | symbol\n\ntype Point &#x3D; &#123; x: number; y: number &#125;;\ntype P &#x3D; keyof Point; &#x2F;&#x2F; 提示：type P &#x3D; keyof Point，这个提示等于没提示\n\n\n如果这个类型有字符串或者数字索引，keyof 就会返回这个类型：\n\ntype Arrayish &#x3D; &#123; [n: number]: unknown &#125;;\ntype A &#x3D; keyof Arrayish; &#x2F;&#x2F;提示：type A &#x3D; number\n\ntype Mapish &#x3D; &#123; [k: string]: boolean &#125;;\ntype M &#x3D; keyof Mapish; &#x2F;&#x2F; 提示：type M &#x3D; string | number\n\n&#x2F;&#x2F; --------------------------------------------------------------\n&#x2F;&#x2F; 对于Arrayish\n\n&#x2F;&#x2F; 实例1:ok\nvar a: Arrayish &#x3D; &#123;\n  1: &quot;string&quot;,\n  2: false,\n&#125;;\n&#x2F;&#x2F; 实例2: ok\nvar a1: Arrayish &#x3D; [1, 2, 3, 4];\n\n&#x2F;&#x2F; 对于 Mapish\nvar b: Mapish &#x3D; &#123;\n  name: true,\n  age: false,\n&#125;;\n\n注意，这个例子中，M 是 string | number — 这是因为 JavaScript 对象键是总是被强制为字符串，所以 obj[0] 总是和 obj[“0”] 相同。\nkeyof 类型操作符可以获取一个对象的所有 key，返回一个字符串或者数字的联合类型，接下来的类型 P 是这个类型的类型：\nTypeof type operatorJavaScript 也有一个 typeof 操作符，可以用在表达式中：\n&#x2F;&#x2F; Prints &quot;string&quot;\nconsole.log(typeof &quot;Hello world&quot;);\n\nTypeScript 增加了一个 typeof 操作符，可以用在类型上：\nlet s &#x3D; &quot;hello&quot;;\nlet n: typeof s; &#x2F;&#x2F; 提示：let n: string\n\nReturnType对于基本类型，typeof 操作符没有意义，但是与其他类型操作符结合使用，可以用 typeof 操作符来实现一些模式。例如，我们开始用 ReturnType 来表示函数的返回类型：\ntype Predicate &#x3D; (x: unknown) &#x3D;&gt; boolean;\ntype K &#x3D; ReturnType&lt;Predicate&gt;; &#x2F;&#x2F; 提示 type K &#x3D; boolean\n\n如果我们尝试使用 ReturnType 在函数名上，我们会看到一个指示性的错误：\nfunction f() &#123;\n  return &#123; x: 10, y: 3 &#125;;\n&#125;\ntype P &#x3D; ReturnType&lt;f&gt;;\n&#x2F;&#x2F; 提示：&#39;f&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof f&#39;?\n&#x2F;&#x2F; 提示：&#39;f&#39; 涉及到一个值，但是在这里被使用作为类型。你是否想使用 &#39;typeof f&#39; 来代替 &#39;f&#39;？\n\n记住，值和类型不是一回事。要引用值 f 所拥有的类型，我们使用 typeof：\nfunction f() &#123;\n  return &#123; x: 10, y: 3 &#125;;\n&#125;\ntype P &#x3D; ReturnType&lt;typeof f&gt;;\n\n&#x2F;**\n * 提示\n * type P &#x3D; &#123;\n    x: number;\n    y: number;\n&#125;\n**&#x2F;\n\n限制\ntypescript 通常限制了 typeof 的表达式的类型。特殊的，typeof 的表达式只能用于标识符（即变量名）其属性。这个限制是为了避免写一些你认为是执行的代码，但实际上并不是的：\n&#x2F;&#x2F; Meant to use &#x3D; ReturnType&lt;typeof msgbox&gt;\nlet shouldContinue: typeof msgbox(&quot;Are you sure you want to continue?&quot;);\n&#x2F;&#x2F; &#39;,&#39; expected.\n\nIndexed Access Types我们可以使用索引访问类型来查找一个类型的特定属性：\ntype Person &#x3D; &#123; age: number; name: string; alive: boolean &#125;;\ntype Age &#x3D; Person[&quot;age&quot;]; &#x2F;&#x2F; 提示：type Age &#x3D; number\n\n这个索引类型本身是一个类型，所以我们可以使用联合，keyof 或者其他类型：\ntype I1 &#x3D; Person[&quot;age&quot; | &quot;name&quot;]; &#x2F;&#x2F; 提示：type I1 &#x3D; string | number\n\ntype I2 &#x3D; Person[keyof Person]; &#x2F;&#x2F; 提示：type I2 &#x3D; string | number | boolean\n\ntype AliveOrName &#x3D; &quot;alive&quot; | &quot;name&quot;;\ntype I3 &#x3D; Person[AliveOrName]; &#x2F;&#x2F; 提示：type I3 &#x3D; string | boolean\n\n你会看到一个错误，如果你尝试索引一个不存在的属性：\ntype I1 &#x3D; Person[&quot;alve&quot;];\nProperty &#39;alve&#39; does not exist on type &#39;Person&#39;.\n\n另一个例子是使用 number 来获取数组的元素类型。我们可以使用 typeof 来方便地捕获数组字面量的元素类型。\nconst MyArray &#x3D; [\n  &#123; name: &quot;Alice&quot;, age: 15 &#125;,\n  &#123; name: &quot;Bob&quot;, age: 23 &#125;,\n  &#123; name: &quot;Eve&quot;, age: 38 &#125;,\n];\n\ntype Person &#x3D; typeof MyArray[number];\n\n&#x2F;&#x2F; 提示：type Person &#x3D; &#123; name: string; age: number; &#125;\n\ntype Age &#x3D; typeof MyArray[number][&quot;age&quot;]; &#x2F;&#x2F; 提示 type Age &#x3D; number;\n&#x2F;&#x2F; Or\ntype Age2 &#x3D; Person[&quot;age&quot;]; &#x2F;&#x2F; 提示 type Age2 &#x3D; number;\n\n你只能使用类型来索引，意味着你不能使用 const 来创建一个变量引用：\nconst key &#x3D; &quot;age&quot;;\ntype Age &#x3D; Person[key];\n&#x2F;&#x2F; Type &#39;key&#39; cannot be used as an index type.\n&#x2F;&#x2F; 这个错误是因为 key 是一个字面量，而不是一个变量。\n&#x2F;&#x2F; &#39;key&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof key&#39;?\n&#x2F;&#x2F; 这个错误是因为 key 涉及到一个值，但是在这里被使用作为类型。你是否想使用 &#39;typeof key&#39; 来代替 &#39;key&#39;？\n\n然而，你可以使用一个类型别名来替换相同的风格的重构：\ntype key &#x3D; &quot;age&quot;;\ntype Age &#x3D; Person[key];\n\nConditional TypesAt the heart of most useful programs, we have to make decisions based on input. JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs. Conditional types help describe the relation between the types of inputs and outputs.在最常见的程序中，我们需要根据输入来做决策。 JavaScript 程序是不同的，但是给定了这个事实，那些决策是根据输入的类型来做的。条件类型帮助描述输入和输出类型之间的关系。\ninterface Animal &#123;\n  live(): void;\n&#125;\ninterface Dog extends Animal &#123;\n  woof(): void;\n&#125;\n\ntype Example1 &#x3D; Dog extends Animal ? number : string; &#x2F;&#x2F; 提示：type Example1 &#x3D; number\n\ntype Example2 &#x3D; RegExp extends Animal ? number : string; &#x2F;&#x2F; 提示：type Example2 &#x3D; string\n\n条件类型的表达式像 JavaScript 中的条件表达式一样：\nSomeType extends OtherType ? TrueType : FalseType;\n\n此段内容，原文保留When the type on the left of the extends is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).\n当 extends 左边的类型可以赋值给右边的类型时，你会得到第一个分支的类型（“true”分支）；否则你会得到第二个分支的类型（“false”分支）。\nFrom the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not Dog extends Animal and pick number or string! But the power of conditional types comes from using them with generics.从上面的例子中可以看到条件类型可能不会立即看起来很有用，我们可以告诉自己 Dog 是否继承了 Animal，然后选择 number 或 string！但是条件类型的力量来自于使用它们与泛型。\nFor example, let’s take the following createLabel function:例如，我们可以把下面的 createLabel 函数拿来说说：\ninterface IdLabel &#123;\n  id: number &#x2F;* some fields *&#x2F;;\n&#125;\ninterface NameLabel &#123;\n  name: string &#x2F;* other fields *&#x2F;;\n&#125;\n\nfunction createLabel(id: number): IdLabel;\nfunction createLabel(name: string): NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel &#123;\n  throw &quot;unimplemented&quot;;\n&#125;\n\nThese overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:这些 createLabel 的重载描述了一个单一的 JavaScript 函数，它根据输入的类型来做决策。请注意一些事情：\nIf a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome.We have to create three overloads: one for each case when we’re sure of the type (one for string and one for number), and one for the most general case (taking a string | number). For every new type createLabel can handle, the number of overloads grows exponentially.如果一个库需要在其 API 中重复使用相同的选择，这就变得非常麻烦。我们需要创建三个重载：一个当我们知道类型时，一个当我们知道类型时，一个当我们不知道类型时。对于每个新的类型 createLabel 可以处理，重载的数量就会指数增长。Instead, we can encode that logic in a conditional type:反之，我们可以使用条件类型来表示逻辑：\ntype NameOrId&lt;T extends number | string&gt; &#x3D; T extends number\n  ? IdLabel\n  : NameLabel;\n\nWe can then use that conditional type to simplify our overloads down to a single function with no overloads.我们可以使用这个条件类型来简化我们的重载，只有一个函数。\nfunction createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;\n  throw &quot;unimplemented&quot;;\n&#125;\n\nlet a &#x3D; createLabel(&quot;typescript&quot;);\n\n&#x2F;&#x2F; 提示：let a: NameLabel;\n\nlet b &#x3D; createLabel(2.8);\n\n&#x2F;&#x2F; 提示：let b: IdLabel;\n\nlet c &#x3D; createLabel(Math.random() ? &quot;hello&quot; : 42);\n&#x2F;&#x2F; 提示：let c: NameLabel | IdLabel;\n\n\nConditional Type Constraints\n\n条件类型约束\nOften, the checks in a conditional type will provide us with some new information. Just like with narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.通常，在条件类型中的检查会提供我们一些新的信息。像类型检查一样，通过类型约束可以给我们更具体的类型，条件类型的 true 分支将通过我们检查的类型来约束泛型。For example, let’s take the following:例如，我们可以把下面的函数拿来说说：\ntype MessageOf&lt;T&gt; &#x3D; T[&quot;message&quot;];\n&#x2F;&#x2F; Type &#39;&quot;message&quot;&#39; cannot be used to index type &#39;T&#39;.\n\nIn this example, TypeScript errors because T isn’t known to have a property called message. We could constrain T, and TypeScript would no longer complain:\n在这个例子中，TypeScript 错误，因为 T 没有一个属性叫 message。我们可以约束 T，TypeScript 不会再报错了：\ntype MessageOf&lt;T extends &#123; message: unknown &#125;&gt; &#x3D; T[&quot;message&quot;];\n\ninterface Email &#123;\n  message: string;\n&#125;\n\ntype EmailMessageContents &#x3D; MessageOf&lt;Email&gt;;\n\n&#x2F;&#x2F; 提示：type EmailMessageContents &#x3D; string\n\nHowever, what if we wanted MessageOf to take any type, and default to something like never if a message property isn’t available? We can do this by moving the constraint out and introducing a conditional type:然而，如果我们想要 MessageOf 取任意类型，并且默认为没有 message 属性的情况，我们可以这样做：\ntype MessageOf&lt;T&gt; &#x3D; T extends &#123; message: unknown &#125; ? T[&quot;message&quot;] : never;\n\ninterface Email &#123;\n  message: string;\n&#125;\n\ninterface Dog &#123;\n  bark(): void;\n&#125;\n\ntype EmailMessageContents &#x3D; MessageOf&lt;Email&gt;;\n\n&#x2F;&#x2F; 提示：type EmailMessageContents &#x3D; string;\n\ntype DogMessageContents &#x3D; MessageOf&lt;Dog&gt;;\n\n&#x2F;&#x2F; 提示：type DogMessageContents &#x3D; never;\n\nWithin the true branch, TypeScript knows that T will have a message property.在 true 分支中，TypeScript 知道 T 有一个 message 属性。\nAs another example, we could also write a type called Flatten that flattens array types to their element types, but leaves them alone otherwise:作为另一个示例，我们还可以编写一个名为 Flatten 的类型，该类型将数组类型展平为其元素类型，但在其他情况下不使用它们：\ntype Flatten&lt;T&gt; &#x3D; T extends any[] ? T[number] : T;\n\n&#x2F;&#x2F; Extracts out the element type. 提取元素类型。\ntype Str &#x3D; Flatten&lt;string[]&gt;;\n\ntype Str &#x3D; string;\n\n&#x2F;&#x2F; Leaves the type alone. 保留该类型。\ntype Num &#x3D; Flatten&lt;number&gt;;\n\ntype Num &#x3D; number;\n\nWhen Flatten is given an array type, it uses an indexed access with number to fetch out string[]’s element type. Otherwise, it just returns the type it was given.当 Flatten 给定一个数组类型，它使用 number 下标得到 string[]元素类型，否则，仅返回所给类型\nInferring Within Conditional Types在条件类型内推断\nWe just found ourselves using conditional types to apply constraints and then extract out types. This ends up being such a common operation that conditional types make it easier.\n我们只是发现自己使用条件类型来应用约束，然后提取出类型。这最终是一种常见的操作，条件类型使其更容易实现。\nConditional types provide us with a way to infer from types we compare against in the true branch using the infer keyword. For example, we could have inferred the element type in Flatten instead of fetching it out “manually” with an indexed access type:\n条件类型为我们提供了一种使用 infer 关键字从 true 分支中比较的类型推断的方法。例如，我们可以在 Flatten 中推断元素类型，而不是使用索引访问类型“手动”提取它：\ntype Flatten&lt;Type&gt; &#x3D; Type extends Array&lt;infer Item&gt; ? Item : Type;\n\nHere, we used the infer keyword to declaratively introduce a new generic type variable named Item instead of specifying how to retrieve the element type of T within the true branch. This frees us from having to think about how to dig through and probing apart the structure of the types we’re interested in.\n在这里，我们使用 infer 关键字声明性地引入一个名为 Item 的新泛型类型变量，而不是指定如何在 true 分支中检索 T 的元素类型。这使我们不必思考如何挖掘和探索我们感兴趣的类型的结构。\nWe can write some useful helper type aliases using the infer keyword. For example, for simple cases, we can extract the return type out from function types:\n我们可以使用 infer 关键字编写一些有用的助手类型别名。例如，对于简单的情况，我们可以从函数类型中提取返回类型：\ntype GetReturnType&lt;Type&gt; &#x3D; Type extends (...args: never[]) &#x3D;&gt; infer Return\n  ? Return\n  : never;\n\ntype Num &#x3D; GetReturnType&lt;() &#x3D;&gt; number&gt;;\n\n&#x2F;&#x2F; 提示： type Num &#x3D; number\n\ntype Str &#x3D; GetReturnType&lt;(x: string) &#x3D;&gt; string&gt;;\n\n&#x2F;&#x2F; 提示：type Str &#x3D; string\n\ntype Bools &#x3D; GetReturnType&lt;(a: boolean, b: boolean) &#x3D;&gt; boolean[]&gt;;\n\n&#x2F;&#x2F; 提示： type Bools &#x3D; boolean[]\n\nWhen inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the last signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types.当从具有多个调用签名的类型（例如重载函数的类型）进行推断时，将从最后一个签名进行推断（这可能是最允许的一网打尽的情况）。无法基于参数类型列表执行重载解析。\ndeclare function stringOrNum(x: string): number;\ndeclare function stringOrNum(x: number): string;\ndeclare function stringOrNum(x: string | number): string | number;\n\ntype T1 &#x3D; ReturnType&lt;typeof stringOrNum&gt;;\n\n&#x2F;&#x2F; 提示：type T1 &#x3D; string | number;\n\nDistributive Conditional Types分布条件类型\nWhen conditional types act on a generic type, they become distributive when given a union type. For example, take the following:当条件类型作用于泛型类型时，当给定一个联合类型时，它们将成为分布式的。例如，以以下内容为例：\ntype ToArray&lt;Type&gt; &#x3D; Type extends any ? Type[] : never;\n\nIf we plug a union type into ToArray, then the conditional type will be applied to each member of that union.如果我们将一个联合类型插入 ToArray，那么条件类型将应用于该联合的每个成员。\ntype ToArray&lt;Type&gt; &#x3D; Type extends any ? Type[] : never;\n\ntype StrArrOrNumArr &#x3D; ToArray&lt;string | number&gt;;\n\n&#x2F;&#x2F; 提示：type StrArrOrNumArr &#x3D; string[] | number[];\n\nWhat happens here is that StrArrOrNumArr distributes on:这里发生了什么？\nstring | number;\n\nand maps over each member type of the union, to what is effectively:并映射到联合类型每个成员类型\nToArray&lt;string&gt; | ToArray&lt;number&gt;;\n\nwhich leaves us with:这给我们留下了：\nstring[] | number[];\n\nTypically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.通常情况下，分布式是所需的行为。要避免这种行为，你可以在每边 extends 关键字之前使用方括号。\ntype ToArrayNonDist&lt;Type&gt; &#x3D; [Type] extends [any] ? Type[] : never;\n\n&#x2F;&#x2F; &#39;StrArrOrNumArr&#39; is no longer a union.\ntype StrArrOrNumArr &#x3D; ToArrayNonDist&lt;string | number&gt;;\n&#x2F;&#x2F; 提示：type StrArrOrNumArr &#x3D; (string | number)[];\n\nReturn模板字面量类型（Template Literal Types）模板字面量类型以字符串字面量类型为基础，可以通过联合类型扩展成多个字符串。\n它们跟 JavaScript 的模板字符串是相同的语法，但是只能用在类型操作中。当使用模板字面量类型时，它会替换模板中的变量，返回一个新的字符串字面量：\ntype World &#x3D; &quot;world&quot;;\n\ntype Greeting &#x3D; &#96;hello $&#123;World&#125;&#96;;\n&#x2F;&#x2F; type Greeting &#x3D; &quot;hello world&quot;\n\n\n当模板中的变量是一个联合类型时，每一个可能的字符串字面量都会被表示：\n\ntype EmailLocaleIDs &#x3D; &quot;welcome_email&quot; | &quot;email_heading&quot;;\ntype FooterLocaleIDs &#x3D; &quot;footer_title&quot; | &quot;footer_sendoff&quot;;\n\ntype AllLocaleIDs &#x3D; &#96;$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;_id&#96;;\n&#x2F;&#x2F; type AllLocaleIDs &#x3D; &quot;welcome*email_id&quot; | &quot;email_heading_id&quot; | &quot;footer_title_id&quot; | &quot;footer_sendoff_id&quot;\n\n\n如果模板字面量里的多个变量都是联合类型，结果会交叉相乘，比如下面的例子就有 2 * 2 _ 3 一共 12 种结果：\n\ntype AllLocaleIDs &#x3D; &#96;$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;_id&#96;;\ntype Lang &#x3D; &quot;en&quot; | &quot;ja&quot; | &quot;pt&quot;;\n\ntype LocaleMessageIDs &#x3D; &#96;$&#123;Lang&#125;_$&#123;AllLocaleIDs&#125;&#96;;\n&#x2F;&#x2F; type LocaleMessageIDs &#x3D; &quot;en_welcome_email_id&quot; | &quot;en_email_heading_id&quot; | &quot;en_footer_title_id&quot; | &quot;en_footer_sendoff_id&quot; | &quot;ja_welcome_email_id&quot; | &quot;ja_email_heading_id&quot; | &quot;ja_footer_title_id&quot; | &quot;ja_footer_sendoff_id&quot; | &quot;pt_welcome_email_id&quot; | &quot;pt_email_heading_id&quot; | &quot;pt_footer_title_id&quot; | &quot;pt_footer_sendoff_id&quot;\n\n\n如果真的是非常长的字符串联合类型，推荐提前生成，这种还是适用于短一些的情况。\n\n类型中的字符串联合类型（String Unions in Types）模板字面量最有用的地方在于你可以基于一个类型内部的信息，定义一个新的字符串，让我们举个例子：\n有这样一个函数 makeWatchedObject， 它会给传入的对象添加了一个 on 方法。在 JavaScript 中，它的调用看起来是这样：makeWatchedObject(baseObject)，我们假设这个传入对象为：\nconst passedObject &#x3D; &#123;\n  firstName: &quot;Saoirse&quot;,\n  lastName: &quot;Ronan&quot;,\n  age: 26,\n&#125;;\n\n这个 on 方法会被添加到这个传入对象上，该方法接受两个参数，eventName （ string 类型） 和 callBack （function 类型）：\n&#x2F;&#x2F; 伪代码\nconst result &#x3D; makeWatchedObject(baseObject);\nresult.on(eventName, callBack);\n\n我们希望 eventName 是这种形式：attributeInThePassedObject + “Changed” ，举个例子，\n\npassedObject 有一个属性 firstName，对应产生的 eventName 为 firstNameChanged，\n同理，lastName 对应的是 lastNameChanged，\nage 对应的是 ageChanged。\n\n当这个 callBack 函数被调用的时候：\n\n应该被传入与 attributeInThePassedObject 相同类型的值。比如 passedObject 中，\nfirstName 的值的类型为 string , 对应 firstNameChanged 事件的回调函数，则接受传入一个 string 类型的值。\nage 的值的类型为 number，对应 ageChanged 事件的回调函数，则接受传入一个 number 类型的值。\n\n\n返回值类型为 void 类型。on() 方法的签名最一开始是这样的：on(eventName: string, callBack: (newValue: any) &#x3D;&gt; void)。 使用这样的签名，我们是不能实现上面所说的这些约束的，这个时候就可以使用模板字面量：\n\nconst person &#x3D; makeWatchedObject(&#123;\n  firstName: &quot;Saoirse&quot;,\n  lastName: &quot;Ronan&quot;,\n  age: 26,\n&#125;);\n\n&#x2F;&#x2F; makeWatchedObject has added &#96;on&#96; to the anonymous Object\nperson.on(&quot;firstNameChanged&quot;, (newValue) &#x3D;&gt; &#123;\n  console.log(&#96;firstName was changed to $&#123;newValue&#125;!&#96;);\n&#125;);\n\n注意这个例子里，on 方法添加的事件名为 “firstNameChanged”， 而不仅仅是 “firstName”，而回调函数传入的值 newValue ，我们希望约束为 string 类型。我们先实现第一点。\n在这个例子里，我们希望传入的事件名的类型，是对象属性名的联合，只是每个联合成员都还在最后拼接一个 Changed 字符，在 JavaScript 中，我们可以做这样一个计算：\nObject.keys(passedObject).map(x &#x3D;&gt; $&#123;x&#125;Changed)\n\n模板字面量提供了一个相似的字符串操作：\ntype PropEventSource&lt;Type&gt; &#x3D; &#123;\n  on(\n    eventName: &#96;$&#123;string &amp; keyof Type&#125;Changed&#96;,\n    callback: (newValue: any) &#x3D;&gt; void\n  ): void;\n&#125;;\n\n&#x2F;&#x2F;&#x2F; Create a &quot;watched object&quot; with an &#39;on&#39; method\n&#x2F;&#x2F;&#x2F; so that you can watch for changes to properties.\n\ndeclare function makeWatchedObject&lt;Type&gt;(\n  obj: Type\n): Type &amp; PropEventSource&lt;Type&gt;;\n\n注意，我们在这里例子中，模板字面量里我们写的是 string &amp; keyof Type，我们可不可以只写成 keyof Type 呢？如果我们这样写，会报错：\ntype PropEventSource&lt;Type&gt; &#x3D; &#123;\n  on(\n    eventName: &#96;$&#123;keyof Type&#125;Changed&#96;,\n    callback: (newValue: any) &#x3D;&gt; void\n  ): void;\n&#125;;\n\n&#x2F;&#x2F; Type &#39;keyof Type&#39; is not assignable to type &#39;string | number | bigint | boolean | null | undefined&#39;.\n&#x2F;&#x2F; Type &#39;string | number | symbol&#39; is not assignable to type &#39;string | number | bigint | boolean | null | undefined&#39;.\n&#x2F;&#x2F; ...\n\n从报错信息中，我们也可以看出报错原因，在 《TypeScript 系列之 Keyof 操作符》里，我们知道\n\nkeyof 操作符会返回 string | number | symbol 类型，\n但是模板字面量的变量要求的类型却是 string | number | bigint | boolean | null | undefined，\n\n比较一下，多了一个 symbol 类型，所以其实我们也可以这样写：\ntype PropEventSource&lt;Type&gt; &#x3D; &#123;\n  on(\n    eventName: &#96;$&#123;Exclude&lt;keyof Type, symbol&gt;&#125;Changed&#96;,\n    callback: (newValue: any) &#x3D;&gt; void\n  ): void;\n&#125;;\n\n再或者这样写：\ntype PropEventSource&lt;Type&gt; &#x3D; &#123;\n  on(\n    eventName: &#96;$&#123;Extract&lt;keyof Type, string&gt;&#125;Changed&#96;,\n    callback: (newValue: any) &#x3D;&gt; void\n  ): void;\n&#125;;\n\n使用这种方式，在我们使用错误的事件名时，TypeScript 会给出报错：\nconst person &#x3D; makeWatchedObject(&#123;\n  firstName: &quot;Saoirse&quot;,\n  lastName: &quot;Ronan&quot;,\n  age: 26,\n&#125;);\n\nperson.on(&quot;firstNameChanged&quot;, () &#x3D;&gt; &#123;&#125;);\n\n&#x2F;&#x2F; Prevent easy human error (using the key instead of the event name)\nperson.on(&quot;firstName&quot;, () &#x3D;&gt; &#123;&#125;);\n&#x2F;&#x2F; Argument of type &#39;&quot;firstName&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.\n\n&#x2F;&#x2F; It&#39;s typo-resistant\nperson.on(&quot;frstNameChanged&quot;, () &#x3D;&gt; &#123;&#125;);\n&#x2F;&#x2F; Argument of type &#39;&quot;frstNameChanged&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.\n\n模板字面量的推断（Inference with Template Literals）现在我们来实现第二点，回调函数传入的值的类型与对应的属性值的类型相同。我们现在只是简单的对 callBack 的参数使用 any 类型。实现这个约束的关键在于借助泛型函数：\n捕获泛型函数第一个参数的字面量，生成一个字面量类型\n\n该字面量类型可以被对象属性构成的联合约束\n对象属性的类型可以通过索引访问获取\n应用此类型，确保回调函数的参数类型与对象属性的类型是同一个类型\n\ntype PropEventSource&lt;Type&gt; &#x3D; &#123;\n  on&lt;Key extends string &amp; keyof Type&gt;(\n    eventName: &#96;$&#123;Key&#125;Changed&#96;,\n    callback: (newValue: Type[Key]) &#x3D;&gt; void\n  ): void;\n&#125;;\n\ndeclare function makeWatchedObject&lt;Type&gt;(\n  obj: Type\n): Type &amp; PropEventSource&lt;Type&gt;;\n\nconst person &#x3D; makeWatchedObject(&#123;\n  firstName: &quot;Saoirse&quot;,\n  lastName: &quot;Ronan&quot;,\n  age: 26,\n&#125;);\n\nperson.on(&quot;firstNameChanged&quot;, (newName) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; (parameter) newName: string\n  console.log(&#96;new name is $&#123;newName.toUpperCase()&#125;&#96;);\n&#125;);\n\nperson.on(&quot;ageChanged&quot;, (newAge) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; (parameter) newAge: number\n  if (newAge &lt; 0) &#123;\n    console.warn(&quot;warning! negative age&quot;);\n  &#125;\n&#125;);\n\n这里我们把 on 改成了一个泛型函数。\n当一个用户调用的时候传入 “firstNameChanged”，TypeScript 会尝试着推断 Key 正确的类型。它会匹配 key 和 “Changed” 前的字符串 ，然后推断出字符串 “firstName” ，然后再获取原始对象的 firstName 属性的类型，在这个例子中，就是 string 类型。\n内置字符操作类型（Intrinsic String Manipulation Types）TypeScript 的一些类型可以用于字符操作，这些类型处于性能的考虑被内置在编译器中，你不能在 .d.ts 文件里找到它们。\nUppercase把每个字符转为大写形式：\ntype Greeting &#x3D; &quot;Hello, world&quot;;\ntype ShoutyGreeting &#x3D; Uppercase&lt;Greeting&gt;;\n&#x2F;&#x2F; type ShoutyGreeting &#x3D; &quot;HELLO, WORLD&quot;\n\ntype ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;ID-$&#123;Uppercase&lt;Str&gt;&#125;&#96;;\ntype MainID &#x3D; ASCIICacheKey&lt;&quot;my_app&quot;&gt;;\n&#x2F;&#x2F; type MainID &#x3D; &quot;ID-MY_APP&quot;\n\nLowercase把每个字符转为小写形式：\ntype Greeting &#x3D; &quot;Hello, world&quot;;\ntype QuietGreeting &#x3D; Lowercase&lt;Greeting&gt;;\n&#x2F;&#x2F; type QuietGreeting &#x3D; &quot;hello, world&quot;\n\ntype ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;id-$&#123;Lowercase&lt;Str&gt;&#125;&#96;;\ntype MainID &#x3D; ASCIICacheKey&lt;&quot;MY_APP&quot;&gt;;\n&#x2F;&#x2F; type MainID &#x3D; &quot;id-my_app&quot;\n\nCapitalize\n把字符串的第一个字符转为大写形式：\n\ntype LowercaseGreeting &#x3D; &quot;hello, world&quot;;\ntype Greeting &#x3D; Capitalize&lt;LowercaseGreeting&gt;;\n&#x2F;&#x2F; type Greeting &#x3D; &quot;Hello, world&quot;\n\nUncapitalize\n把字符串的第一个字符转换为小写形式：\n\ntype UppercaseGreeting &#x3D; &quot;HELLO WORLD&quot;;\ntype UncomfortableGreeting &#x3D; Uncapitalize&lt;UppercaseGreeting&gt;;\n&#x2F;&#x2F; type UncomfortableGreeting &#x3D; &quot;hELLO WORLD&quot;\n\n\n字符操作类型的技术细节从 TypeScript 4.1 起，这些内置函数会直接使用 JavaScript 字符串运行时函数，而不是本地化识别 (locale aware)。\n\nfunction applyStringMapping(symbol: Symbol, str: string) &#123;\n  switch (intrinsicTypeKinds.get(symbol.escapedName as string)) &#123;\n    case IntrinsicTypeKind.Uppercase:\n      return str.toUpperCase();\n    case IntrinsicTypeKind.Lowercase:\n      return str.toLowerCase();\n    case IntrinsicTypeKind.Capitalize:\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    case IntrinsicTypeKind.Uncapitalize:\n      return str.charAt(0).toLowerCase() + str.slice(1);\n  &#125;\n  return str;\n&#125;\n\n作者：冴羽链接：https://www.imooc.com/article/322215来源：慕课网本文原创发布于慕课网 ，转载请注明出处，谢谢合作\n在想一个问题为什么别人可以把文档翻译的那么准确，让读者一看就明白\n","slug":"2022-06-07ts-type-manipulation","date":"2022-06-08T03:20:35.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"f1faf548c4c61142a49eddcdf4aec1f6","title":"6.Typescript手册 对象类型","content":"In JavaScript, the fundamental way that we group and pass around data is through objects. In TypeScript, we represent those through object types.在 JavaScript 中，我们通过对象来组织和传递数据。在 TypeScript 中，我们通过对象类型来表示这些对象。As we’ve seen, they can be anonymous:我们可以看到，它们可以是匿名的：\nfunction greet(person: &#123; name: string; age: number &#125;) &#123;\n  return &quot;Hello &quot; + person.name;\n&#125;\n\nor they can be named by using either an interface或者，它们可以使用接口来命名\ninterface Person &#123;\n  name: string;\n  age: number;\n&#125;\n\nfunction greet(person: Person) &#123;\n  return &quot;Hello &quot; + person.name;\n&#125;\n\nor a type alias.或者，它们可以使用类型别名\ntype Person &#x3D; &#123;\n  name: string;\n  age: number;\n&#125;;\n\nfunction greet(person: Person) &#123;\n  return &quot;Hello &quot; + person.name;\n&#125;\n\nIn all three examples above, we’ve written functions that take objects that contain the property name (which must be a string) and age (which must be a number).在上面三个例子中，我们已经写了一个函数，它接受包含属性 name（必须是字符串）和 age（必须是数字）的对象。\nProperty Modifiers属性修饰符Each property in an object type can specify a couple of things: the type, whether the property is optional, and whether the property can be written to.对象类型中的每个属性都可以指定一些东西：类型、是否是可选的，以及是否可以写入。\nOptional Properties可选属性Much of the time, we’ll find ourselves dealing with objects that might have a property set. In those cases, we can mark those properties as optional by adding a question mark (?) to the end of their names.大多数时候，我们会发现我们在对对象进行操作的时候，可能会有属性被设置。在这些情况下，我们可以通过在属性名的末尾添加问号来标记这些属性为可选的。\ninterface PaintOptions &#123;\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n&#125;\n\nfunction paintShape(opts: PaintOptions) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n\nconst shape &#x3D; getShape();\npaintShape(&#123; shape &#125;);\npaintShape(&#123; shape, xPos: 100 &#125;);\npaintShape(&#123; shape, yPos: 100 &#125;);\npaintShape(&#123; shape, xPos: 100, yPos: 100 &#125;);\n\nIn this example, both xPos and yPos are considered optional. We can choose to provide either of them, so every call above to paintShape is valid. All optionality really says is that if the property is set, it better have a specific type.在这个例子中，xPos和yPos都被认为是可选的。我们可以选择提供其中一个，因此每次调用paintShape都是有效的。所有的可选性都说是，如果属性被设置，它应该有一个特定的类型。We can also read from those properties - but when we do under strictNullChecks, TypeScript will tell us they’re potentially undefined.我们也可以读取这些属性，但是在严格的 null 检查下，TypeScript 将会告诉我们这些属性可能是 undefined。\nfunction paintShape(opts: PaintOptions) &#123;\n  let xPos &#x3D; opts.xPos;\n  &#x2F;&#x2F; (property) PaintOptions.xPos?: number | undefined\n\n  let yPos &#x3D; opts.yPos;\n  &#x2F;&#x2F; (property) PaintOptions.yPos?: number | undefined\n  &#x2F;&#x2F; ...\n&#125;\n\nIn JavaScript, even if the property has never been set, we can still access it - it’s just going to give us the value undefined. We can just handle undefined specially.在 JavaScript 中，即使属性没有被设置，我们仍然可以访问它，它只是给我们一个值 undefined。我们可以特别处理 undefined。\nfunction paintShape(opts: PaintOptions) &#123;\n  let xPos &#x3D; opts.xPos &#x3D;&#x3D;&#x3D; undefined ? 0 : opts.xPos;\n  &#x2F;&#x2F; let xPos: number;\n\n  let yPos &#x3D; opts.yPos &#x3D;&#x3D;&#x3D; undefined ? 0 : opts.yPos;\n  &#x2F;&#x2F; let yPos: number;\n  &#x2F;&#x2F; ...\n&#125;\n\nNote that this pattern of setting defaults for unspecified values is so common that JavaScript has syntax to support it.注意，这种设置默认值的方式很常见，因此 JavaScript 有一种语法来支持它。\nfunction paintShape(&#123; shape, xPos &#x3D; 0, yPos &#x3D; 0 &#125;: PaintOptions) &#123;\n  console.log(&quot;x coordinate at&quot;, xPos);\n  &#x2F;&#x2F; (parameter) xPos: number\n\n  console.log(&quot;y coordinate at&quot;, yPos);\n  &#x2F;&#x2F; (parameter) yPos: number\n  &#x2F;&#x2F; ...\n&#125;\n\nHere we used a destructuring pattern for paintShape’s parameter, and provided default values for xPos and yPos. Now xPos and yPos are both definitely present within the body of paintShape, but optional for any callers to paintShape.在这里，我们使用了 paintShape 的参数的析构模式，并为 xPos 和 yPos 提供了默认值。现在 xPos 和 yPos 在 paintShape 的主体中都是必须的，但是任何调用者调用 paintShape 的值都是可选的。Note that there is currently no way to place type annotations within destructuring patterns. This is because the following syntax already means something different in JavaScript.注意，目前没有办法在析构模式中放置类型标注。因为这个语法已经在 JavaScript 中表示了不同的意思。\nfunction draw(&#123; shape: Shape, xPos: number &#x3D; 100 &#x2F;_..._&#x2F; &#125;) &#123;\nrender(shape);\n&#x2F;&#x2F; Cannot find name &#39;shape&#39;. Did you mean &#39;Shape&#39;?\nrender(xPos);\n&#x2F;&#x2F; Cannot find name &#39;xPos&#39;.\n&#125;\n\nIn an object destructuring pattern, shape: Shape means “grab the property shape and redefine it locally as a variable named Shape. Likewise xPos: number creates a variable named number whose value is based on the parameter’s xPos.在一个对象析构模式中，shape: Shape 表示“抓取属性 shape 并重新定义它作为名为 Shape 的变量。同样的，xPos: number 创建了一个名为 number 的变量，其值是基于参数的 xPos。Using mapping modifiers, you can remove optional attributes.使用映射修饰符，你可以移除可选属性。\nReadonly Properties只读属性Properties can also be marked as readonly for TypeScript. While it won’t change any behavior at runtime, a property marked as readonly can’t be written to during type-checking.只读属性\ninterface SomeType &#123;\n  readonly prop: string;\n&#125;\n\nfunction doSomething(obj: SomeType) &#123;\n  &#x2F;&#x2F; We can read from &#39;obj.prop&#39;.\n  console.log(&#96;prop has the value &#39;$&#123;obj.prop&#125;&#39;.&#96;);\n\n  &#x2F;&#x2F; But we can&#39;t re-assign it.\n  obj.prop &#x3D; &quot;hello&quot;;\n  &#x2F;&#x2F; Cannot assign to &#39;prop&#39; because it is a read-only property.\n&#125;\n\nUsing the readonly modifier doesn’t necessarily imply that a value is totally immutable - or in other words, that its internal contents can’t be changed. It just means the property itself can’t be re-written to.使用 readonly 修饰符并不意味着一个值是完全不可变的，也就是说，它的内部内容不能被改变。它只是说，属性本身不能被重写。\ninterface Home &#123;\n  readonly resident: &#123; name: string; age: number &#125;;\n&#125;\n\nfunction visitForBirthday(home: Home) &#123;\n  &#x2F;&#x2F; We can read and update properties from &#39;home.resident&#39;.\n  &#x2F;&#x2F; 我们可以从 &#39;home.resident&#39; 中读取和更新属性。\n  console.log(&#96;Happy birthday $&#123;home.resident.name&#125;!&#96;);\n  home.resident.age++;\n&#125;\n\nfunction evict(home: Home) &#123;\n  &#x2F;&#x2F; But we can&#39;t write to the &#39;resident&#39; property itself on a &#39;Home&#39;.\n  &#x2F;&#x2F; 但是，我们不能在 &#39;Home&#39; 上写入 &#39;resident&#39; 属性。\n  home.resident &#x3D; &#123;\n    &#x2F;&#x2F; Cannot assign to &#39;resident&#39; because it is a read-only property.\n    name: &quot;Victor the Evictor&quot;,\n    age: 42,\n  &#125;;\n&#125;\n\nIt’s important to manage expectations of what readonly implies. It’s useful to signal intent during development time for TypeScript on how an object should be used. TypeScript doesn’t factor in whether properties on two types are readonly when checking whether those types are compatible, so readonly properties can also change via aliasing.\n注意\nTypeScript 在检查两个类型是否兼容的时候，并不会考虑两个类型里的属性是否是 readonly，这就意味着，readonly 的值是可以通过别名修改的。\ninterface Person &#123;\n  name: string;\n  age: number;\n&#125;\n\ninterface ReadonlyPerson &#123;\n  readonly name: string;\n  readonly age: number;\n&#125;\n\nlet writablePerson: Person &#x3D; &#123;\n  name: &quot;Person McPersonface&quot;,\n  age: 42,\n&#125;;\n\n&#x2F;&#x2F; works\nlet readonlyPerson: ReadonlyPerson &#x3D; writablePerson;\n\nconsole.log(readonlyPerson.age); &#x2F;&#x2F; prints &#39;42&#39;\nwritablePerson.age++;\nconsole.log(readonlyPerson.age); &#x2F;&#x2F; prints &#39;43&#39;\n\nUsing mapping modifiers, you can remove readonly attributes.\nIndex Signatures索引签名Sometimes you don’t know all the names of a type’s properties ahead of time, but you do know the shape of the values.有时候，你不知道一个类型的所有属性的名字，但是你知道值的形状。\nIn those cases you can use an index signature to describe the types of possible values, for example:在这些情况下，你可以使用索引签名来描述可能的值的类型，例如：\ninterface StringArray &#123;\n  [index: number]: string;\n&#125;\n\nconst myArray: StringArray &#x3D; getStringArray();\nconst secondItem &#x3D; myArray[1];\n\nconst secondItem: string;\n\nAbove, we have a StringArray interface which has an index signature. This index signature states that when a StringArray is indexed with a number, it will return a string.上面，我们有一个 StringArray 接口，它有一个索引签名。这个索引签名说明，当一个 StringArray 被索引为一个数字时，它会返回一个字符串。An index signature property type must be either ‘string’ or ‘number’.索引签名属性类型必须是‘string’或‘number’。It is possible to support both types of indexers…可以支持两种类型的索引器...\nWhile string index signatures are a powerful way to describe the “dictionary” pattern, they also enforce that all properties match their return type. This is because a string index declares that obj.property is also available as obj[“property”]. In the following example, name’s type does not match the string index’s type, and the type checker gives an error:尽管字符串索引用来描述字典模式（dictionary pattern）非常的有效，但也会强制要求所有的属性要匹配索引签名的返回类型。这是因为一个声明类似于 obj.property 的字符串索引，跟 obj[&quot;property&quot;]是一样的。在下面的例子中，name 的类型并不匹配字符串索引的类型，所以类型检查器会给出报错：\ninterface NumberDictionary &#123;\n  [index: string]: number;\n\n  length: number; &#x2F;&#x2F; ok\n  name: string;\n  &#x2F;&#x2F; Property &#39;name&#39; of type &#39;string&#39; is not assignable to &#39;string&#39; index type &#39;number&#39;.\n&#125;\n\nHowever, properties of different types are acceptable if the index signature is a union of the property types:但是，不同类型的属性是可以接受的，如果索引签名是属性类型的联合：\ninterface NumberOrStringDictionary &#123;\n  [index: string]: number | string;\n  length: number; &#x2F;&#x2F; ok, length is a number\n  name: string; &#x2F;&#x2F; ok, name is a string\n&#125;\n\nFinally, you can make index signatures readonly in order to prevent assignment to their indices:最后，你可以使索引签名变成只读，以防止索引赋值：\ninterface ReadonlyStringArray &#123;\n  readonly [index: number]: string;\n&#125;\n\nlet myArray: ReadonlyStringArray &#x3D; getReadOnlyStringArray();\nmyArray[2] &#x3D; &quot;Mallory&quot;;\n&#x2F;&#x2F; Index signature in type &#39;ReadonlyStringArray&#39; only permits reading.\n\nYou can’t set myArray[2] because the index signature is readonly.你不能设置 myArray[2]，因为索引签名是只读的。\nExtending Types扩展类型It’s pretty common to have types that might be more specific versions of other types. For example, we might have a BasicAddress type that describes the fields necessary for sending letters and packages in the U.S.我们可能有一个基本的地址类型，它描述了在美国发送信件和包裹的必要字段。\ninterface BasicAddress &#123;\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n&#125;\n\nIn some situations that’s enough, but addresses often have a unit number associated with them if the building at an address has multiple units. We can then describe an AddressWithUnit.在某些情况下，这样就足够了，但是地址有时候会有单元号码，如果地址的建筑有多个单元。我们可以描述一个 AddressWithUnit。\ninterface AddressWithUnit &#123;\n  name?: string;\n  unit: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n&#125;\n\nThis does the job, but the downside here is that we had to repeat all the other fields from BasicAddress when our changes were purely additive. Instead, we can extend the original BasicAddress type and just add the new fields that are unique to AddressWithUnit.这样做就可以了，但是有一个缺点，就是我们必须重复所有的字段来自 BasicAddress，当我们的改动只是增加性的时候。我们可以扩展原来的 BasicAddress 类型，并且只需要增加 AddressWithUnit 的唯一字段。\ninterface BasicAddress &#123;\n  name?: string;\n  street: string;\n  city: string;\n  country: string;\n  postalCode: string;\n&#125;\n\ninterface AddressWithUnit extends BasicAddress &#123;\n  unit: string;\n&#125;\n\nThe extends keyword on an interface allows us to effectively copy members from other named types, and add whatever new members we want. This can be useful for cutting down the amount of type declaration boilerplate we have to write, and for signaling intent that several different declarations of the same property might be related. For example, AddressWithUnit didn’t need to repeat the street property, and because street originates from BasicAddress, a reader will know that those two types are related in some way.在一个接口上使用 extends 关键字，我们可以从其他命名类型复制成员，并且添加我们想要的新成员。这可以用来缩短我们写的类型声明的热身，以及为同一属性的多个声明提供相关性的信号。例如，AddressWithUnit 不需要重复 street 属性，因为 street 来自 BasicAddress，读者知道这两个类型是相关的。interfaces can also extend from multiple types.接口也可以扩展多个类型。\ninterface Colorful &#123;\n  color: string;\n&#125;\n\ninterface Circle &#123;\n  radius: number;\n&#125;\n\ninterface ColorfulCircle extends Colorful, Circle &#123;&#125;\n\nconst cc: ColorfulCircle &#x3D; &#123;\n  color: &quot;red&quot;,\n  radius: 42,\n&#125;;\n\nIntersection Types交叉类型interfaces allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to combine existing object types.接口允许我们从其他类型扩展新类型。TypeScript 提供了一种合并现有对象类型的交叉类型。An intersection type is defined using the &amp; operator.交叉类型用 &amp; 运算符定义。\ninterface Colorful &#123;\n  color: string;\n&#125;\ninterface Circle &#123;\n  radius: number;\n&#125;\n\ntype ColorfulCircle &#x3D; Colorful &amp; Circle;\n\nHere, we’ve intersected Colorful and Circle to produce a new type that has all the members of Colorful and Circle.这里，我们将 Colorful 和 Circle 进行交叉，以生成一个新类型，它包含了 Colorful 和 Circle 的所有成员。\nfunction draw(circle: Colorful &amp; Circle) &#123;\n  console.log(&#96;Color was $&#123;circle.color&#125;&#96;);\n  console.log(&#96;Radius was $&#123;circle.radius&#125;&#96;);\n&#125;\n\n&#x2F;&#x2F; okay\ndraw(&#123; color: &quot;blue&quot;, radius: 42 &#125;);\n\n&#x2F;&#x2F; oops\ndraw(&#123; color: &quot;red&quot;, raidus: 42 &#125;);\n&#x2F;&#x2F; Argument of type &#39;&#123; color: string; raidus: number; &#125;&#39; is not assignable to parameter of type &#39;Colorful &amp; Circle&#39;.\n&#x2F;&#x2F; Object literal may only specify known properties, but &#39;raidus&#39; does not exist in type &#39;Colorful &amp; Circle&#39;. Did you mean to write &#39;radius&#39;?\n\nInterfaces vs. Intersections接口与交叉类型We just looked at two ways to combine types which are similar, but are actually subtly different. With interfaces, we could use an extends clause to extend from other types, and we were able to do something similar with intersections and name the result with a type alias. The principle difference between the two is how conflicts are handled, and that difference is typically one of the main reasons why you’d pick one over the other between an interface and a type alias of an intersection type.我们只看到了两种方式来合并类型，但是实际上是有着微妙的区别。接口使用 extends 关键字扩展其他类型，而交叉类型使用类型别名定义。接口与交叉类型之间的主要区别是如何处理冲突，这个区别通常是在选择一个接口或者类型别名的时候，接口或者类型别名是否更好。\n这两种方式在合并类型上看起来很相似，但实际上还是有很大的不同。最原则性的不同就是在于冲突怎么处理，这也是你决定选择那种方式的主要原因。\ninterface Colorful &#123;\n  color: string;\n&#125;\n\ninterface ColorfulSub extends Colorful &#123;\n  color: number;\n&#125;\n&#x2F;&#x2F; Interface &#39;ColorfulSub&#39; incorrectly extends interface &#39;Colorful&#39;.\n&#x2F;&#x2F; Types of property &#39;color&#39; are incompatible.\n&#x2F;&#x2F; Type &#39;number&#39; is not assignable to type &#39;string&#39;.\n\n使用继承的方式，如果重写类型会导致编译错误，但交叉类型不会：\ninterface Colorful &#123;\n  color: string;\n&#125;\n\ntype ColorfulSub &#x3D; Colorful &amp; &#123;\n  color: number;\n&#125;;\n\n虽然不会报错，那 color 属性的类型是什么呢，答案是 never，取得是 string 和 number 的交集。\nGeneric Object Types泛型对象类型Let’s imagine a Box type that can contain any value - strings, numbers, Giraffes, whatever.想想一个可以包含任何值的盒子类型，例如字符串、数字、狮子等。\ninterface Box &#123;\n  contents: any;\n&#125;\n\nRight now, the contents property is typed as any, which works, but can lead to accidents down the line.现在，contents 属性是任意类型，这就可以工作，但是有可能会在未来出现意外。We could instead use unknown, but that would mean that in cases where we already know the type of contents, we’d need to do precautionary checks, or use error-prone type assertions.我们可以使用 unknown，但是这会导致在我们已经知道 contents 的类型的情况下，我们需要做一些预防性检查，或者使用错误性的类型断言。\ninterface Box &#123;\n  contents: unknown;\n&#125;\n\nlet x: Box &#x3D; &#123;\n  contents: &quot;hello world&quot;,\n&#125;;\n\n&#x2F;&#x2F; we could check &#39;x.contents&#39;\nif (typeof x.contents &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n  console.log(x.contents.toLowerCase());\n&#125;\n\n&#x2F;&#x2F; or we could use a type assertion\nconsole.log((x.contents as string).toLowerCase());\n\nOne type safe approach would be to instead scaffold out different Box types for every type of contents.一种安全的解决方案就是把不同的盒子类型用于不同的类型的内容。\ninterface NumberBox &#123;\n  contents: number;\n&#125;\n\ninterface StringBox &#123;\n  contents: string;\n&#125;\n\ninterface BooleanBox &#123;\n  contents: boolean;\n&#125;\n\nBut that means we’ll have to create different functions, or overloads of functions, to operate on these types.但是，这会导致我们需要创建不同的函数，或者重载函数，来操作这些类型。\nfunction setContents(box: StringBox, newContents: string): void;\nfunction setContents(box: NumberBox, newContents: number): void;\nfunction setContents(box: BooleanBox, newContents: boolean): void;\nfunction setContents(box: &#123; contents: any &#125;, newContents: any) &#123;\n  box.contents &#x3D; newContents;\n&#125;\n\nThat’s a lot of boilerplate. Moreover, we might later need to introduce new types and overloads. This is frustrating, since our box types and overloads are all effectively the same.这就是一大堆的烧饼，同时，我们可能需要在未来添加新的类型和重载。这是困难的，因为我们的盒子类型和重载都是一样的。Instead, we can make a generic Box type which declares a type parameter.而不是，我们可以把盒子类型变成泛型类型，它声明了一个类型参数。\ninterface Box&lt;Type&gt; &#123;\n  contents: Type;\n&#125;\n\nYou might read this as “A Box of Type is something whose contents have type Type”. Later on, when we refer to Box, we have to give a type argument in place of Type.你可以读这个为“一个类型为 Type 的盒子”。之后，当我们引用 Box 时，我们需要给它一个类型参数。\nlet box: Box&lt;string&gt;;\n\nThink of Box as a template for a real type, where Type is a placeholder that will get replaced with some other type. When TypeScript sees Box, it will replace every instance of Type in Box with string, and end up working with something like { contents: string }. In other words, Box and our earlier StringBox work identically.想想 Box&lt;string&gt; 和 StringBox 类型，它们都是一样的。\ninterface Box&lt;Type&gt; &#123;\ncontents: Type;\n&#125;\ninterface StringBox &#123;\ncontents: string;\n&#125;\n\nlet boxA: Box&lt;string&gt; &#x3D; &#123; contents: &quot;hello&quot; &#125;;\nboxA.contents;\n\n(property) Box&lt;string&gt;.contents: string\n\nlet boxB: StringBox &#x3D; &#123; contents: &quot;world&quot; &#125;;\nboxB.contents;\n\n(property) StringBox.contents: string\n\nBox is reusable in that Type can be substituted with anything. That means that when we need a box for a new type, we don’t need to declare a new Box type at all (though we certainly could if we wanted to).Box 可以重用，因为 Type 可以被替换成任何类型。\ninterface Box&lt;Type&gt; &#123;\n  contents: Type;\n&#125;\n\ninterface Apple &#123;\n  &#x2F;&#x2F; ....\n&#125;\n\n&#x2F;&#x2F; Same as &#39;&#123; contents: Apple &#125;&#39;.\ntype AppleBox &#x3D; Box&lt;Apple&gt;;\n\nThis also means that we can avoid overloads entirely by instead using generic functions.\nfunction setContents&lt;Type&gt;(box: Box&lt;Type&gt;, newContents: Type) &#123;\n  box.contents &#x3D; newContents;\n&#125;\n\nIt is worth noting that type aliases can also be generic. We could have defined our new Box interface, which was:我们可以定义一个新的盒子类型，它是：\ninterface Box&lt;Type&gt; &#123;\n  contents: Type;\n&#125;\n\nby using a type alias instead:使用类型别名来代替：\ntype Box&lt;Type&gt; &#x3D; &#123;\n  contents: Type;\n&#125;;\n\nSince type aliases, unlike interfaces, can describe more than just object types, we can also use them to write other kinds of generic helper types.类型别名，跟接口不同，它可以描述除了对象类型之外的其他类型，我们也可以用它来写其他类型的辅助类型。\ntype OrNull&lt;Type&gt; &#x3D; Type | null;\n\ntype OneOrMany&lt;Type&gt; &#x3D; Type | Type[];\n\n&#x2F;&#x2F; 这组结果一样\ntype OneOrManyOrNull&lt;Type&gt; &#x3D; OrNull&lt;OneOrMany&lt;Type&gt;&gt;;\ntype OneOrManyOrNull&lt;Type&gt; &#x3D; OneOrMany&lt;Type&gt; | null;\n\n&#x2F;&#x2F; 这组结果一样\ntype OneOrManyOrNullStrings &#x3D; OneOrManyOrNull&lt;string&gt;;\ntype OneOrManyOrNullStrings &#x3D; OneOrMany&lt;string&gt; | null;\n\nWe’ll circle back to type aliases in just a little bit.我们会在稍后回到类型别名。\nThe Array Type数组类型Generic object types are often some sort of container type that work independently of the type of elements they contain. It’s ideal for data structures to work this way so that they’re re-usable across different data types.泛型对象类型通常是一种可以独立于其包含元素的类型的容器类型。这样，它们可以在不同的数据类型之间重用。It turns out we’ve been working with a type just like that throughout this handbook: the Array type. Whenever we write out types like number[] or string[], that’s really just a shorthand for Array and Array.我们在这本手册中已经使用过一样的类型：数组类型。\nfunction doSomething(value: Array&lt;string&gt;) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n\nlet myArray: string[] &#x3D; [&quot;hello&quot;, &quot;world&quot;];\n\n&#x2F;&#x2F; either of these work!\ndoSomething(myArray);\ndoSomething(new Array(&quot;hello&quot;, &quot;world&quot;));\n\nMuch like the Box type above, Array itself is a generic type.数组本身是一个泛型类型。\ninterface Array&lt;Type&gt; &#123;\n  &#x2F;**\n   * Gets or sets the length of the array.\n   *&#x2F;\n  length: number;\n\n  &#x2F;**\n   * Removes the last element from an array and returns it.\n   *&#x2F;\n  pop(): Type | undefined;\n\n  &#x2F;**\n   * Appends new elements to an array, and returns the new length of the array.\n   *&#x2F;\n  push(...items: Type[]): number;\n\n  &#x2F;&#x2F; ...\n&#125;\n\nModern JavaScript also provides other data structures which are generic, like Map&lt;K, V&gt;, Set, and Promise. All this really means is that because of how Map, Set, and Promise behave, they can work with any sets of types.现代 JavaScript 也提供了其他的数据结构，比如 Map&lt;K, V&gt;, Set&lt;T&gt;, Promise&lt;T&gt;。\nThe ReadonlyArray Type只读数组类型\nThe ReadonlyArray is a special type that describes arrays that shouldn’t be changed.只读数组是一个描述不能被修改的数组的特殊类型。\nfunction doStuff(values: ReadonlyArray&lt;string&gt;) &#123;\n  &#x2F;&#x2F; We can read from &#39;values&#39;...\n  const copy &#x3D; values.slice();\n  console.log(&#96;The first value is $&#123;values[0]&#125;&#96;);\n\n  &#x2F;&#x2F; ...but we can&#39;t mutate &#39;values&#39;.\n  values.push(&quot;hello!&quot;);\n  &#x2F;&#x2F; Property &#39;push&#39; does not exist on type &#39;readonly string[]&#39;.\n&#125;\n\nMuch like the readonly modifier for properties, it’s mainly a tool we can use for intent. When we see a function that returns ReadonlyArrays, it tells us we’re not meant to change the contents at all, and when we see a function that consumes ReadonlyArrays, it tells us that we can pass any array into that function without worrying that it will change its contents.ReadonlyArray 主要是用来做意图声明。当我们看到一个函数返回 ReadonlyArray，就是在告诉我们不能去更改其中的内容，当我们看到一个函数支持传入 ReadonlyArray ，这是在告诉我们我们可以放心的传入数组到函数中，而不用担心会改变数组的内容。Unlike Array, there isn’t a ReadonlyArray constructor that we can use.不像 Array，ReadonlyArray 并不是一个我们可以用的构造器函数。\nnew ReadonlyArray(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;);\n&#39;ReadonlyArray&#39; only refers to a type, but is being used as a value here.\n\nInstead, we can assign regular Arrays to ReadonlyArrays.然而，我们可以直接把一个常规数组赋值给 ReadonlyArray。\nconst roArray: ReadonlyArray&lt;string&gt; &#x3D; [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];\n\nJust as TypeScript provides a shorthand syntax for Array with Type[], it also provides a shorthand syntax for ReadonlyArray with readonly Type[].TypeScript 也针对 ReadonlyArray&lt;Type&gt; 提供了更简短的写法 readonly Type[]。\nfunction doStuff(values: readonly string[]) &#123;\n  &#x2F;&#x2F; We can read from &#39;values&#39;...\n  const copy &#x3D; values.slice();\n  console.log(&#96;The first value is $&#123;values[0]&#125;&#96;);\n\n  &#x2F;&#x2F; ...but we can&#39;t mutate &#39;values&#39;.\n  values.push(&quot;hello!&quot;);\n  &#x2F;&#x2F; Property &#39;push&#39; does not exist on type &#39;readonly string[]&#39;.\n&#125;\n\nOne last thing to note is that unlike the readonly property modifier, assignability isn’t bidirectional between regular Arrays and ReadonlyArrays.最后有一点要注意，就是 Arrays 和 ReadonlyArray 并不能双向的赋值：\nlet x: readonly string[] &#x3D; [];\nlet y: string[] &#x3D; [];\n\nx &#x3D; y; &#x2F;&#x2F; ok\ny &#x3D; x;\n&#x2F;&#x2F; The type &#39;readonly string[]&#39; is &#39;readonly&#39; and cannot be assigned to the mutable type &#39;string[]&#39;.\n\nTuple TypesA tuple type is another sort of Array type that knows exactly how many elements it contains, and exactly which types it contains at specific positions.元组类型是另外一种 Array 类型，当你明确知道数组包含多少个元素，并且每个位置元素的类型都明确知道的时候，就适合使用元组类型。\ntype StringNumberPair &#x3D; [string, number];\n\nHere, StringNumberPair is a tuple type of string and number. Like ReadonlyArray, it has no representation at runtime, but is significant to TypeScript. To the type system, StringNumberPair describes arrays whose 0 index contains a string and whose 1 index contains a number.在这个例子中，StringNumberPair 就是 string 和 number 的元组类型。\n跟 ReadonlyArray 一样，它并不会在运行时产生影响，但是对 TypeScript 很有意义。因为对于类型系统，StringNumberPair 描述了一个数组，索引 0 的值的类型是 string，索引 1 的值的类型是 number。\nfunction doSomething(pair: [string, number]) &#123;\n  const a &#x3D; pair[0];\n\n  const a: string;\n  const b &#x3D; pair[1];\n\n  const b: number;\n  &#x2F;&#x2F; ...\n&#125;\n\ndoSomething([&quot;hello&quot;, 42]);\n\nIf we try to index past the number of elements, we’ll get an error.如果要获取元素数量之外的元素，TypeScript 会提示错误：\nfunction doSomething(pair: [string, number]) &#123;\n  &#x2F;&#x2F; ...\n\n  const c &#x3D; pair[2];\n  &#x2F;&#x2F; Tuple type &#39;[string, number]&#39; of length &#39;2&#39; has no element at index &#39;2&#39;.\n&#125;\n\nWe can also destructure tuples using JavaScript’s array destructuring.我们也可以使用 JavaScript 的数组解构语法解构元组：\nfunction doSomething(stringHash: [string, number]) &#123;\n  const [inputString, hash] &#x3D; stringHash;\n\n  console.log(inputString);\n\n  &#x2F;&#x2F; const inputString: string;\n\n  console.log(hash);\n\n  &#x2F;&#x2F; const hash: number;\n&#125;\n\n\n\n\n\n\n\n\n\n\nTuple types are useful in heavily convention-based APIs, where each element’s meaning is “obvious”. This gives us flexibility in whatever we want to name our variables when we destructure them. In the above example, we were able to name elements 0 and 1 to whatever we wanted.元组类型在重度依赖约定的 API 中很有用，因为它会让每个元素的意义都很明显。当我们解构的时候，元组给了我们命名变量的自由度。在上面的例子中，我们可以命名元素 0 和 1 为我们想要的名字。However, since not every user holds the same view of what’s obvious, it may be worth reconsidering whether using objects with descriptive property names may be better for your API.然而，也不是每个用户都这样认为，所以有的时候，使用一个带有描述属性名字的对象也许是个更好的方式。Other than those length checks, simple tuple types like these are equivalent to types which are versions of Arrays that declare properties for specific indexes, and that declare length with a numeric literal type.除了长度检查，简单的元组类型跟声明了 length 属性和具体的索引属性的 Array 是一样的。\ninterface StringNumberPair &#123;\n  &#x2F;&#x2F; specialized properties\n  length: 2;\n  0: string;\n  1: number;\n\n  &#x2F;&#x2F; Other &#39;Array&lt;string | number&gt;&#39; members...\n  slice(start?: number, end?: number): Array&lt;string | number&gt;;\n&#125;\n\nAnother thing you may be interested in is that tuples can have optional properties by writing out a question mark (? after an element’s type). Optional tuple elements can only come at the end, and also affect the type of length.在元组类型中，你也可以写一个可选属性，但可选元素必须在最后面，而且也会影响类型的 length 。\ntype Either2dOr3d &#x3D; [number, number, number?];\n\nfunction setCoordinate(coord: Either2dOr3d) &#123;\n  const [x, y, z] &#x3D; coord;\n\n  const z: number | undefined;\n\n  console.log(&#96;Provided coordinates had $&#123;coord.length&#125; dimensions&#96;);\n\n  &#x2F;&#x2F; (property) length: 2 | 3\n&#125;\n\nTuples can also have rest elements, which have to be an array&#x2F;tuple type.Tuples 也可以使用剩余元素语法，但必须是 array/tuple 类型：\ntype StringNumberBooleans &#x3D; [string, number, ...boolean[]];\ntype StringBooleansNumber &#x3D; [string, ...boolean[], number];\ntype BooleansStringNumber &#x3D; [...boolean[], string, number];\n\n\nStringNumberBooleans describes a tuple whose first two elements are string and number respectively, but which may have any number of booleans following.描述一个元组，前两个是字符串和数值，后面是boolean\nStringBooleansNumber describes a tuple whose first element is string and then any number of booleans and ending with a number.描述一个元组，第一个是字符串，最后一个是数值，中间有任意多个boolean类型\nBooleansStringNumber describes a tuple whose starting elements are any number of booleans and ending with a string then a number.描述一个元组，最后两个是string、numberA tuple with a rest element has no set “length” - it only has a set of well-known elements in different positions.有剩余元素的元组并不会设置 length，因为它只知道在不同位置上的已知元素信息：\n\nconst a: StringNumberBooleans &#x3D; [&quot;hello&quot;, 1];\nconst b: StringNumberBooleans &#x3D; [&quot;beautiful&quot;, 2, true];\nconst c: StringNumberBooleans &#x3D; [&quot;world&quot;, 3, true, false, true, false, true];\n\nWhy might optional and rest elements be useful? Well, it allows TypeScript to correspond tuples with parameter lists. Tuples types can be used in rest parameters and arguments, so that the following:可选元素和剩余元素的存在，使得 TypeScript 可以在参数列表里使用元组，就像这样：\nfunction readButtonInput(...args: [string, number, ...boolean[]]) &#123;\n  const [name, version, ...input] &#x3D; args;\n  &#x2F;&#x2F; ...\n&#125;\n\nis basically equivalent to:基本等同于：\nfunction readButtonInput(name: string, version: number, ...input: boolean[]) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n\nThis is handy when you want to take a variable number of arguments with a rest parameter, and you need a minimum number of elements, but you don’t want to introduce intermediate variables.\nreadonly Tuple Types只读元组类型One final note about tuple types - tuples types have readonly variants, and can be specified by sticking a readonly modifier in front of them - just like with array shorthand syntax.元组类型也是可以设置 readonly 的：\nfunction doSomething(pair: readonly [string, number]) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n\nAs you might expect, writing to any property of a readonly tuple isn’t allowed in TypeScript.这样 TypeScript 就不会允许写入readonly 元组的任何属性：\nfunction doSomething(pair: readonly [string, number]) &#123;\n  pair[0] &#x3D; &quot;hello!&quot;;\n  &#x2F;&#x2F; Cannot assign to &#39;0&#39; because it is a read-only property.\n&#125;\n\nTuples tend to be created and left un-modified in most code, so annotating types as readonly tuples when possible is a good default. This is also important given that array literals with const assertions will be inferred with readonly tuple types.在大部分的代码中，元组只是被创建，使用完后也不会被修改，所以尽可能的将元组设置为 readonly 是一个好习惯。如果我们给一个数组字面量 const 断言，也会被推断为 readonly 元组类型。\nlet point &#x3D; [3, 4] as const;\n\nfunction distanceFromOrigin([x, y]: [number, number]) &#123;\n  return Math.sqrt(x ** 2 + y ** 2);\n&#125;\n\ndistanceFromOrigin(point);\n&#x2F;&#x2F; Argument of type &#39;readonly [3, 4]&#39; is not assignable to parameter of type &#39;[number, number]&#39;.\n&#x2F;&#x2F; The type &#39;readonly [3, 4]&#39; is &#39;readonly&#39; and cannot be assigned to the mutable type &#39;[number, number]&#39;.\n\nHere, distanceFromOrigin never modifies its elements, but expects a mutable tuple. Since point’s type was inferred as readonly [3, 4], it won’t be compatible with [number, number] since that type can’t guarantee point’s elements won’t be mutated.尽管 distanceFromOrigin 并没有更改传入的元素，但函数希望传入一个可变元组。因为 point 的类型被推断为 readonly [3, 4]，它跟 [number number] 并不兼容，所以 TypeScript 给了一个报错。\n","slug":"2022-06-08ts-object-types","date":"2022-06-08T01:21:19.000Z","categories_index":"","tags_index":"","author_index":"陈海龙"},{"id":"2af24e4e300095206fecfdff43a1494d","title":"5.Typescript手册 函数","content":"","slug":"2022-06-08ts-more-on-functions","date":"2022-06-07T13:21:19.000Z","categories_index":"","tags_index":"","author_index":"陈海龙"},{"id":"aab722f3fd65a7516918bd7fed1d7d01","title":"4.Typescript手册 收缩类型","content":"Narrowing缩小范围\nImagine we have a function called padLeft.试想我们有这样一个函数，函数名为 padLeft：\nfunction padLeft(padding: number | string, input: string): string &#123;\n  throw new Error(&quot;Not implemented yet!&quot;);\n&#125;\n\nIf padding is a number, it will treat that as the number of spaces we want to prepend to input. If padding is a string, it should just prepend padding to input. Let’s try to implement the logic for when padLeft is passed a number for padding.\n如果 padding 是数字，它将会将 padding 视为我们要添加的空格数量，如果 padding 是字符串，它将会添加 padding 到 input 的前面。\nfunction padLeft(padding: number | string, input: string) &#123;\n  return &quot; &quot;.repeat(padding) + input;\n  &#x2F;&#x2F; Argument of type &#39;string | number&#39; is not assignable to parameter of type &#39;number&#39;.\n  &#x2F;&#x2F; 参数类型 &#39;string | number&#39; 不能赋值给参数类型 &#39;number&#39;。\n  &#x2F;&#x2F; Type &#39;string&#39; is not assignable to type &#39;number&#39;.\n  &#x2F;&#x2F; 类型 &#39;string&#39; 不能赋值给类型 &#39;number&#39;。\n&#125;\n\nUh-oh, we’re getting an error on padding.哇，我们得到一个错误，padding。TypeScript is warning us that adding a number | string to a number might not give us what we want, and it’s right. In other words, we haven’t explicitly checked if padding is a number first, nor are we handling the case where it’s a string, so let’s do exactly that.这是 TypeScript 在警告我们，如果把一个 number 类型 (即例子里的数字 1 )和一个 number | string 类型相加，也许并不会达到我们想要的结果。换句话说，我们应该先检查下 padding 是否是一个 number，或者处理下当 padding 是 string 的情况，那我们可以这样做：\nfunction padLeft(padding: number | string, input: string) &#123;\n  if (typeof padding &#x3D;&#x3D;&#x3D; &quot;number&quot;) &#123;\n    return &quot; &quot;.repeat(padding) + input;\n  &#125;\n  return padding + input;\n&#125;\n\nIf this mostly looks like uninteresting JavaScript code, that’s sort of the point. Apart from the annotations we put in place, this TypeScript code looks like JavaScript. The idea is that TypeScript’s type system aims to make it as easy as possible to write typical JavaScript code without bending over backwards to get type safety.如果这个代码看起来没有什么意思，那就是 TypeScript 的类型系统希望我们能写出一些比较普通的 JavaScript 代码，而不是折腾至最后才知道类型安全。While it might not look like much, there’s actually a lot going under the covers here. Much like how TypeScript analyzes runtime values using static types, it overlays type analysis on JavaScript’s runtime control flow constructs like if&#x2F;else, conditional ternaries, loops, truthiness checks, etc., which can all affect those types.这里的实现比较简单，但是它真的是一个类型检查器，它会在 JavaScript 中的 if/else、条件表达式、循环、真假值检查等控制流中进行类型检查。Within our if check, TypeScript sees typeof padding &#x3D;&#x3D;&#x3D; “number” and understands that as a special form of code called a type guard. TypeScript follows possible paths of execution that our programs can take to analyze the most specific possible type of a value at a given position. It looks at these special checks (called type guards) and assignments, and the process of refining types to more specific types than declared is called narrowing. In many editors we can observe these types as they change, and we’ll even do so in our examples.在我们的 if 检查中，TypeScript 会看到 typeof padding === &quot;number&quot;，并且会解释这个表达式为一个特殊的代码，这个代码被称为类型检查。TypeScript 会根据我们的程序的执行流，来检查一个值的最具体的类型。这些特殊的检查（称为类型检查）和赋值，会影响到类型的精确性。在编辑器中，我们可以看到这些类型的变化，我们也会在我们的例子中看到。\nfunction padLeft(padding: number | string, input: string) &#123;\n  if (typeof padding &#x3D;&#x3D;&#x3D; &quot;number&quot;) &#123;\n    return &quot; &quot;.repeat(padding) + input;\n\n    &#x2F;&#x2F; (parameter) padding: number\n  &#125;\n  return padding + input;\n\n  &#x2F;&#x2F; (parameter) padding: string\n&#125;\n\nThere are a couple of different constructs TypeScript understands for narrowing.TypeScript 会理解一些更加精确的构造。\ntypeof type guards类型保护\nAs we’ve seen, JavaScript supports a typeof operator which can give very basic information about the type of values we have at runtime. TypeScript expects this to return a certain set of strings:JavaScript 支持一个 typeof 操作符，它可以给我们的值返回一些基本的信息。TypeScript 期望这些信息是一个特定的集合：\n“string”“number”“bigint”“boolean”“symbol”“undefined”“object”“function”\nLike we saw with padLeft, this operator comes up pretty often in a number of JavaScript libraries, and TypeScript can understand it to narrow types in different branches.和 padLeft 一样，这个操作符在 JavaScript 库中很常见，TypeScript 可以理解它来缩小不同的分支的类型。In TypeScript, checking against the value returned by typeof is a type guard. Because TypeScript encodes how typeof operates on different values, it knows about some of its quirks in JavaScript. For example, notice that in the list above, typeof doesn’t return the string null. Check out the following example:在 TypeScript 中，检查 typeof 返回的值就是一种类型保护。TypeScript 知道 typeof 不同值的结果，它也能识别 JavaScript 中一些怪异的地方，就比如在上面的列表中，typeof 并没有返回字符串 null，看下面这个例子：\nfunction printAll(strs: string | string[] | null) &#123;\n  if (typeof strs &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;\n    for (const s of strs) &#123;\n      &#x2F;&#x2F; Object is possibly &#39;null&#39;.\n      console.log(s);\n    &#125;\n  &#125; else if (typeof strs &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n    console.log(strs);\n  &#125; else &#123;\n    &#x2F;&#x2F; do nothing\n  &#125;\n&#125;\n\nIn the printAll function, we try to check if strs is an object to see if it’s an array type (now might be a good time to reinforce that arrays are object types in JavaScript). But it turns out that in JavaScript, typeof null is actually “object”! This is one of those unfortunate accidents of history.在这个 printAll 函数中，我们尝试判断 strs 是否是一个对象，原本的目的是判断它是否是一个数组类型，但是在 JavaScript 中，typeof null 也会返回 object。而这是 JavaScript 一个不幸的历史事故。Users with enough experience might not be surprised, but not everyone has run into this in JavaScript; luckily, TypeScript lets us know that strs was only narrowed down to string[] | null instead of just string[].熟练的用户自然不会感到惊讶，但也并不是所有人都如此熟练。不过幸运的是，TypeScript 会让我们知道 strs 被收窄为 strings[] | null ，而不仅仅是 string[]。This might be a good segue into what we’ll call “truthiness” checking.这可能是一个好的转折点。\nTruthiness narrowing真实性缩减\nTruthiness might not be a word you’ll find in the dictionary, but it’s very much something you’ll hear about in JavaScript.真实性可能不是在字典里面找到的，但是你会听到 JavaScript 中的真实性。In JavaScript, we can use any expression in conditionals, &amp;&amp;s, ||s, if statements, Boolean negations (!), and more. As an example, if statements don’t expect their condition to always have the type boolean.这是因为 JavaScript 会做隐式类型转换，像 0 、NaN、&quot;&quot;、0n、null undefined 这些值都会被转为 false，其他的值则会被转为 true。当然你也可以使用 Boolean 函数强制转为 boolean 值，或者使用更加简短的!!：\nfunction getUsersOnlineMessage(numUsersOnline: number) &#123;\n  if (numUsersOnline) &#123;\n    return &#96;There are $&#123;numUsersOnline&#125; online now!&#96;;\n  &#125;\n  return &quot;Nobody&#39;s here. :(&quot;;\n&#125;\n\nIn JavaScript, constructs like if first “coerce” their conditions to booleans to make sense of them, and then choose their branches depending on whether the result is true or false. Values like0、NaN、&quot;&quot;、0n、null undefined 这些值都会被转为 false，其他的值则会被转为 true。当然你也可以使用 Boolean 函数强制转为 boolean 值，或者使用更加简短的!!：\n\n0\nNaN\n“” (the empty string)\n0n (the bigint version of zero)\nnull\nundefined\n\nall coerce to false, and other values get coerced true. You can always coerce values to booleans by running them through the Boolean function, or by using the shorter double-Boolean negation. (The latter has the advantage that TypeScript infers a narrow literal boolean type true, while inferring the first as type boolean.)所有 这些值都会被转为 false，其他的值则会被转为 true。你可以通过调用 Boolean 函数强制转为 boolean 值，或者使用更加简短的!!。(这种情况下，TypeScript 会推断一个简单的布尔值类型 true，而不是类型 boolean。)\n&#x2F;&#x2F; both of these result in &#39;true&#39;\nBoolean(&quot;hello&quot;); &#x2F;&#x2F; type: boolean, value: true\n!!&quot;world&quot;; &#x2F;&#x2F; type: true,    value: true\n\nIt’s fairly popular to leverage this behavior, especially for guarding against values like null or undefined. As an example, let’s &#96;&#96;&#96;using it for our printAll function.这种使用方式非常流行，尤其适用于防范 null 和 undefiend 这种值的时候。举个例子，我们可以在 printAll 函数中这样使用：\nfunction printAll(strs: string | string[] | null) &#123;\n  if (strs &amp;&amp; typeof strs &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;\n    for (const s of strs) &#123;\n      console.log(s);\n    &#125;\n  &#125; else if (typeof strs &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n    console.log(strs);\n  &#125;\n&#125;\n\nYou’ll notice that we’ve gotten rid of the error above by checking if strs is truthy. This at least prevents us from dreaded errors when we run our code like:这里我们获得了一个错误，因为我们检查了 strs 是否为真。这至少防止了我们在运行代码时出现的错误。\n&#x2F;&#x2F; TypeError: null is not iterable\n\nKeep in mind though that truthiness checking on primitives can often be error prone. As an example, consider a different attempt at writing printAll但还是要注意，在基本类型上的真值检查很容易导致错误，比如，如果我们这样写 printAll 函数：\nfunction printAll(strs: string | string[] | null) &#123;\n  &#x2F;&#x2F; !!!!!!!!!!!!!!!!\n  &#x2F;&#x2F; DON&#39;T DO THIS!\n  &#x2F;&#x2F; KEEP READING\n  &#x2F;&#x2F; !!!!!!!!!!!!!!!!\n  if (strs) &#123;\n    if (typeof strs &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;\n      for (const s of strs) &#123;\n        console.log(s);\n      &#125;\n    &#125; else if (typeof strs &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n      console.log(strs);\n    &#125;\n  &#125;\n&#125;\n\nWe wrapped the entire body of the function in a truthy check, but this has a subtle downside: we may no longer be handling the empty string case correctly.我们将整个函数包裹在真值检查中，但这有一个潜在的问题：我们可能不再正确处理空字符串的情况。TypeScript doesn’t hurt us here at all, but this is behavior worth noting if you’re less familiar with JavaScript. TypeScript can often help you catch bugs early on, but if you choose to do nothing with a value, there’s only so much that it can do without being overly prescriptive. If you want, you can make sure you handle situations like these with a linter.TypeScript 不会给我们任何麻烦，但如果你不了解 JavaScript，这可能是一个很有用的技巧。TypeScript 可以帮助你提前发现错误，但如果你选择不做任何事情，那么只能是有限的。如果你想，你可以使用一个 linter 来确保你在这种情况下正确处理。One last word on narrowing by truthiness is that Boolean negations with ! filter out from negated branches.另外一个通过真值检查收窄类型的方式是通过!操作符。\nfunction multiplyAll(values: number[] | undefined, factor: number): number[] | undefined &#123;\n  if (!values) &#123;\n    return values;\n  &#125; else &#123;\n    return values.map((x) &#x3D;&gt; x \\* factor);\n  &#125;\n&#125;\n\nEquality narrowing等值缩减\nTypeScript also uses switch statements and equality checks like &#x3D;&#x3D;&#x3D;, !&#x3D;&#x3D;, &#x3D;&#x3D;, and !&#x3D; to narrow types. For example:TypeScript 也使用了 switch 语句和等值检查，比如 ===、!==、==、!=。\nfunction example(x: string | number, y: string | boolean) &#123;\n  if (x &#x3D;&#x3D;&#x3D; y) &#123;\n    &#x2F;&#x2F; We can now call any &#39;string&#39; method on &#39;x&#39; or &#39;y&#39;.\n    x.toUpperCase();\n\n    &#x2F;&#x2F; (method) String.toUpperCase(): string\n    y.toLowerCase();\n\n    &#x2F;&#x2F; (method) String.toLowerCase(): string\n  &#125; else &#123;\n    console.log(x);\n\n    &#x2F;&#x2F; (parameter) x: string | number\n    console.log(y);\n\n    &#x2F;&#x2F; (parameter) y: string | boolean\n  &#125;\n&#125;\n\nWhen we checked that x and y are both equal in the above example, TypeScript knew their types also had to be equal. Since string is the only common type that both x and y could take on, TypeScript knows that x and y must be a string in the first branch.在上面的例子中，我们检查了 x 和 y 是否相等。TypeScript 知道 x 和 y 的类型也必须相等。因为 string 是所有 x 和 y 可能取得的类型的共同类型，所以 TypeScript 知道 x 和 y 必须是 string 的第一个分支。Checking against specific literal values (as opposed to variables) works also. In our section about truthiness narrowing, we wrote a printAll function which was error-prone because it accidentally didn’t handle empty strings properly. Instead we could have done a specific check to block out nulls, and TypeScript still correctly removes null from the type of strs.检查特定的字面值（而不是变量）也可以工作。在我们提到的真值收窄中，我们写了一个 printAll 函数，它错误地处理了空字符串，而不是通过检查 null 来做。可以通过检查 null 来阻止 null，TypeScript 仍然能正确地从 strs 的类型中去除 null。\nfunction printAll(strs: string | string[] | null) &#123;\n  if (strs !&#x3D;&#x3D; null) &#123;\n    if (typeof strs &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;\n      for (const s of strs) &#123;\n        &#x2F;&#x2F; (parameter) strs: string[]\n        console.log(s);\n      &#125;\n    &#125; else if (typeof strs &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n      console.log(strs);\n\n      &#x2F;&#x2F; (parameter) strs: string\n    &#125;\n  &#125;\n&#125;\n\nJavaScript’s looser equality checks with &#x3D;&#x3D; and !&#x3D; also get narrowed correctly. If you’re unfamiliar, checking whether something &#x3D;&#x3D; null actually not only checks whether it is specifically the value null - it also checks whether it’s potentially undefined. The same applies to &#x3D;&#x3D; undefined: it checks whether a value is either null or undefined.JavaScript 的更粗糙的等值检查，比如 == 和 !=，也能正确收窄类型。如果你不了解，检查 something == null 是否不仅检查了 something 是否是特定的值 null，还检查了它是否可能是未定义的。同样的道理，检查 something == undefined 是否不仅检查了 something 是否是特定的值 undefined，还检查了它是否可能是未定义的。\ninterface Container &#123;\n  value: number | null | undefined;\n&#125;\n\nfunction multiplyValue(container: Container, factor: number) &#123;\n  &#x2F;&#x2F; Remove both &#39;null&#39; and &#39;undefined&#39; from the type.\n  if (container.value !&#x3D; null) &#123;\n    console.log(container.value);\n\n    &#x2F;&#x2F; (property) Container.value: number\n\n    &#x2F;&#x2F; Now we can safely multiply &#39;container.value&#39;.\n    container.value *&#x3D; factor;\n  &#125;\n&#125;\n\nThe in operator narrowingin操作符缩减\nJavaScript has an operator for determining if an object has a property with a name: the in operator. TypeScript takes this into account as a way to narrow down potential types.JavaScript 有一个操作符用来确定对象是否有一个属性名：in 操作符。TypeScript 使用这种方式来收窄可能的类型。For example, with the code: “value” in x. where “value” is a string literal and x is a union type. The “true” branch narrows x’s types which have either an optional or required property value, and the “false” branch narrows to types which have an optional or missing property value.例如，在 x 中，“value” 是一个字面量字符串，x 是一个联合类型。“true” 分支收窄 x 的类型，其中有一个可选或必须的属性值，而“false” 分支收窄到有一个可选或缺少的属性值。\ntype Fish &#x3D; &#123; swim: () &#x3D;&gt; void &#125;;\ntype Bird &#x3D; &#123; fly: () &#x3D;&gt; void &#125;;\n\nfunction move(animal: Fish | Bird) &#123;\n  if (&quot;swim&quot; in animal) &#123;\n    return animal.swim();\n  &#125;\n\n  return animal.fly();\n&#125;\n\nTo reiterate optional properties will exist in both sides for narrowing, for example a human could both swim and fly (with the right equipment) and thus should show up in both sides of the in check:为了收窄可选属性，人类可以同时飞行和游泳（有正确的装备），因此应该在 in 检查的两侧显示。\ntype Fish &#x3D; &#123; swim: () &#x3D;&gt; void &#125;;\ntype Bird &#x3D; &#123; fly: () &#x3D;&gt; void &#125;;\ntype Human &#x3D; &#123; swim?: () &#x3D;&gt; void; fly?: () &#x3D;&gt; void &#125;;\n\nfunction move(animal: Fish | Bird | Human) &#123;\n  if (&quot;swim&quot; in animal) &#123;\n    animal;\n\n    &#x2F;&#x2F; (parameter) animal: Fish | Human\n  &#125; else &#123;\n    animal;\n\n    &#x2F;&#x2F; (parameter) animal: Bird | Human\n  &#125;\n&#125;\n\ninstanceof narrowinginstanceof缩减\nJavaScript has an operator for checking whether or not a value is an “instance” of another value. More specifically, in JavaScript x instanceof Foo checks whether the prototype chain of x contains Foo.prototype. While we won’t dive deep here, and you’ll see more of this when we get into classes, they can still be useful for most values that can be constructed with new. As you might have guessed, instanceof is also a type guard, and TypeScript narrows in branches guarded by instanceofs.JavaScript 有一个操作符用来检查一个值是否是另一个值的实例：in 操作符。更详细的说，在 JavaScript x instanceof Foo 检查 x 的原型链是否包含 Foo.prototype。但我们这里不会深入，当我们接触到类时，它们仍然可以用于构造函数。你可能会猜到，instanceof 是一个类型检查，而 TypeScript 收窄在 instanceof 检查的分支。\nfunction logValue(x: Date | string) &#123;\n  if (x instanceof Date) &#123;\n    console.log(x.toUTCString());\n\n    &#x2F;&#x2F; (parameter) x: Date\n  &#125; else &#123;\n    console.log(x.toUpperCase());\n\n    &#x2F;&#x2F; (parameter) x: string\n  &#125;\n&#125;\n\nAssignments赋值\nAs we mentioned earlier, when we assign to any variable, TypeScript looks at the right side of the assignment and narrows the left side appropriately.我们前面提到过，当我们给任何变量赋值时，TypeScript 会检查赋值右侧并收窄左侧适当的类型。\nlet x &#x3D; Math.random() &lt; 0.5 ? 10 : &quot;hello world!&quot;;\n\nlet x: string | number;\nx &#x3D; 1;\n\nconsole.log(x);\n\nlet x: number;\nx &#x3D; &quot;goodbye!&quot;;\n\nconsole.log(x);\n\nlet x: string;\n\nNotice that each of these assignments is valid. Even though the observed type of x changed to number after our first assignment, we were still able to assign a string to x. This is because the declared type of x - the type that x started with - is string | number, and assignability is always checked against the declared type.注意，每一个赋值都是有效的。即使 x 的发现类型改变为 number 之后，我们仍然能够给 x 赋值一个字符串。这是因为 x 的声明类型是 string | number，而赋值时是检查赋值类型是否可以赋值给它。If we’d assigned a boolean to x, we’d have seen an error since that wasn’t part of the declared type.\nlet x &#x3D; Math.random() &lt; 0.5 ? 10 : &quot;hello world!&quot;;\n\nlet x: string | number;\nx &#x3D; 1;\n\nconsole.log(x);\n\nlet x: number;\nx &#x3D; true;\n&#x2F;&#x2F; Type &#39;boolean&#39; is not assignable to type &#39;string | number&#39;.\n\nconsole.log(x);\n\nlet x: string | number;\n\nControl flow analysis控制流分析\nUp until this point, we’ve gone through some basic examples of how TypeScript narrows within specific branches. But there’s a bit more going on than just walking up from every variable and looking for type guards in ifs, whiles, conditionals, etc. For example在这个点之前，我们已经探索了一些基本的例子，如何收窄在特定分支中。但这里有一些比较复杂的事情，比如从每个变量上来看，如果有一个 if 语句，while 语句，条件表达式等，都可以看到收窄。例如\nfunction padLeft(padding: number | string, input: string) &#123;\n  if (typeof padding &#x3D;&#x3D;&#x3D; &quot;number&quot;) &#123;\n    return &quot; &quot;.repeat(padding) + input;\n  &#125;\n  return padding + input;\n&#125;\n\npadLeft returns from within its first if block. TypeScript was able to analyze this code and see that the rest of the body (return padding + input;) is unreachable in the case where padding is a number. As a result, it was able to remove number from the type of padding (narrowing from string | number to string) for the rest of the function.padLeft 返回在它的第一个 if 块中。TypeScript 可以分析这段代码，并且发现 rest of the body (return padding + input;) 是不可达的，在 padding 是一个 number 的情况下。因此，它可以移除 padding 的声明类型（收窄从 string | number 到 string），从而移除了 padding 的类型。This analysis of code based on reachability is called control flow analysis, and TypeScript uses this flow analysis to narrow types as it encounters type guards and assignments. When a variable is analyzed, control flow can split off and re-merge over and over again, and that variable can be observed to have a different type at each point.这段代码基于可达性的分析是控制流分析，TypeScript 使用这个分析来收窄类型，当遇到类型检查和赋值时。当一个变量被分析时，控制流可以分裂和重新合并，并且这个变量在每个点都会有不同的类型。\nfunction example() &#123;\n  let x: string | number | boolean;\n\n  x &#x3D; Math.random() &lt; 0.5;\n\n  console.log(x);\n\n  let x: boolean;\n\n  if (Math.random() &lt; 0.5) &#123;\n    x &#x3D; &quot;hello&quot;;\n    console.log(x);\n\n    let x: string;\n  &#125; else &#123;\n    x &#x3D; 100;\n    console.log(x);\n\n    let x: number;\n  &#125;\n\n  return x;\n\n  let x: string | number;\n&#125;\n\nUsing type predicates使用类型断言\nWe’ve worked with existing JavaScript constructs to handle narrowing so far, however sometimes you want more direct control over how types change throughout your code.我们已经使用了现有的 JavaScript 工具来处理收窄，但有时候你想更加直接控制类型在你的代码中的变化。To define a user-defined type guard, we simply need to define a function whose return type is a type predicate:定义一个用户定义的类型断言，我们只需要定义一个返回类型为类型断言的函数：\nfunction isFish(pet: Fish | Bird): pet is Fish &#123;\n  return (pet as Fish).swim !&#x3D;&#x3D; undefined;\n&#125;\n\npet is Fish is our type predicate in this example. A predicate takes the form parameterName is Type, where parameterName must be the name of a parameter from the current function signature.pet is Fish 是我们的类型断言。一个断言的格式是 parameterName is Type，其中 parameterName 必须是当前函数签名中的一个参数名。Any time isFish is called with some variable, TypeScript will narrow that variable to that specific type if the original type is compatible.任何时候，isFish 被调用，TypeScript 将会收窄这个变量的类型，如果原始类型是兼容的。\n&#x2F;&#x2F; Both calls to &#39;swim&#39; and &#39;fly&#39; are now okay.\nlet pet &#x3D; getSmallPet();\n\nif (isFish(pet)) &#123;\n  pet.swim();\n&#125; else &#123;\n  pet.fly();\n&#125;\n\nNotice that TypeScript not only knows that pet is a Fish in the if branch; it also knows that in the else branch, you don’t have a Fish, so you must have a Bird.TypeScript 知道 pet 是一个 Fish 在 if 分支；它也知道在 else 分支，你没有一个 Fish，所以你必须有一个 Bird。You may use the type guard isFish to filter an array of Fish | Bird and obtain an array of Fish:你可以使用 isFish 来过滤 Fish | Bird 数组，并获得一个 Fish 数组。\nconst zoo: (Fish | Bird)[] &#x3D; [getSmallPet(), getSmallPet(), getSmallPet()];\nconst underWater1: Fish[] &#x3D; zoo.filter(isFish);\n&#x2F;&#x2F; or, equivalently\nconst underWater2: Fish[] &#x3D; zoo.filter(isFish) as Fish[];\n\n&#x2F;&#x2F; The predicate may need repeating for more complex examples\nconst underWater3: Fish[] &#x3D; zoo.filter((pet): pet is Fish &#x3D;&gt; &#123;\n  if (pet.name &#x3D;&#x3D;&#x3D; &quot;sharkey&quot;) return false;\n  return isFish(pet);\n&#125;);\n\nIn addition, classes can use this is Type to narrow their type.We’ve worked with existing JavaScript constructs to handle narrowing so far, however sometimes you want more direct control over how types change throughout your code.类可以使用 is Type 来收窄类型。我们已经使用了现有的 JavaScript 工具来处理收窄，但有时候你想更加直接控制类型在你的代码中的变化。To define a user-defined type guard, we simply need to define a function whose return type is a type predicate:定义一个用户定义的类型断言，我们只需要定义一个返回类型为类型断言的函数：\nfunction isFish(pet: Fish | Bird): pet is Fish &#123;\n  return (pet as Fish).swim !&#x3D;&#x3D; undefined;\n&#125;\n\npet is Fish is our type predicate in this example. A predicate takes the form parameterName is Type, where parameterName must be the name of a parameter from the current function signature.pet is Fish 是我们的类型断言。一个断言的格式是 parameterName is Type，其中 parameterName 必须是当前函数签名中的一个参数名。Any time isFish is called with some variable, TypeScript will narrow that variable to that specific type if the original type is compatible.任何时候，isFish 被调用，TypeScript 将会收窄这个变量的类型，如果原始类型是兼容的。\n&#x2F;&#x2F; Both calls to &#39;swim&#39; and &#39;fly&#39; are now okay.\nlet pet &#x3D; getSmallPet();\n\nif (isFish(pet)) &#123;\n  pet.swim();\n&#125; else &#123;\n  pet.fly();\n&#125;\n\nNotice that TypeScript not only knows that pet is a Fish in the if branch; it also knows that in the else branch, you don’t have a Fish, so you must have a Bird.TypeScript 知道 pet 是一个 Fish 在 if 分支；它也知道在 else 分支，你没有一个 Fish，所以你必须有一个 Bird。You may use the type guard isFish to filter an array of Fish | Bird and obtain an array of Fish:你可以使用 isFish 来过滤 Fish | Bird 数组，并获得一个 Fish 数组。\nconst zoo: (Fish | Bird)[] &#x3D; [getSmallPet(), getSmallPet(), getSmallPet()];\nconst underWater1: Fish[] &#x3D; zoo.filter(isFish);\n&#x2F;&#x2F; or, equivalently\nconst underWater2: Fish[] &#x3D; zoo.filter(isFish) as Fish[];\n\n&#x2F;&#x2F; The predicate may need repeating for more complex examples\nconst underWater3: Fish[] &#x3D; zoo.filter((pet): pet is Fish &#x3D;&gt; &#123;\n  if (pet.name &#x3D;&#x3D;&#x3D; &quot;sharkey&quot;) return false;\n  return isFish(pet);\n&#125;);\n\nIn addition, classes can use this is Type to narrow their type.除此之外，类中可以使用this is Type来缩减类型。\nDiscriminated unions分区联合\nMost of the examples we’ve looked at so far have focused around narrowing single variables with simple types like string, boolean, and number. While this is common, most of the time in JavaScript we’ll be dealing with slightly more complex structures.For some motivation, let’s imagine we’re trying to encode shapes like circles and squares.Circles keep track of their radiuses and squares keep track of their side lengths. We’ll use a field called kind to tell which shape we’re dealing with. Here’s a first attempt at defining Shape.让我们试想有这样一个处理 Shape （比如 Circles、Squares ）的函数，Circles 会记录它的半径属性，Squares 会记录它的边长属性，我们使用一个 kind 字段来区分判断处理的是 Circles 还是 Squares，这是初始的 Shape 定义：\ninterface Shape &#123;\n  kind: &quot;circle&quot; | &quot;square&quot;;\n  radius?: number;\n  sideLength?: number;\n&#125;\n\nNotice we’re using a union of string literal types: “circle” and “square” to tell us whether we should treat the shape as a circle or square respectively. By using “circle” | “square” instead of string, we can avoid misspelling issues.我们使用一个字符串字面量类型的联合：&quot;circle&quot; 和 &quot;square&quot;，来告诉我们是处理一个圆形还是一个正方形。\nfunction handleShape(shape: Shape) &#123;\n  &#x2F;&#x2F; oops!\n  if (shape.kind &#x3D;&#x3D;&#x3D; &quot;rect&quot;) &#123;\n    &#x2F;&#x2F; This condition will always return &#39;false&#39; since the types &#39;&quot;circle&quot; | &quot;square&quot;&#39; and &#39;&quot;rect&quot;&#39; have no overlap.\n    &#x2F;&#x2F; 此条件将总是返回 &#39;false&#39;，因为类型 &#39;&quot;circle&quot; | &quot;square&quot;&#39; 和 &#39;&quot;rect&quot;&#39; 没有重叠。\n    &#x2F;&#x2F; ...\n  &#125;\n&#125;\n\nWe can write a getArea function that applies the right logic based on if it’s dealing with a circle or square. We’ll first try dealing with circles.我们可以写一个 getArea 函数，用来处理圆形。\nfunction getArea(shape: Shape) &#123;\n  return Math.PI * shape.radius ** 2;\n  &#x2F;&#x2F; Object is possibly &#39;undefined&#39;.\n&#125;\n\nUnder strictNullChecks that gives us an error - which is appropriate since radius might not be defined. But what if we perform the appropriate checks on the kind property?在严格的 null 检查下，我们会得到一个错误 - 因为 radius 可能不存在。但是如果我们对 kind 属性进行正确的检查，就不会出现错误。\nfunction getArea(shape: Shape) &#123;\n  if (shape.kind &#x3D;&#x3D;&#x3D; &quot;circle&quot;) &#123;\n    return Math.PI * shape.radius ** 2;\n    &#x2F;&#x2F; Object is possibly &#39;undefined&#39;.\n  &#125;\n&#125;\n\nHmm, TypeScript still doesn’t know what to do here. We’ve hit a point where we know more about our values than the type checker does. We could try to use a non-null assertion (a ! after shape.radius) to say that radius is definitely present.哇，TypeScript 还不知道怎么办。我们已经碰到了一个点，我们知道更多的信息了，比类型检查器更多。我们可以尝试使用一个非空断言（shape.radius 后面加一个 !）来告诉 TypeScript radius 是一定存在的。\nfunction getArea(shape: Shape) &#123;\n  if (shape.kind &#x3D;&#x3D;&#x3D; &quot;circle&quot;) &#123;\n    return Math.PI * shape.radius! ** 2;\n  &#125;\n&#125;\n\nBut this doesn’t feel ideal. We had to shout a bit at the type-checker with those non-null assertions (!) to convince it that shape.radius was defined, but those assertions are error-prone if we start to move code around. Additionally, outside of strictNullChecks we’re able to accidentally access any of those fields anyway (since optional properties are just assumed to always be present when reading them). We can definitely do better.但这不太好。我们必须向类型检查器发出一些非空断言（!）来告诉它 shape.radius 存在，但这些断言是错误的，如果我们开始移动代码。同时，在非严格的 null 检查下，我们还是可以随意访问这些字段（因为可选属性是被假定为总是存在的，当读取它们时）。我们可以很好地做。The problem with this encoding of Shape is that the type-checker doesn’t have any way to know whether or not radius or sideLength are present based on the kind property. We need to communicate what we know to the type checker. With that in mind, let’s take another swing at defining Shape.这个 Shape 的编码有点问题，因为类型检查器没有任何方式可以告诉我们 radius 或 sideLength 存在。我们需要向类型检查器通报我们知道的信息。\ninterface Circle &#123;\n  kind: &quot;circle&quot;;\n  radius: number;\n&#125;\n\ninterface Square &#123;\n  kind: &quot;square&quot;;\n  sideLength: number;\n&#125;\n\ntype Shape &#x3D; Circle | Square;\n\nHere, we’ve properly separated Shape out into two types with different values for the kind property, but radius and sideLength are declared as required properties in their respective types.这里，我们已经将 Shape 分成了两种类型，其中 kind 属性的值不同，radius 和 sideLength 在它们的类型中声明为必须的属性。Let’s see what happens here when we try to access the radius of a Shape.我们看看这里如何访问 Shape 的 radius。\nfunction getArea(shape: Shape) &#123;\n  return Math.PI * shape.radius ** 2;\n  &#x2F;&#x2F; Property &#39;radius&#39; does not exist on type &#39;Shape&#39;.\n  &#x2F;&#x2F; Property &#39;radius&#39; does not exist on type &#39;Square&#39;.\n&#125;\n\nLike with our first definition of Shape, this is still an error. When radius was optional, we got an error (with strictNullChecks enabled) because TypeScript couldn’t tell whether the property was present. Now that Shape is a union, TypeScript is telling us that shape might be a Square, and Squares don’t have radius defined on them! Both interpretations are correct, but only the union encoding of Shape will cause an error regardless of how strictNullChecks is configured.与我们第一次定义 Shape 的例子相同，这还是一个错误。当 radius 是可选的时，我们得到一个错误（与 strictNullChecks 启用时），因为 TypeScript 不能告诉我们这个属性是否存在。But what if we tried checking the kind property again?如果我们再次检查 kind 属性？\nfunction getArea(shape: Shape) &#123;\n  if (shape.kind &#x3D;&#x3D;&#x3D; &quot;circle&quot;) &#123;\n    return Math.PI * shape.radius ** 2;\n    &#x2F;&#x2F; (parameter) shape: Circle\n  &#125;\n&#125;\n\nThat got rid of the error! When every type in a union contains a common property with literal types, TypeScript considers that to be a discriminated union, and can narrow out the members of the union.这消除了错误！当一个联合里的每个类型都包含常量类型的共同属性，TypeScript 认为这是一个分区联合，可以缩小联合的成员。In this case, kind was that common property (which is what’s considered a discriminant property of Shape). Checking whether the kind property was “circle” got rid of every type in Shape that didn’t have a kind property with the type “circle”. That narrowed shape down to the type Circle.在这种情况下，kind 属性是那个被认为是 Shape 的分区属性（这是被认为是 Shape 的分区属性）。检查 kind 属性是否是 &quot;circle&quot; 可以消除掉没有 kind 属性的类型。这缩小了 shape 到 Circle 类型。The same checking works with switch statements as well. Now we can try to write our complete getArea without any pesky ! non-null assertions.在这里，我们可以尝试写我们的完整 getArea 没有任何非空断言！\nfunction getArea(shape: Shape) &#123;\n  switch (shape.kind) &#123;\n    case &quot;circle&quot;:\n      return Math.PI * shape.radius ** 2;\n\n    &#x2F;&#x2F; (parameter) shape: Circle\n    case &quot;square&quot;:\n      return shape.sideLength ** 2;\n\n    &#x2F;&#x2F; (parameter) shape: Square\n  &#125;\n&#125;\n\nThe important thing here was the encoding of Shape. Communicating the right information to TypeScript - that Circle and Square were really two separate types with specific kind fields - was crucial. Doing that let us write type-safe TypeScript code that looks no different than the JavaScript we would’ve written otherwise. From there, the type system was able to do the “right” thing and figure out the types in each branch of our switch statement.这里有重要的事情，需要通过编码 Shape 来告诉 TypeScript，Circle 和 Square 是真正的两个类型，具有特定的 kind 属性。这样就可以写出类型安全的 TypeScript 代码，看起来和 JavaScript 一样。As an aside, try playing around with the above example and remove some of the return keywords. You’ll see that type-checking can help avoid bugs when accidentally falling through different clauses in a switch statement.作为一个例子，试着玩一下上面的例子，并删除一些 return 关键字。你会发现，类型检查可以帮助避免在意外的情况下跳过不同的分支。Discriminated unions are useful for more than just talking about circles and squares. They’re good for representing any sort of messaging scheme in JavaScript, like when sending messages over the network (client&#x2F;server communication), or encoding mutations in a state management framework.分区联合是用来表示任何类型的消息协议，比如在网络上发送消息（客户端/服务器通信），或者编码状态管理框架的变化。\nThe never typenever类型\nWhen narrowing, you can reduce the options of a union to a point where you have removed all possibilities and have nothing left. In those cases, TypeScript will use a never type to represent a state which shouldn’t exist.在缩小联合的时候，你可以将联合的可能性降低到没有任何可能性的状态。在这种情况下，TypeScript 会使用 never 类型来表示不应该存在的状态。\nExhaustiveness checking推断性检查\nThe never type is assignable to every type; however, no type is assignable to never (except never itself). This means you can use narrowing and rely on never turning up to do exhaustive checking in a switch statement.never类型可以赋值给所有类型，但是不可以赋值给 never（除了 never 本身）。这意味着你可以使用缩小，并且可以在 switch 语句中使用推断性检查。For example, adding a default to our getArea function which tries to assign the shape to never will raise when every possible case has not been handled.添加一个默认到 getArea 函数中，这样就会抛出异常，因为没有处理所有可能性。\ntype Shape &#x3D; Circle | Square;\n\nfunction getArea(shape: Shape) &#123;\n  switch (shape.kind) &#123;\n    case &quot;circle&quot;:\n      return Math.PI * shape.radius ** 2;\n    case &quot;square&quot;:\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never &#x3D; shape;\n      return _exhaustiveCheck;\n  &#125;\n&#125;\n\nAdding a new member to the Shape union, will cause a TypeScript error:添加一个新的成员到 Shape 联合，会导致一个 TypeScript 错误：\ninterface Triangle &#123;\n  kind: &quot;triangle&quot;;\n  sideLength: number;\n&#125;\n\ntype Shape &#x3D; Circle | Square | Triangle;\n\nfunction getArea(shape: Shape) &#123;\n  switch (shape.kind) &#123;\n    case &quot;circle&quot;:\n      return Math.PI * shape.radius ** 2;\n    case &quot;square&quot;:\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never &#x3D; shape;\n      &#x2F;&#x2F; Type &#39;Triangle&#39; is not assignable to type &#39;never&#39;.\n      &#x2F;&#x2F; 类型 &#39;Triangle&#39; 不能赋值给类型 &#39;never&#39;。\n      return _exhaustiveCheck;\n  &#125;\n&#125;\n\n因为 TypeScript 的收窄特性，执行到 default 的时候，类型被收窄为 Triangle，但因为任何类型都不能赋值给 never 类型，这就会产生一个编译错误。通过这种方式，你就可以确保 getArea 函数总是穷尽了所有 shape 的可能性。\n","slug":"2022-06-08ts-norrowing","date":"2022-06-07T01:21:19.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"746ca231a136437ea4011b4445608ad1","title":"3.Typescript 常见类型","content":"Everyday Types常见类型In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript. This isn’t an exhaustive list, and future chapters will describe more ways to name and use other types.在这一章中，我们将探讨一些 JavaScript 代码中的常见类型，并在 TypeScript 中说明这些类型的相应方式。这并不是一个完整的列表，而且未来的章节将说明更多的方法来命名和使用其他类型。Types can also appear in many more places than just type annotations. As we learn about the types themselves, we’ll also learn about the places where we can refer to these types to form new constructs.类型也可以出现在类型注释之外。我们学习类型本身时，我们也会学习到哪些地方可以引用这些类型来形成新的构造。We’ll start by reviewing the most basic and common types you might encounter when writing JavaScript or TypeScript code. These will later form the core building blocks of more complex types.我们将开始介绍最基本的 JavaScript 或 TypeScript 代码中可能遇到的常见类型。这些类型将作为更复杂的类型的基础建筑块。\nThe primitives: string,number, and booleanJavaScript has three very commonly used primitives: string, number, and boolean. Each has a corresponding type in TypeScript. As you might expect, these are the same names you’d see if you used the JavaScript typeof operator on a value of those types:JavaScript 有三个非常常见的原始类型：字符串，数字和布尔值。这三个类型在 TypeScript 中对应。如果你可以接受，这三个类型的名字都是相同的：\n\nstring represents string values like “Hello, world”string 表示字符串，比如 &quot;Hello, world&quot;\nnumber is for numbers like 42. JavaScript does not have a special runtime value for integers, so there’s no equivalent to int or float - everything is simply numbernumber 是数字，比如 42。JavaScript 不支持整数，所以没有相应的 int 或 float - 所有都是 number\nboolean is for the two values true and falseboolean 是布尔值，比如 true 和 false\n\n\n\n\n\n\n\n\nWARNING\nThe type names String, Number, and Boolean (starting with capital letters) are legal, but refer to some special built-in types that will very rarely appear in your code. Always use string, number, or boolean for types.类型名 String ，Number 和 Boolean （首字母大写）也是合法的，但它们是一些非常少见的特殊内置类型。所以类型总是使用 string ，number 或者 boolean 。\n\nArrays数组To specify the type of an array like [1, 2, 3], you can use the syntax number[]; this syntax works for any type (e.g. string[] is an array of strings, and so on). You may also see this written as Array, which means the same thing. We’ll learn more about the syntax T when we cover generics.指定数组的类型，可以使用 number[] 的语法，这种语法可以用于任何类型（比如 string[] 是一个字符串数组，而 so on）。你也可以看到这种写法 Array&lt;number&gt;，它表示相同的意思。我们将在接下来的章节中学习更多关于语法 T&lt;U&gt; 的详细信息。:::warningNote that [number] is a different thing; refer to the section on Tuples.[number] 不是同一个东西，请参见关于元组的章节。:::\nanyTypeScript also has a special type, any, that you can use whenever you don’t want a particular value to cause typechecking errors.TypeScript 也有一个特殊的类型 any，可以用于指定你不想要某个值导致类型检查错误的情况。When a value is of type any, you can access any properties of it (which will in turn be of type any), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that’s syntactically legal:当值是 any 类型时，你可以访问它的任何属性（这将导致它的类型为 any ），调用它，将它赋值给（或从）任何类型的值，或者其他任何合法的语法：\nlet obj: any &#x3D; &#123; x: 0 &#125;;\n&#x2F;&#x2F; None of the following lines of code will throw compiler errors.\n&#x2F;&#x2F; 以下代码行都不会引发编译器错误。\n&#x2F;&#x2F; Using &#96;any&#96; disables all further type checking, and it is assumed\n&#x2F;&#x2F; 使用“any”将禁用所有进一步的类型检查，并且假定\n&#x2F;&#x2F; you know the environment better than TypeScript.\n&#x2F;&#x2F; 你知道环境优于TypeScript。\nobj.foo();\nobj();\nobj.bar &#x3D; 100;\nobj &#x3D; &quot;hello&quot;;\nconst n: number &#x3D; obj;\n\nThe any type is useful when you don’t want to write out a long type just to convince TypeScript that a particular line of code is okay.any 类型是用于指定你不想要写出一个长的类型来说明 TypeScript 对某一行代码是合法的。\nnoImplicitAnyWhen you don’t specify a type, and TypeScript can’t infer it from context, the compiler will typically default to any.当你不指定类型，并且 TypeScript 不能从上下文中推断出来时，编译器默认使用 any。You usually want to avoid this, though, because any isn’t type-checked. Use the compiler flag noImplicitAny to flag any implicit any as an error.你通常想避免这种情况，但是 any 不会被类型检查。使用编译器标记 noImplicitAny 来标记 any 为错误。\nType Annotations on Variables变量上的类型注解\nWhen you declare a variable using const, var, or let, you can optionally add a type annotation to explicitly specify the type of the variable:使用 const ，var 或 let 声明变量时，可以添加一个类型注解来显式指定变量的类型：\nlet myName: string &#x3D; &quot;Alice&quot;;\n\nTypeScript doesn’t use “types on the left”-style declarations like int x &#x3D; 0; Type annotations will always go after the thing being typed.TypeScript 不使用“左边的类型”的声明方式，如 int x = 0; 类型注解将总是在被类型的东西后面。In most cases, though, this isn’t needed. Wherever possible, TypeScript tries to automatically infer the types in your code. For example, the type of a variable is inferred based on the type of its initializer:在大多数情况下，不需要这样做。在每个变量的初始值的类型可以被自动推断出来。\n&#x2F;&#x2F; No type annotation needed -- &#39;myName&#39; inferred as type &#39;string&#39;\n&#x2F;&#x2F; 没有类型注解需要 -- &#39;myName&#39; 类型被推断为 &#39;string&#39;\nlet myName &#x3D; &quot;Alice&quot;;\n\nFor the most part you don’t need to explicitly learn the rules of inference. If you’re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what’s going on.大多数情况下，你不需要显式地指定类型注解。如果你是新手，尝试使用比你认为更少的类型注解，你可能会意外地发现 TypeScript 可以完全理解你的代码。\nFunctions函数\nFunctions are the primary means of passing data around in JavaScript. TypeScript allows you to specify the types of both the input and output values of functions.函数是 JavaScript 中传递数据的主要方式。TypeScript 允许你指定函数的输入和输出值的类型。\nParameter Type Annotations参数上的类型注解\nWhen you declare a function, you can add type annotations after each parameter to declare what types of parameters the function accepts. Parameter type annotations go after the parameter name:声明函数时，可以在每个参数后面添加类型注解来声明函数接受哪些类型的参数。参数类型注解在参数名后面：\n&#x2F;&#x2F; Parameter type annotation\nfunction greet(name: string) &#123;\n  console.log(&quot;Hello, &quot; + name.toUpperCase() + &quot;!!&quot;);\n&#125;\n\nWhen a parameter has a type annotation, arguments to that function will be checked:当参数有类型注解时，函数的参数会被检查：\n&#x2F;&#x2F; Would be a runtime error if executed!\n&#x2F;&#x2F; 如果执行，就会产生一个运行时错误！\ngreet(42);\n&#x2F;&#x2F; Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.\n&#x2F;&#x2F; 参数类型 &#39;number&#39; 不能赋值给参数类型 &#39;string&#39;。\n\nEven if you don’t have type annotations on your parameters, TypeScript will still check that you passed the right number of arguments.即使你没有类型注解，TypeScript 也会检查你传入的参数是否正确。\nReturn Type Annotations返回值上的类型注解\nYou can also add return type annotations. Return type annotations appear after the parameter list:你也可以添加返回值类型注解。返回值类型注解出现在参数列表后面：\nfunction getFavoriteNumber(): number &#123;\n  return 26;\n&#125;\n\nMuch like variable type annotations, you usually don’t need a return type annotation because TypeScript will infer the function’s return type based on its return statements. The type annotation in the above example doesn’t change anything. Some codebases will explicitly specify a return type for documentation purposes, to prevent accidental changes, or just for personal preference.和变量类型注解一样，你通常不需要返回值类型注解，因为 TypeScript 将基于返回语句的类型推断出来。上面的示例示例不会改变任何东西。一些代码库将显式指定一个返回值类型，以防止意外的改变，或者只是为了个人偏好。\nAnonymous Functions匿名函数\nAnonymous functions are a little bit different from function declarations. When a function appears in a place where TypeScript can determine how it’s going to be called, the parameters of that function are automatically given types.匿名函数和函数声明一样。当函数出现在 TypeScript 可以确定它会如何被调用时，函数的参数会被自动指定类型。Here’s an example:这里有一个示例：\n&#x2F;&#x2F; No type annotations here, but TypeScript can spot the bug\n&#x2F;&#x2F; 没有类型注解，但 TypeScript 可以检测到错误\nconst names &#x3D; [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Eve&quot;];\n\n&#x2F;&#x2F; Contextual typing for function\n&#x2F;&#x2F; 函数上下文类型\nnames.forEach(function (s) &#123;\n  console.log(s.toUppercase());\n  &#x2F;&#x2F; Property &#39;toUppercase&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?\n  &#x2F;&#x2F; 属性 &#39;toUppercase&#39; 不存在于类型 &#39;string&#39; 中。你可能想用 &#39;toUpperCase&#39; 吗？\n&#125;);\n\n&#x2F;&#x2F; Contextual typing also applies to arrow functions\n&#x2F;&#x2F; 箭头函数上下文类型\nnames.forEach((s) &#x3D;&gt; &#123;\n  console.log(s.toUppercase());\n  &#x2F;&#x2F; Property &#39;toUppercase&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?\n  &#x2F;&#x2F; 属性 &#39;toUppercase&#39; 不存在于类型 &#39;string&#39; 中。你可能想用 &#39;toUpperCase&#39; 吗？\n&#125;);\n\nEven though the parameter s didn’t have a type annotation, TypeScript used the types of the forEach function, along with the inferred type of the array, to determine the type s will have.即使参数 s 没有类型注解，TypeScript 会使用 forEach 函数的类型，以及推断的数组类型，来确定 s 的类型。This process is called contextual typing because the context that the function occurred within informs what type it should have.这个过程是上下文类型的，因为函数发生在哪里的上下文，就会确定它应该有哪种类型。Similar to the inference rules, you don’t need to explicitly learn how this happens, but understanding that it does happen can help you notice when type annotations aren’t needed. Later, we’ll see more examples of how the context that a value occurs in can affect its type.与推断规则相似，你不需要显式学习这种过程，但是了解这种过程可以帮助你发现，当值不需要类型注解时，它会发生什么。之后，我们会看到更多的例子，如何值的上下文可以影响它的类型。\nObject Types对象类型\nApart from primitives, the most common sort of type you’ll encounter is an object type. This refers to any JavaScript value with properties, which is almost all of them! To define an object type, we simply list its properties and their types.除了原始类型，最常见的类型是对象类型。这指的是任何 JavaScript 值，它的属性都是很多的！为了定义对象类型，我们只需要列出它的属性和它们的类型。For example, here’s a function that takes a point-like object:这里有一个接受点类型对象的函数：\n&#x2F;&#x2F; The parameter&#39;s type annotation is an object type\nfunction printCoord(pt: &#123; x: number; y: number &#125;) &#123;\n  console.log(&quot;The coordinate&#39;s x value is &quot; + pt.x);\n  console.log(&quot;The coordinate&#39;s y value is &quot; + pt.y);\n&#125;\nprintCoord(&#123; x: 3, y: 7 &#125;);\n\nHere, we annotated the parameter with a type with two properties - x and y - which are both of type number. You can use , or ; to separate the properties, and the last separator is optional either way.这里，我们使用了一个有两个属性的类型，x 和 y，它们都是 number 类型。你可以使用 , 或 ; 分隔属性，最后的分隔符可以是任意的。The type part of each property is also optional. If you don’t specify a type, it will be assumed to be any.每个属性的类型部分都是可选的。如果你没有指定类型，它会被认为是 any 类型。\nOptional Properties可选属性\nObject types can also specify that some or all of their properties are optional. To do this, add a ? after the property name:对象类型可以指定一些或全部的属性是可选的。要做到这一点，只需要在属性名后面加上 ? 就可以了。\nfunction printName(obj: &#123; first: string; last?: string &#125;) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n&#x2F;&#x2F; Both OK\nprintName(&#123; first: &quot;Bob&quot; &#125;);\nprintName(&#123; first: &quot;Alice&quot;, last: &quot;Alisson&quot; &#125;);\n\nIn JavaScript, if you access a property that doesn’t exist, you’ll get the value undefined rather than a runtime error. Because of this, when you read from an optional property, you’ll have to check for undefined before using it.\nfunction printName(obj: &#123; first: string; last?: string &#125;) &#123;\n  &#x2F;&#x2F; Error - might crash if &#39;obj.last&#39; wasn&#39;t provided!\n  console.log(obj.last.toUpperCase());\nObject is possibly &#39;undefined&#39;.\n  if (obj.last !&#x3D;&#x3D; undefined) &#123;\n    &#x2F;&#x2F; OK\n    console.log(obj.last.toUpperCase());\n  &#125;\n\n  &#x2F;&#x2F; A safe alternative using modern JavaScript syntax:\n  console.log(obj.last?.toUpperCase());\n&#125;\n\nUnion Types联合类型\nTypeScript’s type system allows you to build new types out of existing ones using a large variety of operators. Now that we know how to write a few types, it’s time to start combining them in interesting ways.\nDefining a Union Type定义一个联合类型\nThe first way to combine types you might see is a union type. A union type is a type formed from two or more other types, representing values that may be any one of those types. We refer to each of these types as the union’s members.\nLet’s write a function that can operate on strings or numbers:\nfunction printId(id: number | string) &#123;\n  console.log(&quot;Your ID is: &quot; + id);\n&#125;\n&#x2F;&#x2F; OK\nprintId(101);\n&#x2F;&#x2F; OK\nprintId(&quot;202&quot;);\n&#x2F;&#x2F; Error\nprintId(&#123; myID: 22342 &#125;);\n&#x2F;&#x2F; Argument of type &#39;&#123; myID: number; &#125;&#39; is not assignable to parameter of type &#39;string | number&#39;.\n\nWorking with Union Types使用联合类型\nIt’s easy to provide a value matching a union type - simply provide a type matching any of the union’s members. If you have a value of a union type, how do you work with it?\nTypeScript will only allow an operation if it is valid for every member of the union. For example, if you have the union string | number, you can’t use methods that are only available on string:\nfunction printId(id: number | string) &#123;\n  console.log(id.toUpperCase());\nProperty &#39;toUpperCase&#39; does not exist on type &#39;string | number&#39;.\n  Property &#39;toUpperCase&#39; does not exist on type &#39;number&#39;.\n&#125;\n\nThe solution is to narrow the union with code, the same as you would in JavaScript without type annotations. Narrowing occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.\nFor example, TypeScript knows that only a string value will have a typeof value “string”:\nfunction printId(id: number | string) &#123;\n  if (typeof id &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n    &#x2F;&#x2F; In this branch, id is of type &#39;string&#39;\n    console.log(id.toUpperCase());\n  &#125; else &#123;\n    &#x2F;&#x2F; Here, id is of type &#39;number&#39;\n    console.log(id);\n  &#125;\n&#125;\n\nAnother example is to use a function like Array.isArray:\nfunction welcomePeople(x: string[] | string) &#123;\n  if (Array.isArray(x)) &#123;\n    &#x2F;&#x2F; Here: &#39;x&#39; is &#39;string[]&#39;\n    console.log(&quot;Hello, &quot; + x.join(&quot; and &quot;));\n  &#125; else &#123;\n    &#x2F;&#x2F; Here: &#39;x&#39; is &#39;string&#39;\n    console.log(&quot;Welcome lone traveler &quot; + x);\n  &#125;\n&#125;\n\nNotice that in the else branch, we don’t need to do anything special - if x wasn’t a string[], then it must have been a string.\nSometimes you’ll have a union where all the members have something in common. For example, both arrays and strings have a slice method. If every member in a union has a property in common, you can use that property without narrowing:\n&#x2F;&#x2F; Return type is inferred as number[] | string\nfunction getFirstThree(x: number[] | string) &#123;\n  return x.slice(0, 3);\n&#125;\n\nIt might be confusing that a union of types appears to have the intersection of those types’ properties. This is not an accident - the name union comes from type theory. The union number | string is composed by taking the union of the values from each type. Notice that given two sets with corresponding facts about each set, only the intersection of those facts applies to the union of the sets themselves. For example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearing hats, after combining those rooms, the only thing we know about every person is that they must be wearing a hat.\nType Aliases类型别名\nWe’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name.\nA type alias is exactly that - a name for any type. The syntax for a type alias is:\ntype Point &#x3D; &#123;\n  x: number;\n  y: number;\n&#125;;\n\n&#x2F;&#x2F; Exactly the same as the earlier example\nfunction printCoord(pt: Point) &#123;\n  console.log(&quot;The coordinate&#39;s x value is &quot; + pt.x);\n  console.log(&quot;The coordinate&#39;s y value is &quot; + pt.y);\n&#125;\n\nprintCoord(&#123; x: 100, y: 100 &#125;);\n\nYou can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type:\ntype ID &#x3D; number | string;\n\nNote that aliases are only aliases - you cannot use type aliases to create different&#x2F;distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type:\ntype UserInputSanitizedString &#x3D; string;\n\nfunction sanitizeInput(str: string): UserInputSanitizedString &#123;\n  return sanitize(str);\n&#125;\n\n&#x2F;&#x2F; Create a sanitized input\nlet userInput &#x3D; sanitizeInput(getInput());\n\n&#x2F;&#x2F; Can still be re-assigned with a string though\nuserInput &#x3D; &quot;new input&quot;;\n\nInterfaces接口\nAn interface declaration is another way to name an object type:\ninterface Point &#123;\n  x: number;\n  y: number;\n&#125;\n\nfunction printCoord(pt: Point) &#123;\n  console.log(&quot;The coordinate&#39;s x value is &quot; + pt.x);\n  console.log(&quot;The coordinate&#39;s y value is &quot; + pt.y);\n&#125;\n\nprintCoord(&#123; x: 100, y: 100 &#125;);\n\nJust like when we used a type alias above, the example works just as if we had used an anonymous object type. TypeScript is only concerned with the structure of the value we passed to printCoord - it only cares that it has the expected properties. Being concerned only with the structure and capabilities of types is why we call TypeScript a structurally typed type system.\nDifferences Between Type Aliases and Interfaces类型别名和接口的区别\nType aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.\nInterface\n&#x2F;&#x2F; Extending an interface\n\ninterface Animal &#123;\n  name: string;\n&#125;\n\ninterface Bear extends Animal &#123;\n  honey: boolean;\n&#125;\n\nconst bear &#x3D; getBear();\nbear.name;\nbear.honey;\n\nType\n&#x2F;&#x2F; Extending a type via intersections\n\ntype Animal &#x3D; &#123;\n  name: string;\n&#125;;\n\ntype Bear &#x3D; Animal &amp; &#123;\n  honey: boolean;\n&#125;;\n\nconst bear &#x3D; getBear();\nbear.name;\nbear.honey;\n\nAdding new fields to an existing interface\ninterface Window &#123;\n  title: string;\n&#125;\n\ninterface Window &#123;\n  ts: TypeScriptAPI;\n&#125;\n\nconst src &#x3D; &#39;const a &#x3D; &quot;Hello World&quot;&#39;;\nwindow.ts.transpileModule(src, &#123;&#125;);\n\nA type cannot be changed after being created\ntype Window &#x3D; &#123;\n  title: string;\n&#125;;\n\ntype Window &#x3D; &#123;\n  ts: TypeScriptAPI;\n&#125;;\n\n&#x2F;&#x2F; Error: Duplicate identifier &#39;Window&#39;.\n\nYou’ll learn more about these concepts in later chapters, so don’t worry if you don’t understand all of these right away.\n\nPrior to TypeScript version 4.2, type alias names may appear in error messages, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages.\nType aliases may not participate in declaration merging, but interfaces can.\nInterfaces may only be used to declare the shapes of objects, not rename primitives.\nInterface names will always appear in their original form in error messages, but only when they are used by name.\n\nFor the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use interface until you need to use features from type.\nType Assertions类型断言\nSometimes you will have information about the type of a value that TypeScript can’t know about.\nFor example, if you’re using document.getElementById, TypeScript only knows that this will return some kind of HTMLElement, but you might know that your page will always have an HTMLCanvasElement with a given ID.\nIn this situation, you can use a type assertion to specify a more specific type:\nconst myCanvas &#x3D; document.getElementById(&quot;main_canvas&quot;) as HTMLCanvasElement;\n\nLike a type annotation, type assertions are removed by the compiler and won’t affect the runtime behavior of your code.\nYou can also use the angle-bracket syntax (except if the code is in a .tsx file), which is equivalent:\nconst myCanvas &#x3D; &lt;HTMLCanvasElement&gt;document.getElementById(&quot;main_canvas&quot;);\n\nReminder: Because type assertions are removed at compile-time, there is no runtime checking associated with a type assertion. There won’t be an exception or null generated if the type assertion is wrong.\nTypeScript only allows type assertions which convert to a more specific or less specific version of a type. This rule prevents “impossible” coercions like:\nconst x &#x3D; &quot;hello&quot; as number;\n&#x2F;&#x2F; Conversion of type &#39;string&#39; to type &#39;number&#39; may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to &#39;unknown&#39; first.\n\nSometimes this rule can be too conservative and will disallow more complex coercions that might be valid. If this happens, you can use two assertions, first to any (or unknown, which we’ll introduce later), then to the desired type:\nconst a &#x3D; expr as any as T;\n\nLiteral Types字面量类型\nIn addition to the general types string and number, we can refer to specific strings and numbers in type positions.\nOne way to think about this is to consider how JavaScript comes with different ways to declare a variable. Both var and let allow for changing what is held inside the variable, and const does not. This is reflected in how TypeScript creates types for literals.\nlet changingString &#x3D; &quot;Hello World&quot;;\nchangingString &#x3D; &quot;Olá Mundo&quot;;\n&#x2F;&#x2F; Because &#96;changingString&#96; can represent any possible string, that\n&#x2F;&#x2F; is how TypeScript describes it in the type system\nchangingString;\n\nlet changingString: string;\n\nconst constantString &#x3D; &quot;Hello World&quot;;\n&#x2F;&#x2F; Because &#96;constantString&#96; can only represent 1 possible string, it\n&#x2F;&#x2F; has a literal type representation\nconstantString;\n\nconst constantString: &quot;Hello World&quot;;\n\nBy themselves, literal types aren’t very valuable:\nlet x: &quot;hello&quot; &#x3D; &quot;hello&quot;;\n&#x2F;&#x2F; OK\nx &#x3D; &quot;hello&quot;;\n&#x2F;&#x2F; ...\nx &#x3D; &quot;howdy&quot;;\n&#x2F;&#x2F; Type &#39;&quot;howdy&quot;&#39; is not assignable to type &#39;&quot;hello&quot;&#39;.\n\nIt’s not much use to have a variable that can only have one value!\nBut by combining literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values:\nfunction printText(s: string, alignment: &quot;left&quot; | &quot;right&quot; | &quot;center&quot;) &#123;\n  &#x2F;&#x2F; ...\n&#125;\nprintText(&quot;Hello, world&quot;, &quot;left&quot;);\nprintText(&quot;G&#39;day, mate&quot;, &quot;centre&quot;);\nArgument of type &#39;&quot;centre&quot;&#39; is not assignable to parameter of type &#39;&quot;left&quot; | &quot;right&quot; | &quot;center&quot;&#39;.\n\nNumeric literal types work the same way:\nfunction compare(a: string, b: string): -1 | 0 | 1 &#123;\n  return a &#x3D;&#x3D;&#x3D; b ? 0 : a &gt; b ? 1 : -1;\n&#125;\n\nOf course, you can combine these with non-literal types:\ninterface Options &#123;\n  width: number;\n&#125;\nfunction configure(x: Options | &quot;auto&quot;) &#123;\n  &#x2F;&#x2F; ...\n&#125;\nconfigure(&#123; width: 100 &#125;);\nconfigure(&quot;auto&quot;);\nconfigure(&quot;automatic&quot;);\nArgument of type &#39;&quot;automatic&quot;&#39; is not assignable to parameter of type &#39;Options | &quot;auto&quot;&#39;.\n\nThere’s one more kind of literal type: boolean literals. There are only two boolean literal types, and as you might guess, they are the types true and false. The type boolean itself is actually just an alias for the union true | false.\nLiteral Inference字面量推断When you initialize a variable with an object, TypeScript assumes that the properties of that object might change values later. For example, if you wrote code like this:\nconst obj &#x3D; &#123; counter: 0 &#125;;\nif (someCondition) &#123;\n  obj.counter &#x3D; 1;\n&#125;\n\nTypeScript doesn’t assume the assignment of 1 to a field which previously had 0 is an error. Another way of saying this is that obj.counter must have the type number, not 0, because types are used to determine both reading and writing behavior.\nThe same applies to strings:\nconst req &#x3D; &#123; url: &quot;https:&#x2F;&#x2F;example.com&quot;, method: &quot;GET&quot; &#125;;\nhandleRequest(req.url, req.method);\nArgument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;GET&quot; | &quot;POST&quot;&#39;.\n\nIn the above example req.method is inferred to be string, not “GET”. Because code can be evaluated between the creation of req and the call of handleRequest which could assign a new string like “GUESS” to req.method, TypeScript considers this code to have an error.\nThere are two ways to work around this.\nYou can change the inference by adding a type assertion in either location:\n&#x2F;&#x2F; Change 1:\nconst req &#x3D; &#123; url: &quot;https:&#x2F;&#x2F;example.com&quot;, method: &quot;GET&quot; as &quot;GET&quot; &#125;;\n&#x2F;&#x2F; Change 2\nhandleRequest(req.url, req.method as &quot;GET&quot;);\n\nChange 1 means “I intend for req.method to always have the literal type “GET””, preventing the possible assignment of “GUESS” to that field after. Change 2 means “I know for other reasons that req.method has the value “GET”“.\nYou can use as const to convert the entire object to be type literals:\nconst req &#x3D; &#123; url: &quot;https:&#x2F;&#x2F;example.com&quot;, method: &quot;GET&quot; &#125; as const;\nhandleRequest(req.url, req.method);\n\nThe as const suffix acts like const but for the type system, ensuring that all properties are assigned the literal type instead of a more general version like string or number.\nnull and undefinednull和undefined\nJavaScript has two primitive values used to signal absent or uninitialized value: null and undefined.\nTypeScript has two corresponding types by the same names. How these types behave depends on whether you have the strictNullChecks option on.\nstrictNullChecks offstrictNullChecks关闭\nWith strictNullChecks off, values that might be null or undefined can still be accessed normally, and the values null and undefined can be assigned to a property of any type. This is similar to how languages without null checks (e.g. C#, Java) behave. The lack of checking for these values tends to be a major source of bugs; we always recommend people turn strictNullChecks on if it’s practical to do so in their codebase.\nstrictNullChecks onstrictNullChecks开启\nWith strictNullChecks on, when a value is null or undefined, you will need to test for those values before using methods or properties on that value. Just like checking for undefined before using an optional property, we can use narrowing to check for values that might be null:\nfunction doSomething(x: string | null) &#123;\n  if (x &#x3D;&#x3D;&#x3D; null) &#123;\n    &#x2F;&#x2F; do nothing\n  &#125; else &#123;\n    console.log(&quot;Hello, &quot; + x.toUpperCase());\n  &#125;\n&#125;\n\nNon-null Assertion Operator (Postfix !)非空断言运算符\nTypeScript also has a special syntax for removing null and undefined from a type without doing any explicit checking. Writing ! after any expression is effectively a type assertion that the value isn’t null or undefined:\nfunction liveDangerously(x?: number | null) &#123;\n  &#x2F;&#x2F; No error\n  console.log(x!.toFixed());\n&#125;\n\nJust like other type assertions, this doesn’t change the runtime behavior of your code, so it’s important to only use ! when you know that the value can’t be null or undefined.\nEnums枚举\nEnums are a feature added to JavaScript by TypeScript which allows for describing a value which could be one of a set of possible named constants. Unlike most TypeScript features, this is not a type-level addition to JavaScript but something added to the language and runtime. Because of this, it’s a feature which you should know exists, but maybe hold off on using unless you are sure. You can read more about enums in the Enum reference page.\nLess Common Primitives更少常见的原始类型It’s worth mentioning the rest of the primitives in JavaScript which are represented in the type system. Though we will not go into depth here.\nbigintFrom ES2020 onwards, there is a primitive in JavaScript used for very large integers, BigInt:\n&#x2F;&#x2F; Creating a bigint via the BigInt function\nconst oneHundred: bigint &#x3D; BigInt(100);\n\n&#x2F;&#x2F; Creating a BigInt via the literal syntax\nconst anotherHundred: bigint &#x3D; 100n;\n\nYou can learn more about BigInt in the TypeScript 3.2 release notes.\nsymbolThere is a primitive in JavaScript used to create a globally unique reference via the function Symbol():\nconst firstName &#x3D; Symbol(&quot;name&quot;);\nconst secondName &#x3D; Symbol(&quot;name&quot;);\n\nif (firstName &#x3D;&#x3D;&#x3D; secondName) &#123;\nThis condition will always return &#39;false&#39; since the types &#39;typeof firstName&#39; and &#39;typeof secondName&#39; have no overlap.\n  &#x2F;&#x2F; Can&#39;t ever happen\n&#125;\n\nYou can learn more about them in Symbols reference page.\n参考链接Typescript 常见类型\n","slug":"2022-06-08ts-Everyday Types","date":"2022-06-06T08:40:41.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"3d6d9d5bd9a34b12b2d2da5941501c4f","title":"2.Typescript 基础","content":"The BasicsWelcome to the first page of the handbook. If this is your first experience with TypeScript - you may want to start at one of the ‘Getting Started’ guides欢迎来到 TypeScript 手册的第一页。如果您是第一次使用 TypeScript - 您可能想要开始一个&#39;Getting Started&#39;指南\nEach and every value in JavaScript has a set of behaviors you can observe from running different operations. That sounds abstract, but as a quick example, consider some operations we might run on a variable named message.每个和所有的值在 JavaScript 中都有一组行为可以观察从运行不同的操作。这会感觉很抽象，但是作为一个快速的例子，考虑一些我们可能运行的操作的变量名称 message。\n&#x2F;&#x2F; Accessing the property &#39;toLowerCase&#39;\n&#x2F;&#x2F; on &#39;message&#39; and then calling it\nmessage.toLowerCase();\n&#x2F;&#x2F; Calling &#39;message&#39;\nmessage();\n\nIf we break this down, the first runnable line of code accesses a property called toLowerCase and then calls it. The second one tries to call message directly.如果 我们将这个分解，第一个可运行的行代码访问一个属性叫做 toLowerCase 并且调用它。第二个尝试直接调用 message。But assuming we don’t know the value of message - and that’s pretty common - we can’t reliably say what results we’ll get from trying to run any of this code. The behavior of each operation depends entirely on what value we had in the first place.但是假设我们不知道 message 的值 - 并且这是很常见的 - 我们不可以可靠地说什么结果我们会得到运行这些代码。每个操作的行为取决于我们本身的值。\n\nIs message callable? message 是可调用的吗？\nDoes it have a property called toLowerCase on it? message 有一个属性叫做 toLowerCase 吗？\nIf it does, is toLowerCase even callable? 如果是，是否 toLowerCase 可调用？\nIf both of these values are callable, what do they return? 如果这两个值都是可调用的，它们会返回什么？\n\nThe answers to these questions are usually things we keep in our heads when we write JavaScript, and we have to hope we got all the details right.这些问题的答案通常是我们在写 JavaScript 时保留在我们的脑中，并且我们必须希望我们拿到所有的细节正确。Let’s say message was defined in the following way.让我们假设 message 被定义为以下的方式。\nconst message &#x3D; &quot;Hello World!&quot;;\n\nAs you can probably guess, if we try to run message.toLowerCase(), we’ll get the same string only in lower-case.如果我们试着运行 message.toLowerCase()，我们会得到一个只有小写字母的字符串。What about that second line of code? If you’re familiar with JavaScript, you’ll know this fails with an exception:如果您熟悉 JavaScript，您会知道这个失败了一个异常：\n&#x2F;&#x2F; TypeError: message is not a function\n\nIt’d be great if we could avoid mistakes like this.我们应该能避免这样的错误。When we run our code, the way that our JavaScript runtime chooses what to do is by figuring out the type of the value - what sorts of behaviors and capabilities it has. That’s part of what that TypeError is alluding to - it’s saying that the string “Hello World!” cannot be called as a function.当我们运行我们的代码，我们的 JavaScript 运行时通过分析值的类型来决定如何做。这是它引用的 TypeError 的一部分 - 它说明 &quot;Hello World!&quot; 不能被调用作为函数。For some values, such as the primitives string and number, we can identify their type at runtime using the typeof operator. But for other things like functions, there’s no corresponding runtime mechanism to identify their types. For example, consider this function:对于某些值，如字符串和数字，我们可以在运行时通过 typeof 操作符来识别它的类型。但是对于其他的东西，没有相应的运行时机制来识别它们的类型。例如，让我们来看这个函数：\nfunction fn(x) &#123;\n  return x.flip();\n&#125;\n\nWe can observe by reading the code that this function will only work if given an object with a callable flip property, but JavaScript doesn’t surface this information in a way that we can check while the code is running. The only way in pure JavaScript to tell what fn does with a particular value is to call it and see what happens. This kind of behavior makes it hard to predict what code will do before it runs, which means it’s harder to know what your code is going to do while you’re writing it.我们可以通过阅读代码, 看到这个函数只有在给定一个可调用 flip 属性的对象时才能工作，但 JavaScript 没有一种方式可以在运行代码时来识别 fn 的行为。只有在调用它时才能知道 fn 的行为，这种行为难以预测，这意味着在写代码时难以知道你的代码会做什么。Seen in this way, a type is the concept of describing which values can be passed to fn and which will crash. JavaScript only truly provides dynamic typing - running the code to see what happens.在这种方式中，一个类型是描述哪些值可以传给 fn，哪些会崩溃的概念。JavaScript 只是提供了动态类型定义 - 运行代码来看看会发生什么。The alternative is to use a static type system to make predictions about what code is expected before it runs.另一种方式是使用静态类型系统来预测在运行代码之前会发生什么。\nStatic type-checking静态类型检查Think back to that TypeError we got earlier from trying to call a string as a function. Most people don’t like to get any sorts of errors when running their code - those are considered bugs! And when we write new code, we try our best to avoid introducing new bugs.想起那个 TypeError 我们以前从尝试调用一个字符串作为函数时得到的。大多数人不喜欢在运行他们的代码时得到任何类型的错误，这些错误被称为 bug！而当我们写新代码时，我们尽可能地避免引入新的 bug。If we add just a bit of code, save our file, re-run the code, and immediately see the error, we might be able to isolate the problem quickly; but that’s not always the case. We might not have tested the feature thoroughly enough, so we might never actually run into a potential error that would be thrown! Or if we were lucky enough to witness the error, we might have ended up doing large refactorings and adding a lot of different code that we’re forced to dig through.如果我们添加些点代码，保存我们的文件，重新运行代码，并立即看到错误，我们可能会快速地发现问题；但这并不总是如此。我们可能没有测试特性的充分程度，所以我们可能没有真正发生可能会抛出的错误！或者如果我们能够看到错误，我们可能已经做了大量的重构和添加了很多不同的代码，我们被迫要探索它们。Ideally, we could have a tool that helps us find these bugs before our code runs. That’s what a static type-checker like TypeScript does. Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.最好的方式是我们可以在我们的代码运行之前，有一个工具帮我们找到这些 bug。这是 TypeScript 的静态类型检查器做的。静态类型系统描述了我们的值在运行我们的程序时的形状和行为。一个类型检查器像 TypeScript 使用这些信息，告诉我们当可能会出现问题时。\nconst message &#x3D; &quot;hello!&quot;;\n\nmessage();\n&#x2F;&#x2F; This expression is not callable.\n&#x2F;&#x2F;   Type &#39;String&#39; has no call signatures.\n\nRunning that last sample with TypeScript will give us an error message before we run the code in the first place.运行这个最后一个示例，TypeScript 将在第一个代码之前报错。\nNon-exception Failures非异常失败So far we’ve been discussing certain things like runtime errors - cases where the JavaScript runtime tells us that it thinks something is nonsensical. Those cases come up because the ECMAScript specification has explicit instructions on how the language should behave when it runs into something unexpected.直到现在，我们都讨论了一些关于运行时错误的事情，比如说，当 JavaScript 运行时认为某些东西是无效的。这些情况出现的原因是 ECMAScript 规范明确指出了在运行时如何应该行为。For example, the specification says that trying to call something that isn’t callable should throw an error. Maybe that sounds like “obvious behavior”, but you could imagine that accessing a property that doesn’t exist on an object should throw an error too. Instead, JavaScript gives us different behavior and returns the value undefined:比如说，规范指出了尝试调用不可调用的东西应该抛出一个错误。可能会认为这是“明显的行为”，但你可以想象一下，访问一个对象上不存在的属性应该抛出一个错误。而 JavaScript 给我们不同的行为，返回值 undefined：\nconst user &#x3D; &#123;\n  name: &quot;Daniel&quot;,\n  age: 26,\n&#125;;\nuser.location; &#x2F;&#x2F; returns undefined\n\nUltimately, a static type system has to make the call over what code should be flagged as an error in its system, even if it’s “valid” JavaScript that won’t immediately throw an error. In TypeScript, the following code produces an error about location not being defined:最终，一个静态类型系统必须要在它的系统中，告诉我们应该把哪些代码标记为错误的代码，即使它是“有效的 JavaScript”，也不会立即抛出错误。在 TypeScript 中，下面的代码会报错：\nconst user &#x3D; &#123;\n  name: &quot;Daniel&quot;,\n  age: 26,\n&#125;;\n\nuser.location;\n&#x2F;&#x2F; Property &#39;location&#39; does not exist on type &#39;&#123; name: string; age: number; &#125;&#39;.\n\nWhile sometimes that implies a trade-off in what you can express, the intent is to catch legitimate bugs in our programs. And TypeScript catches a lot of legitimate bugs.在某些情况下，这意味着一个交换，在你能表达的范围内，在你的程序中，你可以把一些有效的 JavaScript 抛出错误。而 TypeScript 捕获很多有效的错误。For example: typos,比如说，拼写错误，\nconst announcement &#x3D; &quot;Hello World!&quot;;\n\n&#x2F;&#x2F; How quickly can you spot the typos?\nannouncement.toLocaleLowercase();\nannouncement.toLocalLowerCase();\n\n&#x2F;&#x2F; We probably meant to write this...\nannouncement.toLocaleLowerCase();\n\nuncalled functions,未调用的函数，\nfunction flipCoin() &#123;\n  &#x2F;&#x2F; Meant to be Math.random()\n  return Math.random &lt; 0.5;\n  &#x2F;&#x2F; Operator &#39;&lt;&#39; cannot be applied to types &#39;() &#x3D;&gt; number&#39; and &#39;number&#39;.\n&#125;\n\nor basic logic errors.或基本的逻辑错误。\nconst value &#x3D; Math.random() &lt; 0.5 ? &quot;a&quot; : &quot;b&quot;;\nif (value !&#x3D;&#x3D; &quot;a&quot;) &#123;\n  &#x2F;&#x2F; ...\n&#125; else if (value &#x3D;&#x3D;&#x3D; &quot;b&quot;) &#123;\n  &#x2F;&#x2F; This condition will always return &#39;false&#39; since the types &#39;&quot;a&quot;&#39; and &#39;&quot;b&quot;&#39; have no overlap.\n  &#x2F;&#x2F; Oops, unreachable\n&#125;\n\nTypes for Tooling类型为工具TypeScript can catch bugs when we make mistakes in our code. That’s great, but TypeScript can also prevent us from making those mistakes in the first place.TypeScript 可以捕获我们在我们的代码中做错误的错误。这很好，但 TypeScript 可以防止我们做错误。The type-checker has information to check things like whether we’re accessing the right properties on variables and other properties. Once it has that information, it can also start suggesting which properties you might want to use.类型检查器有信息来检查变量和其他属性是否正确。一旦有这些信息，它也可以开始提建议你应该使用哪些属性。That means TypeScript can be leveraged for editing code too, and the core type-checker can provide error messages and code completion as you type in the editor. That’s part of what people often refer to when they talk about tooling in TypeScript.这意味着 TypeScript 可以用于编辑代码，并且核心类型检查器可以提供错误消息和代码补全。这是人们通常在说讨论工具时所提到的。\nimport express from &quot;express&quot;;\nconst app &#x3D; express();\n\napp.get(&quot;&#x2F;&quot;, function (req, res) &#123;\n  res.sen\n    &#x2F;&#x2F; send\n    &#x2F;&#x2F; sendDate\n    &#x2F;&#x2F; sendfile\n    &#x2F;&#x2F; sendFile\n    &#x2F;&#x2F; sendStatus\n&#125;);\n\napp.\n\nTypeScript takes tooling seriously, and that goes beyond completions and errors as you type. An editor that supports TypeScript can deliver “quick fixes” to automatically fix errors, refactorings to easily re-organize code, and useful navigation features for jumping to definitions of a variable, or finding all references to a given variable. All of this is built on top of the type-checker and is fully cross-platform, so it’s likely that your favorite editor has TypeScript support available.TypeScript 也深深地认识到工具，并且这也包括了完成和错误的补全，你在输入时可以自动修复错误，重新组织代码，以及寻找变量的定义，或寻找所有引用的变量。这全部是基于类型检查器的，并且是完全的跨平台，所以你可能喜欢的编辑器有 TypeScript 的支持。\ntsc, the TypeScript compilertsc，TypeScript 编译器We’ve been talking about type-checking, but we haven’t yet used our type-checker. Let’s get acquainted with our new friend tsc, the TypeScript compiler. First we’ll need to grab it via npm.我们已经讲述了类型检查，但我们还没有使用我们的类型检查器。我们需要通过 npm 来获取 tsc，TypeScript 编译器。\nnpm install -g typescript\n\nThis installs the TypeScript Compiler tsc globally. You can use npx or similar tools if you’d prefer to run tsc from a local node_modules package instead.这将安装 TypeScript 编译器 tsc 在全局。如果你想从本地的 node_modules 包里运行 tsc，可以使用 npx 或类似的工具。Now let’s move to an empty folder and try writing our first TypeScript program: hello.ts:现在我们移动到一个空文件夹，并尝试写我们的第一个 TypeScript 程序：hello.ts：\n&#x2F;&#x2F; Greets the world.\nconsole.log(&quot;Hello world!&quot;);\n\nNotice there are no frills here; this “hello world” program looks identical to what you’d write for a “hello world” program in JavaScript. And now let’s type-check it by running the command tsc which was installed for us by the typescript package.通过运行 tsc 命令，我们可以检查我们的程序。\ntsc hello.ts\n\n\nTada!拍拍拍！Wait, “tada” what exactly? We ran tsc and nothing happened! Well, there were no type errors, so we didn’t get any output in our console since there was nothing to report.等等，“拍拍拍”，什么意思？我们运行 tsc，没有任何事情发生！But check again - we got some file output instead. If we look in our current directory, we’ll see a hello.js file next to hello.ts. That’s the output from our hello.ts file after tsc compiles or transforms it into a plain JavaScript file. And if we check the contents, we’ll see what TypeScript spits out after it processes a .ts file:但再检查一次，我们会看到一个 hello.js 文件，它在 hello.ts 后面。这是 tsc 编译或转换成一个纯 JavaScript 文件的 hello.ts 的输出。如果我们检查内容，我们会看到 TypeScript 在处理 .ts 文件后打印出来的内容：\n&#x2F;&#x2F; Greets the world.\nconsole.log(&quot;Hello world!&quot;);\n\nIn this case, there was very little for TypeScript to transform, so it looks identical to what we wrote. The compiler tries to emit clean readable code that looks like something a person would write. While that’s not always so easy, TypeScript indents consistently, is mindful of when our code spans across different lines of code, and tries to keep comments around.在这种情况下，TypeScript 尝试输出一个清洁的可读代码，看起来像一个人写的代码。这并不总是如此简单，TypeScript 缩进一致，注意代码的不同行，并尝试保持注释在同一行。What about if we did introduce a type-checking error? Let’s rewrite hello.ts:如果我们把 hello.ts 中的 console.log 改成 console.logs，我们会发现什么？我们再次重写 hello.ts：\n&#x2F;&#x2F; This is an industrial-grade general-purpose greeter function:\nfunction greet(person, date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date&#125;!&#96;);\n&#125;\n\ngreet(&quot;Brendan&quot;);\n\nIf we run tsc hello.ts again, notice that we get an error on the command line!如果我们运行 tsc hello.ts 再次，我们会发现在命令行上出现一个错误！\nExpected 2 arguments, but got 1.\n\nTypeScript is telling us we forgot to pass an argument to the greet function, and rightfully so. So far we’ve only written standard JavaScript, and yet type-checking was still able to find problems with our code. Thanks TypeScript!TypeScript 提醒我们没有传递参数给 greet 函数，并且正确地。直到现在，我们只写了标准 JavaScript，然而类型检查仍然可以找到我们的代码的问题。感谢 TypeScript！\nEmitting with Errors发射错误One thing you might not have noticed from the last example was that our hello.js file changed again. If we open that file up then we’ll see that the contents still basically look the same as our input file. That might be a bit surprising given the fact that tsc reported an error about our code, but this is based on one of TypeScript’s core values: much of the time, you will know better than TypeScript.一个你可能没有注意到的事情是，我们的 hello.js 文件变了一次。如果我们打开这个文件，我们会看到它的内容仍然基本和我们的输入文件一样。这可能是一个很糟的情况，因为 tsc 报告了我们的代码的错误，但这是基于 TypeScript 的核心值：很多时候，你会更了解更多的事情。To reiterate from earlier, type-checking code limits the sorts of programs you can run, and so there’s a tradeoff on what sorts of things a type-checker finds acceptable. Most of the time that’s okay, but there are scenarios where those checks get in the way. For example, imagine yourself migrating JavaScript code over to TypeScript and introducing type-checking errors. Eventually you’ll get around to cleaning things up for the type-checker, but that original JavaScript code was already working! Why should converting it over to TypeScript stop you from running it?重复上一段内容，类型检查代码限制了你可以运行的程序，因此有一个交换，如果你的类型检查器找到了可接受的东西，那么你可以运行它。但是，有时候，这些检查会拖慢你的程序。例如，假设你是一个 JavaScript 的移植者，并且你把类型检查错误插入到你的代码中。最终，你会把它们清理掉，但是原来的 JavaScript 代码已经已经正常运行了！为什么你会把它移植到 TypeScript 中，然后停止运行它？So TypeScript doesn’t get in your way. Of course, over time, you may want to be a bit more defensive against mistakes, and make TypeScript act a bit more strictly. In that case, you can use the noEmitOnError compiler option. Try changing your hello.ts file and running tsc with that flag:因此，TypeScript 不会拖慢你。但是，随着时间的推移，你可能会想要更加安全，并且使 TypeScript 变得更严格。在这种情况下，你可以使用 noEmitOnError 编译器选项。试着把 hello.ts 文件中的代码改一下，然后运行 tsc 并且使用这个选项：\ntsc --noEmitOnError hello.ts\n\nYou’ll notice that hello.js never gets updated.hello.js 不会被更新。\nExplicit Types显式类型Up until now, we haven’t told TypeScript what person or date are. Let’s edit the code to tell TypeScript that person is a string, and that date should be a Date object. We’ll also use the toDateString() method on date.直到现在，我们都没有告诉 TypeScript 什么是人或日期。我们现在编辑代码，让 TypeScript 知道 person 是一个字符串，而 date 应该是一个 Date 对象。我们也使用 date 的 toDateString() 方法。\nfunction greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\n\nWhat we did was add type annotations on person and date to describe what types of values greet can be called with. You can read that signature as ”greet takes a person of type string, and a date of type Date“.我们做了一个类型标注，让 TypeScript 知道 greet 可以被调用的时候，person 的类型是 string，而 date 的类型是 Date。With this, TypeScript can tell us about other cases where greet might have been called incorrectly. For example…这样，TypeScript 可以告诉我们其他情况下 greet 可能会被调用错误。例如…\nfunction greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\ngreet(&quot;Maddison&quot;, Date());\n&#x2F;&#x2F; Argument of type &#39;string&#39; is not assignable to parameter of type &#39;Date&#39;.\n\nHuh? TypeScript reported an error on our second argument, but why?哎？TypeScript 在第二个参数上报错了，但是为什么？Perhaps surprisingly, calling Date() in JavaScript returns a string. On the other hand, constructing a Date with new Date() actually gives us what we were expecting.可能就是因为 JavaScript 中的 Date() 返回一个字符串，而 new Date() 则会返回我们期望的结果。Anyway, we can quickly fix up the error:然后，我们可以快速修复错误：\nfunction greet(person: string, date: Date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\n\ngreet(&quot;Maddison&quot;, new Date());\n\nKeep in mind, we don’t always have to write explicit type annotations. In many cases, TypeScript can even just infer (or “figure out”) the types for us even if we omit them.记住，我们不是总是要写明类型标注。在大多数情况下，TypeScript 也可以自动推断（或者说认为）类型，即使我们没有写明类型标注。\nlet msg &#x3D; &quot;hello there!&quot;;\n\nlet msg: string;\n\nEven though we didn’t tell TypeScript that msg had the type string it was able to figure that out. That’s a feature, and it’s best not to add annotations when the type system would end up inferring the same type anyway.即使我们没有告诉 TypeScript msg 的类型是 string，它也能够自动推断出来。这是一个特性，并且当类型系统自动推断出相同类型的时候，不要写明类型标注。:::tip\nthe message bubble inside the code sample above. That is what your editor would show if you had hovered over the word.在上面的代码段中，你的编辑器会显示一个消息泡。如果你鼠标悬停在这个单词上，那么你的编辑器会显示这个消息泡。:::\nErased Types擦除类型Let’s take a look at what happens when we compile the above function greet with tsc to output JavaScript:我们看看如果我们用 tsc 编译上面的函数 greet，它会输出 JavaScript 代码：\n&quot;use strict&quot;;\nfunction greet(person, date) &#123;\n  console.log(\n    &quot;Hello &quot;.concat(person, &quot;, today is &quot;).concat(date.toDateString(), &quot;!&quot;)\n  );\n&#125;\ngreet(&quot;Maddison&quot;, new Date());\n\nNotice two things here:注意这里有两件事情：Our person and date parameters no longer have type annotations.我们的 person 和 date 参数没有类型标注。Our “template string” - that string that used backticks (the character) - was converted to plain strings with concatenations (+).我们的模板字符串（使用 字符）已经被转换成了纯字符串，并且使用了 + 字符串连接。More on that second point later, but let’s now focus on that first point. Type annotations aren’t part of JavaScript (or ECMAScript to be pedantic), so there really aren’t any browsers or other runtimes that can just run TypeScript unmodified. That’s why TypeScript needs a compiler in the first place - it needs some way to strip out or transform any TypeScript-specific code so that you can run it. Most TypeScript-specific code gets erased away, and likewise, here our type annotations were completely erased.TypeScript 不是 JavaScript（或者说 ECMAScript）的一部分，所以不会有浏览器或其他运行时可以直接运行 TypeScript 的情况。因此 TypeScript 需要一个编译器，以便我们可以去掉或转换 TypeScript 的任何特定代码，以便我们可以运行它。大多数 TypeScript 特定代码都会被去掉，反之，这里的类型标注也会被去掉。&#96;\n\n\n\n\n\n\nTIP\nRemember: Type annotations never change the runtime behavior of your program.记住：类型标注不会改变你的程序的运行时行为。\n\nDownleveling降级One other difference from the above was that our template string was rewritten from我们的模板字符串是从\n&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;;\n\nto\n&quot;Hello &quot; + person + &quot;, today is &quot; + date.toDateString() + &quot;!&quot;;\n\nWhy did this happen?为什么这样发生了？Template strings are a feature from a version of ECMAScript called ECMAScript 2015 (a.k.a. ECMAScript 6, ES2015, ES6, etc. - don’t ask). TypeScript has the ability to rewrite code from newer versions of ECMAScript to older ones such as ECMAScript 3 or ECMAScript 5 (a.k.a. ES3 and ES5). This process of moving from a newer or “higher” version of ECMAScript down to an older or “lower” one is sometimes called downleveling.模板字符串是 ECMAScript 2015 的一个特性（或者说 ECMAScript 6，ES2015，ES6 等）。TypeScript 有能力将从更新的 ECMAScript 移到更旧的 ECMAScript，比如 ECMAScript 3 或 ECMAScript 5（或者说 ES3 和 ES5）。这种移动的过程称为降级。By default TypeScript targets ES3, an extremely old version of ECMAScript. We could have chosen something a little bit more recent by using the target option. Running with –target es2015 changes TypeScript to target ECMAScript 2015, meaning code should be able to run wherever ECMAScript 2015 is supported. So running tsc –target es2015 hello.ts gives us the following output:默认情况下，TypeScript 目标 ES3，一个非常老的 ECMAScript 版本。我们可以选择一个更新的版本，使用 target 选项。运行 tsc --target es2015 hello.ts 就会得到以下的输出：\nfunction greet(person, date) &#123;\n  console.log(&#96;Hello $&#123;person&#125;, today is $&#123;date.toDateString()&#125;!&#96;);\n&#125;\ngreet(&quot;Maddison&quot;, new Date());\n\nWhile the default target is ES3, the great majority of current browsers support ES2015. Most developers can therefore safely specify ES2015 or above as a target, unless compatibility with certain ancient browsers is important.默认目标是 ES3，大多数当前浏览器都支持 ES2015。大多数开发人员可以安全地指定 ES2015 或以上作为目标，除非需要与某些古老的浏览器兼容。\nStrictness严格Different users come to TypeScript looking for different things in a type-checker. Some people are looking for a more loose opt-in experience which can help validate only some parts of their program, and still have decent tooling. This is the default experience with TypeScript, where types are optional, inference takes the most lenient types, and there’s no checking for potentially null&#x2F;undefined values. Much like how tsc emits in the face of errors, these defaults are put in place to stay out of your way. If you’re migrating existing JavaScript, that might be a desirable first step.不同的用户到 TypeScript 上来看，有不同的意图。有人想要一个更宽松的选择，这可以帮助验证某些部分的程序，并且仍然有很好的工具。这是 TypeScript 默认的行为，其中类型是可选的，推断会接受更宽松的类型，并且没有检查可能 null/undefined 的值。和 tsc 在出现错误的时候一样，这些默认值被放在了你的脚跟上（兜底：这些默认选项并不会阻碍你的开发）。如果你正在迁移已有的 JavaScript，那么这可能是一个最佳的第一步。In contrast, a lot of users prefer to have TypeScript validate as much as it can straight away, and that’s why the language provides strictness settings as well. These strictness settings turn static type-checking from a switch (either your code is checked or not) into something closer to a dial. The further you turn this dial up, the more TypeScript will check for you. This can require a little extra work, but generally speaking it pays for itself in the long run, and enables more thorough checks and more accurate tooling. When possible, a new codebase should always turn these strictness checks on.不同的用户喜欢立刻验证程序，而不是等到最后。这是 TypeScript 的语言提供了严格性设置，这些设置可以改变静态类型检查的行为。这些设置可以改变静态类型检查的行为，而不是一个开关。这些设置越高，TypeScript 越会检查更多的信息。这可能需要一点额外的工作，但一般来说，这能提供更好的工具，并且能更好地支持你的代码。当可能的时候，一个新的代码应该总是开启这些严格性检查。TypeScript has several type-checking strictness flags that can be turned on or off, and all of our examples will be written with all of them enabled unless otherwise stated. The strict flag in the CLI, or “strict”: true in a tsconfig.json toggles them all on simultaneously, but we can opt out of them individually. The two biggest ones you should know about are noImplicitAny and strictNullChecks.TypeScript 有多个严格性标志，可以开启或关闭，所有的示例都将使用所有的标志，除非特别说明。CLI 中的 strict 开关，或 tsconfig.json 中的 strict: true 开启了所有的标志，但是我们可以单独关闭它们。两个最大的，你应该知道的是 noImplicitAny 和 strictNullChecks。\nnoImplicitAny无隐式anyRecall that in some places, TypeScript doesn’t try to infer types for us and instead falls back to the most lenient type: any. This isn’t the worst thing that can happen - after all, falling back to any is just the plain JavaScript experience anyway.在某些地方，TypeScript 不会为我们自动推断类型，而是使用最宽松的类型：any。这并不是最差的情况，因为仍然是 JavaScript 的经验。However, using any often defeats the purpose of using TypeScript in the first place. The more typed your program is, the more validation and tooling you’ll get, meaning you’ll run into fewer bugs as you code. Turning on the noImplicitAny flag will issue an error on any variables whose type is implicitly inferred as any.使用 any 很容易让你的程序变得更加不可靠。因为更加类型化的程序，你会发现更多的错误，并且更加容易地调试。开启 noImplicitAny 标志会在任何自动推断类型为 any 的变量上发出错误。\nstrictNullChecks严格nullBy default, values like null and undefined are assignable to any other type. This can make writing some code easier, but forgetting to handle null and undefined is the cause of countless bugs in the world - some consider it a billion dollar mistake! The strictNullChecks flag makes handling null and undefined more explicit, and spares us from worrying about whether we forgot to handle null and undefined.默认情况下，null 和 undefined 可以赋值给任何类型。这可以让写一些代码更容易，但是忘记处理 null 和 undefined 就会导致世界上的很多错误，有人认为这是一百亿美元错误！ strictNullChecks 可以让处理 null 和 undefined 更加明确，并且让我们不用担心是否忘记处理 null 和 undefined。\n参考链接Typescript The Basics\n","slug":"2022-06-07ts-basics","date":"2022-06-06T07:56:08.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"bb89616b2d7e7f4e050ed00ae2d71539","title":"1.Typescript起步","content":"说明此文及后续的几篇是对Typescript官方原文的翻译，方便阅读\nGet Startedtypescript 起步，分别针对 4 类不同的程序开发者进行引导， 对号入座\n\n新手程序猿，没有接触过任何开发语言\nJS 开发者\nJava&#x2F;C#开发 [跳过]\n函数式编程人员\n5 分钟内了解 Typescript\n\n新手程序猿Congratulations on choosing TypeScript as one of your first languages — you’re already making good decisions!祝贺您选择了 TypeScript 作为您的第一种语言，您已经做出了优秀的决策！You’ve probably already heard that TypeScript is a “flavor” or “variant” of JavaScript. The relationship between TypeScript (TS) and JavaScript (JS) is rather unique among modern programming languages, so learning more about this relationship will help you understand how TypeScript adds to JavaScript.你大概已经听说过，TypeScript 是 JavaScript 的一个变体。TypeScript 和 JavaScript 的关系是在现代编程语言中非常独特的，所以学习更多关于这个关系的知识将帮助你了解 TypeScript 和 JavaScript 的区别。\nWhat is JavaScript? A Brief History什么是 JavaScript？简单的历史\nJavaScript (also known as ECMAScript) started its life as a simple scripting language for browsers. At the time it was invented, it was expected to be used for short snippets of code embedded in a web page — writing more than a few dozen lines of code would have been somewhat unusual. Due to this, early web browsers executed such code pretty slowly. Over time, though, JS became more and more popular, and web developers started using it to create interactive experiences.JavaScript 是一种简单的脚本语言，用于浏览器。在创建时，它预期会被用于嵌入在网页中的短片代码 — 写入超过十几行代码会有点不便。Web browser developers responded to this increased JS usage by optimizing their execution engines (dynamic compilation) and extending what could be done with it (adding APIs), which in turn made web developers use it even more. On modern websites, your browser is frequently running applications that span hundreds of thousands of lines of code. This is long and gradual growth of “the web”, starting as a simple network of static pages, and evolving into a platform for rich applications of all kinds.Web 浏览器开发者对这个增加了 JS 使用的响应，优化了他们的执行引擎（动态编译）和扩展了他们可以做的事情（添加 APIs），这使得 Web 开发者使用它来做更多的事情。在现代网站上，您的浏览器通常运行着一些应用程序，其中包括千万行代码的应用程序。这是一个非常长的“网”的发展，从一个简单的静态页面开始，并进入一个丰富的应用程序的平台。More than this, JS has become popular enough to be used outside the context of browsers, such as implementing JS servers using node.js. The “run anywhere” nature of JS makes it an attractive choice for cross-platform development. There are many developers these days that use only JavaScript to program their entire stack!不仅如此，JS 变得越来越受欢迎，并且可以在浏览器之外使用，比如使用 node.js 来实现 JS 服务器。JS 的“运行在任何地方”性质使得它一个极受欢迎的选择。有许多开发者今天只使用 JavaScript 来编程他们的整个堆栈！To summarize, we have a language that was designed for quick uses, and then grew to a full-fledged tool to write applications with millions of lines. Every language has its own quirks — oddities and surprises, and JavaScript’s humble beginning makes it have many of these. Some examples:概括，我们有一种语言，被设计为快速使用，然后扩展到一个具有千万行代码的应用程序的工具。每种语言都有自己的特性，有的有点不同，有的有点惊人，而 JavaScript 的轻重感使得它有许多这些。有些例子：\nJavaScript’s equality operator (&#x3D;&#x3D;) coerces its arguments, leading to unexpected behavior:JavaScript 的相等操作符（==）会强制转换它的参数，导致意外的行为：\nif (&quot;&quot; &#x3D;&#x3D; 0) &#123;\n  &#x2F;&#x2F; It is! But why??\n&#125;\nif (1 &lt; x &lt; 3) &#123;\n  &#x2F;&#x2F; True for *any* value of x!\n&#125;\n\nJavaScript also allows accessing properties which aren’t present:JavaScript 也允许访问不存在的属性：\nconst obj &#x3D; &#123; width: 10, height: 15 &#125;;\n&#x2F;&#x2F; Why is this NaN? Spelling is hard!\nconst area &#x3D; obj.width * obj.heigth;\n\nMost programming languages would throw an error when these sorts of errors occur, some would do so during compilation — before any code is running. When writing small programs, such quirks are annoying but manageable; when writing applications with hundreds or thousands of lines of code, these constant surprises are a serious problem.大多数编程语言会抛出错误，当这些错误发生时，它们会抛出错误，而不是在编译时。当写小型程序时，这些惊人的惊喜是可接受的；当写大型应用程序时，这些惊喜是一个严重的问题。\n\nTypeScript: A Static Type Checker\n\nWe said earlier that some languages wouldn’t allow those buggy programs to run at all. Detecting errors in code without running it is referred to as static checking. Determining what’s an error and what’s not based on the kinds of values being operated on is known as static type checking.我们说过，某些语言不允许运行那些错误的程序。检测代码中的错误，而不运行它, 是静态检查。确定哪些是错误的，哪些是正确的，是基于值的类型的静态检查。TypeScript checks a program for errors before execution, and does so based on the kinds of values, it’s a static type checker. For example, the last example above has an error because of the type of obj. Here’s the error TypeScript found:TypeScript 检测程序前，并且基于值的类型，它是一个静态类型检查器。例如，上面的最后一个例子有一个错误，因为 obj 的类型是 NaN。这里 TypeScript 发现了错误：\nconst obj &#x3D; &#123; width: 10, height: 15 &#125;;\nconst area &#x3D; obj.width * obj.heigth;\n&#x2F;&#x2F; Property &#39;heigth&#39; does not exist on type &#39;&#123; width: number; height: number; &#125;&#39;. Did you mean &#39;height&#39;?\n\nA Typed Superset of JavaScript一个类型定义的超集 JavaScript\nHow does TypeScript relate to JavaScript, though?TypeScript 的类型定义是什么，和 JavaScript 的类型定义有什么关系？\nSyntax 语法TypeScript is a language that is a superset of JavaScript: JS syntax is therefore legal TS. Syntax refers to the way we write text to form a program. For example, this code has a syntax error because it’s missing a ):Typescript 是 JavaScript 的一个子集：JS 语言的语法是合法的 TS。语法是指我们写程序的方式。例如，这段代码有一个语法错误，因为没有一个）。\nlet a &#x3D; (4\n&#39;)&#39; expected.\n\nTypeScript doesn’t consider any JavaScript code to be an error because of its syntax. This means you can take any working JavaScript code and put it in a TypeScript file without worrying about exactly how it is written.TypeScript 不会认为任何 JavaScript 代码是错误的，因为它的语法。这意味着你可以把任何工作的 JavaScript 代码放在 TypeScript 文件中，而不用担心它的语法。\nTypes类型\nHowever, TypeScript is a typed superset, meaning that it adds rules about how different kinds of values can be used. The earlier error about obj.heigth was not a syntax error: it is an error of using some kind of value (a type) in an incorrect way.\n然而，TypeScript 是一个类型的超集，意味着它添加了一些规则，如何使用不同类型的值。前面的错误，obj.heigth 是不是一个语法错误？它是一个错误的使用某种类型的值（一个类型）的方式。\nAs another example, this is JavaScript code that you can run in your browser, and it will log a value:\n另一个例子，这是你可以在浏览器中运行的 JavaScript 代码，它会记录一个值：\nconsole.log(4 &#x2F; []);\n&#x2F;&#x2F; The right-hand side of an arithmetic operation must be of type &#39;any&#39;, &#39;number&#39;, &#39;bigint&#39; or an enum type.\n\nIt’s possible you really did intend to divide a number by an array, perhaps just to see what happens, but most of the time, though, this is a programming mistake. TypeScript’s type checker is designed to allow correct programs through while still catching as many common errors as possible. (Later, we’ll learn about settings you can use to configure how strictly TypeScript checks your code.)\n之前一个数除以一个数组，可能仅仅是想看下会出现什么，尽管他是一个错误程序。Typescript 的类型检查器是设计的，让正确的程序通过，并且尽可能少的错误。(后面，我们会学习如何配置 TypeScript 检查你的代码。)\nIf you move some code from a JavaScript file to a TypeScript file, you might see type errors depending on how the code is written. These may be legitimate problems with the code, or TypeScript being overly conservative. Throughout this guide we’ll demonstrate how to add various TypeScript syntax to eliminate such errors.\n如果你从一个 JavaScript 文件移动到一个 TypeScript 文件，你可能会看到一些类型错误，取决于你的代码如何写。这些可能是代码的正确性，或者 TypeScript 过于保守。本指南中，我们会演示如何添加各种 TypeScript 语法，以便消除这些错误。\nRuntime Behavior运行时行为TypeScript is also a programming language that preserves the runtime behavior of JavaScript. For example, dividing by zero in JavaScript produces Infinity instead of throwing a runtime exception. As a principle, TypeScript never changes the runtime behavior of JavaScript code.TypeScript 也是一个编程语言，它保留 JavaScript 的运行时行为。例如，在 JavaScript 中除以零会产生无穷，而不是抛出一个运行时异常。作为一个原则，TypeScript 不会改变 JavaScript 代码的运行时行为。This means that if you move code from JavaScript to TypeScript, it is guaranteed to run the same way, even if TypeScript thinks that the code has type errors.这意味着如果你从 JavaScript 移动到 TypeScript，它就保证会运行一样的，即使 TypeScript 认为代码有类型错误。Keeping the same runtime behavior as JavaScript is a foundational promise of TypeScript because it means you can easily transition between the two languages without worrying about subtle differences that might make your program stop working.保持和 JavaScript 的运行时一致的行为是 TypeScript 的基础承诺，因为它意味着你可以很容易地从 JavaScript 到 TypeScript 过渡，而不用担心潜在的差异，可能会影响你的程序的正常运行。\nErased Types擦除类型Roughly speaking, once TypeScript’s compiler is done with checking your code, it erases the types to produce the resulting “compiled” code. This means that once your code is compiled, the resulting plain JS code has no type information.换句话说，一旦 TypeScript 编译器完成了检查你的代码，它会擦除类型，生成结果的“编译”代码。这意味着，一旦你的代码编译完成，结果的普通 JS 代码将没有类型信息。This also means that TypeScript never changes the behavior of your program based on the types it inferred. The bottom line is that while you might see type errors during compilation, the type system itself has no bearing on how your program works when it runs.这意味着，在编译时，你可能会看到类型错误，但是类型系统本身没有什么影响你的程序的运行。底线是，在运行时，你可能会看到类型错误，但是类型系统本身没有什么影响你的程序的运行。Finally, TypeScript doesn’t provide any additional runtime libraries. Your programs will use the same standard library (or external libraries) as JavaScript programs, so there’s no additional TypeScript-specific framework to learn.最后，TypeScript 不提供任何额外的运行时库。你的程序将使用和 JavaScript 程序一样的标准库（或外部库），所以没有额外的 TypeScript-特定的框架来学习。\nLearning JavaScript and TypeScript学习 JavaScript 和 TypeScriptWe frequently see the question “Should I learn JavaScript or TypeScript?“.我们经常会看到这个问题：“我应该学习 JavaScript 还是 TypeScript？”The answer is that you can’t learn TypeScript without learning JavaScript! TypeScript shares syntax and runtime behavior with JavaScript, so anything you learn about JavaScript is helping you learn TypeScript at the same time.答案是，你不能学习 TypeScript，除非你学习 JavaScript！TypeScript 和 JavaScript 共享语法和运行时行为，所以你学习 JavaScript 的任何内容都是帮助你学习 TypeScript 的同时。There are many, many resources available for programmers to learn JavaScript; you should not ignore these resources if you’re writing TypeScript. For example, there are about 20 times more StackOverflow questions tagged javascript than typescript, but all of the javascript questions also apply to TypeScript.有很多，很多资源可供程序员学习 JavaScript；如果你写 TypeScript，你不应该忽略这些资源。例如，有 20 倍的 StackOverflow 问题标记了 javascript，而 typescript 问题也适用于 javascript。If you find yourself searching for something like “how to sort a list in TypeScript”, remember: TypeScript is JavaScript’s runtime with a compile-time type checker. The way you sort a list in TypeScript is the same way you do so in JavaScript. If you find a resource that uses TypeScript directly, that’s great too, but don’t limit yourself to thinking you need TypeScript-specific answers for everyday questions about how to accomplish runtime tasks.如果你发现自己在搜索“如何排序一个列表”，记住：TypeScript 是 JavaScript 的运行时，同时还有一个编译时类型检查器。你在 TypeScript 中排序一个列表的方式和在 JavaScript 中一样。如果你找到一个使用 TypeScript 的资源，那也是很好的，但不要限制自己在每天的问题中想要使用 TypeScript-特定的答案来实现运行时任务。\nNext Steps下一步This was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:这是一个简单的概述，从这里你可以：Learn some of the JavaScript fundamentals, we recommend either:学习 JavaScript 基本原理，我们建议：Microsoft’s JavaScript Resources orJavaScript guide at the Mozilla Web DocsContinue to TypeScript for JavaScript Programmers继续学习 TypeScript 为 JavaScript 程序员Read the full Handbook from start to finish (30m)阅读全部手册从头到尾（30 分钟）大佬就是大佬 30 分钟能搞定，我估计要搞 3 天，手册这地方内容还是很多的Explore the Playground examples探索 Playground 示例\nJS 开发者TypeScript stands in an unusual relationship to JavaScript. TypeScript offers all of JavaScript’s features, and an additional layer on top of these: TypeScript’s type system.TypeScript 与 JavaScript 的关系是不正常的。TypeScript 提供了 JavaScript 的所有功能，并且在这些功能的基础上添加了一层：TypeScript 的类型系统。For example, JavaScript provides language primitives like string and number, but it doesn’t check that you’ve consistently assigned these. TypeScript does.例如，JavaScript 提供了字符串和数字，但它不检查你是否按照一致的方式分配这些。TypeScript 也提供了。This means that your existing working JavaScript code is also TypeScript code. The main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.这意味着你的已有的工作中的 JavaScript 代码也是 TypeScript 代码。TypeScript 的主要好处是它可以高亮你的代码中的意外行为，降低 bug 的可能性。This tutorial provides a brief overview of TypeScript, focusing on its type system.这个教程主要介绍 TypeScript 的类型系统。\nTypes by Inference类型推论\nTypeScript knows the JavaScript language and will generate types for you in many cases. For example in creating a variable and assigning it to a particular value, TypeScript will use the value as its type.TypeScript 知道 JavaScript 语言，并且会为你生成类型。例如，创建一个变量并为它赋值，TypeScript 就会使用值作为它的类型。\nlet helloWorld &#x3D; &quot;Hello World&quot;;\n\n&#x2F;&#x2F; let helloWorld: string\n\nBy understanding how JavaScript works, TypeScript can build a type-system that accepts JavaScript code but has types. This offers a type-system without needing to add extra characters to make types explicit in your code. That’s how TypeScript knows that helloWorld is a string in the above example.通过了解 JavaScript 工作方式，TypeScript 可以建立一个接受 JavaScript 代码，但有类型的类型系统。这个类型系统没有需要在你的代码中添加额外的字符来明确类型。这就是 TypeScript 知道 helloWorld 是一个字符串的原因。\nYou may have written JavaScript in Visual Studio Code, and had editor auto-completion. Visual Studio Code uses TypeScript under the hood to make it easier to work with JavaScript.你可能在 Visual Studio Code 中写了 JavaScript，并且有自动补全。Visual Studio Code 使用 TypeScript 作为后台来更加方便地工作。（原来如此）\nDefining Types定义类型You can use a wide variety of design patterns in JavaScript. However, some design patterns make it difficult for types to be inferred automatically (for example, patterns that use dynamic programming). To cover these cases, TypeScript supports an extension of the JavaScript language, which offers places for you to tell TypeScript what the types should be.你可以使用 JavaScript 的许多设计模式。_然而，有些设计模式使得类型无法被自动推断（例如，使用动态规划的模式_。为了解决这些情况，TypeScript 支持一个 JavaScript 的扩展，它提供了给你告诉 TypeScript 的类型应该是什么的地方。For example, to create an object with an inferred type which includes name: string and id: number, you can write:例如，创建一个具有推断类型的对象，它包含 name: string 和 id: number，你可以这样写：\nconst user &#x3D; &#123;\n  name: &quot;Hayes&quot;,\n  id: 0,\n&#125;;\n\nYou can explicitly describe this object’s shape using an interface declaration:你可以使用接口声明来明确地描述这个对象的形状：\ninterface User &#123;\n  name: string;\n  id: number;\n&#125;\n\nYou can then declare that a JavaScript object conforms to the shape of your new interface by using syntax like : TypeName after a variable declaration:你可以使用类型名称来告诉 JavaScript 你的变量是属于哪个类型：\nconst user: User &#x3D; &#123;\n  name: &quot;Hayes&quot;,\n  id: 0,\n&#125;;\n\nIf you provide an object that doesn’t match the interface you have provided, TypeScript will warn you:如果你提供的对象不符合你提供的接口，TypeScript 就会警告你：\ninterface User &#123;\n  name: string;\n  id: number;\n&#125;\n\nconst user: User &#x3D; &#123;\n  username: &quot;Hayes&quot;,\n  &#x2F;&#x2F; Type &#39;&#123; username: string; id: number; &#125;&#39; is not assignable to type &#39;User&#39;.\n  &#x2F;&#x2F; Object literal may only specify known properties, and &#39;username&#39; does not exist in type &#39;User&#39;.\n  id: 0,\n&#125;;\n\nSince JavaScript supports classes and object-oriented programming, so does TypeScript. You can use an interface declaration with classes:因为 JavaScript 支持类和对象-面向对象编程，所以 TypeScript 也支持。你可以使用接口声明类：\ninterface User &#123;\n  name: string;\n  id: number;\n&#125;\n\nclass UserAccount &#123;\n  name: string;\n  id: number;\n\n  constructor(name: string, id: number) &#123;\n    this.name &#x3D; name;\n    this.id &#x3D; id;\n  &#125;\n&#125;\n\nconst user: User &#x3D; new UserAccount(&quot;Murphy&quot;, 1);\n\nYou can use interfaces to annotate parameters and return values to functions:你可以使用接口来标注函数的参数和返回值：\nfunction getAdminUser(): User &#123;\n  &#x2F;&#x2F;...\n&#125;\n\nfunction deleteUser(user: User) &#123;\n  &#x2F;&#x2F; ...\n&#125;\n\nThere is already a small set of primitive types available in JavaScript: boolean, bigint, null, number, string, symbol, and undefined, which you can use in an interface. TypeScript extends this list with a few more, such as any (allow anything), unknown (ensure someone using this type declares what the type is), never (it’s not possible that this type could happen), and void (a function which returns undefined or has no return value).已经有一些简单的原始类型可用于 JavaScript：boolean, bigint, null, number, string, symbol, 和 undefined，你可以在接口中使用它们。TypeScript 将这些类型扩展了一些，如 any（允许任何东西），unknown（确保使用者使用这个类型时声明了它的类型），never（不可能发生的类型），和 void（函数返回 undefined 或没有返回值）。\nYou’ll see that there are two syntaxes for building types: Interfaces and Types. You should prefer interface. Use type when you need specific features.你会看到有两种编写类型的语法：接口和类型。当你需要特定的功能时，你应该使用接口。使用类型时，你需要特定的功能。\nComposing Types组合类型With TypeScript, you can create complex types by combining simple ones. There are two popular ways to do so: with unions, and with generics.通过使用联合类型，或者通过使用泛型来组合复杂的类型。\nUnions联合类型With a union, you can declare that a type could be one of many types. For example, you can describe a boolean type as being either true or false:通过使用联合类型，你可以声明一个类型是可能是 true 或 false 的类型。\ntype MyBool &#x3D; true | false;\n\nNote: If you hover over MyBool above, you’ll see that it is classed as boolean. That’s a property of the Structural Type System. More on this below.请注意，如果你将鼠标移到 MyBool 上，你会看到它是一个 boolean 类型。这是结构类型系统的一个属性。更多内容在下面。A popular use-case for union types is to describe the set of string or number literals that a value is allowed to be:联合类型的一个常见用例是描述一个值可以是一个字符串或数字的集合：\ntype WindowStates &#x3D; &quot;open&quot; | &quot;closed&quot; | &quot;minimized&quot;;\ntype LockStates &#x3D; &quot;locked&quot; | &quot;unlocked&quot;;\ntype PositiveOddNumbersUnderTen &#x3D; 1 | 3 | 5 | 7 | 9;\n\nUnions provide a way to handle different types too. For example, you may have a function that takes an array or a string:联合类型可以用来处理不同类型的参数。例如，你可以有一个函数可以接受一个数组或字符串类型的参数：\nfunction getLength(obj: string | string[]) &#123;\n  return obj.length;\n&#125;\n\nTo learn the type of a variable, use typeof:使用 typeof 来查看一个变量的类型：\nType Predicate类型断言\nstring typeof s &#x3D;&#x3D;&#x3D; &quot;string&quot;\nnumber typeof n &#x3D;&#x3D;&#x3D; &quot;number&quot;\nboolean typeof b &#x3D;&#x3D;&#x3D; &quot;boolean&quot;\nundefined typeof undefined &#x3D;&#x3D;&#x3D; &quot;undefined&quot;\nfunction typeof f &#x3D;&#x3D;&#x3D; &quot;function&quot;\narray Array.isArray(a)\n\nFor example, you can make a function return different values depending on whether it is passed a string or an array:例如，你可以用来返回不同的值，根据传入的参数是字符串还是数组：\nfunction wrapInArray(obj: string | string[]) &#123;\n  if (typeof obj &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n    return [obj];\n\n    (parameter) obj: string\n  &#125;\n  return obj;\n&#125;\n\nGenerics泛型\nGenerics provide variables to types. A common example is an array. An array without generics could contain anything. An array with generics can describe the values that the array contains.泛型可以提供类型变量。例如，数组。数组没有泛型可以包含任何东西。数组有泛型可以描述数组中包含的值。\ntype StringArray &#x3D; Array&lt;string&gt;;\ntype NumberArray &#x3D; Array&lt;number&gt;;\ntype ObjectWithNameArray &#x3D; Array&lt;&#123; name: string &#125;&gt;;\nYou can declare your own types that use generics:\n\n你可以声明自己的类型，使用泛型。\ninterface Backpack&lt;Type&gt; &#123;\n  add: (obj: Type) &#x3D;&gt; void;\n  get: () &#x3D;&gt; Type;\n&#125;\n\n&#x2F;&#x2F; This line is a shortcut to tell TypeScript there is a\n&#x2F;&#x2F; constant called &#96;backpack&#96;, and to not worry about where it came from.\ndeclare const backpack: Backpack&lt;string&gt;;\n\n&#x2F;&#x2F; object is a string, because we declared it above as the variable part of Backpack.\nconst object &#x3D; backpack.get();\n\n&#x2F;&#x2F; Since the backpack variable is a string, you can&#39;t pass a number to the add function.\nbackpack.add(23);\nArgument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.\n\nStructural Type System结构类型系统\nOne of TypeScript’s core principles is that type checking focuses on the shape that values have. This is sometimes called “duck typing” or “structural typing”.结构类型系统的一个核心原则是，类型检查只关注值的形状。这称为“鸭子类型”或“结构类型”。In a structural type system, if two objects have the same shape, they are considered to be of the same type.在结构类型系统中，如果两个对象具有相同的形状，则被视为相同的类型。\ninterface Point &#123;\n  x: number;\n  y: number;\n&#125;\n\nfunction logPoint(p: Point) &#123;\n  console.log(&#96;$&#123;p.x&#125;, $&#123;p.y&#125;&#96;);\n&#125;\n\n&#x2F;&#x2F; logs &quot;12, 26&quot;\nconst point &#x3D; &#123; x: 12, y: 26 &#125;;\nlogPoint(point);\n\nThe point variable is never declared to be a Point type. However, TypeScript compares the shape of point to the shape of Point in the type-check. They have the same shape, so the code passes.point 变量没有被声明为 Point 类型。但是，TypeScript 对比 point 和 Point 的形状，它们具有相同的形状，所以代码通过。The shape-matching only requires a subset of the object’s fields to match.结构类型系统只需要对象的一部分字段匹配。\nconst point3 &#x3D; &#123; x: 12, y: 26, z: 89 &#125;;\nlogPoint(point3); &#x2F;&#x2F; logs &quot;12, 26&quot;\n\nconst rect &#x3D; &#123; x: 33, y: 3, width: 30, height: 80 &#125;;\nlogPoint(rect); &#x2F;&#x2F; logs &quot;33, 3&quot;\n\nconst color &#x3D; &#123; hex: &quot;#187ABF&quot; &#125;;\nlogPoint(color);\n&#x2F;&#x2F; Argument of type &#39;&#123; hex: string; &#125;&#39; is not assignable to parameter of type &#39;Point&#39;.\n&#x2F;&#x2F; Type &#39;&#123; hex: string; &#125;&#39; is missing the following properties from type &#39;Point&#39;: x, y\n\nThere is no difference between how classes and objects conform to shapes:类和对象都遵循结构类型系统。\nclass VirtualPoint &#123;\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) &#123;\n    this.x &#x3D; x;\n    this.y &#x3D; y;\n  &#125;\n&#125;\n\nconst newVPoint &#x3D; new VirtualPoint(13, 56);\nlogPoint(newVPoint); &#x2F;&#x2F; logs &quot;13, 56&quot;\n\nIf the object or class has all the required properties, TypeScript will say they match, regardless of the implementation details.如果对象或类有所有必要的属性，TypeScript将认为它们匹配，无论实现细节。\nNext Steps下一步This was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:从这里开始，你可以：Read the full Handbook from start to finish (30m)阅读完整手册（30分钟）Explore the Playground examples探索 Playground 示例\nJava&#x2F;C#开发虽然 Java&#x2F;C#也接触过，但这不是我本次的重点，之后会补上\n函数式编程人员TypeScript began its life as an attempt to bring traditional object-oriented types to JavaScript so that the programmers at Microsoft could bring traditional object-oriented programs to the web. As it has developed, TypeScript’s type system has evolved to model code written by native JavaScripters. The resulting system is powerful, interesting and messy.TypeScript 开始于一个尝试，将传统对象-对象类型的编程语言转换为 JavaScript，这样的编程人员可以将传统的对象-对象编程程序转换为 Web 端的程序。This introduction is designed for working Haskell or ML programmers who want to learn TypeScript. It describes how the type system of TypeScript differs from Haskell’s type system. It also describes unique features of TypeScript’s type system that arise from its modelling of JavaScript code.这个介绍是为了工作 Haskell 或 ML 程序员而设计的，它描述了 TypeScript 的类型系统与 Haskell 的类型系统之间的不同。This introduction does not cover object-oriented programming. In practice, object-oriented programs in TypeScript are similar to those in other popular languages with OO features.这个介绍不会讲到对象-对象编程。实际上，在 TypeScript 中的对象-对象编程程序与其他流行语言的对象-对象编程程序相似。\nPrerequisites先决条件In this introduction, I assume you know the following:在这个介绍中，我假设你知道了以下内容：How to program in JavaScript, the good parts.如何编写 JavaScript 程序，好的部分。Type syntax of a C-descended language.C-descended 语言的类型语法。If you need to learn the good parts of JavaScript, read JavaScript: The Good Parts. You may be able to skip the book if you know how to write programs in a call-by-value lexically scoped language with lots of mutability and not much else. R4RS Scheme is a good example.如果你需要学习 JavaScript，请阅读 JavaScript：The Good Parts。如果你知道如何编写基于值词法的词法作用域语言，并且拥有大量可变性和不多的其他特性，你可以跳过这本书。R4RS Scheme 是一个好例子。The C++ Programming Language is a good place to learn about C-style type syntax. Unlike C++, TypeScript uses postfix types, like so: x: string instead of string x.C++ 编程语言是一个好的地方学习 C-style 类型语法。\nConcepts not in Haskell在 Haskell 中不存在的概念\nBuilt-in types内置类型JavaScript defines 8 built-in types:JavaScript 定义了 8 个内置类型： 这里是包装类型Type Explanation类型说明Number a double-precision IEEE 754 floating point.数字，双精度 IEEE 754 浮点数。String an immutable UTF-16 string.字符串，不可变的 UTF-16 字符串。BigInt integers in the arbitrary precision format.大整数，任意精度格式。Boolean true and false.布尔值，true 和 false。Symbol a unique value usually used as a key.符号，通常用作键。Null equivalent to the unit type.空，等同于单元类型。Undefined also equivalent to the unit type.未定义，也等同于单元类型。Object similar to records.对象，类似于记录。See the MDN page for more detail.参见 MDN 页面。\nTypeScript has corresponding primitive types for the built-in types:TypeScript 有对应的内置类型的原始类型：numberstringbigintbooleansymbolnullundefinedobject\nOther important TypeScript types其他重要的 TypeScript 类型Type Explanation类型说明unknown the top type.未知类型，顶级类型。never the bottom type.永远不会是类型，底级类型。object literal eg { property: Type }对象字面量，例如 &#123; property: 类型 &#125;。void a subtype of undefined intended for use as a return type.void 类型，作为返回类型。T[] mutable arrays, also written ArrayT[] 可变数组，也称为 Array&lt;T&gt;。[T, T] tuples, which are fixed-length but mutable[T, T] 元组，固定长度但可变。(t: T) &#x3D;&gt; U functions(t: T) =&gt; U 函数。Notes:注意：Function syntax includes parameter names. This is pretty hard to get used to!函数语法包括参数名。这很难使用！\nlet fst: (a: any, b: any) &#x3D;&gt; any &#x3D; (a, b) &#x3D;&gt; a;\n&#x2F;&#x2F; or more precisely: 或者更准确地：\nlet fst: &lt;T, U&gt;(a: T, b: U) &#x3D;&gt; T &#x3D; (a, b) &#x3D;&gt; a;\n&#x2F;&#x2F; Object literal type syntax closely mirrors object literal value syntax:\n&#x2F;&#x2F; 模式匹配字面量类型语法与对象字面量值语法类似。\n\nlet o: &#123; n: number; xs: object[] &#125; &#x3D; &#123; n: 1, xs: [] &#125;;\n[T, T] is a subtype of T[].\n&#x2F;&#x2F; This is different than Haskell, where tuples are not related to lists.\n&#x2F;&#x2F; 此外，这是不同于 Haskell 的，元组不和列表相关。\n\nBoxed types包装类型JavaScript has boxed equivalents of primitive types that contain the methods that programmers associate with those types. TypeScript reflects this with, for example, the difference between the primitive type number and the boxed type Number. The boxed types are rarely needed, since their methods return primitives.JavaScript 有对应的包装类型，包含与这些类型相关的方法。\n(1).toExponential();\n&#x2F;&#x2F; equivalent to\nNumber.prototype.toExponential.call(1);\n\nNote that calling a method on a numeric literal requires it to be in parentheses to aid the parser.调用方法在数字字面量上需要在括号中，以帮助解析器。\nGradual typing渐进类型TypeScript uses the type any whenever it can’t tell what the type of an expression should be. Compared to Dynamic, calling any a type is an overstatement. It just turns off the type checker wherever it appears. For example, you can push any value into an any[] without marking the value in any way:TypeScript 使用 any 时，当它不能确定表达式的类型时。&#x2F;&#x2F; with “noImplicitAny”: false in tsconfig.json, anys: any[]在 tsconfig.json 中，加入 &quot;noImplicitAny&quot;: false 可以禁用 anys: any[]。\nconst anys &#x3D; [];\nanys.push(1);\nanys.push(&quot;oh no&quot;);\nanys.push(&#123; anything: &quot;goes&quot; &#125;);\n\nAnd you can use an expression of type any anywhere:你可以在任何地方使用 any 类型表达式。\nanys.map(anys[1]); &#x2F;&#x2F; oh no, &quot;oh no&quot; is not a function\n\nany is contagious, too — if you initialize a variable with an expression of type any, the variable has type any too.any 类型是传播的， 如果初始化一个变量为 any 类型，变量的类型也是 any。\nlet sepsis &#x3D; anys[0] + anys[1]; &#x2F;&#x2F; this could mean anything\n\nTo get an error when TypeScript produces an any, use “noImplicitAny”: true, or “strict”: true in tsconfig.json.为了在 TypeScript 生成 any 时得到错误提示，使用 &quot;noImplicitAny&quot;: true 或 &quot;strict&quot;: true 在 tsconfig.json 中。\nStructural typing结构类型Structural typing is a familiar concept to most functional programmers, although Haskell and most MLs are not structurally typed. Its basic form is pretty simple:结构性类型是大多数函数编程程序员熟悉的概念，尽管 Haskell 和大多数 ML 不是结构性类型。\n&#x2F;&#x2F; @strict: false\nlet o &#x3D; &#123; x: &quot;hi&quot;, extra: 1 &#125;; &#x2F;&#x2F; ok\nlet o2: &#123; x: string &#125; &#x3D; o; &#x2F;&#x2F; ok\n\nHere, the object literal { x: “hi”, extra: 1 } has a matching literal type { x: string, extra: number }. That type is assignable to { x: string } since it has all the required properties and those properties have assignable types. The extra property doesn’t prevent assignment, it just makes it a subtype of { x: string }.这里，对象字面量 &#123; x: &quot;hi&quot;, extra: 1 &#125; 有一个匹配的字面量类型 &#123; x: string, extra: number &#125;。Named types just give a name to a type; for assignability purposes there’s no difference between the type alias One and the interface type Two below. They both have a property p: string. (Type aliases behave differently from interfaces with respect to recursive definitions and type parameters, however.)命名类型只是给一个类型命名；用于类型赋值的目的不同于接口下面的类型别名和类型参数，但是它们都有属性 p: string。 (类型别名和接口的递归定义和类型参数有所不同。)\ntype One &#x3D; &#123; p: string &#125;;\ninterface Two &#123;\n  p: string;\n&#125;\nclass Three &#123;\n  p &#x3D; &quot;Hello&quot;;\n&#125;\n\nlet x: One &#x3D; &#123; p: &quot;hi&quot; &#125;;\nlet two: Two &#x3D; x;\ntwo &#x3D; new Three();\n\nUnions联合类型\nIn TypeScript, union types are untagged. In other words, they are not discriminated unions like data in Haskell. However, you can often discriminate types in a union using built-in tags or other properties.在 TypeScript 中，联合类型是无标签的。 在其他语言中，联合类型是标签化的。\nfunction start(\n  arg: string | string[] | (() &#x3D;&gt; string) | &#123; s: string &#125;\n): string &#123;\n  &#x2F;&#x2F; this is super common in JavaScript\n  if (typeof arg &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n    return commonCase(arg);\n  &#125; else if (Array.isArray(arg)) &#123;\n    return arg.map(commonCase).join(&quot;,&quot;);\n  &#125; else if (typeof arg &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;\n    return commonCase(arg());\n  &#125; else &#123;\n    return commonCase(arg.s);\n  &#125;\n\n  function commonCase(s: string): string &#123;\n    &#x2F;&#x2F; finally, just convert a string to another string\n    return s;\n  &#125;\n&#125;\n\nstring, Array and Function have built-in type predicates, conveniently leaving the object type for the else branch. It is possible, however, to generate unions that are difficult to differentiate at runtime. For new code, it’s best to build only discriminated unions.字符串、数组和函数有内置类型推断， 可以在 else 分支中推断出对象类型。The following types have built-in predicates:下面的类型有内置推断：Type Predicate类型推断&#96;\nstring typeof s &#x3D;&#x3D;&#x3D; “string”number typeof n &#x3D;&#x3D;&#x3D; “number”bigint typeof m &#x3D;&#x3D;&#x3D; “bigint”boolean typeof b &#x3D;&#x3D;&#x3D; “boolean”symbol typeof g &#x3D;&#x3D;&#x3D; “symbol”undefined typeof undefined &#x3D;&#x3D;&#x3D; “undefined”function typeof f &#x3D;&#x3D;&#x3D; “function”array Array.isArray(a)object typeof o &#x3D;&#x3D;&#x3D; “object”\nNote that functions and arrays are objects at runtime, but have their own predicates.函数和数组在运行时是对象， 但是有自己的推断。&#96;\nIntersections交叉类型\nIn addition to unions, TypeScript also has intersections:在 TypeScript 中，还有交叉类型：\ntype Combined &#x3D; &#123; a: number &#125; &amp; &#123; b: string &#125;;\ntype Conflicting &#x3D; &#123; a: number &#125; &amp; &#123; a: string &#125;;\n\nCombined has two properties, a and b, just as if they had been written as one object literal type. Intersection and union are recursive in case of conflicts, so Conflicting.a: number &amp; string.Combined 有两个属性，a 和 b， 如果写成一个对象字面量类型， 则 a 和 b 都是 number 和 string 类型。\nUnit types单元类型Unit types are subtypes of primitive types that contain exactly one primitive value. For example, the string “foo” has the type “foo”. Since JavaScript has no built-in enums, it is common to use a set of well-known strings instead. Unions of string literal types allow TypeScript to type this pattern:单元类型是原始类型的子类型， 它们包含一个原始值。\ndeclare function pad(s: string, n: number, direction: &quot;left&quot; | &quot;right&quot;): string;\npad(&quot;hi&quot;, 10, &quot;left&quot;);\n\nWhen needed, the compiler widens — converts to a supertype — the unit type to the primitive type, such as “foo” to string. This happens when using mutability, which can hamper some uses of mutable variables:当需要时，编译器会扩展， 将单元类型转换为原始类型， 例如 &quot;foo&quot; 转换为 string。\nlet s &#x3D; &quot;right&quot;;\npad(&quot;hi&quot;, 10, s); &#x2F;&#x2F; error: &#39;string&#39; is not assignable to &#39;&quot;left&quot; | &quot;right&quot;&#39;\nArgument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;left&quot; | &quot;right&quot;&#39;.\n\nHere’s how the error happens:这里有一个错误：“right”: “right”\ns: string because “right” widens to string on assignment to a mutable variable.string is not assignable to “left” | “right”\nYou can work around this with a type annotation for s, but that in turn prevents assignments to s of variables that are not of type “left” | “right”.你可以使用类型注解来解决这个问题， 但是这会导致 s 的赋值， 只能赋值给 &quot;left&quot; | &quot;right&quot; 类型的变量。\nlet s: &quot;left&quot; | &quot;right&quot; &#x3D; &quot;right&quot;;\npad(&quot;hi&quot;, 10, s);\n\nConcepts similar to Haskell与 Haskell 类似的概念\nContextual typing上下文类型\nTypeScript has some obvious places where it can infer types, like variable declarations:TypeScript 有一些明显的地方， 可以推断类型， 如变量声明。\nlet s &#x3D; &quot;I&#39;m a string!&quot;;\n\nBut it also infers types in a few other places that you may not expect if you’ve worked with other C-syntax languages:TypeScript 也可以推断在某些地方没有声明类型的情况下， 如果你已经使用其他 C-语言语法：\ndeclare function map&lt;T, U&gt;(f: (t: T) &#x3D;&gt; U, ts: T[]): U[];\nlet sns &#x3D; map((n) &#x3D;&gt; n.toString(), [1, 2, 3]);\n\nHere, n: number in this example also, despite the fact that T and U have not been inferred before the call. In fact, after [1,2,3] has been used to infer T&#x3D;number, the return type of n &#x3D;&gt; n.toString() is used to infer U&#x3D;string, causing sns to have the type string[].这里， n: number 在这个例子中也， 即使在调用之前没有推断 T 和 U 的类型。 在实际上， 在 [1,2,3] 被用来推断 T=number 的时候， n =&gt; n.toString() 的返回类型会被用来推断 U=string， 导致 sns 的类型为 string[]。Note that inference will work in any order, but intellisense will only work left-to-right, so TypeScript prefers to declare map with the array first:注意， 推断会工作在任何顺序， 但是 intellisense 只会从左到右， 因此 TypeScript 只会优先声明 map 函数， 先声明数组。\ndeclare function map&lt;T, U&gt;(ts: T[], f: (t: T) &#x3D;&gt; U): U[];\n\nContextual typing also works recursively through object literals, and on unit types that would otherwise be inferred as string or number. And it can infer return types from context:上下文类型也可以递归地通过对象字面量， 和单元类型， 如果没有声明类型， 则会被推断为 string 或 number。 并且可以从上下文中推断函数的返回类型。\ndeclare function run&lt;T&gt;(thunk: (t: T) &#x3D;&gt; void): T;\nlet i: &#123; inference: string &#125; &#x3D; run((o) &#x3D;&gt; &#123;\n  o.inference &#x3D; &quot;INSERT STATE HERE&quot;;\n&#125;);\n\nThe type of o is determined to be { inference: string } because这个 o 的类型是由 run 函数的参数类型决定的， 因为Declaration initializers are contextually typed by the declaration’s type: { inference: string }.声明初始值是由声明的类型决定的The return type of a call uses the contextual type for inferences, so the compiler infers that T&#x3D;{ inference: string }.调用的返回类型是由上下文类型决定的， 因此编译器会推断 T=&#123; inference: string &#125;。Arrow functions use the contextual type to type their parameters, so the compiler gives o: { inference: string }.箭头函数使用上下文类型来类型参数， 因此编译器会给 o: &#123; inference: string &#125;。And it does so while you are typing, so that after typing o., you get completions for the property inference, along with any other properties you’d have in a real program.而且这样， 在你输入 o. 的时候， 你会得到 inference 的属性的完整补全， 同时也会有其他实际程序中的属性。Altogether, this feature can make TypeScript’s inference look a bit like a unifying type inference engine, but it is not.这个功能可以让 TypeScript 的推断看起来像一个统一类型推断引擎， 但是它不是。\nType aliases类型别名\nType aliases are mere aliases, just like type in Haskell. The compiler will attempt to use the alias name wherever it was used in the source code, but does not always succeed.类型别名是类型别名， 像 Haskell 中的类型。 编译器会尝试使用别名名称在源代码中使用， 但不一定成功。\ntype Size &#x3D; [number, number];\nlet x: Size &#x3D; [101.1, 999.9];\n\nThe closest equivalent to newtype is a tagged intersection:最接近的等价是标记交集：\ntype FString &#x3D; string &amp; &#123; **compileTimeOnly: any &#125;;\n\n\nAn FString is just like a normal string, except that the compiler thinks it has a property named **compileTimeOnly that doesn’t actually exist. This means that FString can still be assigned to string, but not the other way round.FString 是一个普通字符串， 但是编译器认为它有一个名为 **compileTimeOnly 的属性， 这个属性并不存在。 这意味着 FString 仍然可以被赋值给 string， 但是不能被赋值给其他类型。\nDiscriminated Unions可识别联合\nThe closest equivalent to data is a union of types with discriminant properties, normally called discriminated unions in TypeScript:最接近的等价是数据的一个联合类型， 常见的是 TypeScript 中的分层联合：\ntype Shape &#x3D;\n  | &#123; kind: &quot;circle&quot;; radius: number &#125;\n  | &#123; kind: &quot;square&quot;; x: number &#125;\n  | &#123; kind: &quot;triangle&quot;; x: number; y: number &#125;;\n\nUnlike Haskell, the tag, or discriminant, is just a property in each object type. Each variant has an identical property with a different unit type. This is still a normal union type; the leading | is an optional part of the union type syntax. You can discriminate the members of the union using normal JavaScript code:与 Haskell 不同， 标记， 或者说分层联合的标记， 在每个对象类型中都是一个属性。 每个变体都有一个相同的属性， 并且它的单元类型不同。 这仍然是一个联合类型； 前面的 | 是联合类型的可选部分。 你可以使用普通的 JavaScript 代码来区分联合成员：\ntype Shape &#x3D;\n| &#123; kind: &quot;circle&quot;; radius: number &#125;\n| &#123; kind: &quot;square&quot;; x: number &#125;\n| &#123; kind: &quot;triangle&quot;; x: number; y: number &#125;;\n\nfunction area(s: Shape) &#123;\n  if (s.kind &#x3D;&#x3D;&#x3D; &quot;circle&quot;) &#123;\n    return Math.PI _ s.radius _ s.radius;\n  &#125; else if (s.kind &#x3D;&#x3D;&#x3D; &quot;square&quot;) &#123;\n    return s.x _ s.x;\n  &#125; else &#123;\n  r eturn (s.x _ s.y) &#x2F; 2;\n  &#125;\n&#125;\n\nNote that the return type of area is inferred to be number because TypeScript knows the function is total. If some variant is not covered, the return type of area will be number | undefined instead.注意， area 的返回类型被推断为 number， 因为 TypeScript 知道函数是完全的。 如果某个变体没有被覆盖， area 的返回类型将会是 number | undefined。Also, unlike Haskell, common properties show up in any union, so you can usefully discriminate multiple members of the union:与 Haskell 不同， 共有属性在联合中显示， 你可以使用有效的方式来区分联合成员：\nfunction height(s: Shape) &#123;\n  if (s.kind &#x3D;&#x3D;&#x3D; &quot;circle&quot;) &#123;\n    return 2 \\* s.radius;\n  &#125; else &#123;\n  &#x2F;&#x2F; s.kind: &quot;square&quot; | &quot;triangle&quot;\n    return s.x;\n  &#125;\n&#125;\n\nType Parameters参数类型Like most C-descended languages, TypeScript requires declaration of type parameters:类似于大多数 C-descended 语言， TypeScript 需要声明类型参数：\nfunction liftArray&lt;T&gt;(t: T): Array&lt;T&gt; &#123;\n  return [t];\n&#125;\n\nThere is no case requirement, but type parameters are conventionally single uppercase letters. Type parameters can also be constrained to a type, which behaves a bit like type class constraints:没有要求， 但是类型参数是一个惯例， 单大写字母。 类型参数可以被限制为一个类型， 这个类型行为类似于类型约束：\nfunction firstish&lt;T extends &#123; length: number &#125;&gt;(t1: T, t2: T): T &#123;\n  return t1.length &gt; t2.length ? t1 : t2;\n&#125;\n\nTypeScript can usually infer type arguments from a call based on the type of the arguments, so type arguments are usually not needed.TypeScript 可以通过调用参数的类型推断出类型参数， 因此通常不需要指定类型参数。Because TypeScript is structural, it doesn’t need type parameters as much as nominal systems. Specifically, they are not needed to make a function polymorphic. Type parameters should only be used to propagate type information, such as constraining parameters to be the same type:TypeScript 是结构性的， 不需要类型参数， 因为它们不需要使一个函数多态。 类型参数只是用来传递类型信息， 如限制参数为相同类型：\nfunction length&lt;T extends ArrayLike&lt;unknown&gt;&gt;(t: T): number &#123;&#125;\nfunction length(t: ArrayLike&lt;unknown&gt;): number &#123;&#125;\n\nIn the first length, T is not necessary; notice that it’s only referenced once, so it’s not being used to constrain the type of the return value or other parameters.在第一个 length， T 没有必要； 可以注意， 它只被引用一次， 因此它不会被用来限制返回值或其他参数的类型。\nHigher-kinded types高阶类型\nTypeScript does not have higher kinded types, so the following is not legal:TypeScript 不支持高阶类型， 因此下面的不合法：\nfunction length&lt;T extends ArrayLike&lt;unknown&gt;, U&gt;(m: T&lt;U&gt;) &#123;&#125;\n\nPoint-free programmingPoint-free programming — heavy use of currying and function composition — is possible in JavaScript, but can be verbose. In TypeScript, type inference often fails for point-free programs, so you’ll end up specifying type parameters instead of value parameters. The result is so verbose that it’s usually better to avoid point-free programming.点-free 编程 — 重量级的使用 curry 和函数组合 — 在 JavaScript 中可以， 但是可能会很多。 在 TypeScript 中， 类型推断对点-free 编程失败， 因此你会指定类型参数而不是值参数。 结果是这样的多， 因此比较适合避免点-free 编程。\nModule system模块系统\nJavaScript’s modern module syntax is a bit like Haskell’s, except that any file with import or export is implicitly a module:JavaScript 的现代模块语法和 Haskell 类似， 只是任何带有 import 或 export 的文件都是隐式的模块：\nimport &#123; value, Type &#125; from &quot;npm-package&quot;;\nimport &#123; other, Types &#125; from &quot;.&#x2F;local-package&quot;;\nimport \\* as prefix from &quot;..&#x2F;lib&#x2F;third-package&quot;;\n\n\nYou can also import commonjs modules — modules written using node.js’ module system:你也可以导入 commonjs 模块 — 使用 node.js 的模块系统写的模块：\nimport f &#x3D; require(&quot;single-function-package&quot;);\n\nYou can export with an export list:你可以使用 export 列表导出：\nexport &#123; f &#125;;\nfunction f() &#123;\n  return g();\n&#125;\nfunction g() &#123;&#125; &#x2F;&#x2F; g is not exported\n\nOr by marking each export individually:或者通过单独标记每个导出：\nexport function f &#123; return g() &#125;\nfunction g() &#123; &#125;\n\nThe latter style is more common but both are allowed, even in the same file.后者更常见， 但是都可以， 即使在同一个文件中。\nreadonly and constIn JavaScript, mutability is the default, although it allows variable declarations with const to declare that the reference is immutable. The referent is still mutable:在 JavaScript 中， 可变性是默认的， 即使它允许使用 const 声明的变量声明引用是不可变的。 引用仍然可变：\nconst a &#x3D; [1, 2, 3];\na.push(102); &#x2F;&#x2F; ):\na[0] &#x3D; 101; &#x2F;&#x2F; D:\n\nTypeScript additionally has a readonly modifier for properties.TypeScript 还有一个 readonly 属性修饰符。\ninterface Rx &#123;\n  readonly x: number;\n&#125;\nlet rx: Rx &#x3D; &#123; x: 1 &#125;;\nrx.x &#x3D; 12; &#x2F;&#x2F; error\n\nIt also ships with a mapped type Readonly that makes all properties readonly:它还有一个映射类型 Readonly&lt;T&gt;， 让所有属性都变成只读的：\ninterface X &#123;\n  x: number;\n&#125;\nlet rx: Readonly&lt;X&gt; &#x3D; &#123; x: 1 &#125;;\nrx.x &#x3D; 12; &#x2F;&#x2F; error\n\nAnd it has a specific ReadonlyArray type that removes side-affecting methods and prevents writing to indices of the array, as well as special syntax for this type:它还有一个特殊的 ReadonlyArray&lt;T&gt; 类型， 去除了侧影响的方法和防止写入数组索引， 同时还有这种类型的特殊语法：\nlet a: ReadonlyArray&lt;number&gt; &#x3D; [1, 2, 3];\nlet b: readonly number[] &#x3D; [1, 2, 3];\na.push(102); &#x2F;&#x2F; error\nb[0] &#x3D; 101; &#x2F;&#x2F; error\n\nYou can also use a const-assertion, which operates on arrays and object literals:你也可以使用 const 断言， 它操作了数组和对象字面量：\nlet a &#x3D; [1, 2, 3] as const;\na.push(102); &#x2F;&#x2F; error\na[0] &#x3D; 101; &#x2F;&#x2F; error\n\nHowever, none of these options are the default, so they are not consistently used in TypeScript code.但是， 没有这些选项是默认的， 因此它们不是一致地使用在 TypeScript 代码中。\nNext Steps下一步\nThis doc is a high level overview of the syntax and types you would use in everyday code. From here you should:此文档是日常代码中的语法和类型一个高级的概览， 从这里你应该：Read the full Handbook from start to finish (30m)阅读完整的手册（30分钟）Explore the Playground examples探索 Playground 示例\n5 分钟内了解 Typescript跳过，这部分比较简单，看原文吧，之后重点放到手册里。\n","slug":"2022-06-08ts-start","date":"2022-06-06T01:58:32.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"41038c8a05f130e72afb64f08ff12861","title":"https","content":"吐槽掘金\n后台有定时器在运行，一直发送请求，打开多个 web 标签页面，cpu 直接飙升到 100% +，鉴于掘金太卡，所以转载\n\n为什么要有 HTTPS在 HTTPS 出现之前，所有请求都是以明文方式送出的，那么如果有人在传输途中偷听或者抓包的话，你的所有通信内容都会泄漏。比较安全的方法是将通信内容加密在发送给对方。加密方法有两种，对称加密和非对称加密。\n对称加密\n对称加密指的是加密和解密用同一个密钥。\n但是在通信之前，客户端和服务端是不会有这样同一把密钥的。需要其中一方将密钥发送给对方。\n在整个传输过程没有任何验证操作，所以黑客也可以截取到这把密钥从而破译出加密的内容。所以纯对称加密是不安全的。\n\n非对称加密非对称加密指的是加密和解密用不同的密钥。可以是用私钥加密，公钥解密，也可以是用公钥加密，私钥解密。但是会有这种情况。\n\n服务端拥有私钥和公钥，将公钥发给客户端。既然客户端可以获得公钥，黑客也可以获得公钥。那么服务端发送给客户端的所有内容黑客也是可以解读的。\n客户端用公钥加密发送给服务端不受影响，因为黑客手上没有服务器的私钥。所以纯非对称加密也是不安全的。\n\n传输密钥的过程\n图解传输密钥的过程HTTPS 采用对称加密来加密通信内容，所用的密钥称为 A。用非对称加密来加密密钥 A 再发送给对方（有点绕）。只要密钥 A 不落入他人手中，那传输的数据就不会被别人破译。\n那么问题来了，要如何安全的将这把密钥送到对方手上呢？\n我们来看密钥的传输过程\n为什么 HTTPS 是可靠的？HTTPS 是可靠的，因为它解决了三个问题。\n\n加密通信，即使别人获取到了信息也没法复原成原来的信息。\n防止中间人攻击。黑客没法冒充服务端。因为在第 2 步，服务端给了客户端一个 CA 证书。\n\n\n如果客户端验证了这个证书，说明这个证书和公钥是由服务端发来的且真实可靠。\n如果客户端验证不了这个证书，就说明这个证书不可靠，有可能是假的。\n\n\nCA 证书的公信力CA 证书需要由公司或者个人发出申请，再通过邮箱验证等方法验证域名存在。避免了黑客冒充网站获取证书的可能。在技术层面上，CA 机构的公钥是写在操作系统或者浏览器里的。只有用 CA 机构的私钥加密的内容才能完成解密。确保了证书的确是 CA 机构发行的。\n\n密钥的作用最后让我们再来回顾一下每一把密钥的作用\nHTTPS一定安全吗非全站HTTPS并不安全\n登录页面支持HTTPS不就行了，首页又没有涉及账户信息其实这是非常不安全的行为，黑客会利用这一点进行攻击，一般是以下流程：\n1.用户在首页点击「登录」，页面跳转到有htps的网银页面，但此时由于首页是htp请求，所以是明文的，这就会被黑客劫持2.黑客劫持用户的跳转请求，将https网银页面地址转换为http的地址再发送给银行\n用户&lt;&#x3D;&#x3D;HTTP&#x3D;&#x3D;&gt;黑客&lt;&#x3D;&#x3D;HTTPS&#x3D;&#x3D;&gt;银行\n1.此时如果用户输入账户信息，那么会被中间的黑客获取，此时的账号密码就被泄露了\n好在是银行的网银页面,只支持htps,因此上述攻击暂时是无效的\n参考资料【web 安全 3】【硬核】HTTPS 原理全解析\n作者：站在书脊之上链接：https://juejin.cn/post/6844904160089882631来源：稀土掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"2022-06-05https","date":"2022-06-05T03:55:17.000Z","categories_index":"http","tags_index":"http","author_index":"陈海龙"},{"id":"e33992d78838483e28879a1cdf87c45e","title":"再学Vue3-7 最佳实践","content":"概览\n\n\n性能\n安全\n","slug":"2022-06-02vue-7","date":"2022-06-02T12:05:05.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"9392b2f9395b41b1da45c31165be4e75","title":"再学Vue3-8 typescript","content":"概览\n\n\n组合式\n选项式\n","slug":"2022-06-02vue-8","date":"2022-06-02T12:05:05.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"f63d02067666595ede9bc0ebd108b1ee","title":"再学Vue3-6 升级规模","content":"概览\n\n\n状态管理\n","slug":"2022-06-02vue-6","date":"2022-06-02T11:53:33.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"24ee6bb08e318ca140f4cc0224000a69","title":"再学Vue3-5 内置组件","content":"概览\n\n\nKeepAlive\nteleport·传送门\nSuspense\n过渡 \n","slug":"2022-06-02vue-5","date":"2022-06-02T11:45:19.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"2dcf5d3fa228390b9a53cb50e779c427","title":"再学Vue3-4 可重用性","content":"概览\n\n\n可重用性\n组合函数\n自定义指令\n插件","slug":"2022-06-02vue-4","date":"2022-06-02T10:49:24.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"64389360ee809707debd2fd41c5138f2","title":"再学Vue3-3 深入组件","content":"概览\n\n\n深入组件\n注册prop\n事件\n透传 Attribute\n插槽\n依赖注入\n异步组件\n可重用性\n组合函数\n自定义指令\n插件","slug":"2022-06-02vue-3","date":"2022-06-02T10:49:23.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"f9fd2a8578c770321fc9e0db644f4563","title":"再学Vue3-2 v3","content":"v3\n\n\n响应式基础\n计算属性\n生命周期\n侦听器\n模版 ref\n组件基础\n","slug":"2022-06-02vue-2","date":"2022-06-02T10:49:22.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"2620e5e38d0a5713fc7f864f91b17d5f","title":"再学Vue3-1 基础","content":"概览\n\nv2\n模版语法\n\n\n数据绑定\n\n\n事件绑定\n表单输入绑定\n插件\n","slug":"2022-06-02vue-1","date":"2022-06-02T10:49:21.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"98cc42407c73e25079ab5c02aa5f251b","title":"再学Vue3-0 概览","content":"vue3\n使用 proxy 重写了 vue2，并增加了组合式 api\n以下思维导图以vue3 文档内容为依据，在学习过程中绘制\n学习过程中对比了 vue3 和 react\n很长一段时间没看vue了，vue3一直没接触，媳妇不学。万一哪天媳妇需要用vue3了，没人带岂不是要失业，赶紧学起来～概览\n\n\n\n\n\n问题\n念叨着 渐进式 依赖收集 去学习vue指南\n\n\n","slug":"2022-06-02vue-0","date":"2022-06-02T10:49:20.000Z","categories_index":"vue","tags_index":"vue","author_index":"陈海龙"},{"id":"e7a12532b015cb78e0adb01f9bc03b9e","title":"react useState 错误使用","content":"Shareconst Share: FC&lt;ShareProps&gt; &#x3D; (props) &#x3D;&gt; &#123;\n  const &#123; entityType, entityCode &#125; &#x3D; props\n\n  const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;\n    value: props.value,\n    title: props.title,\n    shareId: props.shareId,\n    mappingPassword: props.mappingPassword,\n    passwordEnable: props.passwordEnable,\n    mappingState: props.mappingState,\n    expireTime: props.expireTime,\n    shortCode: props.shortCode,\n  &#125;)\n\n\n  const &#123; value &#125; &#x3D; state\n\n  ...\n\n  return (\n    &lt;div&gt;\n      &#123;renderBtn&#125;\n      &lt;ShareModal\n        entityType&#x3D;&#123;entityType&#125;\n        entityCode&#x3D;&#123;entityCode&#125;\n        &#123;...modalProps&#125;\n        state&#x3D;&#123;state&#125;\n        setState&#x3D;&#123;setState&#125;\n      &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;\n\nexport default Share\n\n\nShareModal\ninterface ShareModalProps extends ModalFuncProps &#123;\n  entityType: EntityType\n  entityCode: string\n  className?: string\n  state: StateProps\n  setState: (state: StateProps) &#x3D;&gt; void\n&#125;\n\nconst Copy &#x3D; (&#123; text, children &#125;: &#123; text: string; children: string &#125;) &#x3D;&gt; &#123;\n  return (\n    &lt;CopyToClipboard\n      text&#x3D;&#123;text&#125;\n      onCopy&#x3D;&#123;() &#x3D;&gt; &#123;\n        message.success(&#39;链接已复制&#39;)\n      &#125;&#125;\n    &gt;\n      &lt;span&gt;&#123;children&#125;&lt;&#x2F;span&gt;\n    &lt;&#x2F;CopyToClipboard&gt;\n  )\n&#125;\n\nconst ShareModal: FC&lt;ShareModalProps&gt; &#x3D; (props) &#x3D;&gt; &#123;\n  const [form] &#x3D; HookForm.useForm()\n\n  const &#123; state, setState, entityType, entityCode, ...restProps &#125; &#x3D; props\n\n  const &#123; value, title, mappingPassword, shortCode, expireTime &#125; &#x3D; state\n\n  const &#123;\n    onChange: toggle,\n    resetPassword: reset,\n    update,\n  &#125; &#x3D; useShare(&#123;\n    entityCode,\n    entityType,\n    state,\n    setState,\n  &#125;)\n\n\n  ....\n\n  return (\n    &lt;Modal\n      &#123;...restProps&#125;\n      className&#x3D;&#123;styles[&#39;share-modal-wrap&#39;]&#125;\n      title&#x3D;&quot;链接分享&quot;\n      destroyOnClose\n      width&#x3D;&#123;420&#125;\n      footer&#x3D;&#123;null&#125;\n    &gt;\n      &lt;ConditionComponent isShow&#x3D;&#123;value&#125;&gt;\n        ....\n        &lt;HookForm form&#x3D;&#123;form&#125; style&#x3D;&#123;&#123; marginBottom: 10, width: &#39;100%&#39; &#125;&#125; layout&#x3D;&quot;vertical&quot;&gt;\n          &lt;HookForm.Item noStyle shouldUpdate&gt;\n            &#123;() &#x3D;&gt; &#123;\n              const &#123; url, mappingPassword, expireTime &#125; &#x3D; form.getFieldsValue()\n              const text &#x3D; &#96;$&#123;url&#125;（密码：$&#123;mappingPassword&#125;）《$&#123;title&#125;》$&#123;moment(\n                expireTime,\n              ).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)&#125;过期&#96;\n              return (\n                &lt;HookForm.Item name&#x3D;&quot;url&quot; label&#x3D;&quot;&quot;&gt;\n                  &lt;Input\n                    className&#x3D;&#123;styles[&#39;share-copy&#39;]&#125;\n                    addonAfter&#x3D;&#123;&lt;Copy text&#x3D;&#123;text&#125;&gt;复制链接和密码&lt;&#x2F;Copy&gt;&#125;\n                    disabled\n                  &#x2F;&gt;\n                &lt;&#x2F;HookForm.Item&gt;\n              )\n            &#125;&#125;\n          &lt;&#x2F;HookForm.Item&gt;\n        &lt;&#x2F;HookForm&gt;\n      &lt;&#x2F;ConditionComponent&gt;\n    &lt;&#x2F;Modal&gt;\n  )\n&#125;\n\nexport default ShareModal\n\n\n用户反馈为什么分享的链接与要分享的链接对不上？\nuseCallbackuseCallback受依赖项的影响，不更新，之前改过同事的代码，这次扫了一样，没有callback，就这问题修改几个了\nuseState\n找了下数据ShareModal组件,看到两个入参state, setState ，我艹\n继续往上层找&lt;ShareModal\n  entityType&#x3D;&#123;entityType&#125;\n  entityCode&#x3D;&#123;entityCode&#125;\n  &#123;...modalProps&#125;\n  state&#x3D;&#123;state&#125; &#x2F;&#x2F; 😓\n  setState&#x3D;&#123;setState&#125; &#x2F;&#x2F;😓 \n&#x2F;&gt;\n再往上找，useState 内部只执行一次，数据初始化完成不再改变\n\n\nconst [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;\n  value: props.value,\n  title: props.title,\n  shareId: props.shareId,\n  mappingPassword: props.mappingPassword,\n  passwordEnable: props.passwordEnable,\n  mappingState: props.mappingState,\n  expireTime: props.expireTime,\n  shortCode: props.shortCode,\n&#125;)\n\n\nconst &#123; value &#125; &#x3D; state\n\n\n这里代码这么写，其他地方肯定也有这样的写法，😓\n\n改一下const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;&#125;)\n\n\nuseEffect(() &#x3D;&gt; &#123;\n  setState(&#123; ...props &#125;)\n&#125;, [props.shareId])\n","slug":"2022-05-31bug","date":"2022-05-31T02:30:47.000Z","categories_index":"bug","tags_index":"bug,react","author_index":"陈海龙"},{"id":"fa552d7ce8179aea4ff549bb83386b93","title":"编程范式-函数式编程简单了解","content":"背景js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的原型、原型链、继承，还有对人不友好的 this ；而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。简单来说就是：面向对象的思想在js中不是很好用\n什么是函数式编程函数式编程（functional programing）是编程范式之一。我们常见的范式还有面向过程、面向行为、面向对象等。\n范式：我们可以认为它是一种思维模式加上它的实现方法，简单说就是编程的方法论。\n\n面向过程编程：简单解释就是按照步骤来实现。\n\n面向行为编程：它是函数式编程的衍生范型，将电脑运算平展为一系列的变化，并且避免使用程序指令以及堆叠的对象。\n\n面向对象编程：它的思维方式是把现实世界中的事物抽象成程序世界中的类和对象，然后通过封装，继承和多态来演示事物之间的联系。\n\n面向函数式编程：它的思维方式是把现实世界中的事物和事物之间的联系，抽象到程序世界中。\n\n\n函数式编程特点：\n程序的本质：就是利用计算机的计算能力将输入转化成对应的输出。\n\n函数式编程中的函数指的不是编程语言里的函数，而是数学意义上的映射关系。比如 y&#x3D;sin(x) 中 x 和 y 值的映射关系。\n\n纯函数：相同的输入获得相同的输出（无副作用）。\n\n函数式编程就是对数据(函数)映射关系的抽象。\n\n\n使用场景\n高阶函数\n闭包\n纯函数\n柯里化\n组合函数\n\n参考\n","slug":"2022-05-28func","date":"2022-05-28T07:25:33.000Z","categories_index":"理论","tags_index":"理论","author_index":"陈海龙"},{"id":"2e69f09f2b5424b80304135ea166c436","title":"wiki Laser Pen","content":"Laser PenLaser Pen 是一套用来在 web canvas 上绘制鼠标轨迹的工具集。\n使用场景wiki全屏演示时候，为了便于听众跟随演讲者进度，给鼠标轨迹加上标记。\n\n注：公司项目由于版权问题，不便演示\n初步上手首先在你的项目中添加对 Laser Pen 的依赖：\nyarn add laser-pen\n或者\nnpm i laser-pen\n\n然后监听鼠标的 move 事件，获取鼠标移动轨迹的坐标，并同时记录 move 事件触发时的时间戳。\n&#x2F;&#x2F; 获取 canvas 元素的坐标\nconst canvasDom &#x3D; document.querySelector(&#39;canvas&#39;)\nconst canvasPos &#x3D; canvasDom.getBoundingClientRect()\nconst ctx &#x3D; canvas.getContext(&#39;2d&#39;)\n&#x2F;&#x2F; 用来存储所有鼠标轨迹数据\nlet mouseTrack &#x3D; []\n&#x2F;&#x2F; 监听鼠标事件\ndocument.addEventListener(&#39;mousemove&#39;, (event) &#x3D;&gt; &#123;\n  mouseTrack.push(&#123;\n    x: event.clientX - canvasPos.x,\n    y: event.clientY - canvasPos.y,\n    time: Date.now(),\n  &#125;)\n&#125;)\n\n最后在调用 drawLaserPen 方法绘制鼠标轨迹\nimport &#123; drainPoints, drawLaserPen &#125; from &#39;laser-pen&#39;\n\nfunction draw() &#123;\n  &#x2F;&#x2F; 过滤掉一些失效的轨迹坐标\n  mouseTrack &#x3D; drainPoints(mouseTrack)\n  if (mouseTrack.length &gt;&#x3D; 3) &#123;\n    &#x2F;&#x2F; 绘制鼠标轨迹\n    drawLaserPen(ctx, mouseTrack)\n  &#125;\n  requestAnimation(draw)\n&#125;\n\n\n到这里，你应该已经可以在 canvas 上实现鼠标轨迹的绘制了。\n参数配置如果默认的轨迹效果不能满足你的要求，Laser Pen 还提供了一些接口让你可以方便的修改鼠标轨迹的样式。\n&#x2F;&#x2F; 设置延迟时间，mousemove 事件产生的坐标点在超过延迟时间后就不会被绘制，会直接影响轨迹的长度\nsetDelay: (millisecond: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置轨迹的最大宽度，轨迹是一条由粗变细的曲线，maxWidth 表示粗的那一头的线宽\nsetMaxWidth: (width: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置轨迹的最小宽度，轨迹是一条由粗变细的曲线，minWidth 表示细的那一头的线宽\nsetMinWidth: (width: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置曲线张力大小，张力越大拐点处越平滑，反之越尖锐\nsetTension: (t: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置轨迹的最小透明度，轨迹是一条由不透明变透明的曲线，opacity 表示轨迹末尾的不透明度\nsetOpacity: (o: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置轨迹的颜色\nsetColor: (r: number, g: number, b: number) &#x3D;&gt; void;\n&#x2F;&#x2F; 设置轨迹头部是否是圆形\nsetRoundCap: (b: boolean) &#x3D;&gt; void;\n\n在任何时候调用上述接口修改鼠标轨迹的样式，都会在紧接着的下一次绘制中生效。所以如果你想实现一个类似 RGB 跑马灯的鼠标轨迹也是可以的。\n定制化开发如果上面的接口都不能满足你的要求，那么你就需要做一些定制化的开发了。\n绘制鼠标轨迹的过程大概分为 5 个步骤：\n清洗轨迹坐标数据根据轨迹坐标计算每个坐标的控制点通过坐标点和控制点数据生成 Bezier 曲线将上一步生成的曲线分割为更短的 Bezier 曲线，并计算每条曲线的绘制样式依次绘制每条 Bezier 曲线这 5 个步骤对应下面的第 1 到第 5 个接口，最后的 drawLaserPen 接口是对前面 5 个接口的组合。 如果直接调用 drawLaserPen 不能满足你的要求，你可以在前 5 个接口的基础上自行组合，实现你想要的效果。\n&#x2F;&#x2F; 去掉原始鼠标坐标数据中不合理的数据，包括超过延迟时间的坐标，和一些排列不合法的坐标\ndrainPoints: (originalPoints: IOriginalPointData[]) &#x3D;&gt; IOriginalPointData[];\n&#x2F;&#x2F; 根据鼠标坐标数据计算每个坐标点的前后控制点\ncalControlPoints: (points: IPoint[]) &#x3D;&gt; IControlPoint[];\n&#x2F;&#x2F; 将鼠标坐标数据和控制点数据组合为贝塞尔曲线\ntransformPointToBezier: (\n  points: IPoint[],\n  controlPoints: IControlPoint[]\n) &#x3D;&gt; Bezier[];\n&#x2F;&#x2F; 根据原始的贝塞尔曲线数据，计算出用于绘制的数据结构\ncalDrawingData: (\n  bzArray: Bezier[],\n  totalLength: number\n) &#x3D;&gt; IDrawingBezierData[];\n&#x2F;&#x2F; 根据计算出的绘制数据，将曲线绘制到画布上\ndrawDrawingBezierData: (\n  ctx: CanvasRenderingContext2D,\n  data: IDrawingBezierData[]\n) &#x3D;&gt; void;\n&#x2F;&#x2F; 一个方便简单使用的入口方法，直接通过处理好的鼠标坐标数据，绘制鼠标轨迹\ndrawLaserPen: (ctx: CanvasRenderingContext2D, points: IPoint[]) &#x3D;&gt; void;\n\n其他\nlaser-pen\n突然有个想法：王者荣耀的拖尾效果实现原理，是不是和这个类似？\n\n","slug":"2022-05-27wiki-laserPen","date":"2022-05-27T08:07:33.000Z","categories_index":"wiki","tags_index":"wiki","author_index":"陈海龙"},{"id":"8b8288a2a8637d5beee93bb6d37a8ba8","title":"redux-logger源码","content":"redux 日志中间件.\n├── core.js\n├── defaults.js\n├── diff.js\n├── helpers.js &#x2F;&#x2F; 一些帮助函数\n└── index.js\n\n0 directories, 5 files\ndefaultLoggerv3 版本，破坏性变更\n之前\nimport createLogger from &quot;redux-logger&quot;;\n\n之后\nimport &#123; createLogger &#125; from &quot;redux-logger&quot;;\n\n源码\n&#x2F;&#x2F; src&#x2F;index.js\n\nconst defaultLogger &#x3D; (&#123; dispatch, getState &#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123;\n  if (typeof dispatch &#x3D;&#x3D;&#x3D; &quot;function&quot; || typeof getState &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;\n    &#x2F;&#x2F; createLogger，柯里化 工厂模式\n    return createLogger()(&#123; dispatch, getState &#125;);\n  &#125;\n  &#x2F;&#x2F; 如果没有传递dispatch和getState，打印错误信息\n  &#x2F;&#x2F; v3版本，破坏性变更, 根据《语义化版本》不看内容也知道有破坏性变更\n  &#x2F;&#x2F; Since 3.0.0 redux-logger exports by default logger with default settings\n  &#x2F;&#x2F; import createLogger from &#39;redux-logger&#39; &#x3D;&gt; import &#123; createLogger &#125; from &#39;redux-logger&#39;\n  console.error(&#96;\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from &#39;redux-logger&#39;\n[redux-logger v3] to\n[redux-logger v3] import &#123; createLogger &#125; from &#39;redux-logger&#39;\n&#96;);\n&#125;;\n\nexport &#123; defaults, createLogger, defaultLogger as logger &#125;;\n\nexport default defaultLogger;\n\ncreateLogger\n使用传入的 options， 创建日志记录器\n\n&#x2F;**\n * Creates logger with following options\n * 创建日志记录器，配置如下：\n * @namespace\n * @param &#123;object&#125; options - options for logger\n * @param &#123;string | function | object&#125; options.level - console[level] 日志级别\n * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间\n * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳\n * @param &#123;object&#125; options.colors - custom colors 定制颜色\n * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现\n * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出\n * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组\n * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为\n * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换\n * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换\n * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换\n *\n * @returns &#123;function&#125; logger middleware 返回中间件\n *&#x2F;\nfunction createLogger(options &#x3D; &#123;&#125;) &#123;\n  const loggerOptions &#x3D; Object.assign(&#123;&#125;, defaults, options);\n\n  const &#123;\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate,\n  &#125; &#x3D; loggerOptions;\n\n  &#x2F;&#x2F; Return if &#39;console&#39; object is not defined\n  &#x2F;&#x2F; 如果&#39;console&#39;对象未定义，返回\n  if (typeof logger &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;\n    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);\n  &#125;\n\n  &#x2F;&#x2F; Detect if &#39;createLogger&#39; was passed directly to &#39;applyMiddleware&#39;.\n  &#x2F;&#x2F; 判断是否传递给applyMiddleware\n  if (options.getState &amp;&amp; options.dispatch) &#123;\n    &#x2F;&#x2F; eslint-disable-next-line no-console\n    console.error(&#96;[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n&#x2F;&#x2F; Logger with default options\nimport &#123; logger &#125; from &#39;redux-logger&#39;\nconst store &#x3D; createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n&#x2F;&#x2F; Or you can create your own logger with custom options http:&#x2F;&#x2F;bit.ly&#x2F;redux-logger-options\nimport &#123; createLogger &#125; from &#39;redux-logger&#39;\nconst logger &#x3D; createLogger(&#123;\n  &#x2F;&#x2F; ...options\n&#125;);\nconst store &#x3D; createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n&#96;);\n    &#x2F;&#x2F; 中间件书写套路\n    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);\n  &#125;\n\n  const logBuffer &#x3D; [];\n\n  return (&#123; getState &#125;) &#x3D;&gt;\n    (next) &#x3D;&gt;\n    (action) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; Exit early if predicate function returns &#39;false&#39; 如果predicate函数返回false，退出\n      if (typeof predicate &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; !predicate(getState, action)) &#123;\n        return next(action);\n      &#125;\n\n      const logEntry &#x3D; &#123;&#125;;\n\n      logBuffer.push(logEntry);\n\n      logEntry.started &#x3D; timer.now();\n      logEntry.startedTime &#x3D; new Date();\n      logEntry.prevState &#x3D; stateTransformer(getState());\n      logEntry.action &#x3D; action;\n\n      let returnedValue;\n      if (logErrors) &#123;\n        try &#123;\n          returnedValue &#x3D; next(action);\n        &#125; catch (e) &#123;\n          logEntry.error &#x3D; errorTransformer(e);\n        &#125;\n      &#125; else &#123;\n        returnedValue &#x3D; next(action);\n      &#125;\n\n      logEntry.took &#x3D; timer.now() - logEntry.started;\n      logEntry.nextState &#x3D; stateTransformer(getState());\n\n      const diff &#x3D;\n        loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;\n          ? diffPredicate(getState, action)\n          : loggerOptions.diff;\n\n      printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;));\n      logBuffer.length &#x3D; 0;\n\n      if (logEntry.error) throw logEntry.error;\n      return returnedValue;\n    &#125;;\n&#125;\n\ndefaults 默认配置\n&#x2F;&#x2F; src&#x2F;default.js\nexport default &#123;\n  level: &quot;log&quot;,\n  logger: console,\n  logErrors: true,\n  collapsed: undefined,\n  predicate: undefined,\n  duration: false,\n  timestamp: true,\n  stateTransformer: (state) &#x3D;&gt; state,\n  actionTransformer: (action) &#x3D;&gt; action,\n  errorTransformer: (error) &#x3D;&gt; error,\n  colors: &#123;\n    title: () &#x3D;&gt; &quot;inherit&quot;,\n    prevState: () &#x3D;&gt; &quot;#9E9E9E&quot;,\n    action: () &#x3D;&gt; &quot;#03A9F4&quot;,\n    nextState: () &#x3D;&gt; &quot;#4CAF50&quot;,\n    error: () &#x3D;&gt; &quot;#F20404&quot;,\n  &#125;,\n  diff: false,\n  diffPredicate: undefined,\n\n  &#x2F;&#x2F; Deprecated options 已废弃配置\n  transformer: undefined,\n&#125;;\n&#x2F;&#x2F; 字段释义\n&#x2F;**\n * Creates logger with following options\n * 创建日志记录器，配置如下：\n * @namespace\n * @param &#123;object&#125; options - options for logger\n * @param &#123;string | function | object&#125; options.level - console[level] 日志级别\n * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间\n * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳\n * @param &#123;object&#125; options.colors - custom colors 定制颜色\n * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现\n * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出\n * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组\n * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为\n * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换\n * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换\n * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换\n *\n * @returns &#123;function&#125; logger middleware 返回中间件\n *&#x2F;\n\n奇怪\n\n这两个配置在测试文件中，没找到相关测试代码\n\n &#x2F;&#x2F; 配置\n diff: false, &#x2F;&#x2F;\n diffPredicate: undefined,\n\n &#x2F;&#x2F; ...\n\n const diff &#x3D;\n       loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;\n         ? diffPredicate(getState, action)\n         : loggerOptions.diff;\n &#x2F;&#x2F; 打印日志中\n printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;));\n\n &#x2F;&#x2F; src&#x2F;core.js printBuffer的定义\nfunction printBuffer(buffer, options) &#123;\n   const &#123;\n     &#x2F;&#x2F; ...\n       diff,\n   &#125; &#x3D; options;\n   &#x2F;&#x2F; 如果开启\n   if (diff) &#123;\n     &#x2F;&#x2F; 执行了 diffLogger\n     diffLogger(prevState, nextState, logger, isCollapsed);\n   &#125;\n&#125;\n&#x2F;&#x2F; src&#x2F;diff.js\nexport default function diffLogger(prevState, newState, logger, isCollapsed) &#123;\n  &#x2F;&#x2F; import differ from &#39;deep-diff&#39;;计算对象差异化的包\n  const diff &#x3D; differ(prevState, newState);\n\n  try &#123;\n    if (isCollapsed) &#123;\n      logger.groupCollapsed(&#39;diff&#39;);\n    &#125; else &#123;\n      logger.group(&#39;diff&#39;);\n    &#125;\n  &#125; catch (e) &#123;\n    logger.log(&#39;diff&#39;);\n  &#125;\n  &#x2F;&#x2F; 有差异执行输出，这个差异包含类型kind E:编辑 N:新增 D:删除 A:数组\n  &#x2F;&#x2F; dictionary为对象，对kind值进行枚举\n  &#x2F;&#x2F; 遍历输出\n  if (diff) &#123;\n    diff.forEach((elem) &#x3D;&gt; &#123;\n      const &#123; kind &#125; &#x3D; elem;\n      const output &#x3D; render(elem);\n\n      logger.log(&#96;%c $&#123;dictionary[kind].text&#125;&#96;, style(kind), ...output);\n    &#125;);\n  &#125; else &#123;\n    logger.log(&#39;—— no diff ——&#39;);\n  &#125;\n\n  try &#123;\n    logger.groupEnd();\n  &#125; catch (e) &#123;\n    logger.log(&#39;—— diff end —— &#39;);\n  &#125;\n&#125;\n\n\nhelpers&#x2F;&#x2F; repeat + pad &#x3D; padLeft 左侧补零， es多少有个api\nexport const repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);\n\nexport const pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;\n&#x2F;&#x2F; 时间格式化\nexport const formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;\n\n&#x2F;&#x2F; Use performance API if it&#39;s available in order to get better precision\nexport const timer &#x3D;\n(typeof performance !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; performance !&#x3D;&#x3D; null) &amp;&amp; typeof performance.now &#x3D;&#x3D;&#x3D; &#39;function&#39; ?\n  performance :\n  Date;\n运行测试下\nconst repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);\n\nconst pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;\n\nconst formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;\n\nconsole.log(formatTime(new Date()))\n&#x2F;&#x2F; 输出\n18:58:15.667\n\n\n源码图\ndeep-diff\n看下两个对象比较的事例\n\nvar lhs &#x3D; &#123;\n\tname: &#39;my object&#39;,\n\tdescription: &#39;it\\&#39;s an object!&#39;,\n\tdetails: &#123;\n\t\tit: &#39;has&#39;,\n\t\tan: &#39;array&#39;,\n\t\twith: [&#39;a&#39;, &#39;few&#39;, &#39;elements&#39;]\n\t&#125;\n&#125;;\n\nvar rhs &#x3D; &#123;\n\tname: &#39;updated object&#39;,\n\tdescription: &#39;it\\&#39;s an object!&#39;,\n\tdetails: &#123;\n\t\tit: &#39;has&#39;,\n\t\tan: &#39;array&#39;,\n\t\twith: [&#39;a&#39;, &#39;few&#39;, &#39;more&#39;, &#39;elements&#39;, &#123; than: &#39;before&#39; &#125;]\n\t&#125;\n&#125;;\n\nvar differences &#x3D; deep.diff(lhs, rhs);\n\n\n&#x2F;&#x2F; 输出\n\n\n27 May 17:27:12 - [\n  DiffEdit &#123;\n    kind: &#39;E&#39;,\n    path: [ &#39;name&#39; ],\n    lhs: &#39;my object&#39;,\n    rhs: &#39;updated object&#39;\n  &#125;,\n  DiffArray &#123;\n    kind: &#39;A&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39; ],\n    index: 4,\n    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#123; than: &#39;before&#39; &#125; &#125;\n  &#125;,\n  DiffArray &#123;\n    kind: &#39;A&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39; ],\n    index: 3,\n    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#39;elements&#39; &#125;\n  &#125;,\n  DiffEdit &#123;\n    kind: &#39;E&#39;,\n    path: [ &#39;details&#39;, &#39;with&#39;, 2 ],\n    lhs: &#39;elements&#39;,\n    rhs: &#39;more&#39;\n  &#125;\n]\n","slug":"2022-05-27redux-logger","date":"2022-05-27T05:52:01.000Z","categories_index":"redux","tags_index":"redux,源码","author_index":"陈海龙"},{"id":"98e904a0d3e9702a10dc20a22eaad4dd","title":"vscode i18n-ally","content":"国际化\n大型公司的国际化需求很高，需要支持多语言，比如中文、英文、日文等等。\ni18n-ally是一个基于vscode的国际化工具，可以帮助你快速的实现国际化。\n\n背景\n如果经常做国际化的研发，应该很清楚，代码中写多语言，然而，多语言在项目中维护是非常困难的。\n当遇到大型项目，业务要做拆分成为微前端架构，多语言要在多个项目中维护，浪费时间不说，还可能造成不一致问题\n处理方式：\n将对应的多语言开发为npm包，在项目中引入\n拆多语言为一个应用平台，实现多项目共享，实现可视化交互（我们目前使用，自研localize平台，实现多语言管理）\n\n\n\n题外话应用平台\n\n动态生效： 修改多语言不需要重启、发布服务\n翻译管理：多人协同在线翻译\n版本管理： 记录翻译变更记录以及对应的操作人，方便定位与排错\n自动多区同步：只需在中国区修改，系统会自动同步到国外5区\n\n优点\n提示优雅，未处理的多语言会有提示\n编辑方便\n\n\n\n\n\n\nEnglish | 简体中文\n\n\n\n\n\n\n\n\n\n\n\n\nv2.0 is released with new Editor UI and Review System 🎉\n\n\n\nMigrate from v1.x\n\n\n\n\n\n\n\n\n\nMaintained by\n\n\nLokalise is the fastest growing language cloud technology made by developers, for developers.\nAs a collaborative productivity platform, it helps structure and automate the translation and localization process for any company in the world.\nLokalise是开发人员为开发人员开发的增长最快的语言云技术\n作为一个协作生产力平台，它可以帮助世界上任何公司构建和自动化翻译和本地化过程。\nLearn more\n\n\n\n\n\n\n\n📖 Docs 文档\n|\n💭 FAQ 问答\n|\n⚙️ Configs 配置\n|\n📜 Supported Formats 支持格式\n|\n🧱 Contribute 贡献\n\n\n\n\n\nInline Annotations 行内提示\n\n\nHover and Direct Actions 悬停和直接操作\n\n\nManage All Translations in One Place 在一个位置管理所有翻译\n\n\nEditor UI编辑界面 & Review System 预览系统\n\n\nExtract Translations from Code 从代码中提取翻译\n\n\nReport Missing Translations 报告缺失的翻译\n\n\nMachine Translation 机器翻译\n\n\nAnnotations for JSON and YAML 来源于JSON 和 YAML的提示\n\n\nGeneral Features\n\n\nSupports multi-root workspaces  支持多个工作空间\nSupports remote development 支持远程开发\nSupports numerous popular frameworks 支持多种流行框架\nSupports linked locale messages 链接的区域设置消息\nUses i18n for the extension itself, of course. 当然，将i18n用于扩展本身。 Translation List 翻译列表\n\n🌍 Multilingual Support 多语言支持This extension itself supports i18n as well. It will be auto-matched to the display language you use in your VS Code editor. We currently support the following languages.这个扩展支持多语言。它将自动匹配到你在VS Code编辑器中使用的语言。我们目前支持的语言有：\n\n\n\nLanguage\nMaintainer\nContributors\n\n\n\nEnglish   英语\n@antfu\n@rubjo, @EdRands\n\n\nSimplified Chinese (简体中文)\n@antfu\n\n\n\nTraditional Chinese (繁體中文)\n@antfu\n\n\n\nNorwegian (Norsk) 挪威语\n\n@rubjo\n\n\nSpanish (Español) 西班牙的\n\n@Baltimer\n\n\nJapanese (日本語) 日语\n\n@isdh\n\n\nDutch (Nederlands) 荷兰语\n\n@Niekvdm, @Excalibaard\n\n\nPortuguese (Brazilian) 葡萄牙语\n\n@Ibcs16\n\n\nFrench (Français) 法语\n\n@Nicoxx45, @eri\n\n\nSwedish (Svenska)瑞典语\n@vladdeSV\n\n\n\nUkrainian (Українська) 乌克兰语\n\n@uhodav\n\n\nRussian (Русский) 俄语\n\n@uhodav\n\n\nGerman (Deutsch) 德语\n@alexanderniebuhr\n\n\n\nTurkish (Türkçe) 土耳其语\n\n@eri\n\n\n帮忙翻译\n\n\n\n\n\n\n\n\n\n👨‍💻 如果您想帮助一种语言的翻译更新，请在维护者字段中输入您的姓名。我会在需要的时候提到你。非常感谢。\n❤️ 感谢此插件的灵感来源于think2011&#x2F;vscode-vue-i18n. 如果没有@think2011,i18n-ally不会存在\n对Vue单文件组件（SFC）的支持由[kazupon&#x2F;Vue-i18n-locale-message]提供支持(https://github.com/kazupon/vue-i18n-locale-message)，它是由vue-i18n的作者创建的。谢谢你做这个！\n代码共享者非常感谢所有杰出的贡献者：\n协议MIT License © 2019-PRESENT Anthony Fu\nMIT License © 2018-2019 think2011\n安装Visual Studio Code&gt;Other&gt;i18n Ally\n使用参考资料github 官网\n","slug":"2022-05-27i18n","date":"2022-05-27T02:47:24.000Z","categories_index":"","tags_index":"工具,增效,vscode","author_index":"陈海龙"},{"id":"ef136ce7ac94dd6f9c2f35712eef1e47","title":"redux-thunk源码","content":"源码版本v2.4.1\n用途\n通过redux源码applyMiddleware了解到，是对store.dispatch进行增强\n可以接受一个返回函数的action creator。如果这个action creator 返回的是一个函数，就执行它，如果不是，就按照原来的next(action)执行。\n可以在这个函数中执行一些异步的操作\n\nexport function addCount() &#123;\n  return &#123;type: ADD_COUNT&#125;\n&#125; \nexport function addCountAsync() &#123;\n  return dispatch &#x3D;&gt; &#123; &#x2F;&#x2F; dispatch对应源码的 ： action(dispatch, getState, extraArgument);的第一个参数\n    setTimeout( () &#x3D;&gt; &#123;\n      dispatch(addCount())\n    &#125;,2000)\n  &#125;\n&#125;\n\n\naddCountAsync函数就返回了一个函数，将dispatch作为函数的第一个参数传递进去，在函数内进行异步操作就可以了。\n\npackage.json\n这个文件结构与redux、react-redux相比，没有什么特别之处，这里及以后如无必要不在进行阅读\n简单扫一眼就好\n\n源码&#x2F;** A function that accepts a potential &quot;extra argument&quot; value to be injected later,\n * and returns an instance of the thunk middleware that uses that value\n *&#x2F;\n&#x2F;** 一个函数接收一个可能的&quot;extra argument&quot;值，并返回一个thunk中间件，它使用这个值 *&#x2F;\nfunction createThunkMiddleware&lt;\n  State &#x3D; any,\n  BasicAction extends Action &#x3D; AnyAction,\n  ExtraThunkArg &#x3D; undefined\n&gt;(extraArgument?: ExtraThunkArg) &#123;\n  &#x2F;&#x2F; Standard Redux middleware definition pattern:\n  &#x2F;&#x2F; 标准Redux中间件定义模式:\n  &#x2F;&#x2F; See: https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#writing-custom-middleware\n  const middleware: ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt; &#x3D;\n    (&#123; dispatch, getState &#125;) &#x3D;&gt; (next) &#x3D;&gt;  (action) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; The thunk middleware looks for any functions that were passed to &#96;store.dispatch&#96;.\n      &#x2F;&#x2F; If this &quot;action&quot; is really a function, call it and return the result.\n      &#x2F;&#x2F; 这个thunk中间件会查找store.dispatch传入的任何函数。如果这个&quot;action&quot;是一个函数，调用它并返回结果。\n      if (typeof action &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;\n        &#x2F;&#x2F; Inject the store&#39;s &#96;dispatch&#96; and &#96;getState&#96; methods, as well as any &quot;extra arg&quot;\n        &#x2F;&#x2F; 注入store的dispatch和getState方法，以及任意的&quot;extra arg&quot;\n        return action(dispatch, getState, extraArgument);\n      &#125;\n      &#x2F;&#x2F; 否则，像往常一样将操作传递给中间件链\n      &#x2F;&#x2F; Otherwise, pass the action down the middleware chain as usual\n      return next(action);\n    &#125;;\n  return middleware;\n&#125;\n中间件模式\n柯里化：将一个函数的参数分解成多个参数，并且返回一个新的函数，这个新的函数可以被调用，并且返回原函数的结果。\nconst anotherExampleMiddleware &#x3D; storeAPI &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;\n  &#x2F;&#x2F; Do something in here, when each action is dispatched\n\n  return next(action)\n&#125;\nstoreAPI\n&#x2F;&#x2F; storeAPI\n\nconst store &#x3D; &#123;\n  dispatch: dispatch as Dispatch&lt;A&gt;,\n  subscribe,\n  getState,\n  replaceReducer,\n  [$$observable]: observable\n&#125; as unknown as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext\n工厂模式\n\nconst thunk &#x3D; createThunkMiddleware() as ThunkMiddleware &amp; &#123;\n  withExtraArgument&lt;\n    ExtraThunkArg,\n    State &#x3D; any,\n    BasicAction extends Action &#x3D; AnyAction\n  &gt;(\n    extraArgument: ExtraThunkArg\n  ): ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt;\n&#125;\n\n&#x2F;&#x2F; Attach the factory function so users can create a customized version\n&#x2F;&#x2F; with whatever &quot;extra arg&quot; they want to inject into their thunks\n&#x2F;&#x2F; 尝试将工厂函数附加到用户可以创建任何额外的&quot;extra arg&quot;的thunk中间件\nthunk.withExtraArgument &#x3D; createThunkMiddleware\n\nexport default thunk\n参考redux-thunk源码Redux中间件之redux-thunk使用详解\n","slug":"2022-05-27redux-thunk","date":"2022-05-27T01:21:50.000Z","categories_index":"redux","tags_index":"redux,源码,redux-thunk","author_index":"陈海龙"},{"id":"33a4c09d5b272c8b61a9dda679d7a5e9","title":"npm 包发布相关","content":"npm 包发布npm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; \nnpm notice name:          @tutu-fe&#x2F;wiki-ui                        \nnpm notice version:       0.1.1-beta                              \nnpm notice filename:      @tutu-fe&#x2F;wiki-ui-0.1.1-beta.tgz         \nnpm notice package size:  85.7 kB                                 \nnpm notice unpacked size: 449.9 kB                                \nnpm notice shasum:        973f5eb8d74de04c34b8e9c94536f8924b1f9570\nnpm notice integrity:     sha512-Uyo3zS0eaMOYE[...]60Ywmrmb&#x2F;brxQ&#x3D;&#x3D;\nnpm notice total files:   205                                     \nnpm notice \nnpm ERR! code E403\nnpm ERR! 403 403 Forbidden - PUT https:&#x2F;&#x2F;registry- - [maintainers_error] haotian.chen does not in maintainer list\nnpm ERR! 403 In most cases, you or one of your dependencies are requesting\nnpm ERR! 403 a package version that is forbidden by your security policy, or\nnpm ERR! 403 on a server you do not have access to.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     &#x2F;Users&#x2F;haotian&#x2F;.npm&#x2F;_logs&#x2F;2022-04-28T09_58_10_365Z-debug.log\n\n\n配置package.json&quot;maintainers&quot;: [\n  &quot;davishua&quot;,å\n  &quot;haotian.chen&quot;\n],\n\n\n结果\n","slug":"2022-04-28npm","date":"2022-05-26T14:12:56.671Z","categories_index":"npm","tags_index":"npm","author_index":"陈海龙"},{"id":"0539c4f1e60b889c5708d72373a67061","title":"企业微信： 图片附件无法预览的问题","content":"\n\n背景：安卓预览正常，部分iOS预览有问题（大部分手机都是正常的）downloadAttachment(downloadUrl).then(res &#x3D;&gt; &#123;\n      if (getWechatUserAgent(navigator.userAgent)) &#123; &#x2F;&#x2F; 判断是企业微信\n        const blob &#x3D; new Blob([res]);\n        wx.previewFile(&#123;\n          url: location.origin + downloadUrl, &#x2F;&#x2F; 需要预览文件的地址(必填，可以使用相对路径)\n          name: attachment.name, &#x2F;&#x2F; 需要预览文件的文件名，必须有带文件格式的后缀，例如.doc(不填的话取url的最后部分，最后部分是个包含格式后缀的文件名)\n          size: blob.size &#x2F;&#x2F; 需要预览文件的字节大小(必填，而且大小必须正确，否则会打开失败)\n        &#125;);\n        Toast.loading(i18n.loading, false)\n        return\n      &#125;\n      var reader &#x3D; new FileReader();\n      reader.readAsDataURL(res);   &#x2F;&#x2F; 转换为base64，可以直接放入a标签href\n      reader.onload &#x3D; function (e) &#123;\n        const anchorEle &#x3D; document.createElement(&#39;a&#39;)\n        document.body.appendChild(anchorEle)\n        anchorEle.href &#x3D; e?.target?.result as any\n        anchorEle.download &#x3D; attachment.name\n        anchorEle.click()\n        document.body.removeChild(anchorEle)\n      &#125;\n      Toast.loading(i18n.loading, false)\n    &#125;).catch(() &#x3D;&gt; &#123;\n      Toast.loading(i18n.loading, false)\n    &#125;)\n自研移动端、web端、企业微信桌面端都没问题，当然喽，每一个端展示效果是不一样的，代码也不一样。排查了耗费一定时间。\n\n\n排查 企业微信版本， 比对后发现，和正常使用的微信版本一致\n排查手机版本不一致，客户iphone12和 系统版本15.1，我们开发人员是14.+，所以我把我的手机升级到最新，我的手机升级后是正常的，那么可能是数据问题，数据\n排查数据，这是老系统的数据，和新系统数据走不同的业务代码，经排查也没问题\n排查size如果不准确也会出现上述问题，由于预发环境获取票据的信息与线上是不一致的，所以无法在预发进行排查，能做的事保证代码执行到 const blob = new Blob([res]);，并且能够获取到正确的size，所以进行了alert调试，这个在手机上比较直观，当然也可以vconsole【暂不考虑,因为之前开发人员没加，部门被砍掉，很多人被裁员了，所有项目都我来维护，没时间，不整了】，调试结果是size: 88214,各个手机都一样，用户手机也是88214，故排除size\n最后可能问题在于，用户手机上版本与手机不匹配，有兼容性bug，尝试升级企业微信，最后解决\n\n\n\n总结：如果考虑直接升级用户app版本，或许在第三步就解决问题了，我的iphoneX也不用升级到15.3了\n","slug":"2022-04-19wework-preview","date":"2022-05-26T14:12:56.670Z","categories_index":"WeWork","tags_index":"WeWork","author_index":"陈海龙"},{"id":"5df43a7a7d0a76be0dcfbc13fca3f3d6","title":"js 代码注释","content":"代码注释//这种js注释代码在vscode其他地方引用时候，没有提示， 如果需要有提示，需要写成/** 提示 **/\n写法1\nexport enum ELeaveType &#123;\n  MATERNITY_ &#x3D; 17, &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),\n&#125;\n写法2\nexport enum ELeaveType &#123;\n  &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),\n  MATERNITY_ &#x3D; 17, \n&#125;\n\n有提示注释写法export enum ELeaveType &#123;\n...\n  &#x2F;**&quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),**&#x2F;\n  MATERNITY_ &#x3D; 17, \n...\n&#125;\n\n\n","slug":"2022-05-26code","date":"2022-05-26T07:31:20.000Z","categories_index":"code","tags_index":"code","author_index":"陈海龙"},{"id":"da6549350c9a9d927d67bdb10bc76a3c","title":"redux 源码 2","content":"redux 简介Predictable state container for JavaScript apps\n字面意思\njs应用可预测状态容器\n\n怎么用，为什么用看官网。。。\ncreateStore代码注释如下\n\nredux store持有state树，唯一可以改变store中数据的方式是dispatch\n在你的app中应该有唯一一个store.为了区分不同部分响应操作的的状态树，可以将几个reducer通过combinereducers合并为一个reducer\n一个根据当前state和行为返回新state的函数\n初始state，\nstore中间件。可以使用第三方中间件增强store\nredux store 可以读取state，dispatch行为，订阅改变\n\n\n&#x2F;**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call &#96;dispatch()&#96; on it.\n * \n * redux store持有state树，唯一可以改变store中数据的方式是dispatch\n * \n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using &#96;combineReducers&#96;.\n *\n * 在你的app中应该有唯一一个store.为了区分不同部分响应操作的的状态树，可以将几个reducer通过combinereducers合并为一个reducer\n * \n * @param reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n * \n * 一个根据当前state和行为返回新state的函数\n *\n * @param preloadedState The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use &#96;combineReducers&#96; to produce the root reducer function, this must be\n * an object with the same shape as &#96;combineReducers&#96; keys.\n *\n * 初始state，\n * \n * @param enhancer The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is &#96;applyMiddleware()&#96;.\n *\n * store中间件。可以使用第三方中间件增强store\n * \n * @returns A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n * \n * redux store 可以读取state，dispatch行为，订阅改变\n *&#x2F;\n函数声明\nexport default function createStore&lt;\n  S,\n  A extends Action,\n  Ext &#x3D; &#123;&#125;,\n  StateExt &#x3D; never\n&gt;(\n  reducer: Reducer&lt;S, A&gt;, &#x2F;&#x2F; reducer\n  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;&#x2F;&#x2F; 中间件\n): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext\n\nexport default function createStore&lt;\n  S,\n  A extends Action,\n  Ext &#x3D; &#123;&#125;,\n  StateExt &#x3D; never\n&gt;(\n  reducer: Reducer&lt;S, A&gt;, &#x2F;&#x2F; reducer\n  preloadedState?: PreloadedState&lt;S&gt;, &#x2F;&#x2F; &#x2F;&#x2F;初始状态\n  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt; &#x2F;&#x2F; 中间件\n): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext\n\nexport default function createStore&lt;\n  S,\n  A extends Action,\n  Ext &#x3D; &#123;&#125;,\n  StateExt &#x3D; never\n&gt;(\n  reducer: Reducer&lt;S, A&gt;,&#x2F;&#x2F; reducer\n  preloadedState?: PreloadedState&lt;S&gt; | StoreEnhancer&lt;Ext, StateExt&gt;, &#x2F;&#x2F;初始状态\n  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;&#x2F;&#x2F; 中间件\n\n  &#x2F;&#x2F; 这里可以看到 preloadedState的参数| StoreEnhancer&lt;Ext, StateExt&gt; 与 enhancer类型一致， 这里处理第二参数可能是 enhancer\n  &#x2F;&#x2F; 代码主体分有做判断：\n  &#x2F;&#x2F; if (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n  &#x2F;&#x2F;   enhancer &#x3D; preloadedState as StoreEnhancer&lt;Ext, StateExt&gt;\n  &#x2F;&#x2F;   preloadedState &#x3D; undefined\n  &#x2F;&#x2F; &#125; \n\n): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext &#123;&#125;\ncreateStore 主体代码\n\n一些入参校验\n\nif (\n  (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;function&#39;) ||\n  (typeof enhancer &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof arguments[3] &#x3D;&#x3D;&#x3D; &#39;function&#39;)\n) &#123;\n  throw new Error(\n    &#39;It looks like you are passing several store enhancers to &#39; +\n      &#39;createStore(). This is not supported. Instead, compose them &#39; +\n      &#39;together to a single function. See https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#creating-a-store-with-enhancers for an example.&#39;\n  )\n&#125;\n\nif (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n  enhancer &#x3D; preloadedState as StoreEnhancer&lt;Ext, StateExt&gt;\n  preloadedState &#x3D; undefined\n&#125;\n\nif (typeof enhancer !&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n  if (typeof enhancer !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    throw new Error(\n      &#96;Expected the enhancer to be a function. Instead, received: &#39;$&#123;kindOf(\n        enhancer\n      )&#125;&#39;&#96;\n    )\n  &#125;\n\n  return enhancer(createStore)(\n    reducer,\n    preloadedState as PreloadedState&lt;S&gt;\n  ) as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext\n&#125;\n\nif (typeof reducer !&#x3D;&#x3D; &#39;function&#39;) &#123;\n  throw new Error(\n    &#96;Expected the root reducer to be a function. Instead, received: &#39;$&#123;kindOf(\n      reducer\n    )&#125;&#39;&#96;\n  )\n&#125;\n\n&#x2F;&#x2F; 当前reducer\nlet currentReducer &#x3D; reducer\n&#x2F;&#x2F; 当前状态\nlet currentState &#x3D; preloadedState as S\n&#x2F;&#x2F; 当前订阅\nlet currentListeners: (() &#x3D;&gt; void)[] | null &#x3D; []\n&#x2F;&#x2F; 新的订阅\nlet nextListeners &#x3D; currentListeners\nlet isDispatching &#x3D; false\n\n\n\n&#x2F;**\n * This makes a shallow copy of currentListeners so we can use\n * nextListeners as a temporary list while dispatching.\n *\n * This prevents any bugs around consumers calling\n * subscribe&#x2F;unsubscribe in the middle of a dispatch.\n *&#x2F;\n&#x2F;&#x2F; 浅拷贝当前currentListeners得到 nextListeners 用于 dispatching   \n\n&#x2F;&#x2F; 确定新的可变监听\nfunction ensureCanMutateNextListeners() &#123;\n  。。。\n&#125;\n\n&#x2F;&#x2F; 获取store的状态\nfunction getState(): S &#123;\n  。。。\n&#125;\n&#x2F;&#x2F; 传入监听，返回监听移除的函数\nfunction subscribe(listener: () &#x3D;&gt; void) &#123;\n  。。。\n\n  return function unsubscribe() &#123;\n    。。。。\n  &#125;\n&#125;\n\n\nfunction dispatch(action: A) &#123;\n  。。。\n&#125;\n\n&#x2F;&#x2F; 用于同构更新reducer\nfunction replaceReducer&lt;NewState, NewActions extends A&gt;(\n  nextReducer: Reducer&lt;NewState, NewActions&gt;\n): Store&lt;ExtendState&lt;NewState, StateExt&gt;, NewActions, StateExt, Ext&gt; &amp; Ext &#123;\n  。。。\n&#125;\n\n&#x2F;**\n * Interoperability point for observable&#x2F;reactive libraries.\n * @returns A minimal observable of state changes.\n * For more information, see the observable proposal:\n * https:&#x2F;&#x2F;github.com&#x2F;tc39&#x2F;proposal-observable\n *&#x2F;\n&#x2F;&#x2F; 实现小型观察状态变更\nfunction observable() &#123;\n  。。。\n&#125;\n&#x2F;&#x2F; 当store被创建，初始化操作会被dispatch，，每个reducer会返回最初的state. 有效地填充初始状态树。\ndispatch(&#123; type: ActionTypes.INIT &#125; as A)\n\n\nconst store &#x3D; &#123;\n  dispatch: dispatch as Dispatch&lt;A&gt;,\n  subscribe,\n  getState,\n  replaceReducer,\n  [$$observable]: observable\n&#125; as unknown as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext\n\nreturn store &#x2F;&#x2F; store上的api我们又熟悉了\n\n\nensureCanMutateNextListeners\n\n浅拷贝当前currentListeners得到 nextListeners 用于 dispatching\n\nfunction ensureCanMutateNextListeners() &#123;\n  if (nextListeners &#x3D;&#x3D;&#x3D; currentListeners) &#123;\n    nextListeners &#x3D; currentListeners.slice()\n  &#125;\n&#125;\n\n\n\ngetState\n\n获取store的状态\n\nfunction getState(): S &#123;\n  if (isDispatching) &#123;\n    throw new Error(\n      &#39;You may not call store.getState() while the reducer is executing. &#39; +\n        &#39;The reducer has already received the state as an argument. &#39; +\n        &#39;Pass it down from the top reducer instead of reading it from the store.&#39;\n    )\n  &#125;\n\n  return currentState as S\n&#125;\nsubscribe\n&#x2F;**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call &#96;getState()&#96; to read the current state tree inside the callback.\n   *\n   * You may call &#96;dispatch()&#96; from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every &#96;dispatch()&#96; call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the &#96;dispatch()&#96; that is currently in progress.\n   * However, the next &#96;dispatch()&#96; call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested &#96;dispatch()&#96; before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the &#96;dispatch()&#96; started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   *&#x2F;\n  &#x2F;&#x2F; 上述注释\n  &#x2F;** 添加一个监听，在action被触发时候会调用，state会进行更新，在回调中可以用getState方法获取当前状态树\n   * 两个注意：订阅的是在每个dispatch之前的快照，\n   * 1.\n   * 订阅是在每次&#39;dispatch（）&#39;调用之前进行快照的。\n   * 如果在调用侦听器时订阅或取消订阅，这将不会对当前正在进行的“dispatch（）”产生任何影响。\n   * 但是，下一个&#39;dispatch（）&#39;调用（无论是否嵌套）将使用订阅列表的最新快照。\n   * 2。\n   * 监听器不应该期望看到所有的状态更改，因为在调用监听器之前，状态可能在嵌套的&#39;dispatch（）&#39;期间被多次更新。\n   * 但是，可以保证在“dispatch（）”启动之前注册的所有订阅者在退出时都将以最新状态调用。\n   * *&#x2F;\n  function subscribe(listener: () &#x3D;&gt; void) &#123;\n    if (typeof listener !&#x3D;&#x3D; &#39;function&#39;) &#123;\n      throw new Error(\n        &#96;Expected the listener to be a function. Instead, received: &#39;$&#123;kindOf(\n          listener\n        )&#125;&#39;&#96;\n      )\n    &#125;\n\n    if (isDispatching) &#123;\n      throw new Error(\n        &#39;You may not call store.subscribe() while the reducer is executing. &#39; +\n          &#39;If you would like to be notified after the store has been updated, subscribe from a &#39; +\n          &#39;component and invoke store.getState() in the callback to access the latest state. &#39; +\n          &#39;See https:&#x2F;&#x2F;redux.js.org&#x2F;api&#x2F;store#subscribelistener for more details.&#39;\n      )\n    &#125;\n\n    let isSubscribed &#x3D; true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener) &#x2F;&#x2F; 增加\n\n    return function unsubscribe() &#123;\n      if (!isSubscribed) &#123;\n        return\n      &#125;\n\n      if (isDispatching) &#123;\n        throw new Error(\n          &#39;You may not unsubscribe from a store listener while the reducer is executing. &#39; +\n            &#39;See https:&#x2F;&#x2F;redux.js.org&#x2F;api&#x2F;store#subscribelistener for more details.&#39;\n        )\n      &#125;\n\n      isSubscribed &#x3D; false\n\n      ensureCanMutateNextListeners()\n      const index &#x3D; nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1) &#x2F;&#x2F; 移除\n      currentListeners &#x3D; null\n    &#125;\n  &#125;\n\ndispatch\n&#x2F;**\n * Dispatches an action. It is the only way to trigger a state change.\n *\n * The &#96;reducer&#96; function, used to create the store, will be called with the\n * current state tree and the given &#96;action&#96;. Its return value will\n * be considered the **next** state of the tree, and the change listeners\n * will be notified.\n *\n * The base implementation only supports plain object actions. If you want to\n * dispatch a Promise, an Observable, a thunk, or something else, you need to\n * wrap your store creating function into the corresponding middleware. For\n * example, see the documentation for the &#96;redux-thunk&#96; package. Even the\n * middleware will eventually dispatch plain object actions using this method.\n *\n * @param action A plain object representing “what changed”. It is\n * a good idea to keep actions serializable so you can record and replay user\n * sessions, or use the time travelling &#96;redux-devtools&#96;. An action must have\n * a &#96;type&#96; property which may not be &#96;undefined&#96;. It is a good idea to use\n * string constants for action types.\n *\n * @returns For convenience, the same action object you dispatched.\n *\n * Note that, if you use a custom middleware, it may wrap &#96;dispatch()&#96; to\n * return something else (for example, a Promise you can await).\n *&#x2F;\nfunction dispatch(action: A) &#123;\n  if (!isPlainObject(action)) &#123; &#x2F;&#x2F; 只能是简单的对象\n    throw new Error(\n      &#96;Actions must be plain objects. Instead, the actual type was: &#39;$&#123;kindOf(\n        action\n      )&#125;&#39;. You may need to add middleware to your store setup to handle dispatching other values, such as &#39;redux-thunk&#39; to handle dispatching functions. See https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#middleware and https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-6-async-logic#using-the-redux-thunk-middleware for examples.&#96;\n    )\n  &#125;\n\n  if (typeof action.type &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n    throw new Error(\n      &#39;Actions may not have an undefined &quot;type&quot; property. You may have misspelled an action type string constant.&#39;\n    )\n  &#125;\n\n  if (isDispatching) &#123;\n    throw new Error(&#39;Reducers may not dispatch actions.&#39;)\n  &#125;\n\n  try &#123;\n    isDispatching &#x3D; true\n    currentState &#x3D; currentReducer(currentState, action) &#x2F;&#x2F; 传入当前状态和操作，返回新的状态\n  &#125; finally &#123;\n    isDispatching &#x3D; false\n  &#125;\n\n  const listeners &#x3D; (currentListeners &#x3D; nextListeners) &#x2F;&#x2F; 触发更新\n  for (let i &#x3D; 0; i &lt; listeners.length; i++) &#123;\n    const listener &#x3D; listeners[i]\n    listener()\n  &#125;\n\n  return action\n&#125;\ncombineReducers\n使用时候以键值对形式存在\n\n使用\nimport useInfoReducer from &#39;.&#x2F;userInfo&#39;\nimport recordReducer from &#39;.&#x2F;record&#39;\n\nconst rootReducer &#x3D; combineReducers(&#123;\n  useInfoReducer,\n  recordReducer\n&#125;)\n\nconst store &#x3D; createStore(rootReducer)\n\n源码\n\n返回不期望的state型警告信息\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState: object,\n  reducers: ReducersMapObject,\n  action: Action,\n  unexpectedKeyCache: &#123; [key: string]: true &#125;\n) &#123;\n  const reducerKeys &#x3D; Object.keys(reducers)\n  const argumentName &#x3D;\n    action &amp;&amp; action.type &#x3D;&#x3D;&#x3D; ActionTypes.INIT\n      ? &#39;preloadedState argument passed to createStore&#39;\n      : &#39;previous state received by the reducer&#39;\n\n  if (reducerKeys.length &#x3D;&#x3D;&#x3D; 0) &#123;\n    return (\n      &#39;Store does not have a valid reducer. Make sure the argument passed &#39; +\n      &#39;to combineReducers is an object whose values are reducers.&#39;\n    )\n  &#125;\n\n  if (!isPlainObject(inputState)) &#123;\n    return (\n      &#96;The $&#123;argumentName&#125; has unexpected type of &quot;$&#123;kindOf(\n        inputState\n      )&#125;&quot;. Expected argument to be an object with the following &#96; +\n      &#96;keys: &quot;$&#123;reducerKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot;&#96;\n    )\n  &#125;\n\n  const unexpectedKeys &#x3D; Object.keys(inputState).filter(\n    key &#x3D;&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key &#x3D;&gt; &#123;\n    unexpectedKeyCache[key] &#x3D; true\n  &#125;)\n\n  if (action &amp;&amp; action.type &#x3D;&#x3D;&#x3D; ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length &gt; 0) &#123;\n    return (\n      &#96;Unexpected $&#123;unexpectedKeys.length &gt; 1 ? &#39;keys&#39; : &#39;key&#39;&#125; &#96; +\n      &#96;&quot;$&#123;unexpectedKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot; found in $&#123;argumentName&#125;. &#96; +\n      &#96;Expected to find one of the known reducer keys instead: &#96; +\n      &#96;&quot;$&#123;reducerKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot;. Unexpected keys will be ignored.&#96;\n    )\n  &#125;\n&#125;\n &#x2F;&#x2F; 对 reducer型进行断言\nfunction assertReducerShape(reducers: ReducersMapObject) &#123;\n  Object.keys(reducers).forEach(key &#x3D;&gt; &#123;\n    const reducer &#x3D; reducers[key]\n    const initialState &#x3D; reducer(undefined, &#123; type: ActionTypes.INIT &#125;)\n\n    if (typeof initialState &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n      throw new Error(\n         &#x2F;&#x2F; 初始化initialState时候可以用null,但是不可以用undefined\n        &#96;The slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined during initialization. &#96; +\n          &#96;If the state passed to the reducer is undefined, you must &#96; +\n          &#96;explicitly return the initial state. The initial state may &#96; +\n          &#96;not be undefined. If you don&#39;t want to set a value for this reducer, &#96; +\n          &#96;you can use null instead of undefined.&#96;\n      )\n    &#125;\n\n    if (\n      typeof reducer(undefined, &#123;\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      &#125;) &#x3D;&#x3D;&#x3D; &#39;undefined&#39;\n    ) &#123;\n      throw new Error( \n        &#x2F;&#x2F; 1.随机类型&#x2F; redux&#x2F;*类型 的操作类型为redux私有，不允许使用 \n        &#x2F;&#x2F; 2.初始化状态不可以是undefined, \n        &#x2F;&#x2F; 3.新状态如果是undefined的，必须返回初始状态\n        &#96;The slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined when probed with a random type. &#96; +\n          &#96;Don&#39;t try to handle &#39;$&#123;ActionTypes.INIT&#125;&#39; or other actions in &quot;redux&#x2F;*&quot; &#96; +\n          &#96;namespace. They are considered private. Instead, you must return the &#96; +\n          &#96;current state for any unknown actions, unless it is undefined, &#96; +\n          &#96;in which case you must return the initial state, regardless of the &#96; +\n          &#96;action type. The initial state may not be undefined, but can be null.&#96;\n      )\n    &#125;\n  &#125;)\n&#125;\n\n&#x2F;&#x2F; combineReducers的实现，其实就是将多个值，合并在一个对象中\nexport default function combineReducers(reducers: ReducersMapObject) &#123;\n  const reducerKeys &#x3D; Object.keys(reducers)\n  const finalReducers: ReducersMapObject &#x3D; &#123;&#125;\n  for (let i &#x3D; 0; i &lt; reducerKeys.length; i++) &#123;\n    const key &#x3D; reducerKeys[i]\n\n    if (typeof reducers[key] &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;\n      finalReducers[key] &#x3D; reducers[key]\n    &#125;\n  &#125;\n  const finalReducerKeys &#x3D; Object.keys(finalReducers)\n\n  &#x2F;&#x2F; This is used to make sure we don&#39;t warn about the same\n  &#x2F;&#x2F; keys multiple times.\n  &#x2F;&#x2F;这用于确保我们不会多次警告相同的key。\n  let unexpectedKeyCache: &#123; [key: string]: true &#125;\n\n  return function combination(\n    state: StateFromReducersMapObject&lt;typeof reducers&gt; &#x3D; &#123;&#125;,\n    action: AnyAction\n  ) &#123;\n    &#x2F;&#x2F;校验信息...\n\n    let hasChanged &#x3D; false\n    const nextState: StateFromReducersMapObject&lt;typeof reducers&gt; &#x3D; &#123;&#125;\n    for (let i &#x3D; 0; i &lt; finalReducerKeys.length; i++) &#123;\n      const key &#x3D; finalReducerKeys[i]\n      &#x2F;&#x2F; reducer\n      const reducer &#x3D; finalReducers[key]\n      &#x2F;&#x2F; 之前状态\n      const previousStateForKey &#x3D; state[key]\n      &#x2F;&#x2F; 新状态\n      const nextStateForKey &#x3D; reducer(previousStateForKey, action)\n\n\n\n      if (typeof nextStateForKey &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;\n        const actionType &#x3D; action &amp;&amp; action.type\n        throw new Error(\n          &#96;When called with an action of type $&#123;\n            actionType ? &#96;&quot;$&#123;String(actionType)&#125;&quot;&#96; : &#39;(unknown type)&#39;\n          &#125;, the slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined. &#96; +\n            &#96;To ignore an action, you must explicitly return the previous state. &#96; +\n            &#96;If you want this reducer to hold no value, you can return null instead of undefined.&#96;\n        )\n      &#125;\n      nextState[key] &#x3D; nextStateForKey\n      &#x2F;&#x2F; 判断是否发生更新\n      hasChanged &#x3D; hasChanged || nextStateForKey !&#x3D;&#x3D; previousStateForKey\n    &#125;\n    hasChanged &#x3D;\n      hasChanged || finalReducerKeys.length !&#x3D;&#x3D; Object.keys(state).length\n      &#x2F;&#x2F; 更新返回新的状态，否则返回之前状态\n    return hasChanged ? nextState : state\n  &#125;\n&#125;\n\n\nbindActionCreators\n给action包裹层dispatch\naction有两种类型： 函数、键值对\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator&lt;any&gt; | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) &#123;\n  &#x2F;&#x2F; 函数类型直接bindActionCreator返回\n  if (typeof actionCreators &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;\n    return bindActionCreator(actionCreators, dispatch)\n  &#125;\n\n  if (typeof actionCreators !&#x3D;&#x3D; &#39;object&#39; || actionCreators &#x3D;&#x3D;&#x3D; null) &#123;\n    throw new Error(\n      &#96;bindActionCreators expected an object or a function, but instead received: &#39;$&#123;kindOf(\n        actionCreators\n      )&#125;&#39;. &#96; +\n        &#96;Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?&#96;\n    )\n  &#125;\n\n  const boundActionCreators: ActionCreatorsMapObject &#x3D; &#123;&#125;\n  &#x2F;&#x2F; 对象遍历调用bindActionCreator\n  for (const key in actionCreators) &#123;\n    const actionCreator &#x3D; actionCreators[key]\n    if (typeof actionCreator &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;\n      boundActionCreators[key] &#x3D; bindActionCreator(actionCreator, dispatch)\n    &#125;\n  &#125;\n  return boundActionCreators\n&#125;\n使用及测试代码见\nredux/test/typescript/actionCreators.ts\nbindActionCreator\n&#x2F;&#x2F; 作用是每个actionCreator增加一个dispatch包裹\nfunction bindActionCreator&lt;A extends AnyAction &#x3D; AnyAction&gt;(\n  actionCreator: ActionCreator&lt;A&gt;,\n  dispatch: Dispatch\n) &#123;\n  return function (this: any, ...args: any[]) &#123;\n    return dispatch(actionCreator.apply(this, args)) &#x2F;&#x2F; 主要代码\n  &#125;\n&#125;\n\n\n\n\napplyMiddleware\n中间件\n对store能力进行增强\n\nexport default function applyMiddleware(\n  ...middlewares: Middleware[]\n): StoreEnhancer&lt;any&gt; &#123;\n  return (createStore: StoreEnhancerStoreCreator) &#x3D;&gt;\n    &lt;S, A extends AnyAction&gt;(\n      reducer: Reducer&lt;S, A&gt;,\n      preloadedState?: PreloadedState&lt;S&gt;\n    ) &#x3D;&gt; &#123;\n      const store &#x3D; createStore(reducer, preloadedState)\n\n\n      &#x2F;&#x2F; 声明\n      let dispatch: Dispatch &#x3D; () &#x3D;&gt; &#123;\n        throw new Error(\n          &#39;Dispatching while constructing your middleware is not allowed. &#39; +\n            &#39;Other middleware would not be applied to this dispatch.&#39;\n        )\n      &#125;\n\n      const middlewareAPI: MiddlewareAPI &#x3D; &#123;\n        getState: store.getState,\n                                      &#x2F;&#x2F;使用上述函数进行\n        dispatch: (action, ...args) &#x3D;&gt; dispatch(action, ...args)\n      &#125;\n      &#x2F;&#x2F; 中间件数组\n      const chain &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(middlewareAPI))\n\n\n      &#x2F;&#x2F; 增强的是dispatch\n      dispatch &#x3D; compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)\n\n      return &#123;\n        ...store,\n        dispatch\n      &#125;\n    &#125;\n&#125;\n\n\n&#96;&#96;&#96;ts\n\n      const chain &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(middlewareAPI))\n      \n      dispatch &#x3D; compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)\n\n      return &#123;\n        ...store,\n        dispatch\n      &#125;\n    &#125;\n&#125;\n\ncompose\n洋葱模型\n\n使用\ncompose(f, g, h)\n(...args) &#x3D;&gt; f(g(h(...args)))\n\n源码\nexport default function compose(...funcs: Function[]) &#123;\n  &#x2F;&#x2F; 参数长度判断\n  if (funcs.length &#x3D;&#x3D;&#x3D; 0) &#123;\n    &#x2F;&#x2F; infer the argument type so it is usable in inference down the line\n    return &lt;T&gt;(arg: T) &#x3D;&gt; arg\n  &#125;\n  &#x2F;&#x2F; 长度为1\n  if (funcs.length &#x3D;&#x3D;&#x3D; 1) &#123;\n    return funcs[0]\n  &#125;\n  &#x2F;&#x2F; 主要代码一行\n  return funcs.reduce((a, b) &#x3D;&gt; (...args: any) &#x3D;&gt;  a(b(...args)))\n&#125;\n\n讲compose的文章\n这里有一篇非常好\n__DO_NOT_USE__ActionTypes\n一些私有的action被redux保留，对于不明确的action，必须返回当前state.\n如果当前状态是undefined,必须返回初始状态\n不要在代码中直接涉及这些action\n\nconst ActionTypes &#x3D; &#123;\n  INIT: &#96;@@redux&#x2F;INIT$&#123;&#x2F;* #__PURE__ *&#x2F; randomString()&#125;&#96;,\n  REPLACE: &#96;@@redux&#x2F;REPLACE$&#123;&#x2F;* #__PURE__ *&#x2F; randomString()&#125;&#96;,\n  PROBE_UNKNOWN_ACTION: () &#x3D;&gt; &#96;@@redux&#x2F;PROBE_UNKNOWN_ACTION$&#123;randomString()&#125;&#96;\n&#125;\n\n\n总结\n\n回顾\n巩固\n参考最精简的Redux源码解析，看完从此再也不怕面试官Redux 源码解析github 源码\n","slug":"2022-05-25.redux2","date":"2022-05-25T13:32:54.000Z","categories_index":"redux","tags_index":"redux,源码","author_index":"陈海龙"},{"id":"af1b42282a210ca45f834a49b50349c6","title":"redux 源码 1","content":"介绍A Predictable State Container for JS Apps\npackage.json&#123;\n  &quot;name&quot;: &quot;redux&quot;,\n  &quot;version&quot;: &quot;5.0.0-alpha.0&quot;,\n  &quot;description&quot;: &quot;Predictable state container for JavaScript apps&quot;,\n\n\n  &quot;keywords&quot;: [\n    &quot;redux&quot;,\n    &quot;reducer&quot;,  &#x2F;&#x2F; reducer, redux构成组成之一\n    &quot;state&quot;,    &#x2F;&#x2F; 状态管理\n    &quot;predictable&quot;,   &#x2F;&#x2F; 可预测的\n    &quot;functional&quot;,    &#x2F;&#x2F; 纯函数的\n    &quot;immutable&quot;,     &#x2F;&#x2F; 不可变的\n    &quot;hot&quot;,\n    &quot;live&quot;,\n    &quot;replay&quot;,        &#x2F;&#x2F; 回放\n    &quot;flux&quot;,          &#x2F;&#x2F; redux对flux的改进\n    &quot;elm&quot;            &#x2F;&#x2F; Elm 是一门专注于Web前端的纯函数式语言, reducer受elm启发\n  ],\n\n\n  &#x2F;&#x2F; 入口\n  &quot;main&quot;: &quot;lib&#x2F;redux.js&quot;,\n\n\n  &#x2F;&#x2F; unpkg 是一个内容源自 npm 的全球快速 CDN, 它能以快速而简单的方式提供任意包、任意文件，通过类似这样的 URL ：unpkg.com&#x2F;:package@:version&#x2F;:file\n  &#x2F;&#x2F; 当你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux@4.0.3&#x2F;dist&#x2F;redux.min.js 是对应redux@4.0.3版本的压缩后的js文件\n  &#x2F;&#x2F; 当你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux ——根据package.json配置的unpkg, 重定向为--—&gt; https:&#x2F;&#x2F;unpkg.com&#x2F;redux@4.0.4&#x2F;dist&#x2F;redux.js , 做了两次重定向\n  &#x2F;&#x2F; 如何你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux&#x2F; (注意redux后有&#x2F;), 是一个页面\n  &quot;unpkg&quot;: &quot;dist&#x2F;redux.js&quot;, &#x2F;&#x2F; 用unpkg的裸url访问时, 指定到该文件\n\n\n  &#x2F;**\n    module\n      点击 Setting up multi-platform npm packages 查看相关介绍。\n\n      就像 main 字段一样，定义一个针对 es6 模块及语法的入口文件。\n\n      构建工具在构建项目的时候，如果发现了这个字段，会首先使用这个字段指向的文件，如果未定义，则回退到 main 字段指向的文件。\n\n      支持的工具：\n\n      rollup\n      webpack\n  **&#x2F;\n  &quot;module&quot;: &quot;es&#x2F;redux.js&quot;,\n\n\n\n&#x2F;&#x2F; TypeScript是javascript 的超集, typings&#x2F;types字段, 定义了TypeScript的入口文件\n  &quot;types&quot;: &quot;types&#x2F;index.d.ts&quot;,\n\n\n\n  &#x2F;&#x2F; 发布上传内容\n  &#x2F;&#x2F; 是一个可选字段, 用来描述作将软件包作为依赖项安装时要包含的条目, 相当于白名单, 类似.gitignore类似的语法, files字段中包含的文件不能通过.npmignore或.gitignore排除\n  &quot;files&quot;: [\n    &quot;dist&quot;,\n    &quot;lib&quot;,\n    &quot;es&quot;,\n    &quot;src&quot;,\n    &quot;types&quot;\n  ],\n  &quot;scripts&quot;: &#123;\n    ...\n  &#125;,\n  &#x2F;&#x2F; 表示在生产环境下使用该依赖, 对应 npm install xx -S 或 npm install xx --save\n  &quot;dependencies&quot;: &#123;\n    &quot;@babel&#x2F;runtime&quot;: &quot;^7.16.7&quot;\n  &#125;,\n  &#x2F;&#x2F; 表示仅在开发环境下使用, 不会在生产环境中使用的依赖, 对应 npm install xx -D 或 npm install xx --save-dev\n  &quot;devDependencies&quot;: &#123;\n   ...\n  &#125;,\n  &quot;npmName&quot;: &quot;redux&quot;,\n\n\n  &#x2F;&#x2F; npm文件映射。把需要同步到 cdnjs 的文件配置在这里。\n  &quot;npmFileMap&quot;: [\n    &#123;\n      &quot;basePath&quot;: &quot;&#x2F;dist&#x2F;&quot;,\n      &quot;files&quot;: [\n        &quot;*.js&quot;\n      ]\n    &#125;\n  ],\n\n  &#x2F;&#x2F; webpack相关字段, 声明该模块是否包含 sideEffects（副作用），从而可以为 tree-shaking 提供更大的优化空间。\n  &quot;sideEffects&quot;: false\n&#125;\n\nversion字段包的版本, 必须有, 要符合semantic versioning guidelines, 参考 语义化版本控制规范, 建议仔细通读\n参考配合redux项目深度了解package.jsonsemantic versioning guidelines语义化版本控制规范\n源码目录.\n├── applyMiddleware.ts\n├── bindActionCreators.ts\n├── combineReducers.ts\n├── compose.ts\n├── createStore.ts\n├── index.ts\n├── types\n│   ├── actions.ts\n│   ├── middleware.ts\n│   ├── reducers.ts\n│   └── store.ts\n└── utils\n    ├── actionTypes.ts\n    ├── formatProdErrorMessage.ts\n    ├── isPlainObject.ts\n    ├── kindOf.ts\n    ├── symbol-observable.ts\n    └── warning.ts\n\n2 directories, 16 files\n\nindex.tsexport &#123;\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n&#125;","slug":"2022-05-25.redux","date":"2022-05-25T05:48:17.000Z","categories_index":"redux","tags_index":"redux,源码","author_index":"陈海龙"},{"id":"d512c56f4cbf1792b4d8bab0668985ad","title":"react-redux  源码2","content":"源码版本&quot;version&quot;: &quot;8.0.2&quot;,\nProvider\n主要作用通过subscription调用redux中store的subscription产生订阅，订阅内容是onStateChange的回调\n通过react的Provider功能，提供传递给根的store和根的subscription给后续使用了connect的组件\n\n&#x2F;* provider 组件代码 *&#x2F;\nfunction Provider(&#123; store, context, children &#125;) &#123;\n   &#x2F;* 利用useMemo，跟据store变化创建出一个contextValue 包含一个根元素订阅器和当前store  *&#x2F; \n  const contextValue &#x3D; useMemo(() &#x3D;&gt; &#123;\n      &#x2F;* 创建了一个根 Subscription 订阅器 *&#x2F;\n    const subscription &#x3D; new Subscription(store)\n    &#x2F;* subscription 的 notifyNestedSubs 方法 ，赋值给  onStateChange方法 *&#x2F;\n    &#x2F;&#x2F;onStateChange就是之后触发的listenr\n    subscription.onStateChange &#x3D; subscription.notifyNestedSubs  \n    return &#123;\n      store,\n      subscription\n    &#125; &#x2F;*  store 改变创建新的contextValue *&#x2F;\n  &#125;, [store])\n  &#x2F;*  获取更新之前的state值 ，函数组件里面的上下文要优先于组件更新渲染  *&#x2F;\n  const previousState &#x3D; useMemo(() &#x3D;&gt; store.getState(), [store])\n\n  useEffect(() &#x3D;&gt; &#123;\n    const &#123; subscription &#125; &#x3D; contextValue\n    &#x2F;* 触发trySubscribe方法执行，创建listens *&#x2F;\n    subscription.trySubscribe() &#x2F;&#x2F; 发起订阅\n    if (previousState !&#x3D;&#x3D; store.getState()) &#123;\n        &#x2F;* 组件更新渲染之后，如果此时state发生改变，那么立即触发 subscription.notifyNestedSubs 方法  *&#x2F;\n        &#x2F;&#x2F;触发所有的listener\n      subscription.notifyNestedSubs() \n    &#125;\n    &#x2F;*   *&#x2F;\n    return () &#x3D;&gt; &#123;\n      subscription.tryUnsubscribe()  &#x2F;&#x2F; 卸载订阅\n      subscription.onStateChange &#x3D; null\n    &#125;\n    &#x2F;*  contextValue state 改变出发新的 effect *&#x2F;\n  &#125;, [contextValue, previousState])\n\n  &#x2F;&#x2F;若Provider没有显示传入context，则为使用React.createContext创建的上下文\n  const Context &#x3D; context || ReactReduxContext\n\n  return &lt;Context.Provider value&#x3D;&#123;contextValue&#125;&gt;&#123;children&#125;&lt;&#x2F;Context.Provider&gt;\n&#125;\n\nSubscription\n订阅消息、发起更新\n在根的Provider的作用是调用redux中store的订阅方法，将根的onStateChange进行订阅\n在子代中是收集所有被 connect 包裹的组件中的Subscription的更新函数 onstatechange，然后形成一个 callback 链表，再由父级 Subscription 统一派发执行更新，只会往上传递一层，不会一直传递使得每一个上级都有自身的更新函数\n\n&#x2F;* 发布订阅者模式 *&#x2F;\nexport default class Subscription &#123;\n  constructor(store, parentSub) &#123;\n    this.store &#x3D; store\n    this.parentSub &#x3D; parentSub\n    this.unsubscribe &#x3D; null\n    this.listeners &#x3D; nullListeners\n\n    this.handleChangeWrapper &#x3D; this.handleChangeWrapper.bind(this)\n  &#125;\n  &#x2F;* 负责检测是否该组件订阅，然后添加订阅者也就是listener *&#x2F;  \n  &#x2F;&#x2F;当父代调用过trySubscribe后，子代再调用，因为this.unsubscribe有值，所以并不会实际执行父代的trySubscribe，而只是将listener放进父代中管理\n  addNestedSub(listener) &#123;\n    this.trySubscribe()\n    return this.listeners.subscribe(listener)\n  &#125;\n  &#x2F;* 向listeners发布通知 *&#x2F;\n  notifyNestedSubs() &#123;\n    this.listeners.notify()\n  &#125;\n  &#x2F;* 对于 Provide onStateChange 就是 notifyNestedSubs 方法，\n  对于 connect 包裹接受更新的组件 ，onStateChange 就是 负责更新组件的函数 。   *&#x2F;\n  handleChangeWrapper() &#123;\n    if (this.onStateChange) &#123;\n      this.onStateChange()\n    &#125;\n  &#125;\n   &#x2F;* 判断有没有开启订阅 *&#x2F;\n  isSubscribed() &#123;\n    return Boolean(this.unsubscribe)\n  &#125;\n  &#x2F;* 开启订阅模式 首先判断当前订阅器有没有父级订阅器 ， 如果有父级订阅器(就是父级Subscription)，把自己的handleChangeWrapper放入到监听者链表中 *&#x2F;\n  trySubscribe() &#123;\n    &#x2F;*\n    \tparentSub即是provide value 里面的 Subscription 这里可以理解为 父级元素的 Subscription\n    *&#x2F;\n    &#x2F;&#x2F;当Subscription执行过一次改方法后，再调用因为this.unsubscribe有值\n    &#x2F;&#x2F;所以该方法调用一次后就不会再被调用了\n    &#x2F;&#x2F;意味着addNestedSub中只会添加listener，而不会再调用trySubscribe，使得listener不会往上传递\n    if (!this.unsubscribe) &#123;\n      this.unsubscribe &#x3D; this.parentSub\n        ? this.parentSub.addNestedSub(this.handleChangeWrapper)\n        &#x2F;* provider的Subscription是不存在parentSub，所以此时trySubscribe 就会调用 store.subscribe   *&#x2F;\n        : this.store.subscribe(this.handleChangeWrapper)\n      this.listeners &#x3D; createListenerCollection()\n    &#125;\n  &#125;\n  &#x2F;* 取消订阅 *&#x2F;\n  tryUnsubscribe() &#123;\n    if (this.unsubscribe) &#123;\n      this.unsubscribe()\n      this.unsubscribe &#x3D; null\n      this.listeners.clear()\n\n      this.listeners &#x3D; nullListeners\n    &#125;\n  &#125;\n&#125;\n\n\n\n首先Provider创建 Subscription 时候没有第二个参数，就说明provider 中的Subscription 不存在 parentSub 。\n那么再调用Provider组件中useEffect钩子中trySubscribe的时候,会触发this.store.subscribe , subscribe 就是 redux 的 subscribe ,此时真正发起了订阅\n订阅的内容是notifyNestedSubs，即通知根管理的listeners触发subscription.onStateChange &#x3D; subscription.notifyNestedSubs \n\n&#x2F;* 向listeners发布通知 *&#x2F;\nnotifyNestedSubs() &#123;\n  this.listeners.notify()\n&#125;\n\ncreateListenerCollection通过双向链表的结构管理每一个listener以链表的形式收集对应的 listeners (每一个Subscription) 的handleChangeWrapper函数即onStateChange。通过 batch 方法( react-dom 中的 unstable_batchedUpdates ) 来进行批量更新，许将一次事件循环中的所有 React 更新都一起批量处理到一个渲染过程中。import &#123; unstable_batchedUpdates as batch &#125; from &#39;.&#x2F;utils&#x2F;reactBatchedUpdates&#39;\nsetBatch(batch)\n\n\nfunction createListenerCollection() &#123;\n   &#x2F;* batch 由getBatch得到的 unstable_batchedUpdates 方法 *&#x2F;\n  const batch &#x3D; getBatch()\n  let first &#x3D; null\n  let last &#x3D; null\n\n  return &#123;\n    &#x2F;* 清除当前listeners的所有listener *&#x2F;\n    clear() &#123;\n      first &#x3D; null\n      last &#x3D; null\n    &#125;,\n    &#x2F;* 派发更新 *&#x2F;\n    notify() &#123;\n      batch(() &#x3D;&gt; &#123;\n        let listener &#x3D; first\n        while (listener) &#123;\n          listener.callback()\n          listener &#x3D; listener.next\n        &#125;\n      &#125;)\n    &#125;,\n    &#x2F;* 获取listeners的所有listener *&#x2F;\n    get() &#123;\n      let listeners &#x3D; []\n      let listener &#x3D; first\n      while (listener) &#123;\n        listeners.push(listener)\n        listener &#x3D; listener.next\n      &#125;\n      return listeners\n    &#125;,\n     &#x2F;* 接收订阅，将当前的callback（handleChangeWrapper）存到当前的链表中  *&#x2F;\n    subscribe(callback) &#123;\n      let isSubscribed &#x3D; true\n\n      let listener &#x3D; (last &#x3D; &#123;\n        callback,\n        next: null,\n        prev: last &#x2F;&#x2F;首次last为空\n      &#125;)\n\t   \t\n      if (listener.prev) &#123;\n        listener.prev.next &#x3D; listener\n      &#125; else &#123;\n        first &#x3D; listener\n      &#125;\n      &#x2F;* 取消当前 handleChangeWrapper 的订阅*&#x2F;\n      return function unsubscribe() &#123;\n        if (!isSubscribed || first &#x3D;&#x3D;&#x3D; null) return\n        isSubscribed &#x3D; false\n\t\t\n\t\t&#x2F;&#x2F;双向链表删除节点的操作\n        if (listener.next) &#123;\n          listener.next.prev &#x3D; listener.prev\n        &#125; else &#123;\n          last &#x3D; listener.prev\n        &#125;\n        if (listener.prev) &#123;\n          listener.prev.next &#x3D; listener.next\n        &#125; else &#123;\n          first &#x3D; listener.next\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\nconnect基本使用function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n\nconst mapStateToProps &#x3D; state &#x3D;&gt; (&#123; todos: state.todos &#125;)\nconst mapDispatchToProps &#x3D; dispatch &#x3D;&gt; &#123;\n  return &#123;\n    increment: () &#x3D;&gt; dispatch(&#123; type: &#39;INCREMENT&#39; &#125;),\n    decrement: () &#x3D;&gt; dispatch(&#123; type: &#39;DECREMENT&#39; &#125;),\n    reset: () &#x3D;&gt; dispatch(&#123; type: &#39;RESET&#39; &#125;)\n  &#125;\n&#125;\n&#x2F;*\n* stateProps , state 映射到 props 中的内容\n* dispatchProps， dispatch 映射到 props 中的内容。\n* ownProps 组件本身的 props\n当未传递时，默认的合并规则为\n&#123; ...ownProps, ...stateProps, ...dispatchProps &#125;\n\n*&#x2F;\nmergeProps&#x3D;(stateProps, dispatchProps, ownProps) &#x3D;&gt; Object\n\noptions&#x3D;&#123;\n  context?: Object,   &#x2F;&#x2F; 自定义上下文\n  pure?: boolean, &#x2F;&#x2F; 默认为 true , 当为 true 的时候 ，除了 mapStateToProps 和 props ,其他输入或者state 改变，均不会更新组件。\n  areStatesEqual?: Function, &#x2F;&#x2F; 当pure true , 比较引进store 中state值 是否和之前相等。 (next: Object, prev: Object) &#x3D;&gt; boolean\n  areOwnPropsEqual?: Function, &#x2F;&#x2F; 当pure true , 比较 props 值, 是否和之前相等。 (next: Object, prev: Object) &#x3D;&gt; boolean\n  areStatePropsEqual?: Function, &#x2F;&#x2F; 当pure true , 比较 mapStateToProps 后的值 是否和之前相等。  (next: Object, prev: Object) &#x3D;&gt; boolean\n  areMergedPropsEqual?: Function, &#x2F;&#x2F; 当 pure 为 true 时， 比较 经过 mergeProps 合并后的值 ， 是否与之前等  (next: Object, prev: Object) &#x3D;&gt; boolean\n  forwardRef?: boolean, &#x2F;&#x2F;当为true 时候,可以通过ref 获取被connect包裹的组件实例。\n&#125;\n\n\n\n&#x2F;**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior &#x2F; props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that&#39;s\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don&#39;t know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user&#39;s responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps A function that extracts values from state\n * @param mapDispatchToProps Setup for dispatching actions\n * @param mergeProps Optional callback to merge state and dispatch props together\n * @param options Options for configuring the connection\n *\n *&#x2F;\nfunction connect&lt;\n  TStateProps &#x3D; &#123;&#125;,\n  TDispatchProps &#x3D; &#123;&#125;,\n  TOwnProps &#x3D; &#123;&#125;,\n  TMergedProps &#x3D; &#123;&#125;,\n  State &#x3D; unknown\n&gt;(\n  mapStateToProps?: MapStateToPropsParam&lt;TStateProps, TOwnProps, State&gt;,\n  mapDispatchToProps?: MapDispatchToPropsParam&lt;TDispatchProps, TOwnProps&gt;,\n  mergeProps?: MergeProps&lt;TStateProps, TDispatchProps, TOwnProps, TMergedProps&gt;,\n  &#123;\n    &#x2F;&#x2F; The &#96;pure&#96; option has been removed, so TS doesn&#39;t like us destructuring this to check its existence.\n    &#x2F;&#x2F; @ts-ignore\n    pure,\n    areStatesEqual &#x3D; strictEqual,\n    areOwnPropsEqual &#x3D; shallowEqual,\n    areStatePropsEqual &#x3D; shallowEqual,\n    areMergedPropsEqual &#x3D; shallowEqual,\n\n    &#x2F;&#x2F; use React&#39;s forwardRef to expose a ref of the wrapped component\n    forwardRef &#x3D; false,\n\n    &#x2F;&#x2F; the context consumer to use\n    context &#x3D; ReactReduxContext,\n  &#125;: ConnectOptions&lt;unknown, unknown, unknown, unknown&gt; &#x3D; &#123;&#125;\n): unknown &#123;\n  \n\n  const Context &#x3D; context\n\n  &#x2F;*\n  * stateProps , state 映射到 props 中的内容\n  * dispatchProps， dispatch 映射到 props 中的内容。\n  * ownProps 组件本身的 props\n  当未传递时，默认的合并规则为\n  &#123; ...ownProps, ...stateProps, ...dispatchProps &#125;\n\n  *&#x2F;\n &#x2F;* 经过代理包装后的 mapStateToProps,完成传入store等操作*&#x2F;\n  const initMapStateToProps &#x3D; mapStateToPropsFactory(mapStateToProps)\n  &#x2F;* 经过代理包装后的 mapDispatchToProps，完成传入store.dispatch等操作*&#x2F;\n  const initMapDispatchToProps &#x3D; mapDispatchToPropsFactory(mapDispatchToProps)\n  &#x2F;* 经过代理包装后的 mergeProps，用于形成真正的 mergeProps函数，合并业务组件的 props , state 映射的 props , dispatch 映射的 props *&#x2F;\n  const initMergeProps &#x3D; mergePropsFactory(mergeProps)\n\n  const shouldHandleStateChanges &#x3D; Boolean(mapStateToProps)\n\n  &#x2F;&#x2F;默认的高阶组件connectAdvanced，实际渲染的组件是其中返回的一个ConnectFunction\n\t&#x2F;&#x2F;selectorFactory为整合connect更新过程中的形成新props的主要函数\n\t&#x2F;&#x2F;selectorFactory为后面的finalPropsSelectorFactory\n  const wrapWithConnect: AdvancedComponentDecorator&lt;\n    TOwnProps,\n    WrappedComponentProps\n  &gt; &#x3D; (WrappedComponent) &#x3D;&gt; &#123;\n    ...\n  &#125;\n&#125;\n\n\n当我们不向connect传递第三个参数mergeProps 的时候，默认的defaultMergeProps如下，作为新的 props 传递给了业务组件\n\nexport function defaultMergeProps(stateProps, dispatchProps, ownProps) &#123;\n  return &#123; ...ownProps, ...stateProps, ...dispatchProps &#125;\n&#125;\n\n\n\nselectorFactory\n\n首先得到真正connect 经过一层代理函数 mapStateToProps ,mapDispatchToProps ,mergeProps\n然后调用selectorFactory (在pure模式下，selectorFactory 就是 pureFinalPropsSelectorFactory )export default function finalPropsSelectorFactory(\n  dispatch,\n  &#123; initMapStateToProps, initMapDispatchToProps, initMergeProps, ...options &#125;\n) &#123;\n  &#x2F;&#x2F; mapStateToProps mapDispatchToProps mergeProps 为真正connect 经过一层代理的 proxy 函数\n  const mapStateToProps &#x3D; initMapStateToProps(dispatch, options)\n  const mapDispatchToProps &#x3D; initMapDispatchToProps(dispatch, options)\n  const mergeProps &#x3D; initMergeProps(dispatch, options)\n\n  &#x2F;&#x2F;默认pure为true，selectorFactory默认为pureFinalPropsSelectorFactory\n  const selectorFactory &#x3D; options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory\n   &#x2F;&#x2F; 返回一个 函数用于生成新的 props \n  return selectorFactory(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps,\n    dispatch,\n    options\n  )\n&#125;\n\n\npureFinalPropsSelectorFactory\n\n如果是第一次，那么直接调用mergeProps合并ownProps,stateProps,dispatchProps 形成最终的props。\n如果不是第一次，那么判断到底是props还是 store.state 发生改变，然后针对那里变化，重新生成对应的props，最终合并到真正的props\n整个 selectorFactory 逻辑就是形成新的props传递给我们的业务组件。\n\n&#x2F;** pure组件处理 ， 对比 props 是否发生变化 然后 合并props *&#x2F;\nexport function pureFinalPropsSelectorFactory(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  dispatch,\n  &#123; areStatesEqual, areOwnPropsEqual, areStatePropsEqual &#125; &#x2F;&#x2F;判断 state prop 是否相等\n) &#123;\n  let hasRunAtLeastOnce &#x3D; false\n  let state\n  let ownProps\n  let stateProps\n  let dispatchProps\n  let mergedProps\n \n  &#x2F;* 第一次 直接形成 ownProps  stateProps  dispatchProps 合并  形成新的 props *&#x2F;\n  function handleFirstCall(firstState, firstOwnProps) &#123;\n    state &#x3D; firstState\n    ownProps &#x3D; firstOwnProps\n    &#x2F;&#x2F;获取业务组件中mapStateToProps函数的返回值\n    stateProps &#x3D; mapStateToProps(state, ownProps)\n    &#x2F;&#x2F;获取业务组件中mapDispatchToProps函数的返回值\n    dispatchProps &#x3D; mapDispatchToProps(dispatch, ownProps)\n    &#x2F;&#x2F;合并state、dispatch、组件自身的props，形成最终传递给组件的props\n    mergedProps &#x3D; mergeProps(stateProps, dispatchProps, ownProps)\n    hasRunAtLeastOnce &#x3D; true\n    return mergedProps\n  &#125;\n  \n  function handleNewPropsAndNewState() &#123;\n    &#x2F;&#x2F;  props 和 state 都改变  mergeProps \n  &#125;\n\n  function handleNewProps() &#123;\n    &#x2F;&#x2F; props 改变  mergeProps\n  &#125;\n\n  function handleNewState() &#123;\n     &#x2F;&#x2F; state 改变 mergeProps\n  &#125;\n\n  &#x2F;*  不是第一次的情况 props 或者 store.state 发生改变的情况。 *&#x2F;\n  function handleSubsequentCalls(nextState, nextOwnProps) &#123;\n      &#x2F;* 判断两次 props 是否相等 *&#x2F;\n    const propsChanged &#x3D; !areOwnPropsEqual(nextOwnProps, ownProps) \n      &#x2F;* 判断两次 store.state 是否相等 *&#x2F;\n    const stateChanged &#x3D; !areStatesEqual(nextState, state)\n    state &#x3D; nextState\n    ownProps &#x3D; nextOwnProps\n    \n    &#x2F;&#x2F;根据改变的类型不同，返回对应合并策略下的props\n    if (propsChanged &amp;&amp; stateChanged) return handleNewPropsAndNewState()\n    if (propsChanged) return handleNewProps()\n    if (stateChanged) return handleNewState()\n    return mergedProps\n  &#125;\n  \n  &#x2F;&#x2F;根据是否第一次形成props，执行对应方法\n  return function pureFinalPropsSelector(nextState, nextOwnProps) &#123;\n    return hasRunAtLeastOnce\n      ? handleSubsequentCalls(nextState, nextOwnProps)\n      : handleFirstCall(nextState, nextOwnProps)\n  &#125;\n&#125;\n\nconnectHOCconst mapStateToProp &#x3D; (store) &#x3D;&gt; (&#123; userInfo: store.root.userInfo &#125;)\n\nfunction Index()&#123;\n    &#x2F;* ..... *&#x2F;\n    return &lt;div&gt; &#123; &#x2F;* .... *&#x2F; &#125; &lt;&#x2F;div&gt;\n&#125;\nexport default connect(mapStateToProp)(Index)\n\n\n\nconnect(mapStateToProp)&#x3D;&#x3D;&#x3D;connectAdvanced()\n\n\n点击查看更多\n\n这部分代码，在8.x.x版本在conncet中直接处理，并没有拆分为单独函数\n\nexport default function connectAdvanced(\n  selectorFactory, &#x2F;&#x2F; 每次 props,state改变执行 ，用于生成新的 props。\n  &#123;\n    getDisplayName &#x3D; name &#x3D;&gt; &#96;ConnectAdvanced($&#123;name&#125;)&#96;,\n    &#x2F;&#x2F;可能被包装函数（如connect（））重写\n    methodName &#x3D; &#39;connectAdvanced&#39;,\n    &#x2F;&#x2F;如果定义了，则传递给包装元素的属性的名称，指示要呈现的调用。用于监视react devtools中不必要的重新渲染。\n    renderCountProp &#x3D; undefined,\n    shouldHandleStateChanges &#x3D; true,  &#x2F;&#x2F;确定此HOC是否订阅存储更改\n    storeKey &#x3D; &#39;store&#39;,\n    withRef &#x3D; false,\n    forwardRef &#x3D; false, &#x2F;&#x2F; 是否 用 forwarRef 模式\n    context &#x3D; ReactReduxContext,&#x2F;&#x2F; Provider 保存的上下文\n    ...connectOptions\n  &#125; &#x3D; &#123;&#125;\n) &#123;\n  &#x2F;* ReactReduxContext 就是store存在的context *&#x2F;\n  const Context &#x3D; context\n   &#x2F;* WrappedComponent 为connect 包裹的组件本身  *&#x2F;   \n  return  function wrapWithConnect(WrappedComponent)&#123;\n      &#x2F;&#x2F; WrappedComponent 被 connect 的业务组件本身\n  &#125;\n&#125;\n\n拿到Provider提供的context上下文\n\n\n\nwrapWithConnectwrapWithConnect作为高阶组件，会返回一个组件，这个组件会对原有的业务组件，进行一系列增强等工作判断是否是 pure 纯组件模式，如果是用react.memo包裹,这样做的好处是，会向 pureComponent 一样对 props 进行浅比较如果 connect 有forwardRef配置项，用React.forwardRef处理\nfunction wrapWithConnect(WrappedComponent) &#123;\n\t&#x2F;&#x2F;WrappedComponent为实际传递的业务组件\n    const wrappedComponentName &#x3D;\n      WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;\n  \n    const displayName &#x3D; getDisplayName(wrappedComponentName)\n    \n    &#x2F;&#x2F;要合并都内容，connectOptions为上一步闭包拿到的内容\n    const selectorFactoryOptions &#x3D; &#123;\n      ...connectOptions,\n      getDisplayName,\n      methodName,\n      renderCountProp,\n      shouldHandleStateChanges,\n      storeKey,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent\n    &#125;\n    const &#123; pure &#125; &#x3D; connectOptions\n    \n    &#x2F;&#x2F;selectorFactory为finalPropsSelectorFactory\n    function createChildSelector(store) &#123;\n      &#x2F;&#x2F; 合并函数 mergeprops 得到最新的props\n      &#x2F;&#x2F; 及默认返回pureFinalPropsSelectorFactory，会根据是否第一次合并、修改类型等进行不同策略等合并以及返回最终都props\n      return selectorFactory(store.dispatch, selectorFactoryOptions)\n    &#125;\n    &#x2F;&#x2F;判断是否是pure纯组件模式 如果是将用 useMemo 缓存组件提升性能\n    const usePureOnlyMemo &#x3D; pure ? useMemo : callback &#x3D;&gt; callback()\n    &#x2F;&#x2F; 负责更新的容器子组件，可以看作是实际渲染的类组件\n    function ConnectFunction (props)&#123;\n        &#x2F;&#x2F; props 为 业务组件 真正的 props \n    &#125;\n    &#x2F;&#x2F;如果\n    const Connect &#x3D; pure ? React.memo(ConnectFunction) : ConnectFunction\n  \n    Connect.WrappedComponent &#x3D; WrappedComponent\n    Connect.displayName &#x3D; displayName\n    &#x2F;* forwardRef *&#x2F;\n    if (forwardRef) &#123;\n      const forwarded &#x3D; React.forwardRef(function forwardConnectRef(\n        props,\n        ref\n      ) &#123;\n      \t&#x2F;&#x2F;connect中是否传递了forwardRef选项\n        return &lt;Connect &#123;...props&#125; reactReduxForwardedRef&#x3D;&#123;ref&#125; &#x2F;&gt;\n      &#125;)\n  \n      forwarded.displayName &#x3D; displayName\n      forwarded.WrappedComponent &#x3D; WrappedComponent\n      &#x2F;&#x2F;hoistStatics为一个第三方库，负责把一个类中的静态属性拷贝到另一个类中\n      return hoistStatics(forwarded, WrappedComponent)\n    &#125;\n  \n    return hoistStatics(Connect, WrappedComponent)\n  &#125;\n&#125;\n\n为何要传递forwardRef？connect(mapStateToProp,mapDispatchToProps,mergeProps,&#123; forwardRef:true  &#125;)(Child)\n\n如果不传递，而是在其他组件中直接放ref到使用了connect的组件，则ref实际应用到的是ConncectFunction组件，而非真正的WrappedComponent组件所以react-redux提供forwardRef选项，使用React.forwardRef，将ref实际放到真正的WrappedComponent上\nConnectFunction\n实际渲染的组件\nfunction ConnectFunction(props) &#123;\n    &#x2F;* TODO:  第一步 把 context ForwardedRef props 取出来 *&#x2F;\n    &#x2F;&#x2F;取出forwardRef和传递给ConnectFunction的所有除forwardRef的props\n    &#x2F;&#x2F;除了forwardRef以外的props也就是实际业务代码中传递给conncec包裹组件都props\n    const [\n      reactReduxForwardedRef,\n      wrapperProps &#x2F;&#x2F; props 传递的props\n    ] &#x3D; useMemo(() &#x3D;&gt; &#123;\n      const &#123; reactReduxForwardedRef, ...wrapperProps &#125; &#x3D; props\n      return [reactReduxForwardedRef, wrapperProps]\n    &#125;, [props])\n \n\t  &#x2F;&#x2F; 获取上层Provider提供的context，多个Provider只会取最近的Provider\n    &#x2F;&#x2F; 获取 context内容 里面含有  redux 中store 和 subscription\n    const contextValue &#x3D; useContext(Context)\n\n    &#x2F;&#x2F;TODO: 判断 store 是否来自props  didStoreComeFromProps ,正常情况下 ，prop 中是不存在 store 所以  didStoreComeFromProps &#x3D; false\n    const didStoreComeFromProps &#x3D;\n      Boolean(props.store) &amp;&amp;\n      Boolean(props.store.getState) &amp;&amp;\n      Boolean(props.store.dispatch)\n    &#x2F;&#x2F;store是否来自Provider提供的上下文\n    const didStoreComeFromContext &#x3D;\n      Boolean(contextValue) &amp;&amp; Boolean(contextValue.store)\n\n    &#x2F;&#x2F;根据两种情况获取store\n    const store &#x3D; didStoreComeFromProps ? props.store : contextValue.store\n     \n     &#x2F;&#x2F;返回merge函数 用于生成真正传给子组件 props\n    const childPropsSelector &#x3D; useMemo(() &#x3D;&gt; &#123;\n    \t&#x2F;&#x2F;默认情况下pure为true，返回的是pureFinalPropsSelectorFactory\n      return createChildSelector(store)\n    &#125;, [store])\n\n\n    &#x2F;&#x2F; TODO:  第二步  创建connect组件自身的subscription 监听者实例  \n    const [subscription, notifyNestedSubs] &#x3D; useMemo(() &#x3D;&gt; &#123;\n        &#x2F;&#x2F; 如果没有订阅更新，那么直接返回，默认情况下开启了订阅\n      if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\n\t\t&#x2F;&#x2F;为每一个conncet的组件创建订阅器，获取上层Provider提供的contextValue.subscription\n\t\t&#x2F;&#x2F;connct的组件获取的是上层的Provder提供的subscription，有多个Provider，只会取层级最近的一个\n\t\t&#x2F;&#x2F;所以connect中的connect组件，获取到的是离它最近的Provider中的订阅器，通过它来管理自身的listener更新函数\n      const subscription &#x3D; new Subscription(\n        store,\n        didStoreComeFromProps ? null : contextValue.subscription &#x2F;&#x2F; 和 上级 &#96;subscription&#96; 建立起关系。 this.parentSub &#x3D; contextValue.subscription\n      )\n      &#x2F;&#x2F; notifyNestedSubs 触发 noticy 所有子代 listener 监听者 -&gt; 触发batch方法,触发 batchupdate方法 ,批量更新\n      &#x2F;&#x2F;并更新一下this指向\n      const notifyNestedSubs &#x3D; subscription.notifyNestedSubs.bind(\n        subscription\n      )\n\n      return [subscription, notifyNestedSubs]\n    &#125;, [store, didStoreComeFromProps, contextValue])\n\n    &#x2F;*  创建出一个新的contextValue ,把父级的 subscription 换成自己的 subscription   *&#x2F;\n    const overriddenContextValue &#x3D; useMemo(() &#x3D;&gt; &#123;   \n      if (didStoreComeFromProps) &#123; \n        return contextValue\n      &#125;\n      &#x2F;&#x2F;默认情况下，返回自身的订阅器以及redux中的store给自身的子代connect中获取\n      return &#123;\n        ...contextValue,\n        subscription\n      &#125;\n    &#125;, [didStoreComeFromProps, contextValue, subscription])\n    \n    &#x2F;&#x2F;定义了一个useReducer，当actualChildProps变化时，调用dispatch方法forceComponentUpdateDispatch进行组件更新\n    const [\n      [previousStateUpdateResult], &#x2F;&#x2F;调用dispatch更新后的内容\n      forceComponentUpdateDispatch  &#x2F;*  *&#x2F;\n    ] &#x3D; useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)\n\n\n    &#x2F;&#x2F; TODO: 第三步缓存组件本次的props等内容，在下一次组件更新时做比较\n    const lastChildProps &#x3D; useRef() &#x2F;&#x2F;保存上一次 合并过的 props信息（经过 ownprops ,stateProps , dispatchProps 合并过的 ）\n    const lastWrapperProps &#x3D; useRef(wrapperProps) &#x2F;&#x2F;保存本次业务组件的 props \n    const childPropsFromStoreUpdate &#x3D; useRef() &#x2F;&#x2F;用来保存更新后的最新的props\n    const renderIsScheduled &#x3D; useRef(false) &#x2F;&#x2F; 当前组件是否处于渲染阶段\n    \n    &#x2F;&#x2F; actualChildProps 为当前真正处理过后，经过合并的 props\n    const actualChildProps &#x3D; usePureOnlyMemo(() &#x3D;&gt; &#123;\n        &#x2F;&#x2F; 调用 mergeProps 进行合并，返回合并后的最新 porps\n        &#x2F;&#x2F;及调用pureFinalPropsSelectorFactory后的合并结果\n      return childPropsSelector(store.getState(), wrapperProps)\n    \n    \t &#x2F;&#x2F;会在store、调用了checkForUpdates、传递给组建的props发生变化后，重新计算获取合并后的props \n    &#125;, [store, previousStateUpdateResult, wrapperProps])\n\n   &#x2F;* 负责更新缓存变量，方便下一次更新的时候比较 *&#x2F;\n    useEffect(()&#x3D;&gt;&#123;\n      captureWrapperProps(...[\n          lastWrapperProps,\n          lastChildProps,\n          renderIsScheduled,\n          wrapperProps,\n          actualChildProps,\n          childPropsFromStoreUpdate,\n          notifyNestedSubs\n       ])\n    &#125;)\n    \n    &#x2F;&#x2F;实际订阅更新组件的地方\n    useEffect(()&#x3D;&gt;&#123;\n        subscribeUpdates(...[\n        shouldHandleStateChanges,\n        store,\n        subscription,\n        childPropsSelector,\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n        forceComponentUpdateDispatch\n       ])\n    &#125;,[store, subscription, childPropsSelector])\n\n\n\n    &#x2F;&#x2F; TODO: 第四步：渲染实际挂载的组件，通过useMemo进行组件的缓存\n    const renderedWrappedComponent &#x3D; useMemo(\n      () &#x3D;&gt; (\n        &lt;WrappedComponent\n          &#123;...actualChildProps&#125;\n          ref&#x3D;&#123;reactReduxForwardedRef&#125;\n        &#x2F;&gt;\n      ),\n      &#x2F;&#x2F;当actualChildProps发生变化的时候重新渲染组件\n      &#x2F;&#x2F;这里就是组件重新渲染的原因：主要通过监听actualChildProps的变化\n      [reactReduxForwardedRef, WrappedComponent, actualChildProps]\n    )\n    &#x2F;&#x2F; 将上一步的renderedWrappedComponent包裹一层Provider\n    &#x2F;&#x2F; 提供该connect组件自身的订阅器、store给子代中的connect组件获取\n    const renderedChild &#x3D; useMemo(() &#x3D;&gt; &#123;\n      &#x2F;&#x2F;shouldHandleStateChanges 来源 connect是否有第一个参数\n      if (shouldHandleStateChanges) &#123;\n        return (\n          &#x2F;&#x2F; ContextToUse 传递 context \n          &lt;ContextToUse.Provider value&#x3D;&#123;overriddenContextValue&#125;&gt;\n            &#123;renderedWrappedComponent&#125;\n          &lt;&#x2F;ContextToUse.Provider&gt;\n        )\n      &#125;\n\n      return renderedWrappedComponent\n    &#125;, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n\n    return renderedChild\n  &#125;\n\n\n\n创建该connect组件自身的subscription, 并使用Provider包裹，层层传递新的context(很重要)\n\n所以connect组件的子代connect组件，获取到的都是其上层最近的connect提供的Provider中的订阅器，然后将更新函数checkForUpdates放进其中管理\n\n然后通过 useMemo 创建出一个新的 contextValue ,把父级的 subscription 换成自己的 subscription。用于通过 Provider 传递新的 context\n\n接下来通过useReducer制造出真正触发更新的forceComponentUpdateDispatch 这个dispatch函数。也就是整个 state 或者是 props改变，触发组件更新的函数，这个函数放进checkForUpdates中执行\n\n\ncaptureWrapperProps\n进行内容缓存，为了下次组件更新进行比较&#x2F;&#x2F;获取包装的props \nfunction captureWrapperProps(\n  lastWrapperProps,\n  lastChildProps,\n  renderIsScheduled,\n  wrapperProps,\n  actualChildProps,\n  childPropsFromStoreUpdate,\n  notifyNestedSubs\n) &#123;\n  lastWrapperProps.current &#x3D; wrapperProps  &#x2F;&#x2F;子props \n  lastChildProps.current &#x3D; actualChildProps &#x2F;&#x2F;经过 megeprops 之后形成的新prop\n  renderIsScheduled.current &#x3D; false  &#x2F;&#x2F; 当前组件渲染完成\n&#125;\n\n\nsubscribeUpdates\n实际添加更新回调的地方\nfunction subscribeUpdates(\n  shouldHandleStateChanges,\n  store,\n  subscription,\n  childPropsSelector,\n  lastWrapperProps,  &#x2F;&#x2F;子props \n  lastChildProps, &#x2F;&#x2F;经过 megeprops 之后形成的 prop\n  renderIsScheduled,\n  childPropsFromStoreUpdate,\n  notifyNestedSubs,\n  forceComponentUpdateDispatch\n) &#123;\n  if (!shouldHandleStateChanges) return\n\n   &#x2F;&#x2F; 捕获值以检查此组件是否卸载以及何时卸载\n  let didUnsubscribe &#x3D; false\n  let lastThrownError &#x3D; null\n   &#x2F;&#x2F;store更新订阅传播到此组件时，运行此回调\n  const checkForUpdates &#x3D; ()&#x3D;&gt;&#123;\n      &#x2F;&#x2F;....\n  &#125;\n  &#x2F;&#x2F;将checkForUpdates作为listener\n  subscription.onStateChange &#x3D; checkForUpdates\n  &#x2F;&#x2F;开启订阅者 ，当前是被connect 包转的情况 会把 当前的 checkForceUpdate 放在存入 父元素的addNestedSub中。\n  subscription.trySubscribe()\n  &#x2F;&#x2F;在第一次呈现之后从存储中提取数据，以防存储从我们开始就改变了。\n  &#x2F;&#x2F;确保获取到的最新的store.getState,然后判断是否更新组件\n  checkForUpdates()\n  &#x2F;* 卸载订阅起 *&#x2F;\n  const unsubscribeWrapper &#x3D; () &#x3D;&gt; &#123;\n    didUnsubscribe &#x3D; true\n    subscription.tryUnsubscribe()\n    subscription.onStateChange &#x3D; null\n  &#125;\n\n  return unsubscribeWrapper\n&#125;\n\n\n首先声明 store 更新订阅传播到此组件时的回调函数checkForUpdates把它赋值给onStateChange,如果store中的state发生改变，那么在组件订阅了state内容之后，相关联的state改变就会触发当前组件的onStateChange,来合并得到新的props\n\nsubscription.trySubscribe()把订阅函数onStateChange绑定给父级subscription,进行了层层订阅\n\n为了确保拿到的store内容是最新的，所以首先执行了一次checkForUpdates\ncheckForUpdates\n判断是否需要更新的函数\n&#x2F;&#x2F;store更新订阅传播到此组件时，运行此回调\nconst checkForUpdates &#x3D; () &#x3D;&gt; &#123;\n  if (didUnsubscribe) &#123;\n    &#x2F;&#x2F;如果取消订阅了\n    return\n  &#125;\n   &#x2F;&#x2F; 获取 store 里state\n  const latestStoreState &#x3D; store.getState()q\n  let newChildProps, error\n  try &#123;\n    &#x2F;* 得到最新的 props *&#x2F;\n    newChildProps &#x3D; childPropsSelector(\n      latestStoreState,\n      lastWrapperProps.current\n    )\n  &#125; \n  &#x2F;&#x2F;如果新的合并的 props没有更改，则此处不做任何操作-层叠订阅更新\n  if (newChildProps &#x3D;&#x3D;&#x3D; lastChildProps.current) &#123; \n    if (!renderIsScheduled.current) &#123;  \n      notifyNestedSubs() &#x2F;* 通知子代 subscription 触发 checkForUpdates 来检查是否需要更新。 *&#x2F;\n    &#125;\n  &#125; else &#123;\n    lastChildProps.current &#x3D; newChildProps\n    childPropsFromStoreUpdate.current &#x3D; newChildProps\n    renderIsScheduled.current &#x3D; true\n    &#x2F;&#x2F; 触发useReducer的dispatch来进行更新，该dispatch会改变useReducer返回的previousStateUpdateResult\n    &#x2F;&#x2F; 而previousStateUpdateResult是作为actualChildProps的依赖项引发actualChildProps的改变\n    &#x2F;&#x2F; actualChildProps又是实际渲染组件的依赖性，从而引发组件的重新渲染更新\n    forceComponentUpdateDispatch(&#123;\n      type: &#39;STORE_UPDATED&#39;,\n      payload: &#123;\n        error\n      &#125;\n    &#125;)\n  &#125;\n&#125;\n\ncheckForUpdates 通过调用 childPropsSelector来形成新的props,然后判断之前的 prop 和当前新的 prop 是否相等。如果相等，证明没有发生变化,无须更新当前组件，那么通过调用notifyNestedSubs来通知子代容器组件，检查是否需要更新。如果不相等证明订阅的store.state发生变化，那么立即执行forceComponentUpdateDispatch来触发组件的更新\n\n\n整个订阅流程整个订阅的流程是，如果被connect包裹，并且具有第一个参数。首先通过context获取最近的 subscription，然后创建一个新的subscription,并且和父级的subscription建立起关联。当第一次hoc容器组件挂在完成后，在useEffect里，进行订阅，将自己的订阅函数checkForUpdates,作为回调函数，通过trySubscribe 和this.parentSub.addNestedSub ,加入到父级subscription的listeners中。由此完成整个订阅流程\n整个发布流程整个更新流程是，当组件中调用dispatch触发了redux的state改变和redux的订阅器，从而触发根订阅器的触发listeners.notify ,也就是checkForUpdates函数，然后checkForUpdates函数首先根据mapStoretoprops，mergeprops等操作，验证该组件是否发起订阅，props 是否改变，并更新，如果发生改变，那么触发useReducer的forceComponentUpdateDispatch函数，来更新业务组件，如果没有发生更新，那么通过调用notifyNestedSubs,来通知当前subscription的listeners检查是否更新，然后尽心层层checkForUpdates,逐级向下，借此完成整个更新流程。\n总结\nconnect使用柯里化\nuseMemo缓存渲染组件的操作\n发布订阅模式以及通过双向链表来管理\n如何通过Provider进行层层订阅\nreact-redux触发更新的依据是actualChildProps是否改变\n\n参考react-redux源码解析github 源码React-redux源码解析–准备知识React-redux源码解析\n","slug":"2022-05-24react-redux2","date":"2022-05-24T13:15:31.000Z","categories_index":"react-redux","tags_index":"react-redux,redux,源码","author_index":"陈海龙"},{"id":"83401137c3fcd92a859b6d9e289c2c88","title":"react-redux 源码1","content":"react-redux官方介绍\n官方UI绑定层。 React Redux is the official React UI bindings layer for Redux. \n从redux的store读数据。 It lets your React components read data from a Redux store,\n触发行为给store来更新状态。and dispatch actions to the store to update state.\n\nreact-redux 源码.\n├── alternate-renderers.ts\n├── components\n│   ├── Context.ts\n│   ├── Provider.tsx\n│   └── connect.tsx # 大部分代码都在这里\n├── connect # 给 connect.tsx使用\n│   ├── invalidArgFactory.ts\n│   ├── mapDispatchToProps.ts\n│   ├── mapStateToProps.ts\n│   ├── mergeProps.ts\n│   ├── selectorFactory.ts\n│   ├── verifySubselectors.ts\n│   └── wrapMapToProps.ts\n├── exports.ts\n├── hooks\n│   ├── useDispatch.ts\n│   ├── useReduxContext.ts\n│   ├── useSelector.ts\n│   └── useStore.ts\n├── index.ts\n├── next.ts\n├── types.ts\n└── utils\n    ├── Subscription.ts\n    ├── batch.ts\n    ├── bindActionCreators.ts\n    ├── isPlainObject.ts\n    ├── reactBatchedUpdates.native.ts\n    ├── reactBatchedUpdates.ts\n    ├── shallowEqual.ts\n    ├── useIsomorphicLayoutEffect.native.ts\n    ├── useIsomorphicLayoutEffect.ts\n    ├── useSyncExternalStore.ts\n    ├── verifyPlainObject.ts\n    └── warning.ts\npackge.json&#x2F;&#x2F; packge.json\n&#123;\n  &quot;name&quot;: &quot;react-redux&quot;,\n  &quot;version&quot;: &quot;8.0.2&quot;,\n  &quot;description&quot;: &quot;Official React bindings for Redux&quot;,\n  &quot;keywords&quot;: [\n    &quot;react&quot;,\n    &quot;reactjs&quot;,\n    &quot;redux&quot;\n  ],\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;author&quot;: &quot;Dan Abramov &lt;dan.abramov@me.com&gt; (https:&#x2F;&#x2F;github.com&#x2F;gaearon)&quot;,\n  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&quot;,\n  &quot;repository&quot;: &quot;github:reduxjs&#x2F;react-redux&quot;,\n  &quot;bugs&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&#x2F;issues&quot;,\n  &#x2F;&#x2F; 找找入口，入口有3种：\n  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;index.js&quot;, &#x2F;&#x2F; 常规操作入口\n  &quot;types&quot;: &quot;.&#x2F;es&#x2F;index.d.ts&quot;, &#x2F;&#x2F; 类型入口\n  &quot;unpkg&quot;: &quot;dist&#x2F;react-redux.js&quot;, &#x2F;&#x2F; cdn入口\n  &quot;module&quot;: &quot;es&#x2F;index.js&quot;,&#x2F;&#x2F;esm入口\n  &#x2F;&#x2F; npm发布上传的文件\n  &quot;files&quot;: [\n    &quot;dist&quot;,\n    &quot;lib&quot;,\n    &quot;src&quot;, &#x2F;&#x2F; 一般用于开发阶段代码调试,soucemap\n    &quot;es&quot;\n  ],\n  &quot;scripts&quot;: &#123;\n    &#x2F;&#x2F; 脚本不看了...\n  &#125;,\n  &#x2F;&#x2F; 配置了依赖项，这些依赖项不需要在本包安装，在项目中安装即可\n  &quot;peerDependencies&quot;: &#123;\n    &quot;@types&#x2F;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;@types&#x2F;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,\n    &quot;react-native&quot;: &quot;&gt;&#x3D;0.59&quot;,\n    &quot;redux&quot;: &quot;^4&quot;\n  &#125;,\n  &quot;peerDependenciesMeta&quot;: &#123;\n    &quot;@types&#x2F;react&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;@types&#x2F;react-dom&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;react-dom&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;react-native&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;,\n    &quot;redux&quot;: &#123;\n      &quot;optional&quot;: true\n    &#125;\n  &#125;,\n  &#x2F;&#x2F; 发布后，业务开发者使用，需要安装，&#x2F;&#x2F;自动安装\n  &quot;dependencies&quot;: &#123;\n    &quot;@babel&#x2F;runtime&quot;: &quot;^7.12.1&quot;,\n    &quot;@types&#x2F;hoist-non-react-statics&quot;: &quot;^3.3.1&quot;,\n    &quot;@types&#x2F;use-sync-external-store&quot;: &quot;^0.0.3&quot;,\n    &quot;hoist-non-react-statics&quot;: &quot;^3.3.2&quot;,\n    &quot;react-is&quot;: &quot;^18.0.0&quot;,\n    &quot;use-sync-external-store&quot;: &quot;^1.0.0&quot;\n  &#125;,\n  &#x2F;&#x2F; 开发阶段需要用到的，一般是examples中demo使用\n  &quot;devDependencies&quot;: &#123;\n    &#x2F;&#x2F;...\n  &#125;\n&#125;\nexports.tsexport &#123;\n  Provider, &#x2F;&#x2F; import Provider from &#39;.&#x2F;components&#x2F;Provider&#39;\n\n  ReactReduxContext, &#x2F;&#x2F; import &#123; ReactReduxContext &#125; from &#39;.&#x2F;components&#x2F;Context&#39;\n\n  connect, &#x2F;&#x2F; import connect from &#39;.&#x2F;components&#x2F;connect&#39;\n\n  useDispatch, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;\n  createDispatchHook, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;\n\n  useSelector, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;\n  createSelectorHook, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;\n\n  useStore, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;\n  createStoreHook, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;\n\n  shallowEqual, &#x2F;&#x2F; import shallowEqual from &#39;.&#x2F;utils&#x2F;shallowEqual&#39;\n&#125;\n\n\nProvider先看下 ，最熟悉的api\n&#x2F;&#x2F; components&#x2F;Provider.tsx\n&#x2F;&#x2F; 这个组件做的事情\n&#x2F;&#x2F; 1. 合并浏览器和服务器的状态\n&#x2F;&#x2F; 2. 对于同构的应用，处理subscription订阅\nfunction Provider&lt;A extends Action &#x3D; AnyAction&gt;(&#123;\n  store,\n  context,\n  children,\n  serverState,\n&#125;: ProviderProps&lt;A&gt;) &#123;\n  &#x2F;&#x2F; 1.useMemo，对入参进行格式化「处理了store和 服务端的 serverState」\n  const contextValue &#x3D; useMemo(() &#x3D;&gt; &#123;\n    const subscription &#x3D; createSubscription(store)\n    return &#123;\n      store,\n      subscription,\n      getServerState: serverState ? () &#x3D;&gt; serverState : undefined,\n    &#125;\n  &#125;, [store, serverState])\n  &#x2F;&#x2F; 2.之前的state状态从store中直接获取\n  const previousState &#x3D; useMemo(() &#x3D;&gt; store.getState(), [store])\n  &#x2F;&#x2F; 3.同构相关，跳过\n  useIsomorphicLayoutEffect(() &#x3D;&gt; &#123;\n    const &#123; subscription &#125; &#x3D; contextValue\n    subscription.onStateChange &#x3D; subscription.notifyNestedSubs\n    subscription.trySubscribe()\n\n    if (previousState !&#x3D;&#x3D; store.getState()) &#123;\n      subscription.notifyNestedSubs()\n    &#125;\n    return () &#x3D;&gt; &#123;\n      subscription.tryUnsubscribe()\n      subscription.onStateChange &#x3D; undefined\n    &#125;\n  &#125;, [contextValue, previousState])\n  &#x2F;&#x2F; 4.react-redux上下文\n  const Context &#x3D; context || ReactReduxContext\n\n  &#x2F;&#x2F; @ts-ignore &#39;AnyAction&#39; is assignable to the constraint of type &#39;A&#39;, but &#39;A&#39; could be instantiated with a different subtype\n  return &lt;Context.Provider value&#x3D;&#123;contextValue&#125;&gt;&#123;children&#125;&lt;&#x2F;Context.Provider&gt; &#x2F;&#x2F; 这行代码是不是非常熟悉了\n&#125;\n\nexport default Provider\n\nReactReduxContext&#x2F;&#x2F; .&#x2F;components&#x2F;Context.tsx\n&#x2F;&#x2F; 这个组件做的事情\n&#x2F;&#x2F; 1.创建个createContext\n&#x2F;&#x2F; 2.给个名字displayName\n\n&#x2F;&#x2F; ...类型代码不关注\nexport const ReactReduxContext &#x3D;&#x2F;*#__PURE__*&#x2F; React.createContext&lt;ReactReduxContextValue&gt;(null as any)\n\n&#x2F;&#x2F; ...类型代码不关注\n\nif (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;\n  ReactReduxContext.displayName &#x3D; &#39;ReactRedux&#39;\n&#125;\n\nexport default ReactReduxContext\nconnect&#x2F;&#x2F; .&#x2F;components&#x2F;connect.tsx\n&#x2F;&#x2F; 这个文件比较长，先不看\n&#x2F;&#x2F; hoist-non-react-statics这个依赖可以帮助我们自动拷贝非React的静态方法\nuseDispatch、createDispatchHook把ts类型删删，看上去更简单了\n&#x2F;&#x2F; .&#x2F;hooks&#x2F;useDispatch\n&#x2F;&#x2F; 用createDispatchHook钩子工厂创建了个钩子useDispatch\nexport function createDispatchHook(context) &#123;\n  &#x2F;&#x2F; TODO: createStoreHook下面再看，先跳过\n  const useStore &#x3D; context &#x3D;&#x3D;&#x3D; ReactReduxContext ? useDefaultStore : createStoreHook(context)\n  return function useDispatch() &#123;\n    const store &#x3D; useStore()\n    &#x2F;&#x2F; @ts-ignore\n    return store.dispatch\n  &#125;\n&#125;\n&#x2F;**\n * A hook to access the redux &#96;dispatch&#96; function.\n *\n * @returns &#123;any|function&#125; redux store&#39;s &#96;dispatch&#96; function\n *\n * @example\n *\n * import React, &#123; useCallback &#125; from &#39;react&#39;\n * import &#123; useDispatch &#125; from &#39;react-redux&#39;\n *\n * export const CounterComponent &#x3D; (&#123; value &#125;) &#x3D;&gt; &#123;\n *   const dispatch &#x3D; useDispatch()\n *   const increaseCounter &#x3D; useCallback(() &#x3D;&gt; dispatch(&#123; type: &#39;increase-counter&#39; &#125;), [])\n *   return (\n *     &lt;div&gt;\n *       &lt;span&gt;&#123;value&#125;&lt;&#x2F;span&gt;\n *       &lt;button onClick&#x3D;&#123;increaseCounter&#125;&gt;Increase counter&lt;&#x2F;button&gt;\n *     &lt;&#x2F;div&gt;\n *   )\n * &#125;\n *&#x2F;\nexport const useDispatch &#x3D; &#x2F;*#__PURE__*&#x2F; createDispatchHook()\n\nuseSelector、createSelectorHook&#x2F;&#x2F; .&#x2F;hooks&#x2F;useSelector\n&#x2F;&#x2F; 用 createSelectorHook 钩子工厂创建了个钩子 useSelector\n\nlet useSyncExternalStoreWithSelector &#x3D; notInitialized as uSESWS\nexport const initializeUseSelector &#x3D; (fn: uSESWS) &#x3D;&gt; &#123;\n  useSyncExternalStoreWithSelector &#x3D; fn\n&#125;\n\nconst refEquality: EqualityFn&lt;any&gt; &#x3D; (a, b) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; b\n\n&#x2F;&#x2F; 下面的代码保留范型，Selected\nexport function createSelectorHook(\n  context &#x3D; ReactReduxContext\n): &lt;TState &#x3D; unknown, Selected &#x3D; unknown&gt;(\n  selector: (state: TState) &#x3D;&gt; Selected,\n  equalityFn?: EqualityFn&lt;Selected&gt;\n) &#x3D;&gt; Selected &#123;\n  const useReduxContext &#x3D;\n    context &#x3D;&#x3D;&#x3D; ReactReduxContext\n      ? useDefaultReduxContext\n      : () &#x3D;&gt; useContext(context)\n\n  return function useSelector(\n    selector,\n    equalityFn &#x3D; refEquality\n  ) &#123;\n\n    const &#123; store, subscription, getServerState &#125; &#x3D; useReduxContext()!\n\n    const selectedState &#x3D; useSyncExternalStoreWithSelector(\n      subscription.addNestedSub,\n      store.getState,\n      getServerState || store.getState,\n      selector,\n      equalityFn\n    )\n\n    useDebugValue(selectedState) &#x2F;&#x2F; 标记\n\n    return selectedState\n  &#125;\n&#125;\n\n&#x2F;**\n * A hook to access the redux store&#39;s state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param &#123;Function&#125; selector the selector function\n * @param &#123;Function&#x3D;&#125; equalityFn the function that will be used to determine equality\n *\n * @returns &#123;any&#125; the selected state\n *\n * @example\n *\n * import React from &#39;react&#39;\n * import &#123; useSelector &#125; from &#39;react-redux&#39;\n *\n * export const CounterComponent &#x3D; () &#x3D;&gt; &#123;\n *   const counter &#x3D; useSelector(state &#x3D;&gt; state.counter)\n *   return &lt;div&gt;&#123;counter&#125;&lt;&#x2F;div&gt;\n * &#125;\n *&#x2F;\nexport const useSelector &#x3D; &#x2F;*#__PURE__*&#x2F; createSelectorHook()\nuseStore、createStoreHook\n&#x2F;&#x2F; 1.用钩子工厂创建了个钩子\n&#x2F;&#x2F; 2.从   const &#123; store &#125; &#x3D; useReduxContext()! 获取store\n\n&#x2F;**\n * Hook factory, which creates a &#96;useStore&#96; hook bound to a given context.\n *\n * @param &#123;React.Context&#125; [context&#x3D;ReactReduxContext] Context passed to your &#96;&lt;Provider&gt;&#96;.\n * @returns &#123;Function&#125; A &#96;useStore&#96; hook bound to the specified context.\n *&#x2F;\nexport function createStoreHook&lt;\n  S &#x3D; unknown,\n  A extends BasicAction &#x3D; AnyAction\n  &#x2F;&#x2F; @ts-ignore\n&gt;(context?: Context&lt;ReactReduxContextValue&lt;S, A&gt;&gt; &#x3D; ReactReduxContext) &#123;\n  const useReduxContext &#x3D;\n    &#x2F;&#x2F; @ts-ignore\n    context &#x3D;&#x3D;&#x3D; ReactReduxContext\n      ? useDefaultReduxContext\n      : () &#x3D;&gt; useContext(context)\n  return function useStore&lt;\n    State &#x3D; S,\n    Action extends BasicAction &#x3D; A\n    &#x2F;&#x2F; @ts-ignore\n  &gt;() &#123;\n    const &#123; store &#125; &#x3D; useReduxContext()!\n    &#x2F;&#x2F; @ts-ignore\n    return store as Store&lt;State, Action&gt;\n  &#125;\n&#125;\n\n&#x2F;**\n * A hook to access the redux store.\n *\n * @returns &#123;any&#125; the redux store\n *\n * @example\n *\n * import React from &#39;react&#39;\n * import &#123; useStore &#125; from &#39;react-redux&#39;\n *\n * export const ExampleComponent &#x3D; () &#x3D;&gt; &#123;\n *   const store &#x3D; useStore()\n *   return &lt;div&gt;&#123;store.getState()&#125;&lt;&#x2F;div&gt;\n * &#125;\n *&#x2F;\nexport const useStore &#x3D; &#x2F;*#__PURE__*&#x2F; createStoreHook()\n\nconnect 见：react-redux 源码2\n","slug":"2022-05-24react-redux","date":"2022-05-24T05:58:32.000Z","categories_index":"react-redux","tags_index":"react-redux,redux,源码","author_index":"陈海龙"},{"id":"eb38c4ce852a081263435b4198b57084","title":"flex width:0","content":"flex嵌套内部元素宽度默认100%，撑开父元素，父元素的根元素限制最大宽度，子元素并不受flex控制\n遇到多次了，这次是维护其他同事的代码，又撞见了，说明这个问题很常见，一个不留神，就踩到了\n根元素\n  ……\n  - 父元素flex\n  …… flex\n   - 子元素flex(默认宽度100%)\n\n\n.doc-tree-base-title-node .doc-tree-base-title-text &gt; a &#123;\n    display: flex;\n    align-items: center;\n    color: #777;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1;\n&#125;\n\n问题\n 观察下发现，flex是嵌套的，最外层的还是flex，一层一层，最外层的宽度，却是由最内层的宽度决定（这个调试可以看到）\n调试\n图1\n\n \n\n图2\n\n \n\n图3\n\n \n分析 图1 元素没有宽度，宽度默认是100%\n 图1到图3是由a标签子元素撑开的，宽度是100%,加上操作按钮，元素宽度超100%\n 而在侧边树结构的最外层设置了max-width: 500px,而内部子元素尺寸却是599.48 x 36\n 显然是不合理的\n修复 根元素\n  ……\n  - 父元素flex\n  …… flex\n   - 子元素flex(默认宽度设置宽度0 或者其他小点的宽度，越小越好)\n\n \n什么原因导致的MDN flex\n语法\n&#x2F;* 关键字值 *&#x2F;\nflex: auto;\nflex: initial;\nflex: none;\n\n&#x2F;* 一个值, 无单位数字: flex-grow *&#x2F;\nflex: 2;\n\n&#x2F;* 一个值, width&#x2F;height: flex-basis *&#x2F;\nflex: 10em;\nflex: 30px;\nflex: min-content;\n\n&#x2F;* 两个值: flex-grow | flex-basis *&#x2F;\nflex: 1 30px;\n\n&#x2F;* 两个值: flex-grow | flex-shrink *&#x2F;\nflex: 2 2;\n\n&#x2F;* 三个值: flex-grow | flex-shrink | flex-basis *&#x2F;\nflex: 2 2 10%;\n\n&#x2F;*全局属性值 *&#x2F;\nflex: inherit;\nflex: initial;\nflex: unset;\n\n\n\n可以使用一个，两个或三个值来指定 flex属性。\n1.单值语法: 值必须为以下其中之一:\n\n一个无单位数(&lt;number&gt;): 它会被当作flex: 1 0; 的值被假定为1，然后 的值被假定为0。\n一个有效的宽度(width)值: 它会被当作 的值。\n关键字none，auto或initial.\n\n2.双值语法: 第一个值必须为一个无单位数，并且它会被当作  的值。第二个值必须为以下之一：\n\n一个无单位数：它会被当作  的值。\n一个有效的宽度值: 它会被当作  的值。\n\n3.三值语法:\n\n第一个值必须为一个无单位数，并且它会被当作  的值。\n第二个值必须为一个无单位数，并且它会被当作   的值。\n第三个值必须为一个有效的宽度值， 并且它会被当作  的值。\n\n 可以看到单值，作为双值处理\n flex-shrink:1;\nflex-basis: 0;\n\nflex-basis 自来看下flex-base\n 查看文档后发现，文档上没说关于flex-basic: 0 的事情,给了个演示，也看不出来想表达什么\nflex-basis 属性的含义w3c flex-basis-propertyflex布局一般由flex容器（display 属性值为 flex 或 inline-flex）和其子元素（后文亦称flex子项或flex item）构成。flex-basis 属性一般作用在flex子项上，它定义了：在flex容器分配剩余空间前flex子项在主轴方向上的初始尺寸。flex子项在主轴方向上的实际尺寸是根据元素自身尺寸、flex-basis、flex-grow、flex-shrink 等属性共同决定的。如何计算实际尺寸不是本文重点，不继续展开。\nflex-basis:0px与0%\n如果 flex-basis 的值为百分数，且它flex容器的尺寸没有被显式设置，此时 flex-basis 的值会被解析为 content\n\n\n其他，值得一看flex: 1在浏览器中，flex: 1 的 flex-basis 值为什么不是W3C文档中提到的 0 ？\n当使用 flex 属性但又省略不写它其中的 flex-basis 值时，会将 flex-basis 设置为 0.\n这里的 0 单位是 px 还是 % 我们在Chrome浏览器里就能验证：\n\n\n答案是 px.\n这段是2015年修正日志里的，意思是将之前 flex 简写语法里的 flex-basis 的解析值从 0% 恢复为原来的 0.\n注意： 这个值的解析规则经历了 0px -&gt; 0% -&gt; 0px 的变化，这是W3C flex 标准文档的视角。\n简而言之就是有兼容性问题。现在已有很多网页都利用了 flex 属性的这个特性来开发。如果简写语法里 flex-basis 的解析从 0% 变为 0px 会导致部分情况下flex容器塌陷，致使很多网页异常\n建议看原文\n","slug":"2022-05-23width0","date":"2022-05-23T09:16:21.000Z","categories_index":"css3","tags_index":"bug,css3","author_index":"陈海龙"},{"id":"436e39263be04b5730d01a19facc4657","title":"CSS如何工作","content":"浏览器工作原理\n\n\n\n\n\n\n\n\n当浏览器展示一个文件的时候，它必须兼顾文件的内容和文件的样式信息\n如何加载CSS和HTML下面的步骤是浏览加载网页的简化版本:\n\n浏览器载入HTML文件（比如从网络上获取）。\n将HTML文件转化成一个DOM（Document Object Model），DOM是文件在计算机内存中的表现形式，下一节将更加详细的解释DOM。\n接下来，浏览器会拉取该HTML相关的大部分资源，比如嵌入到页面的图片、视频和CSS样式。JavaScript则会稍后进行处理，简单起见，同时此节主讲CSS，所以这里对如何加载JavaScript不会展开叙述。\n浏览器拉取到CSS之后会进行解析，根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）应用在对应的DOM的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。\n上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。\n网页展示在屏幕上（这一步被称为着色）。\n\n运行图\n\n\n\n\n无法解析的CSS会发生什么\n\n\n\n\n\n\n\n\n答案就是浏览器什么也不会做，继续解析下一个CSS样式！\n以下是废话：\n\n浏览器并不会同时实现所有的新CSS，此外很多人也不会使用最新版本的浏览器。鉴于CSS一直不断的开发，因此领先于浏览器可以识别的范围，那么你也许会好奇当浏览器遇到无法解析的CSS选择器或声明的时候会发生什么呢？\n\nCSS规则： 如果一个浏览器在解析你所书写的CSS规则的过程中遇到了无法理解的属性或者值，它会忽略这些并继续解析下面的CSS声明。在你书写了错误的CSS代码（或者误拼写），又或者当浏览器遇到对于它来说很新的还没有支持的CSS代码的时候上述的情况同样会发生（直接忽略）。\n\n选择器： 相似的，当浏览器遇到无法解析的选择器的时候，他会直接忽略整个选择器规则，然后解析下一个CSS选择器。\n\n\n\n\n关于DOM一个DOM有一个树形结构，标记语言中的每一个元素、属性以及每一段文字都对应着结构树中的一个节点（Node&#x2F;DOM或DOM node）。节点由节点本身和其他DOM节点的关系定义，有些节点有父节点，有些节点有兄弟节点（同级节点）。\n对于DOM的理解会很大程度上帮助你设计、调试和维护你的CSS，因为DOM是你的CSS样式和文件内容的结合。当你使用浏览器F12调试的时候你需要操作DOM以查看使用了哪些规则。\n&lt;p&gt;\n  Let&#39;s use:\n  &lt;span&gt;Cascading&lt;&#x2F;span&gt;\n  &lt;span&gt;Style&lt;&#x2F;span&gt;\n  &lt;span&gt;Sheets&lt;&#x2F;span&gt;\n&lt;&#x2F;p&gt;\n\n\nP\n├─ &quot;Let&#39;s use:&quot;\n├─ SPAN\n|  └─ &quot;Cascading&quot;\n├─ SPAN\n|  └─ &quot;Style&quot;\n└─ SPAN\n   └─ &quot;Sheets&quot;\n\n\n\n参考MDN\n","slug":"2022-05-23css","date":"2022-05-23T07:53:28.000Z","categories_index":"浏览器原理","tags_index":"浏览器原理","author_index":"陈海龙"},{"id":"98f521cd056816f8a9831692e48a6839","title":"monorepo","content":"背景\n调试源码时候，总会遇到多包的仓库，遇到了不晓得如何调试\n开发个库或者是插件之类的开发的比较混乱\n经历多个项目的毒打，终于有时间学下monorepo\n\nlerna、yarn workspace\n和java微服务架构代码很像\n很多项目是 lerna+yarn workspace，如果不懂，或者了解了一点lerna。上去一顿操作，各种报错，在所难免（亲身经历）\n\nmonorepo管理对于维护过多个package(功能相近)的同学来说，都会遇到一个选择题，这些package是放在一个仓库里维护还是放在多个仓库里单独维护。Multirepo 是比较传统的做法，即每一个 package 都单独用一个仓库来进行管理。Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块&#x2F;包 (package)，不同于常见的每个模块建一个 repo。\n目前有不少大型开源项目采用了这种方式，如 Babel，React, Meteor, Ember, Angular,Jest, Umijs, Vue, 还有 create-react-app, react-router 等。几乎我们熟知的仓库，都无一例外的采用了monorepo 的方式，可以看到这些项目的第一级目录的内容以脚手架为主，主要内容都在 packages目录中、分多个 package 进行管理。\n目录结构如下:\n├── packages\n|   ├── pkg1\n|   |   ├── package.json\n|   ├── pkg2\n|   |   ├── package.json\n├── package.json\n\nmonorepo 最主要的好处是统一的工作流和Code Sharing。比如我想看一个 pacakge 的代码、了解某段逻辑，不需要找它的 repo，直接就在当前 repo；当某个需求要修改多个 pacakge 时，不需要分别到各自的 repo 进行修改、测试、发版或者 npm link，直接在当前 repo 修改，统一测试、统一发版。只要搭建一套脚手架，就能管理（构建、测试、发布）多个 package。\n一图胜千言:\n前者允许多元化发展（各项目可以有自己的构建工具、依赖管理策略、单元测试方法），后者希望集中管理，减少项目间的差异带来的沟通成本。\n虽然拆分子仓库、拆分子 npm 包是进行项目隔离的天然方案，但当仓库内容出现关联时，没有任何一种调试方式比源码放在一起更高效。\n结合shop-service门户的实际场景和业务需要，天然的 MonoRepo ! 一个理想的开发环境可以抽象成这样：\n\n\n\n\n\n\n\n\n\n“只关心业务代码，可以直接跨业务复用而不关心复用方式，调试时所有代码都在源码中。”\n在前端开发环境中，多 Git Repo，多 npm 则是这个理想的阻力，它们导致复用要关心版本号，调试需要 npm link。而这些是 MonoRepo 最大的优势。\n上图中提到的利用相关工具就是今天的主角 Lerna ! Lerna是业界知名度最高的 Monorepo 管理工具，功能完整。\nLernaLerna 是一个管理多个 npm 模块的工具，是 Babel 自己用来维护自己的 Monorepo 并开源出的一个项目。优化维护多包的工作流，解决多个包互相依赖，且发布需要手动维护多个包的问题。\n2.1 安装推荐全局安装，因为会经常用到 lerna 命令\nnpm i -g lerna\n2.2 初始化项目\nlerna init\n\n其中 package.json &amp; lerna.json 如下:\n&#x2F;&#x2F; package.json\n&#123;\n  &quot;name&quot;: &quot;root&quot;,\n  &quot;private&quot;: true, &#x2F;&#x2F; 私有的，不会被发布，是管理整个项目，与要发布到npm的解耦\n  &quot;devDependencies&quot;: &#123;\n    &quot;lerna&quot;: &quot;^3.15.0&quot;\n  &#125;\n&#125;\n \n&#x2F;&#x2F; lerna.json\n&#123;\n  &quot;packages&quot;: [\n    &quot;packages&#x2F;*&quot;\n  ],\n  &quot;version&quot;: &quot;0.0.0&quot;\n&#125;\n\n\n2.3 创建npm包增加两个 packages\n\n2.4 增加模块依赖分别给相应的 package 增加依赖模块\nlerna add chalk &#x2F;&#x2F; 为所有 package 增加 chalk 模块 \nlerna add semver --scope @mo-demo&#x2F;cli-shared-utils &#x2F;&#x2F; 为 @mo-demo&#x2F;cli-shared-utils 增加 semver 模块 \nlerna add @mo-demo&#x2F;cli-shared-utils --scope @mo-demo&#x2F;cli &#x2F;&#x2F; 增加内部模块之间的依赖\n\n2.5 发布\nlerna publish\n\n2.6 依赖包管理上述1-5步已经包含了 Lerna 整个生命周期的过程了，但当我们维护这个项目时，新拉下来仓库的代码后，需要为各个 package 安装依赖包。\n我们在第4步 lerna add 时也发现了，为某个 package 安装的包被放到了这个 package 目录下的 node_modules 目录下。这样对于多个 package 都依赖的包，会被多个 package 安装多次，并且每个 package 下都维护 node_modules ，也不清爽。于是我们使用 –hoist 来把每个 package 下的依赖包都提升到工程根目录，来降低安装以及管理的成本。\nlerna bootstrap --hoist\n\n为了省去每次都输入 –hoist 参数的麻烦，可以在 lerna.json 配置：\n&#123;\n  &quot;packages&quot;: [\n    &quot;packages&#x2F;*&quot;\n  ],\n  &quot;command&quot;: &#123;\n    &quot;bootstrap&quot;: &#123;\n      &quot;hoist&quot;: true\n    &#125;\n  &#125;,\n  &quot;version&quot;: &quot;0.0.1-alpha.0&quot;\n&#125;\n配置好后，对于之前依赖包已经被安装到各个 package 下的情况，我们只需要清理一下安装的依赖即可：\nlerna clean\n\n然后执行 lerna bootstrap 即可看到 package 的依赖都被安装到根目录下的 `node_modules` 中了。\n\nLerna + Monorepo 最佳实践\n\n\n\n\n\n\n\n\nlerna不负责构建，测试等任务，它提出了一种集中管理package的目录模式，提供了一套自动化管理程序，让开发者不必再深耕到具体的组件里维护内容，在项目根目录就可以全局掌控，基于 npm scripts，使用者可以很好地完成组件构建，代码格式化等操作。接下来我们就来看看，如果基于 Lerna，并结合其它工具来搭建 Monorepo 项目的最佳实践。\n目前最常见的 monorepo 解决方案是 Lerna 和 yarn 的 workspaces 特性，基于lerna和yarn workspace的monorepo工作流。由于yarn和lerna在功能上有较多的重叠,我们采用yarn官方推荐的做法,用yarn来处理依赖问题，用lerna来处理发布问题。能用yarn做的就用yarn做吧\nyarn workspace3.1.1 搭建环境普通项目：clone下来后通过yarn install,即可搭建完项目，有时需要配合postinstall hooks,来进行自动编译，或者其他设置。\nmonorepo: 各个库之间存在依赖，如A依赖于B，因此我们通常需要将B link到A的node_module里，一旦仓库很多的话，手动的管理这些link操作负担很大，因此需要自动化的link操作，按照拓扑排序将各个依赖进行link\n解决方式：通过使用workspace，yarn install会自动的帮忙解决安装和link问题\nyarn install # 等价于 lerna bootstrap --npm-client yarn --use-workspaces\n\n3.1.2 清理环境在依赖乱掉或者工程混乱的情况下，清理依赖\n普通项目： 直接删除node_modules以及编译后的产物。\nmonorepo： 不仅需要删除root的node_modules的编译产物还需要删除各个package里的node_modules以及编译产物\n解决方式：使用lerna clean来删除所有的node_modules，使用yarn workspaces run clean来执行所有package的清理工作\nlerna clean # 清理所有的node_modules\nyarn workspaces run clean # 执行所有package的clean操作\n\n3.1.3 安装|删除依赖普通项目： 通过yarn add和yarn remove即可简单姐解决依赖库的安装和删除问题\nmonorepo: 一般分为三种场景\n给某个package安装依赖：yarn workspace packageB add packageA 将packageA作为packageB的依赖进行安装\n给所有的package安装依赖: 使用yarn workspaces add lodash 给所有的package安装依赖\n给root 安装依赖：一般的公用的开发工具都是安装在root里，如typescript,我们使用yarn add -W -D typescript来给root安装依赖\n对应的三种场景删除依赖如下\nyarn workspace packageB remove packageA\nyarn workspaces remove lodash\nyarn remove -W -D typescript\n\n\n3.1.4 项目构建普通项目：建立一个build的npm script，使用yarn build即可完成项目构建\nmonorepo:区别于普通项目之处在于各个package之间存在相互依赖，如packageB只有在packageA构建完之后才能进行构建，否则就会出错，这实际上要求我们以一种拓扑排序的规则进行构建。\n我们可以自己构建拓扑排序规则，很不幸的是yarn的workspace暂时并未支持按照拓扑排序规则执行命令,虽然该 rfc已经被accepted，但是尚未实现, 幸运的是lerna支持按照拓扑排序规则执行命令, –sort参数可以控制以拓扑排序规则执行命令\nlerna run --stream --sort build\n3.1.5 版本升级及发包项目测试完成后，就涉及到版本发布，版本发布一般涉及到如下一些步骤\n条件验证: 如验证测试是否通过，是否存在未提交的代码，是否在主分支上进行版本发布操作\nversion_bump:发版的时候需要更新版本号，这时候如何更新版本号就是个问题，一般大家都会遵循 semVer语义，\n生成changelog: 为了方便查看每个package每个版本解决了哪些功能，我们需要给每个package都生成一份changelog方便用户查看各个版本的功能变化。\n生成git tag：为了方便后续回滚问题及问题排查通常需要给每个版本创建一个git tag\ngit 发布版本：每次发版我们都需要单独生成一个commit记录来标记milestone\n发布npm包：发布完git后我们还需要将更新的版本发布到npm上，以便外部用户使用\n我们发现手动的执行这些操作是很麻烦的且及其容易出错，幸运的是lerna可以帮助我们解决这些问题\nyarn官方并不打算支持发布流程，只是想做好包管理工具，因此这部分还是需要通过lerna支持\nlerna提供了publish和version来支持版本的升级和发布, publish的功能可以即包含version的工作，也可以单纯的只做发布操作。\n3.2 优雅的提交3.2.1 commitizen &amp;&amp; cz-lerna-changelogcommitizen 是用来格式化 git commit message 的工具，它提供了一种问询式的方式去获取所需的提交信息。\ncz-lerna-changelog 是专门为 Lerna 项目量身定制的提交规范，在问询的过程，会有类似影响哪些 package 的选择。如下：\n\n我们使用 commitizen 和 cz-lerna-changelog 来规范提交，为后面自动生成日志作好准备。\n因为这是整个工程的开发依赖，所以在根目录安装：\nyarn add  -D commitizen\nyarn add  -D cz-lerna-changelog\n\n安装完成后，在 package.json 中增加 config 字段，把 cz-lerna-changelog 配置给 commitizen。同时因为commitizen不是全局安全的，所以需要添加 scripts 脚本来执行 git-cz\n&#123;\n  &quot;name&quot;: &quot;root&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: &#123;\n    &quot;commit&quot;: &quot;git-cz&quot;\n  &#125;,\n  &quot;config&quot;: &#123;\n    &quot;commitizen&quot;: &#123;\n      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;\n    &#125;\n  &#125;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;commitizen&quot;: &quot;^3.1.1&quot;,\n    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,\n    &quot;lerna&quot;: &quot;^3.15.0&quot;\n  &#125;\n&#125;\n\n\n之后在常规的开发中就可以使用 yarn run commit 来根据提示一步一步输入，来完成代码的提交。\n3.2.2 commitlint &amp;&amp; husky上面我们使用了 commitizen 来规范提交，但这个要靠开发自觉使用yarn run commit 。万一忘记了，或者直接使用 git commit 提交怎么办？答案就是在提交时对提交信息进行校验，如果不符合要求就不让提交，并提示。校验的工作由 commitlint 来完成，校验的时机则由 husky 来指定。husky 继承了 Git 下所有的钩子，在触发钩子的时候，husky 可以阻止不合法的 commit,push 等等。\n安装 commitlint 以及要遵守的规范\nyarn add -D @commitlint&#x2F;cli @commitlint&#x2F;config-conventional\n\n在工程根目录为 commitlint 增加配置文件 commitlint.config.js 为commitlint 指定相应的规范\nmodule.exports &#x3D; &#123; \n\textends: [&#39;@commitlint&#x2F;config-conventional&#39;] \n&#125;\n\n安装 husky\nyarn add -D husky\n\n\n在 package.json 中增加如下配置\n&quot;husky&quot;: &#123; \n\t\t&quot;hooks&quot;: &#123; \n   \t\t&quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot; \n    &#125;\n&#125;\n\n\n“commit-msg”是git提交时校验提交信息的钩子，当触发时便会使用 commitlit 来校验。安装配置完成后，想通过 git commit 或者其它第三方工具提交时，只要提交信息不符合规范就无法提交。从而约束开发者使用 yarn run commit 来提交。\n3.2.3 eslint &amp;&amp; lint-staged除了规范提交信息，代码本身肯定也少了靠规范来统一风格。\n安装\nyarn add  -D standard lint-staged\n\n\neslint就是完整的一套 JavaScript（typescript） 代码规范，自带 linter &amp; 代码自动修正。自动格式化代码并修正，提前发现风格以及程序问题, 同时也支持typescript的代码规范校验，eslintrc.json配置：\n&#123;\n    &quot;extends&quot;: [\n        &quot;yayajing&quot;,\n        &quot;plugin:@typescript-eslint&#x2F;recommended&quot;\n    ],\n    &quot;parser&quot;: &quot;typescript-eslint-parser&quot;,\n    &quot;plugins&quot;: [&quot;@typescript-eslint&quot;],\n    &quot;rules&quot;: &#123;\n        &quot;eqeqeq&quot;:&quot;off&quot;,\n        &quot;@typescript-eslint&#x2F;explicit-function-return-type&quot;: &quot;off&quot;,\n        &quot;no-template-curly-in-string&quot;: &quot;off&quot;\n    &#125;\n  &#125;\n\n\nlint-staged staged 是 Git 里的概念，表示暂存区，lint-staged 表示只检查并矫正暂存区中的文件。一来提高校验效率，二来可以为老的项目带去巨大的方便。package.json配置\n&#x2F;&#x2F; package.json\n&#123;\n  &quot;name&quot;: &quot;root&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: &#123;\n    &quot;c&quot;: &quot;git-cz&quot;\n  &#125;,\n  &quot;config&quot;: &#123;\n    &quot;commitizen&quot;: &#123;\n      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;\n    &#125;\n  &#125;,\n  &quot;husky&quot;: &#123;\n    &quot;hooks&quot;: &#123;\n      &quot;pre-commit&quot;: &quot;lint-staged&quot;,\n      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;\n    &#125;\n  &#125;,\n  &quot;lint-staged&quot;: &#123;\n    &quot;*.ts&quot;: [\n      &quot;eslint --fix&quot;,\n      &quot;git add&quot;\n    ]\n  &#125;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;@commitlint&#x2F;cli&quot;: &quot;^8.1.0&quot;,\n    &quot;@commitlint&#x2F;config-conventional&quot;: &quot;^8.1.0&quot;,\n    &quot;commitizen&quot;: &quot;^3.1.1&quot;,\n    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,\n    &quot;husky&quot;: &quot;^3.0.0&quot;,\n    &quot;lerna&quot;: &quot;^3.15.0&quot;,\n    &quot;lint-staged&quot;: &quot;^9.2.0&quot;\n  &#125;\n&#125;\n\n\n安装完成后，在 package.json 增加 lint-staged 配置，如上所示表示对暂存区中的 js 文件执行 eslint –fix 校验并自动修复。那什么时候去校验呢，就又用到了上面安装的 husky ，husky的配置中增加pre-commit的钩子用来执行 lint-staged 的校验操作。\n此时提交 ts 文件时，便会自动修正并校验错误。即保证了代码风格统一，又能提高代码质量。\n3.3 发布自动生成日志有了之前的规范提交，自动生成日志便水到渠成了。再详细看下 lerna publish 时做了哪些事情：\n3.3.1 lerna version 更新版本\n\n找出从上一个版本发布以来有过变更的 package\n\n提示开发者确定要发布的版本号\n\n将所有更新过的的 package 中的package.json的version字段更新\n\n将依赖更新过的 package 的 包中的依赖版本号更新\n\n更新 lerna.json 中的 version 字段\n\n提交上述修改，并打一个 tag\n\n推送到 git 仓库\n\n\n3.3.2 使用 npm publish 将新版本推送到 npmCHANGELOG 很明显是和 version 一一对应的，所以需要在 lerna version 中想办法，查看 lerna version 命令的详细说明后，会看到一个配置参数 --conventional-commits。没错，只要我们按规范提交后，在 lerna version 的过程中会便会自动生成当前这个版本的 CHANGELOG。为了方便，不用每次输入参数，可以配置在 lerna.json中，如下：\n&#123;\n  &quot;packages&quot;: [\n    &quot;packages&#x2F;*&quot;\n  ],\n  &quot;command&quot;: &#123;\n    &quot;bootstrap&quot;: &#123;\n      &quot;hoist&quot;: true\n    &#125;,\n    &quot;version&quot;: &#123;\n      &quot;conventionalCommits&quot;: true\n    &#125;\n  &#125;,\n  &quot;ignoreChanges&quot;: [\n    &quot;**&#x2F;*.md&quot;\n  ],\n  &quot;version&quot;: &quot;0.0.1-alpha.1&quot;\n&#125;\n\n\nlerna version 会检测从上一个版本发布以来的变动，但有一些文件的提交，我们不希望触发版本的变动，譬如 .md 文件的修改，并没有实际引起 package 逻辑的变化，不应该触发版本的变更。可以通过 ignoreChanges 配置排除。如上。\n实际 lerna version很少直接使用，因为它包含在 lerna publish 中了，直接使用 lerna publish就好了。\n3.4 完善的测试用例monorepo项目：测试有两种方式\n\n使用统一的jest测试配置这样方便全局的跑jest即可，好处是可以方便统计所有代码的测试覆盖率，坏处是如果package比较异构（如小程序，前端，node 服务端等），统一的测试配置不太好编写\n\n每个package单独支持test命令，使用yarn workspace run test，坏处是不好统一收集所有代码的测试覆盖率\n\n\n如果采用jest编写测试用例，支持typescript的话，需要初始化配置jest.config.js：\nmodule.exports &#x3D; &#123;\n  preset: &#39;ts-jest&#39;,\n  moduleFileExtensions: [&#39;ts&#39;],\n  testEnvironment: &#39;node&#39;\n&#125;\n\n4 实践总结到这里，基本上已经构建了基于lerna和yarn workspace的monorepo项目的最佳实践了，该有的功能都有：\n\n完善的工作流\n\ntypescript支持\n\n风格统一的编码\n\n完整的单元测试\n\n一键式的发布机制\n\n完美的更新日志\n\n\n……\n当然，构建一套完善的仓库管理机制，可能它的收益不是一些量化的指标可以衡量出来的，也没有直接的价值输出，但它能在日常的工作中极大的提高工作效率，解放生产力，节省大量的人力成本。\n参考lerna+yarn workspace+monorepo项目的最佳实践5分钟搞懂Monorepo2021年管理Monorepo代码库的11种出色工具\n","slug":"2022-05-23monorepo","date":"2022-05-23T06:45:12.000Z","categories_index":"npm","tags_index":"增效,npm,monorepo","author_index":"陈海龙"},{"id":"a8dbdf02ab5e598ef229ef514965f17c","title":"信标（Beacon ）","content":"Beacon  特点\n接口用于将异步和非阻塞请求发送到服务器。\n请求使用HTTP协议中的POST方法，请求通常不需要响应。\n这个请求被保证在，页面的unload状态从发起到完成之前，被发送。而并不需要一个阻塞请求，例如 XMLHttpRequest 。Beacon  场景发送异步非阻塞数据到服务端为什么是信标？Beacon 接口满足了分析和诊断代码的需要，这些代码通常会尝试在卸载文档之前将数据发送到 web服务器。发送数据的任何过早时机都可能导致错失收集数据的机会。但是，确保在卸载文档期间发送数据是开发人员难以做到的。\n\n用户代理通常会忽略卸载文档处理程序中的异步 XMLHttpRequests 请求。若要解决此问题，为了分析和诊断代码，通常会在 unload (en-US) 事件或 beforeunload (en-US) 事件中创建同步 XMLHttpRequest 请求以提交数据。同步 XMLHttpRequest 请求强制浏览器延迟卸载文档，并使下一个页面跳转看起来较慢。下一页面没有任何办法来避免这种页面加载性能不佳的感觉。\n其他技术其中一种技术是通过创建 Image 元素并在卸载文档处理程序中设置其 src 属性来延迟卸载以提交数据。由于大多数用户代理会延迟文档卸载，以完成挂起的图片加载，因此可以在卸载过程中提交数据。另一种方法是在卸载处理程序中创建一个无操作循环，花费数秒以延迟卸载并将数据提交到服务器。\n但是上述技术不仅代表了较差的编码模式，其中一些还是不可靠的，会导致下一个导航的页面加载性能较差的感觉。信标 API 提供了解决这些问题的标准方法。\n全局环境Beacon API 的 Navigator.sendBeacon() 方法用于在全局浏览上下文中向服务器发送数据信标。该方法有两个参数，URL和要在请求中发送的数据data。data参数是可选的，其类型可以是 ArrayBufferView、Blob、DOMString 或FormData。如果浏览器成功的以队列形式排列了用于传递的请求，则该方法返回“true”，否则返回“false”。\n生产环境Beacon API的 WorkerNavigator.sendBeacon() 方法用于从 worker global scope 向服务器发送数据信标。该方法有两个参数，URL和要在请求中发送的数据data。data参数是可选的，其类型可以是 ArrayBufferView、Blob、DOMString 或 FormData。如果浏览器成功的以队列形式排列了用于传递的请求，则该方法返回“true”，否则返回“false”。\n优点\nAPI 提供了解决这些问题的标准方法\n\n缺点\n浏览器兼容性Navigator.sendBeacon().Browser_compatibility表说明了该方法具有相对广泛地实现。但是，WorkerNavigator.sendBeacon().Browser_compatibility数据显示该方法没有被实现。\n\n","slug":"2022-05-23beacon","date":"2022-05-23T03:12:16.000Z","categories_index":"浏览器","tags_index":"浏览器","author_index":"陈海龙"},{"id":"2ed8e0ec0aaa29d8d085170a13236bf8","title":"flutter Bruno","content":"BrunoBruno 是由贝壳「用户体验中心 &amp; 移动端作业组」联合打造的一套企业级移动端 Flutter 组件库，于 12 月 10 日正式开源:\n官网\nPub 地址\nGitHub 仓库\n背景贝壳自 2018 年底开始对 Flutter 的探索和实践，Flutter 落地业务有效地提升了产研效率。但跨业务线协同效率较低，重复劳动力大，代码维护成本高等问题依旧凸显。Bruno 是贝壳针对上述问题在公司内发起的提效专项，致力于打造贝壳标准 Flutter 生态。经过两年的打磨和沉淀，Bruno 现已服务贝壳 B 端全线业务，涵盖 30 多种类型 100+  组件，为近 18 个 App 服务，新增页面组件覆盖率平均达到 80% 以上。\n相信贝壳遇到的问题也是大型团队或者个人开发者不可避免的问题，目前针对该类问题的中后台解决方案层出不穷，但在 Flutter 生态中类似成熟解决方案匮乏。我们希望将贝壳在 Flutter 领域的实践经验回馈给社区，更加完善 Flutter 生态，因此 Bruno 正式开源。\n设计理念Bruno 基于生长、包容、联接的设计理念，赋予组件轻巧灵活、拥抱变化、包容万物的品质。\nBruno 的优势\n适度灵活、充分可扩展\n\nBruno 倡导标准化下的自由、简单、灵活，基于 Flutter 基础组件的封装，使其具备适度灵活，使用组件提效尤为重要。同时组件支持充分可扩展，既可满足多产品的快速接入又能包容特殊场景。\n经过两年的业务实践，我们最终产出了 102 个组件，覆盖类型有 图表、导航、数据录入、操作反馈、内容展示 等。\n2. 连接设计&lt;–&gt;开发\nBruno 基于 Sketch MeaXure 二次开发，实现组件自动识别和标注。开发者可以从设计侧产出的标注稿中清晰的看到页面涵盖的组件，信息无缝传达，高效连接设计与开发。\n3. 主题定制、品牌风格自定义\nBruno 不仅支持全局色号的替换，还支持组件圆角、字体大小、内部间距等属性的定制。在定制全局样式打造自有品牌风格的同时，支持单个组件自定义满足特异化场景需求。\n\n默认基础规范\n\n\n\n\n\n全局样式定制\n\n\n\n单组件样式定制\n\nBruno 还可支持单业务的全局配置，也就是说如果你是组件化工程结构，那么你可以定义每个业务组件的特有风格。\n\n物料承载、教程指引\n\nBruno 官网承载产品设计物料、组件配套文档、Demo 下载、搜索等基础能力，同时配有教程指引开发也可操作 Sketch 插件设计页面，实现零设计资源介入。\nBruno 官网: https://bruno.ke.com\n未来展望\n丰富和完善组件\n\n目前 Bruno 组件涵盖种类可以覆盖常见使用场景，满足企业建立自有品牌形象 App 需求。未来我们会根据业务发展和产品升级不断迭代组件，丰富产品内容提升视觉体验。\n\n提升落地效率\n\n我们不止关注组件的设计与研发，组件落地也是提升产研效率至关重要的环节，因此我们对 Sketch MeaXure 做了二次改造，实现组件自动化标注。同时贝壳产研团队把自动化标注能力线上化，进一步提升组件落地效率。\n3、UI 自动化走查\n贝壳产研团队也在探索 UI 自动化走查方向，期望解放设计侧走查人力，让设计师更多投入对产品的洞察理解，创造优质设计，提升视觉体验。\n","slug":"2022-05-20fluter-bruno","date":"2022-05-20T02:52:49.000Z","categories_index":"flutter","tags_index":"增效,flutter,mobile","author_index":"陈海龙"},{"id":"4250bd0ddd67048179ff9fddd5b6e876","title":"npm开发wiki编辑器问题总结","content":"原架构\n重构后\ntsconfig.ts&#123;\n  &#x2F;&#x2F; 编译选项\n  &quot;compilerOptions&quot;: &#123;\n    &#x2F;&#x2F; 生成代码的语言版本：将我们写的 TS 代码编译成哪个版本的 JS 代码\n    &quot;target&quot;: &quot;es5&quot;,\n    &#x2F;&#x2F; 指定要包含在编译中的 library\n    &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;blob&#x2F;90e83adb44&#x2F;lib&#x2F;lib.dom.iterable.d.ts\n    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;esnext&quot;],\n    &#x2F;&#x2F; 允许 ts 编译器编译 js 文件\n    &quot;allowJs&quot;: true,\n    &#x2F;&#x2F; 跳过类型声明文件的类型检查\n    &quot;skipLibCheck&quot;: true,\n    &#x2F;&#x2F; es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异\n    &quot;esModuleInterop&quot;: true,\n    &#x2F;&#x2F; 允许通过 import x from &#39;y&#39; 即使模块没有显式指定 default 导出\n    &quot;allowSyntheticDefaultImports&quot;: true,\n    &#x2F;&#x2F; 开启严格模式\n    &quot;strict&quot;: true,\n    &#x2F;&#x2F; 对文件名称强制区分大小写\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &#x2F;&#x2F; 为 switch 语句启用错误报告\n    &quot;noFallthroughCasesInSwitch&quot;: true,\n    &#x2F;&#x2F; 生成代码的模块化标准\n    &quot;module&quot;: &quot;esnext&quot;,\n    &#x2F;&#x2F; 模块解析（查找）策略\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &#x2F;&#x2F; 允许导入扩展名为.json的模块\n    &quot;resolveJsonModule&quot;: true,\n    &#x2F;&#x2F; 是否将没有 import&#x2F;export 的文件视为旧（全局而非模块化）脚本文件\n    &quot;isolatedModules&quot;: true,\n    &#x2F;&#x2F; 编译时不生成任何JS文件（只进行类型检查）\n    &quot;noEmit&quot;: true,\n    &#x2F;&#x2F; 指定将 JSX 编译成什么形式\n    &quot;jsx&quot;: &quot;react-jsx&quot;\n  &#125;,\n  &#x2F;&#x2F; 指定允许 ts 处理的目录\n  &quot;include&quot;: [&quot;src&quot;]\n&#125;\n&#x2F;&#x2F; https:&#x2F;&#x2F;blog.csdn.net&#x2F;m0_62118859&#x2F;article&#x2F;details&#x2F;124543485\nCannot read properties of nullreact.development.js:1621 Uncaught TypeError: Cannot read properties of null\n\n\nahooks  版本\nuseControlledValue\nUncaught SyntaxError: The requested module &#39;&#x2F;node_modules&#x2F;.vite&#x2F;deps&#x2F;ahooks.js?v&#x3D;a7b43f7a&#39; does not provide an export named &#39;useControlledValue&#39; (at index.tsx:2:1)\n\n\n\n\n\n\n\n\n\nDeprecated the useControlledValue naming left over from 1.0, please use useControllableValue insteadv3.0.0-alpha.4\n\n\nuseRequest\n\n\nreact_devtools_backend.js:4026 Warning: Failed prop type: The prop &#96;loadMore&#96; is marked as required in &#96;InfiniteScroll&#96;, but its value is &#96;undefined&#96;.\n\n\n\n\n\n\n\n\n\n\n\nRemoved loadMore related attributes, it is recommended to use useInfiniteScroll to achieve unlimited loading capacity.v3.0.0-alpha.4\n除了 dependencies 和 devDependencies，其他的依赖有什么作用呢\nPre-bundling dependencies:\nreact\nrecoil\nreact-dom\nreact-router-dom\nantd\n(...and 29 more)\n\n本地npm link处理不了依赖冲突\n老版本可以运行\n\n\n\n新版本报错\n原因 ahooks^3.x.x没有v2版本api\n\n\n\n发布安装到项目中测试\n发布\n\n\nnpm 脚本\n&quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;vite --port 3004&quot;,\n    &quot;start&quot;: &quot;yarn build:css &amp;&amp; webpack serve --config config&#x2F;webpack.dev.config.js&quot;,\n    &quot;copy:css&quot;: &quot;cp src&#x2F;**&#x2F;*.css dist&#x2F; &amp;&amp; rsync src&#x2F;styles&#x2F;*.css dist&#x2F;styles&#x2F;&quot;,\n    &quot;build&quot;: &quot;tsc&quot;,\n    &quot;build:css&quot;: &quot;node-sass src&#x2F; -o src&#x2F; &quot;,\n    &quot;prepublishOnly&quot;: &quot;rm -rf dist&#x2F; &amp;&amp; yarn build &amp;&amp; yarn build:css &amp;&amp; yarn copy:css&quot;,\n    &quot;t&quot;: &quot;rm -rf dist&#x2F; &amp;&amp; yarn build &amp;&amp; yarn build:css &amp;&amp; yarn copy:css&quot;,\n    &quot;push:beta&quot;: &quot;npm publish --tag beta&quot;\n  &#125;,\n\n执行脚本$ yarn push:beta\n\n发布结果\n\n\n\n## Current Tags\n\n\n*   [0.0.1 ](https:&#x2F;&#x2F;tnpm.ty-inc.top&#x2F;package&#x2F;@ty-fe&#x2F;slate-wiki-pro&#x2F;v&#x2F;0.0.1)                               ...           beta (a few seconds ago)\n*   [0.0.1 ](https:&#x2F;&#x2F;tnpm.ty-inc.top&#x2F;package&#x2F;@ty-fe&#x2F;slate-wiki-pro&#x2F;v&#x2F;0.0.1)                               ...           latest (a few seconds ago)\n\n\n\n\n图片没有渲染，修改，打包重新发布0.0.1-220519beta版本测试slate-wiki@0.0.1-220519beta\n\nnpm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; \nnpm notice name:          @ty-fe&#x2F;slate-wiki                     \nnpm notice version:       0.0.1-220519beta                        \nnpm notice filename:      @ty-fe&#x2F;slate-wiki-0.0.1-220519beta.tgz\nnpm notice package size:  228.0 kB                                \nnpm notice unpacked size: 1.2 MB                                  \nnpm notice shasum:        a2991de4933a9e5039ceb7082c5e0a80c2db828c\nnpm notice integrity:     sha512-iHQKpR2LM+F6Z[...]XDN40tHfwMxNg&#x3D;&#x3D;\nnpm notice total files:   417                                     \nnpm notice \n+ @ty-fe&#x2F;slate-wiki@0.0.1-220519beta\n✨  Done in 16.36s.\n\n\nslate-wiki-pro@0.0.1-220519beta\n\nnpm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; \nnpm notice name:          @ty-fe&#x2F;slate-wiki-pro                     \nnpm notice version:       0.0.1-220519beta                            \nnpm notice filename:      @ty-fe&#x2F;slate-wiki-pro-0.0.1-220519beta.tgz\nnpm notice package size:  83.5 kB                                     \nnpm notice unpacked size: 413.7 kB                                    \nnpm notice shasum:        85cbe6fbffafc75db16e02427d1eac9b6a906ec3    \nnpm notice integrity:     sha512-3viVco6ssb2N3[...]xxisHN9+qYnCA&#x3D;&#x3D;    \nnpm notice total files:   205                                         \nnpm notice \n+ @ty-fe&#x2F;slate-wiki-pro@0.0.1-220519beta\n✨  Done in 14.68s.\n\n\n问题\n传染性slate-wiki-pro,依赖于slate-wiki。slate-wiki改动，项目依赖slate-wiki-pro，需要发slate-wiki和slate-wiki-pro，项目要安装slate-wiki-pro\n\n是否可以让项目直接依赖slate-wiki、slate-wiki-pro改动哪个发布哪个，互不影响？\n\n项目很卡\n\n将slate、slate-wiki、slate-wiki-pro使用umd资源，避免重复编译是否可以？\n\n依赖贼多\n\n[######--------------------------------------------------] 49992&#x2F;102014\n\n\n启动没有想象中那么快了\n\nvite预编译时间过长  130262ms &#x2F; 1000 &#x2F; 60 大概两分钟，加载编译大概几分钟，慢的吓人\n\nvite v2.7.1 dev server running at:\n\n&gt; Local: http:&#x2F;&#x2F;localhost:3005&#x2F;\n&gt; Network: use &#96;--host&#96; to expose\n\nready in 130262ms.  #首次编译\n\n\n\nvite v2.7.1 dev server running at:\n\n&gt; Local: http:&#x2F;&#x2F;localhost:3005&#x2F;\n&gt; Network: use &#96;--host&#96; to expose\n\nready in 43312ms. #非首次编译\n\n\n代码放仓库\nslate-wiki\n\n\nCommand line instructionsYou can also upload existing files from your computer using the instructions below.\nGit global setup\ngit config --global user.name &quot;陈海龙&quot;\ngit config --global user.email &quot;haotian.chen@ty.com&quot;\nCreate a new repository\ngit clone ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.git\ncd slate-wiki\ntouch README.md\ngit add README.md\ngit commit -m &quot;add README&quot;\nPush an existing folder\ncd existing_folder\ngit init\ngit remote add origin ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.git\ngit add .\ngit commit -m &quot;Initial commit&quot;\nPush an existing Git repository\ncd existing_repo\ngit remote rename origin old-origin\ngit remote add origin ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.git\n\n\nslate-wiki-pro略\n\n深入了解打包，本站请搜npm 版本的依赖\nreact-codemirror使用版本react16,插件及项目使用react18react-dom.development.js:22738 Uncaught TypeError: cm is not a function\n    at UnControlled.componentDidMount (react-codemirror.tsx:718:19)\n    at commitLayoutEffectOnFiber (react-dom.development.js:23204:30)\n    at commitLayoutMountEffects_complete (react-dom.development.js:24578:9)\n    at commitLayoutEffects_begin (react-dom.development.js:24564:7)\n    at commitLayoutEffects (react-dom.development.js:24502:3)\n    at commitRootImpl (react-dom.development.js:26779:5)\n    at commitRoot (react-dom.development.js:26638:5)\n    at performSyncWorkOnRoot (react-dom.development.js:26073:3)\n    at flushSyncCallbacks (react-dom.development.js:12009:22)\n    at flushSyncCallbacksOnlyInLegacyMode (react-dom.development.js:11988:5)\n\n\nvite 关于 global is not defined 问题react-codemirror2 源码\ndeclare let global: any;\ndeclare let require: any;\n\nconst SERVER_RENDERED &#x3D; (typeof navigator &#x3D;&#x3D;&#x3D; &#39;undefined&#39; || (typeof global !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; global[&#39;PREVENT_CODEMIRROR_RENDER&#39;] &#x3D;&#x3D;&#x3D; true));\n\nlet cm;\nif (!SERVER_RENDERED) &#123;\n  cm &#x3D; require(&#39;codemirror&#39;);\n&#125;\n\n\nvite 404Could not load content for http:&#x2F;&#x2F;localhost:3005&#x2F;node_modules&#x2F;@tuya-fe&#x2F;slate-wiki&#x2F;src&#x2F;slate&#x2F;3rd&#x2F;react-codemirror.tsx \n\n(HTTP error: status code 404, net::ERR_HTTP_RESPONSE_CODE_FAILURE)\n\ntodo\ncodemirror 在vite中运行报错，codemirror找不到，webpack打包正常\n\n","slug":"2022-05-19npm-pkg","date":"2022-05-19T10:34:53.000Z","categories_index":"npm","tags_index":"npm,wiki","author_index":"陈海龙"},{"id":"2bd0e979bc9d9166a8f1986cef49a4e4","title":"npm 版本的依赖","content":"前言提起 npm，大家第一个想到的应该就是 npm install 了，但是 npm install 之后生成的 node_modules 大家有观察过吗？package-lock.json 文件的作用大家知道吗？除了 dependencies 和 devDependencies，其他的依赖有什么作用呢？接下来，本文将针对 npm 中的你可能忽略的细节和大家分享一些经验 。\nnpm 安装机制A 和 B 同时依赖 C，C 这个包会被安装在哪里呢？C 的版本相同和版本不同时安装会有什么差异呢？package.json 中包的前后顺序对于安装时有什么影响吗？这些问题平时大家可能没有注意过，今天我们就来一起研究一下吧。\nA 和 B 同时依赖 C，这个包会被安装在哪里呢？假如有 A 和 B 两个包，两个包都依赖 C 这个包，npm 2 会依次递归安装 A 和 B 两个包及其子依赖包到 node_modules 中。\b执行完毕后，我们会看到 ./node_modules 这层目录只含有这两个子目录：\nnode_modules&#x2F; \n├─┬ A \n│ ├── C \n├─┬ B \n│ └── C \n如果使用 npm 3 来进行安装的话，./node_modules 下的目录将会包含三个子目录：\nnode_modules&#x2F; \n├─┬ A \n├─┬ B \n├─┬ C \n为什么会出现这样的区别呢？这就要从 npm 的工作方式说起了：\nnpm 2 和 npm 3 模块安装机制的差异虽然目前最新的 npm 版本是 npm 6，但 npm 2 到 npm 3 的版本变更中实现了目录打平，与其他版本相比差别较大。因此，让我们具体看下这两个版本的差异。\nnpm 2 在安装依赖包时，采用\b简单的递归安装方法。执行 npm install 后，npm 根据 dependencies 和 devDependencies 属性中指定的包来确定第一层依赖，npm 2 会根据第一层依赖的子依赖，递归安装各个包到子依赖的 node_modules 中，直到子依赖不再依赖其他模块。\b执行完毕后，我们会看到 .&#x2F;node_modules 这层目录中包含有我们 package.json 文件中所有的依赖包，而这些依赖包的子依赖包都安装在了自己的 node_modules 中 ，形成类似于下面的依赖树：\n\n这样的目录有较为明显的好处：\n1）层级结构非常明显，可以清楚的在第一层的 node_modules 中看到我们安装的所有包的子目录；\n2）在已知自己所需包的名字以及版本号时，可以复制粘贴相应的文件到 node_modules 中，然后手动更改 package.json 中的配置；\n3）如果想要删除某个包，只需要简单的删除 package.json 文件中相应的某一行，然后删除 node_modules 中该包的目录；\n但是这样的层级结构也有较为明显的缺陷，当我的 A，B，C 三个包中有相同的依赖 D 时，执行 npm install 后，D 会被重复下载三次，而随着我们的项目越来越复杂，node_modules 中的依赖树也会越来越复杂，像 D 这样的包也会越来越多，造成了大量的冗余；在 windows 系统中，甚至会因为目录的层级太深导致文件的路径过长，触发文件路径不能超过 280 个字符的错误；\n为了解决以上问题，npm 3 的 node_modules 目录改成了更为扁平状的层级结构，尽量把依赖以及依赖的依赖平铺在 node_modules 文件夹下共享使用。\nnpm 3 对于同一依赖的不同版本会怎么处理呢？npm 3 会遍历所有的节点，逐个将模块放在 node_modules 的第一层，当发现有重复模块时，则丢弃， 如果遇到某些依赖版本不兼容的问题，则继续采用 npm 2 的处理方式，前面的放在 node_modules 目录中，后面的放在依赖树中。举个例子： A，B，依赖 D(v 0.0.1)，C 依赖 D(v 0.0.2):\n\n但是 npm 3 会带来一个新的问题：由于在执行 npm install 的时候，按照 package.json 里依赖的顺序依次解析，上图如果 C 的顺序在 A，B 的前边，node_modules 树则会改变，会出现下边的情况：\n\n由此可见，npm 3 并未完全解决冗余的问题，甚至还会带来新的问题。\n为什么会出现 package-lock.json 呢？为什么会有 package-lock.json 文件呢？这个我们就要先从 package.json 文件说起了。\npackage.json 的不足之处npm install 执行后，会生成一个 node_modules 树，在理想情况下， 希望对于同一个 package.json 总是生成完全相同 node_modules 树。在某些情况下，确实如此。但在多数情况下，npm 无法做到这一点。有以下两个原因：\n1）某些依赖项自上次安装以来，可能已发布了新版本 。比如：A 包在团队中第一个人安装的时候是 1.0.5 版本，package.json 中的配置项为 A: &#39;^1.0.5&#39; ；团队中第二个人把代码拉下来的时候，A 包的版本已经升级成了 1.0.8，根据 package.json 中的 semver-range version 规范，此时第二个人 npm install 后 A 的版本为 1.0.8； 可能会造成因为依赖版本不同而导致的 bug；\n2）针对 1）中的问题，可能有的小伙伴会想，把 A 的版本号固定为 A: &#39;1.0.5&#39; 不就可以了吗？但是这样的做法其实并没有解决问题， 比如 A 的某个依赖在第一个人下载的时候是 2.1.3 版本，但是第二个人下载的时候已经升级到了 2.2.5 版本，此时生成的 node_modules 树依旧不完全相同 ，固定版本只是固定来自身的版本，依赖的版本无法固定。\n针对 package.json 不足的解决方法为了解决上述问题以及 npm 3 的问题，在 npm 5.0 版本后，npm install 后都会自动生成一个 package-lock.json 文件 ，当包中有 package-lock.json 文件时，npm install 执行时，如果 package.json 和 package-lock.json 中的版本兼容，会根据 package-lock.json 中的版本下载；如果不兼容，将会根据 package.json 的版本，更新 package-lock.json 中的版本，已保证 package-lock.json 中的版本兼容 package.json。\npackage-lock.json 文件的结构package-lock.json 文件中的 name、version 与 package.json 中的 name、version 一样，描述了当前包的名字和版本，dependencies 是一个对象，该对象和 node_modules 中的包结构一一对应，对象的 key 为包的名称，值为包的一些描述信息， 根据 package-lock-json官方文档，主要的结构如下：\n\nversion ：包版本，即这个包当前安装在 node_modules 中的版本\n\nresolved ：包具体的安装来源\n\nintegrity ：包 hash 值，验证已安装的软件包是否被改动过、是否已失效\n\nrequires ：对应子依赖的依赖，与子依赖的 package.json 中 dependencies 的依赖项相同\n\ndependencies ：结构和外层的 dependencies 结构相同，存储安装在子依赖 node_modules 中的依赖包\n\n\n需要注意的是，并不是所有的子依赖都有 dependencies 属性，只有子依赖的依赖和当前已安装在根目录的 node_modules 中的依赖冲突之后，才会有这个属性。\npackage-lock.json 文件的作用在团队开发中，确保每个团队成员安装的依赖版本是一致的，确定一棵唯一的 node_modules 树；\nnode_modules 目录本身是不会被提交到代码库的，但是 package-lock.json 可以提交到代码库，如果开发人员想要回溯到某一天的目录状态，只需要把 package.json 和 package-lock.json 这两个文件回退到那一天即可 。\n由于 package-lock.json 和 node_modules 中的依赖嵌套完全一致，可以更加清楚的了解树的结构及其变化。\n在安装时，npm 会比较 node_modules 已有的包，和 package-lock.json 进行比较，如果重复的话，就跳过安装 ，从而优化了安装的过程。\n依赖的区别与使用场景npm 目前支持以下几类依赖包管理包括\ndependencies\n\ndevDependencies\n\noptionalDependencies 可选择的依赖包\n\npeerDependencies 同等依赖\n\nbundledDependencies 捆绑依赖包\n\n\n下面我们来看一下这几种依赖的区别以及各自的应用场景：\ndependenciesdependencies 是无论在开发环境还是在生产环境都必须使用的依赖，是我们最常用的依赖包管理对象，例如 React，Loadsh，Axios 等，通过 npm install XXX 下载的包都会默认安装在 dependencies 对象中，也可以使用 npm install XXX --save 下载 dependencies 中的包；\n&quot;devDependencies&quot;:&#123;\n  &quot;eslint&quot;: &quot;^5.0.0&quot;,\n  &quot;debug&quot;: &quot;^3.1.0&quot;,\n&#125;\n\n\ndevDependenciesdevDependencies 是指可以在开发环境使用的依赖，例如 eslint，debug 等，通过 npm install packageName --save-dev 下载的包都会在 devDependencies 对象中；\ndependencies 和 devDependencies 最大的区别是在打包运行时，执行 npm install 时默认会把所有依赖全部安装，但是如果使用 npm install --production 时就只会安装 dependencies 中的依赖，如果是 node 服务项目，就可以采用这样的方式用于服务运行时安装和打包，减少包大小。\noptionalDependenciesoptionalDependencies 指的是可以选择的依赖，当你希望某些依赖即使下载失败或者没有找到时，项目依然可以正常运行或者 npm 继续运行的时，就可以把这些依赖放在 optionalDependencies 对象中，但是 optionalDependencies 会覆盖 dependencies 中的同名依赖包，所以不要把一个包同时写进两个对象中。\noptionalDependencies 就像是我们的代码的一种保护机制一样，如果包存在的话就走存在的逻辑，不存在的就走不存在的逻辑。\ntry &#123; \n  var axios &#x3D; require(&#39;axios&#39;) \n  var fooVersion &#x3D; require(&#39;axios&#x2F;package.json&#39;).version \n&#125; catch (er) &#123; \n  foo &#x3D; null \n&#125; \n&#x2F;&#x2F; .. then later in your program .. \nif (foo) &#123; \n  foo.doFooThings() \n&#125; \n\n\npeerDependenciespeerDependencies 用于指定你当前的插件兼容的宿主必须要安装的包的版本，这个是什么意思呢？举个例子🌰：我们常用的 react 组件库 ant-design@3.x 的 package.json 中的配置如下：\n&quot;peerDependencies&quot;: &#123; \n  &quot;react&quot;: &quot;&gt;&#x3D;16.9.0&quot;, \n  &quot;react-dom&quot;: &quot;&gt;&#x3D;16.9.0&quot; \n &#125;, \n假设我们创建了一个名为 project 的项目，在此项目中我们要使用 ant-design@3.x 这个插件，此时我们的项目就必须先安装 React &gt;&#x3D; 16.9.0 和 React-dom &gt;&#x3D; 16.9.0 的版本。\n在 npm 2 中，当我们下载 ant-design@3.x 时，peerDependencies 中指定的依赖会随着 ant-design@3.x 一起被强制安装，所以我们不需要在宿主项目的 package.json 文件中指定 peerDependencies 中的依赖，但是在 npm 3 中，不会再强制安装 peerDependencies 中所指定的包，而是通过警告的方式来提示我们，此时就需要手动在 package.json 文件中手动添加依赖；\nbundledDependencies这个依赖项也可以记为 bundleDependencies，与其他几种依赖项不同，他不是一个键值对的对象，而是一个数组，数组里是包名的字符串，例如：\n&#123; \n  &quot;name&quot;: &quot;project&quot;, \n  &quot;version&quot;: &quot;1.0.0&quot;, \n  &quot;bundleDependencies&quot;: [ \n    &quot;axios&quot;,  \n    &quot;lodash&quot; \n  ] \n&#125; \n当使用 npm pack 的方式来打包时，上述的例子会生成一个 project-1.0.0.tgz 的文件，在使用了 bundledDependencies 后，打包时会把 Axios 和 Lodash 这两个依赖一起放入包中，之后有人使用 npm install project-1.0.0.tgz 下载包时，Axios 和 Lodash 这两个依赖也会被安装。需要注意的是安装之后 Axios 和 Lodash 这两个包的信息在 dependencies 中，并且不包括版本信息。\n&quot;bundleDependencies&quot;: [ \n    &quot;axios&quot;, \n    &quot;lodash&quot; \n  ], \n&quot;dependencies&quot;: &#123; \n  &quot;axios&quot;: &quot;*&quot;, \n  &quot;lodash&quot;: &quot;*&quot; \n&#125;, \n如果我们使用常规的 npm publish 来发布的话，这个属性是不会生效的，所以日常情况中使用的较少。\n总结本文介绍的是 npm 2，npm 3，package-lock.json 以及几种依赖的区别和使用场景，希望能够让大家对 npm 的了解更加多一点，有什么不清楚的地方或者不足之处欢迎大家在评论区留言。\n参考文献\n原文\npackage.json官方文档\npackage-lock-json官方文档\nnpm文档总结\nnpm-pack\n\n","slug":"2022-05-19npm","date":"2022-05-19T10:10:47.000Z","categories_index":"npm","tags_index":"工具,npm","author_index":"陈海龙"},{"id":"72e60ad0a93fafff72edb1b0852502a0","title":"TypeScript noEmit","content":"No Emit -noEmitDo not emit compiler output files like JavaScript source code, source-maps or declarations.不要发出编译器输出文件，如JavaScript源代码、源映射或声明。\nThis makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment.\nYou can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.\n导致outDir不输出\n","slug":"2022-05-18ts","date":"2022-05-18T08:55:53.000Z","categories_index":"typescript","tags_index":"typescript","author_index":"陈海龙"},{"id":"38b6e3ab42ce78e34a964ff2e90b3a7d","title":"Slate 学习","content":"文档slate 中文文档slate 英文文档\n是什么\n\n\n\n\n\n\n\n\nSlate 是一个 完全 可定制的富文本编辑框架。通过 Slate，你可以构建出类似 Medium、Dropbox Paper 或者 Canvas 这样使用直观、富交互、体验业已成为 Web 应用标杆的编辑器。同时，你也无需担心在代码实现上陷入复杂度的泥潭之中。\n能做什么\n\n\n\n\n\n\n\n\n通过 Slate，你可以构建出类似 Medium、Dropbox Paper 或者 Canvas 这样使用直观、富交互、体验业已成为 Web 应用标杆的编辑器。同时，你也无需担心在代码实现上陷入复杂度的泥潭之中。Slate 之所以能做到这一点，是因为它的所有逻辑都是通过一系列的插件实现的。这样，你就再也不会被某项特性 在 或 不在 编辑器【核心】边界之内的问题所困扰了。你可以将它理解为在 React 和 Immutable 基础上，一种可插拔的 contenteditable 实现。另外，它的灵感来自于 Draft.js，Prosemirror 和 Quill 等类库。\n产生的背景\n\n\n\n\n\n\n\n\n为什么发明 Slate 呢？好吧…（注意，这部分内容包含了一些我的个人观点！）\n\n\n\n\n\n\n\n\n\n在发明 Slate 之前，我尝试了许多不同的富文本编辑器。我发现虽然它们在编写简单示例时基本没有问题，但一旦想要构建一些类似 Medium、Dropbox Paper 或者 Google Docs 这样的内容，你就会发现一些深层次的问题，比如…\n\n\n\n\n\n\n\n\n\n编辑器硬编码了文档的结构规范，难以定制。类似加粗和斜体的结构可以开箱即用，但评论、嵌入内容以及更多的定制性需求呢？\n\n\n\n\n\n\n\n\n\n对文档的编程式变换非常错综复杂。用户的编写体验可能不错，但在执行编程式变更时却不必要地复杂，而这对于构建高级的编辑行为至关重要。\n\n\n\n\n\n\n\n\n\n对 HTML、Markdown 等内容的序列化支持看起来像是事后加上的。这是一个非常常见的使用场景，但要实现将文档转换为 HTML 或 Markdown 的简单功能都需要编写大量的模板代码。\n\n\n\n\n\n\n\n\n\n重新学习一个新的视图层效率不高且十分受限。各种编辑器在重新发明视图层的轮子，而非使用 React 这样已有的技术方案。你必须学习一套带着自有限制和陷阱的新系统。\n\n\n\n\n\n\n\n\n\n**对协同编辑没有预先设计好的支持**。编辑器内部的数据结构使其无法用于实时、协作的编辑场景中，除非重写编辑器。\n\n\n\n\n\n\n\n\n\n代码仓库是单体的，而非小而可复用的。许多编辑器没有对外开放本应为开发者所复用的内部工具，以至于不得不重新发明轮子。\n\n\n\n\n\n\n\n\n\n无法构建复杂而存在嵌套关系的文档。不少编辑器是围绕简单的【扁平】文档结构设计的，这使得表格、嵌入内容和字幕等内容难以理解，有时甚至无法实现。\n\n\n\n\n\n\n\n\n\n当然，并非所有的编辑器都存在以上的问题，但如果你已经尝试过一些编辑器，你可能已经踩过类似的坑了。为了摆脱它们在 API 上的限制来达到你期望的用户体验，你得使用各种奇技淫巧，有些体验甚至是完全无法实现的。\n\n\n\n\n\n\n\n\n\n如果你遇到了相似的问题，那么也许你会喜欢上 Slate。让我来介绍一下 Slate 是如何解决这些问题的吧…\n提供了什么能力\n\n\n\n\n\n\n\n\nSlate 尝试通过一些原则来解决 “Why?” 这一节中\b的问题：\n\n\n\n\n\n\n\n\n\n作为一等公民的插件。 在 Slate 中最重要的一点是，插件是一等公民（first-class）的实体——甚至连编辑器的核心逻辑都是通过插件实现的。这意味着你能够 完全地 定制编辑体验，构建出对标 Medium 和 Canvas 那样的复杂编辑器，而无需对抗各种类库的预设条件。\n\n\n\n\n\n\n\n\n\n精简 Schema 的核心。 Slate 的核心逻辑并不对你所编辑的数据结构做任何假设，这意味着你在需要应对复杂场景时不会被编辑器预置的内容所束缚（译者注：此处 Schema 可理解为类似 XML Schema 的文档结构规范）。\n\n\n\n\n\n\n\n\n\n支持嵌套的文档模型。 Slate 所使用的文档模型是一棵嵌套的、递归的树，和 DOM 本身十分接近。这使得构建表格和嵌套引用等能够满足进阶需求的复杂组件成为了可能。当然，你同样可以使用单一的层级关系以保证简单性。\n\n\n\n\n\n\n\n\n\n无状态、不可变的数据。 通过使用 React 和 Immutable.js，我们是基于不可变数据结构，以无状态的方式构建 Slate 编辑器的。这大大降低了理解代码的难度，也节约了大量开发插件的时间。\n\n\n\n\n\n\n\n\n\n直观的 changes。 Slate 中的内容是通过 “change” 来编辑的，这是一种被设计为支持高阶使用，且极其符合直觉的概念。这样，我们就能够通过它来尽可能简单地编写插件和自定义功能了。\n\n\n\n\n\n\n\n\n\n**为协同编辑准备的数据模型**。 Slate 使用的数据模型——尤其是由 change 更改文档的方式——在设计时就已考虑到对协同编辑的支持。所以，如果你决定为编辑器添加协作功能，你不需要进行彻底的重构。（当然，这还需要你投入更多的努力！）\n\n\n\n\n\n\n\n\n\n明确的【核心】边界划分。 通过插件优先的架构与精简 Schema 的内核，Slate 对于【核心】和【自定义】有着明确得多的划分，从而保证核心的编辑体验不会为各种边缘情况所困扰。\n协同编辑，这个后面会持续关注slate-yjsyjs\nslate 文档不是很多，半小时看完主要内容 \n\n插件定制化\n渲染节点定制化\n按键监听处理\n数据格式编码、反编码\n数据存储\n\n就这点东西😱竟然有些同学凭借slate的使用拿了3.75,赶紧学～\n","slug":"2022-04-29slate-lean","date":"2022-05-16T13:00:00.000Z","categories_index":"wiki","tags_index":"wiki","author_index":"陈海龙"},{"id":"deffdaaa2a24a19ee257667b3b36743c","title":"设计模式","content":"先聊用到过哪些，背后的设计模式是什么\n实例化一个 axios 实例，全局都来使用它 单例模式\n兄弟组件通信,事件监听 观察者模式\n构造函数继承、类的继承 构造函数模式\n实例化不同的实例 工厂模式\n优化中的事件代理代理模式\nesm、commonjs模块模式\n\n熟悉而又陌生：熟悉的是一直在用，陌生的是学名竟然是这些。我都有点怀疑了，这是真的吗？是真的吗？～～～\n\n   来～来～来～，我们继续。。。\n\n啥呀\n\n\n\n\n\n\n\n\n“设计模式(英语 design pattern)是对面向对象设计中反复出现的问题的解决方案。这个术语是在1990年代由Erich Gamma等人从建筑设计领域引入到计算机科学中来的。”\n策略模式代理模式\n作用：访问控制\n场景：事件代理、Proxy、Object.defineProperty\n\n单例模式\n定义：唯一实例，全局可访问\n场景：请求实例、全局缓存、线程池、window 对象、登录浮框\n实现：已经创建过的直接返回，不重复创建\n\n工厂模式\n作用：创建同一类对象\n分类：简单工厂_、_方法工厂\n\n1. 简单工厂\n例如：项目中根据用户权限渲染不同的页面，在不同权限等级用户的构造函数中，保存用户可以看到的页面\n优点：一个正确的参数，就可以获取到所需要的对象，无需知道其创建的具体细节\n缺点：函数会成为一个超级函数，难以维护，简单工厂适用于创建少量对象，对象的逻辑不能复杂\n\n2. 工厂方法\n本质：将创建对象的工作，推迟到子类中，这样核心类就变成抽象类\n\nlet UserFactory &#x3D; function (type) &#123;\n  if (this instanceof UserFactory) &#123;\n    return new this[type]();\n  &#125; else &#123;\n    return new UserFactory(type);\n  &#125;\n&#125;;\n\n&#x2F;&#x2F; 工厂方法，函数的原型中设置所有对象的构造函数\n\nUserFactory.prototype &#x3D; &#123;\n  SuperAdmin: function () &#123;\n    this.name &#x3D; &quot;超级管理员&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;, &quot;应用管理&quot;, &quot;权限管理&quot;];\n  &#125;,\n  Admin: function () &#123;\n    this.name &#x3D; &quot;管理员&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;];\n  &#125;,\n  NormalUser: function () &#123;\n    this.name &#x3D; &quot;普通用户&quot;;\n    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;];\n  &#125;,\n&#125;;\n\n&#x2F;&#x2F; 调用\nlet superAdmin &#x3D; new UserFactory(&quot;SuperAdmin&quot;);\nlet admin &#x3D; new UserFactory(&quot;Admin&quot;);\nlet normalUser &#x3D; new UserFactory(&quot;NormalUser&quot;);\n\n3. 抽象工厂\n\n\n构造函数模式👀 观察者模式\n定义： 对象间的一种一对多的依赖关系\n作用：一个对象状态发生变化时，所有依赖他的对象，都将得到通知\n优点：解耦\n组成：发布者、订阅者\n场景：事件监听、eventBus\n\ndocument.body.addEventListener(&quot;click&quot;, function () &#123;&#125;, false);\n\n混合模式模块模式\n作用：避免全局污染，按需暴露\n实现：多采用闭包\n\nvar Person &#x3D; (function () &#123;\n  var name &#x3D; &quot;xxx&quot;;\n  function sayName(params) &#123;\n    console.log(name);\n  &#125;\n  return &#123;\n    name,\n    sayName,\n  &#125;;\n&#125;)();\n","slug":"2022-05-13design_mode","date":"2022-05-13T09:01:15.000Z","categories_index":"前端","tags_index":"前端,设计模式","author_index":"陈海龙"},{"id":"e2b55be84d65cc914ce2f0d3a3e083d3","title":"ant design form设置值 !== 获取值","content":"有意思的事\n今天维护项目遇到一个有意思的事，直观感受，设置值，再取出来，貌似没毛病  &#x2F;&#x2F; ...\n  const [values, setValues] &#x3D; useState&lt;Record&lt;string, any&gt;&gt;()\n\n  const &#123; applyStartTime, applyEndTime, attendanceType, staffId &#125; &#x3D; values || &#123;&#125;\n\n  const getDetail &#x3D; usePersistFn(async () &#x3D;&gt; &#123;\n    &#x2F;&#x2F; ...略\n    const obj: Record&lt;string, any&gt; &#x3D; &#123;\n      staffId: applyStaff.staffId,\n      attendanceType: res.result.attendanceType,\n      applyStartTime: &#123;\n        value: moment(res.result.applyStartTime),\n        half: res.result.startDayType,\n      &#125;,\n      applyEndTime: &#123;\n        value: moment(res.result.applyEndTime),\n        half: res.result.endDayType,\n      &#125;,\n      applyReason,\n      applyAttachments,\n    &#125;\n    &#x2F;&#x2F; ...略\n    form.setFieldsValue(obj)\n    setValues(form.getFieldsValue())\n  &#125;)\n\n  &#x2F;&#x2F; ...略\n  const &#123; total, loading: totalLoading &#125; &#x3D; useCaculateDays(\n    &#123;\n      start: applyStartTime,\n      end: applyEndTime,\n    &#125;,\n    staffId,\n    attendanceType,\n  )\n  &#x2F;&#x2F; ...略\n\n  &#x2F;&#x2F; AnualForm组件\n  &lt;Form.Item name&#x3D;&quot;applyStartTime&quot; label&#x3D;&quot;起始日期&quot; rules&#x3D;&#123;[&#123; required: true &#125;]&#125;&gt;\n      &lt;HalftDatePicker predict&#x3D;&#123;&#123; lessThan: end?.value &#125;&#125; &#x2F;&gt;\n    &lt;&#x2F;Form.Item&gt;\n  &lt;Form.Item name&#x3D;&quot;applyEndTime&quot; label&#x3D;&quot;结束日期&quot; rules&#x3D;&#123;[&#123; required: true &#125;]&#125;&gt;\n    &lt;HalftDatePicker predict&#x3D;&#123;&#123; moreThan: start?.value &#125;&#125; &#x2F;&gt;\n  &lt;&#x2F;Form.Item&gt;\n\n\n  type IValue &#x3D; &#123;\n    value?: moment.Moment\n    half: 1 | 2\n  &#125;\n &#x2F;&#x2F; HalftDatePicker组件\nconst HalftDatePicker: React.ForwardRefRenderFunction&lt;any, PickerProps&lt;moment.Moment&gt; &amp; &#123;\n  value?: IValue\n  onChange?: (v?: IValue) &#x3D;&gt; void\n  predict?: &#123;\n    lessThan?: moment.Moment\n    moreThan?: moment.Moment\n    holiday?: boolean\n  &#125;\n&#125;&gt; &#x3D; (props, ref) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; ...略\n&#125;\n\n代码的目的是： \n\n请求详情\n装配数据，更新values\nuseCaculateDays 通过后台动态计算有效工作日，返回total请假天数，\n渲染total到表单对应位置\n\n调试经过一点一点回溯调试，发现 useCaculateDays 没请求，被判断拦截掉了，往上找找，\nform.setFieldsValue(obj)\nsetValues(form.getFieldsValue())\n\n打上日志&#x2F;&#x2F; ...略\nconsole.log(&quot;obj&quot;,obj);\nform.setFieldsValue(obj)\nconsole.log(&quot;obj1&quot;,form.getFieldsValue());\nsetValues(obj)\n\n发现obj键值内容不等于obj1\n\nobj\n\n&#123;\n    &quot;staffId&quot;: &quot;02333&quot;,\n    &quot;attendanceType&quot;: 11,\n    &quot;applyStartTime&quot;: &#123;\n        &quot;value&quot;: &quot;2022-03-23T16:00:00.000Z&quot;,\n        &quot;half&quot;: 1\n    &#125;,\n    &quot;applyEndTime&quot;: &#123;\n        &quot;value&quot;: &quot;2022-03-23T16:00:00.000Z&quot;,\n        &quot;half&quot;: 2\n    &#125;,\n    &quot;applyReason&quot;: &quot;&quot;,\n    &quot;applyAttachments&quot;: []\n&#125;\n\n\nobj1&#123;\n    &quot;staffId&quot;: &quot;02333&quot;,\n    &quot;attendanceType&quot;: 11,\n    &quot;applyReason&quot;: &quot;&quot;,\n    &quot;applyAttachments&quot;: []\n&#125;\n\n猜想\n\n会不会form.setFieldsValue异步？查了下api是同步的排除这种可能\n断点调试过程中，也会遇到表单渲染一半的情况，AnualForm组件是条件渲染，如果这块表单没有渲染出来，通过form.getFieldsValue就拿不到\n\n修改代码验证下猜想console.log(&quot;obj&quot;,obj);\nform.setFieldsValue(obj)\nconsole.log(&quot;obj1&quot;,form.getFieldsValue());\nsetTimeout(() &#x3D;&gt; &#123;\n  setValues(form.getFieldsValue())\n  &#125;, 5000);\n&#125;\n\n\n最终修改form.setFieldsValue(obj)\nsetValues(obj)","slug":"2022-05-13react","date":"2022-05-13T07:39:33.000Z","categories_index":"React","tags_index":"React,bug","author_index":"陈海龙"},{"id":"f31094f49d8642b9a610a9630bcdbff8","title":"ModHeader","content":"通过不同请求头字段标识请求不同的环境\n\nRequesr HeadersAccept: *&#x2F;*\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,zh-TW;q&#x3D;0.7\nCache-Control: no-cache\nConnection: keep-alive\ncontent-type: application&#x2F;json; charset&#x3D;utf-8\nCookie: perfLang&#x3D;zh; \nenvtag: ladon-1        \nHost: localhost:3119\nPragma: no-cache\nReferer: http:&#x2F;&#x2F;localhost:3119&#x2F;\nsec-ch-ua: &quot; Not A;Brand&quot;;v&#x3D;&quot;99&quot;, &quot;Chromium&quot;;v&#x3D;&quot;101&quot;, &quot;Google Chrome&quot;;v&#x3D;&quot;101&quot;\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: &quot;macOS&quot;\n不生效了理论上是没问题，应该是由于某些原因导致这个插件内部运行出了问题，具体什么问题不知处理：将浏览器重启动后,请求头envtag: ladon-1增加成功\n","slug":"2022-05-13modeheader","date":"2022-05-13T06:59:19.000Z","categories_index":"Chrome","tags_index":"工具,Chrome","author_index":"陈海龙"},{"id":"b4153b96463af3b17371df43a1c660ca","title":"浏览器首屏优化-首屏时间获取","content":"优化的指标白屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器出现第一个元素首屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器第一屏渲染完成\n影响白屏时间的因素：网络，服务端性能，前端页面结构设计。影响首屏时间的因素：白屏时间，资源下载执行时间。\n通常在 head 解析完，body 开始渲染此时是白屏结束白屏时间 &#x3D; firstPaint - performance.timing.navigationStart || pageStartTime\n常用方法\n首屏模块标签标记， 你觉得首屏完成的地方插入脚本\n同级首屏内加载最慢的图片&#x2F;iframe\n\n这个图看不懂没关系，往下看，后面会以简书代码和掘金来验证这幅图的正确性\n\n输入 url 发生了什么\n1、当浏览器地址中输入 url 后，navigationStart如果之前有前一个网页（与当前页面不一定同域）unload 的时间戳,如果无前一个网页 unload ，则与 fetchStart 值相等,\n2、接着，是否有重定向（redirect ）\n3、接着，准备用 HTTP 抓取文档的内容（fetchStart）\n域名查询（domainLookupStart、domainLookupEnd）\nTCP 连接（connectStart、connectEnd）,如果是安全链接，在 connectEnd 之前，会有 SSL 连接(secureConnectionStart)\n\n\n4、接着，HTTP 请求（requestStart、responseStart、responseEnd）,如果有缓存，在 responseStart 之前，会有 cacheStart，如果之前有网页，还涉及到网页的 unload，在 cacheStart 之前，会有unloadStart、unloadEnd\n5、接着，dom 解析\ndomLoadingDocument.readyState 变为 loading，并将抛出 readystatechange 相关事件\ndomInteractiveDocument.readyState 变为 interactive，并将抛出 readystatechange 相关事件\ndomContentLoadedEventStart、domContentLoadedEventEnd DOM 解析完成后，\n网页内资源加载开始，并将抛出 readystatechange 相关事件\n网页内资源加载完成，并将抛出 readystatechange 相关事件\n\n\nloadEventStartload 事件发送给文档，也即 load 回调函数开始执行\nloadEventEndload 事件的回调函数执行完毕的时间\ndomCompleteDocument.readyState 变为 complete，并将抛出 readystatechange 相关事件\n说明：dom 解析过程，HTML 生成 dom 树，解析 CSS 文件生成 CSSOM 树，DOM 树和 CSSOM 树生成 render 树，也就是渲染树， render 树中对每个节点进行布局，计算每个元素的大小，确定其在屏幕中的位置，绘制。根据 render 树和布局将显示页面\n\n\n\n加载阶段左边红线代表的是网络传输层面的过程，右边红线代表了服务器传输回字节后浏览器的各种事件状态，这个阶段包含了浏览器对文档的解析，DOM 树构建，布局，绘制等等。1. prompt for unload\n\nnavigationStart: 表示从上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，这个值将和 fetchStart 相等。2. 前一个网页卸载\nunloadEventStart: 表示前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0。\nunloadEventEnd: 返回前一个页面 unload 时间绑定的回掉函数执行完毕的时间戳。3. 重定向\nredirectStart: 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0。\nredirectEnd: 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0。4. 使用 HTTP 请求\nfetchStart: 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前。5. 域名解析\ndomainLookupStart&#x2F;domainLookupEnd: DNS 域名查询开始&#x2F;结束的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等6. tcp 链接\nconnectStart: HTTP（TCP）开始&#x2F;重新 建立连接的时间，如果是持久连接，则与 fetchStart 值相等。\nconnectEnd: HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等。7. ssl 建立\nsecureConnectionStart: HTTPS 连接开始的时间，如果不是安全连接，则值为 0。8. 读取文档\nrequestStart: HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存。9. 响应\nresponseStart: HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存。\nresponseEnd: HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存。10. 解析 dom\ndomLoading: 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件。11. dom 可交互\ndomInteractive: 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源。12. 页面内资源加载\ndomContentLoadedEventStart: DOM 解析完成后，网页内资源加载开始的时间，在 DOMContentLoaded 事件抛出前发生。\ndomContentLoadedEventEnd: DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）。13. dom 树解析完成\ndomComplete: DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件。14. load 事件\nloadEventStart: load 事件发送给文档，也即 load 回调函数开始执行的时间。\nloadEventEnd: load 事件的回调函数执行完毕的时间。\n\nPerformance 接口Performance 接口可以获取到当前页面与性能相关的信息。\n\n\n\n\n\n\nTIP\n数据先不要关注时间循序，后面我们会从多个角度来验证顺序\n\n&#123;\n  &quot;timeOrigin&quot;: 1652338539312.5,\n  &#x2F;&#x2F; 顺序已经排好了\n  &quot;timing&quot;: &#123;\n    &#x2F;&#x2F; 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等\n    &quot;navigationStart&quot;: 1652338539312,\n    &#x2F;&#x2F; 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0\n    &quot;redirectStart&quot;: 0,\n    &#x2F;&#x2F; 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0\n    &quot;redirectEnd&quot;: 0,\n    &#x2F;&#x2F; 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前\n    &quot;fetchStart&quot;: 1652338539316,\n    &#x2F;&#x2F; DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n    &quot;domainLookupStart&quot;: 1652338539353,\n    &#x2F;&#x2F; DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等\n    &quot;domainLookupEnd&quot;: 1652338539353,\n    &#x2F;&#x2F; HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等\n    &#x2F;&#x2F; 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间\n    &quot;connectStart&quot;: 1652338539353,\n    &#x2F;&#x2F; HTTPS 连接开始的时间，如果不是安全连接，则值为 0\n    &quot;secureConnectionStart&quot;: 1652338539401,\n    &#x2F;&#x2F; HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等\n    &#x2F;&#x2F; 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间\n    &#x2F;&#x2F; 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过\n    &quot;connectEnd&quot;: 1652338539504,\n    &#x2F;&#x2F; HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存\n    &#x2F;&#x2F; 连接错误重连时，这里显示的也是新建立连接的时间\n    &quot;requestStart&quot;: 1652338539505,\n    &#x2F;&#x2F; HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存\n    &quot;responseStart&quot;: 1652338539807,\n    &#x2F;&#x2F; 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0\n    &quot;unloadEventStart&quot;: 0,\n    &#x2F;&#x2F; 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳\n    &quot;unloadEventEnd&quot;: 0,\n    &#x2F;&#x2F; HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存\n    &quot;responseEnd&quot;: 1652338539828,\n    &#x2F;&#x2F; 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件\n    &quot;domLoading&quot;: 1652338539823,\n    &#x2F;&#x2F; 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件\n    &#x2F;&#x2F; 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源\n    &quot;domInteractive&quot;: 1652338540574,\n    &#x2F;&#x2F; DOM 解析完成后，网页内资源加载开始的时间\n    &#x2F;&#x2F; 在 DOMContentLoaded 事件抛出前发生\n    &quot;domContentLoadedEventStart&quot;: 1652338540574,\n    &#x2F;&#x2F; DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）\n    &quot;domContentLoadedEventEnd&quot;: 1652338540575,\n    &#x2F;&#x2F; load 事件发送给文档，也即 load 回调函数开始执行的时间\n    &#x2F;&#x2F; 注意如果没有绑定 load 事件，值为 0\n    &quot;loadEventStart&quot;: 1652338542489,\n    &#x2F;&#x2F; load 事件的回调函数执行完毕的时间\n    &quot;loadEventEnd&quot;: 1652338542492,\n    &#x2F;&#x2F; DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件\n    &quot;domComplete&quot;: 1652338542489\n  &#125;,\n  &quot;navigation&quot;: &#123;\n    &#x2F;&#x2F; 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）\n    &#x2F;&#x2F; 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面\n    &#x2F;&#x2F; 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）\n    &#x2F;&#x2F; 255 即 TYPE_UNDEFINED    非以上方式进入的页面\n    &quot;type&quot;: 0,\n    &quot;redirectCount&quot;: 0 &#x2F;&#x2F; &#x2F;&#x2F; 如果有重定向的话，页面通过几次重定向跳转而来\n  &#125;\n&#125;\n\nfunction getPerfermanceTiming() &#123;\n  let t &#x3D; performance.timing;\n\n  &#x2F;&#x2F; 重定向结束时间 - 重定向开始时间\n  let redirect &#x3D; t.redirectEnd - t.redirectStart;\n  &#x2F;&#x2F; DNS 查询开始时间 - fetech start 时间\n  let appCache &#x3D; t.domainLookupStart - t.fetchStart;\n  &#x2F;&#x2F; DNS 查询结束时间 - DNS 查询开始时间\n  let dns &#x3D; t.domainLookupEnd - t.domainLookupStart;\n  &#x2F;&#x2F; 完成 TCP 连接握手时间 - TCP 连接开始时间\n  let tcp &#x3D; t.connectEnd - t.connectStart;\n  &#x2F;&#x2F; 从请求开始到接收到第一个响应字符的时间\n  let ttfb &#x3D; t.responseStart - t.requestStart;\n  &#x2F;&#x2F; 资源下载时间，响应结束时间 - 响应开始时间\n  let contentDL &#x3D; t.responseEnd - t.responseStart;\n  &#x2F;&#x2F; 从请求开始到响应结束的时间\n  let httpTotal &#x3D; t.responseEnd - t.requestStart;\n  &#x2F;&#x2F; 从页面开始到 domContentLoadedEventEnd\n  let domContentloaded &#x3D; t.domContentLoadedEventEnd - t.navigationStart;\n  &#x2F;&#x2F; 从页面开始到 loadEventEnd\n  let loaded &#x3D; t.loadEventEnd - t.navigationStart;\n\n  let result &#x3D; [\n    &#123; key: &quot;Redirect&quot;, desc: &quot;网页重定向的耗时&quot;, value: redirect &#125;,\n    &#123; key: &quot;AppCache&quot;, desc: &quot;检查本地缓存的耗时&quot;, value: appCache &#125;,\n    &#123; key: &quot;DNS&quot;, desc: &quot;DNS查询的耗时&quot;, value: dns &#125;,\n    &#123; key: &quot;TCP&quot;, desc: &quot;TCP连接的耗时&quot;, value: tcp &#125;,\n    &#123;\n      key: &quot;Waiting(TTFB)&quot;,\n      desc: &quot;从客户端发起请求到接收到响应的时间 &#x2F; Time To First Byte&quot;,\n      value: ttfb,\n    &#125;,\n    &#123;\n      key: &quot;Content Download&quot;,\n      desc: &quot;下载服务端返回数据的时间&quot;,\n      value: contentDL,\n    &#125;,\n    &#123; key: &quot;HTTP Total Time&quot;, desc: &quot;http请求总耗时&quot;, value: httpTotal &#125;,\n    &#123;\n      key: &quot;DOMContentLoaded&quot;,\n      desc: &quot;dom加载完成的时间&quot;,\n      value: domContentloaded,\n    &#125;,\n    &#123; key: &quot;Loaded&quot;, desc: &quot;页面load的总耗时&quot;, value: loaded &#125;,\n  ];\n  return result;\n&#125;\ngetPerfermanceTiming();\n\n\n\n聊下性能计算&#x2F;&#x2F; 计算加载时间\nfunction getPerformanceTiming() &#123;\n  var performance &#x3D; window.performance;\n\n  if (!performance) &#123;\n    &#x2F;&#x2F; 当前浏览器不支持\n    console.log(&quot;你的浏览器不支持 performance 接口&quot;);\n    return;\n  &#125;\n\n  var t &#x3D; performance.timing;\n  var times &#x3D; &#123;&#125;;\n\n  &#x2F;&#x2F;【重要】页面加载完成的时间\n  &#x2F;&#x2F;【原因】这几乎代表了用户等待页面可用的时间\n  times.loadPage &#x3D; t.loadEventEnd - t.navigationStart;\n\n  &#x2F;&#x2F;【重要】解析 DOM 树结构的时间\n  &#x2F;&#x2F;【原因】反省下你的 DOM 树嵌套是不是太多了！\n  times.domReady &#x3D; t.domComplete - t.responseEnd;\n\n  &#x2F;&#x2F;【重要】重定向的时间\n  &#x2F;&#x2F;【原因】拒绝重定向！比如，http:&#x2F;&#x2F;example.com&#x2F; 就不该写成 http:&#x2F;&#x2F;example.com\n  times.redirect &#x3D; t.redirectEnd - t.redirectStart;\n\n  &#x2F;&#x2F;【重要】DNS 查询时间\n  &#x2F;&#x2F;【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\n  &#x2F;&#x2F; 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000000633364)\n  times.lookupDomain &#x3D; t.domainLookupEnd - t.domainLookupStart;\n\n  &#x2F;&#x2F;【重要】读取页面第一个字节的时间\n  &#x2F;&#x2F;【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\n  &#x2F;&#x2F; TTFB 即 Time To First Byte 的意思\n  &#x2F;&#x2F; 维基百科：https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time_To_First_Byte\n  times.ttfb &#x3D; t.responseStart - t.navigationStart;\n\n  &#x2F;&#x2F;【重要】内容加载完成的时间\n  &#x2F;&#x2F;【原因】页面内容经过 gzip 压缩了么，静态资源 css&#x2F;js 等压缩了么？\n  times.request &#x3D; t.responseEnd - t.requestStart;\n\n  &#x2F;&#x2F;【重要】执行 onload 回调函数的时间\n  &#x2F;&#x2F;【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\n  times.loadEvent &#x3D; t.loadEventEnd - t.loadEventStart;\n\n  &#x2F;&#x2F; DNS 缓存时间\n  times.appcache &#x3D; t.domainLookupStart - t.fetchStart;\n\n  &#x2F;&#x2F; 卸载页面的时间\n  times.unloadEvent &#x3D; t.unloadEventEnd - t.unloadEventStart;\n\n  &#x2F;&#x2F; TCP 建立连接完成握手的时间\n  times.connect &#x3D; t.connectEnd - t.connectStart;\n\n  return times;\n&#125;\n\n聊下性能优化假设你对 performance API 很熟悉\n\n减少重定向次数\nDNS 查询时间：HTML5 Prefetch 预查询\nTCP 连接: http1.1 开启 connect: keep-alive, http2.0， 如果可以的话 http3.0 可以看本站另一篇文章\n资源压缩：gzip、brotli、图片压缩、tree-shaking、console 移除\n资源整合：减少请求次数、减少网络请求，雪碧图（虽然 http2 提供了多路复用[多路复用代替了 HTTP1.x 的序列和阻塞机制，所有的相同域名请求都通过同一个 TCP 连接并发完成。在 HTTP1.x 中，并发多个请求需要多个 TCP 连接，浏览器为了控制资源会有 6-8 个 TCP 连接都限制,单个连接上可以并行交错的请求和响应，之间互不干扰,但是数量猛增，服务器要处理，多多少少也耗性能]的能力，而且现在还有使用的常见，比聊天表情，飞书也在用）\n资源加载：CDN、强缓存和协商缓存、按需加载\nDOM 解析：自上而下，script 标签放在底部，css 放在上面，无论是 html 还是 css 的层级，应尽量少的解析，解析消耗性能\n渲染时候：回流和重绘、懒加载、虚拟列表\n\n两个事例飞书雪碧图\n\n为什么拿飞书桌端数据来说（之前开发桌面端Electron，扒拉过飞书应用包的数据)\n\n\n\n京东移动端 dns-prefetch\n\n为什么拿京东数据来说（之前爬取过京东移动端数据开发 RN)\n\n\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n    window.alert &#x3D; console.log;\n  &lt;&#x2F;script&gt;\n  &lt;script&gt;\n    window._PFM_TIMING &#x3D; [[1351, new Date()]]; &#x2F;&#x2F;TODO\n  &lt;&#x2F;script&gt;\n  &lt;meta\n    name&#x3D;&quot;viewport&quot;\n    content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot;\n  &#x2F;&gt;\n  &lt;title&gt;多快好省，购物上京东！&lt;&#x2F;title&gt;\n  &lt;!-- 强缓存Cache-Control --&gt;\n  &lt;meta http-equiv&#x3D;&quot;Cache-Control&quot; content&#x3D;&quot;max-age&#x3D;180&quot; &#x2F;&gt;\n  &lt;meta name&#x3D;&quot;apple-mobile-web-app-capable&quot; content&#x3D;&quot;yes&quot; &#x2F;&gt;\n  &lt;meta name&#x3D;&quot;apple-mobile-web-app-status-bar-style&quot; content&#x3D;&quot;black&quot; &#x2F;&gt;\n  &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt;\n  &lt;!-- 京东 &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt; 写重复了 --&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;m.360buyimg.com&quot; &#x2F;&gt;\n  &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt;\n  &lt;meta\n    name&#x3D;&quot;viewport&quot;\n    content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0, shrink-to-fit&#x3D;no, viewport-fit&#x3D;cover&quot;\n  &#x2F;&gt;\n  &lt;!-- X-DNS-Prefetch-Control 头控制着浏览器的 DNS 预读取功能  DNS 预读取是一项使浏览器主动去执行域名解析的功能--&gt;\n  &lt;meta http-equiv&#x3D;&quot;x-dns-prefetch-control&quot; content&#x3D;&quot;on&quot; &#x2F;&gt;\n\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img11.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img10.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img12.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img13.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img14.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img20.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img30.360buyimg.com&quot; &#x2F;&gt;\n  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;wq.360buyimg.com&quot; &#x2F;&gt;\n&lt;&#x2F;head&gt;\n\nperformance 数据能干啥用？（开发者）熟悉 Chrome 开发者工具的朋友应该知道：在开发环境下，其实我们自己打开 Chrome 的开发者工具，切换到网络面板，就能很详细的看到网页性能相关的数据。\n（网站用户）但当我们需要统计分析用户打开我们网页时的性能如何时，我们将 performance 原始信息或通过简单计算后的信息 (如上面写到的 getPerformanceTiming()) 上传到服务器，配合其他信息（如 HTTP 请求头信息），就完美啦~\n来看下简书\n链接 简书 ,打开控制台可以看到输出结果一个数组（如果简书没将此日志去除）\n简书代码\n\nwindow.addEventListener(&quot;load&quot;, function () &#123;\n  setTimeout(function () &#123;\n    var e &#x3D; window.performance;\n    if (e) &#123;\n      var t &#x3D; e.getEntriesByType(&quot;navigation&quot;)[0],\n        r &#x3D; 0;\n      t || (r &#x3D; (t &#x3D; e.timing).navigationStart);\n      var n &#x3D; [\n        &#123;\n          key: &quot;Redirect&quot;,\n          desc: &quot;\\u7f51\\u9875\\u91cd\\u5b9a\\u5411\\u7684\\u8017\\u65f6&quot;,\n          value: t.redirectEnd - t.redirectStart,\n        &#125;,\n        &#123;\n          key: &quot;AppCache&quot;,\n          desc: &quot;\\u68c0\\u67e5\\u672c\\u5730\\u7f13\\u5b58\\u7684\\u8017\\u65f6&quot;,\n          value: t.domainLookupStart - t.fetchStart,\n        &#125;,\n        &#123;\n          key: &quot;DNS&quot;,\n          desc: &quot;DNS\\u67e5\\u8be2\\u7684\\u8017\\u65f6&quot;,\n          value: t.domainLookupEnd - t.domainLookupStart,\n        &#125;,\n        &#123;\n          key: &quot;TCP&quot;,\n          desc: &quot;TCP\\u8fde\\u63a5\\u7684\\u8017\\u65f6&quot;,\n          value: t.connectEnd - t.connectStart,\n        &#125;,\n        &#123;\n          key: &quot;Waiting(TTFB)&quot;,\n          desc: &quot;\\u4ece\\u5ba2\\u6237\\u7aef\\u53d1\\u8d77\\u8bf7\\u6c42\\u5230\\u63a5\\u6536\\u5230\\u54cd\\u5e94\\u7684\\u65f6\\u95f4 &#x2F; Time To First Byte&quot;,\n          value: t.responseStart - t.requestStart,\n        &#125;,\n        &#123;\n          key: &quot;Content Download&quot;,\n          desc: &quot;\\u4e0b\\u8f7d\\u670d\\u52a1\\u7aef\\u8fd4\\u56de\\u6570\\u636e\\u7684\\u65f6\\u95f4&quot;,\n          value: t.responseEnd - t.responseStart,\n        &#125;,\n        &#123;\n          key: &quot;HTTP Total Time&quot;,\n          desc: &quot;http\\u8bf7\\u6c42\\u603b\\u8017\\u65f6&quot;,\n          value: t.responseEnd - t.requestStart,\n        &#125;,\n        &#123;\n          key: &quot;DOMContentLoaded&quot;,\n          desc: &quot;dom\\u52a0\\u8f7d\\u5b8c\\u6210\\u7684\\u65f6\\u95f4&quot;,\n          value: t.domContentLoadedEventEnd - r,\n        &#125;,\n        &#123;\n          key: &quot;Loaded&quot;,\n          desc: &quot;\\u9875\\u9762load\\u7684\\u603b\\u8017\\u65f6&quot;,\n          value: t.loadEventEnd - r,\n        &#125;,\n      ];\n      if (Math.random() &gt; 0.75) &#123;\n        var s &#x3D; window.location,\n          i &#x3D; s.href,\n          c &#x3D; s.pathname,\n          u &#x3D; navigator.userAgent,\n          d &#x3D; i.split(&quot;?&quot;)[0];\n        o.a\n          .post(&quot;https:&#x2F;&#x2F;tr.jianshu.com&#x2F;fe&#x2F;1&#x2F;mon&#x2F;atf&quot;, &#123;\n            app: &quot;shakespeare-performance&quot;,\n            url: d,\n            ua: u,\n            path: c,\n            stats_ttfb: t.responseStart - t.requestStart,\n            stats_domLoaded: t.domContentLoadedEventEnd - r,\n            stats_loaded: t.loadEventEnd - r,\n          &#125;)\n          .then(a.a)\n          .catch(a.a);\n      &#125;\n      console &amp;&amp; console.log &amp;&amp; console.log(n);\n    &#125;\n  &#125;, 0);\n&#125;);\n\n简书截图\ndomContentLoaded 与 loaded&#x2F;&#x2F; 从页面开始到 domContentLoadedEventEnd\nlet domContentloaded &#x3D; t.domContentLoadedEventEnd - t.navigationStart;\n&#x2F;&#x2F; 从页面开始到 loadEventEnd\nlet loaded &#x3D; t.loadEventEnd - t.navigationStart;\n\ndomContentLoadedEventEnd 比 loaded 先触发\n\n\n\n掘金页面\n话说已经到了 6 月 6 号，闲逛掘金，遇到面试题：从输入url到页面展示发生了什么，突然想起个 performance,就拿掘金的一个页面来验证这幅图\n\n\n\n\n\n\n\n\n\n\nWARNING\n注意：此代码放到 dayjs 网站的 Sources&#x2F;Snippets 中执行，利用全局的 dayjs，无需引入 dayjs\n\ndayjs 网站\n\n\n代码是为了对performance.timing按照时间值进行排序，排序结果大致是执行的顺序，稍微有出入，会手动做调整\n代码如下：\n\nvar timing &#x3D; &#123;\n  connectStart: 1654499041800,\n  navigationStart: 1654499041744,\n  loadEventEnd: 1654499043641,\n  domLoading: 1654499042279,\n  secureConnectionStart: 1654499041820,\n  fetchStart: 1654499041746,\n  domContentLoadedEventStart: 1654499042718,\n  responseStart: 1654499042247,\n  responseEnd: 1654499042304,\n  domInteractive: 1654499042495,\n  domainLookupEnd: 1654499041800,\n  redirectStart: 0,\n  requestStart: 1654499041849,\n  unloadEventEnd: 1654499042267,\n  unloadEventStart: 1654499042267,\n  domComplete: 1654499043640,\n  domainLookupStart: 1654499041750,\n  loadEventStart: 1654499043641,\n  domContentLoadedEventEnd: 1654499042718,\n  redirectEnd: 0,\n  connectEnd: 1654499041849,\n&#125;;\n&#x2F;&#x2F; YYYY-MM-DD HH:一定一致，这个就不看了\nvar fmt &#x3D; &quot;mm:ss:SSS&quot;;\nvar arr &#x3D; [];\nvar sort_obj &#x3D; &#123;&#125;;\n\nfunction fmt_sort_key(obj) &#123;\n  for (let [key, value] of Object.entries(obj)) &#123;\n    arr.push(&#123;\n      key,\n      value,\n    &#125;);\n  &#125;\n\n  const sortArr &#x3D; arr.sort((a, b) &#x3D;&gt; a.value - b.value);\n\n  const fmtSortArr &#x3D; sortArr.map((item) &#x3D;&gt; &#123;\n    if (!item.value) return item;\n    return &#123;\n      ...item,\n      value: dayjs(item.value).format(fmt),\n    &#125;;\n  &#125;);\n\n  console.log(fmtSortArr);\n&#125;\nfmt_sort_key(timing);\n\n非无痕首次访问const timing &#x3D; &#123;\n  connectStart: 1654391072118,\n  navigationStart: 1654391071928,\n  loadEventEnd: 1654391076402,\n  domLoading: 1654391072670,\n  secureConnectionStart: 1654391072118,\n  fetchStart: 1654391071969,\n  domContentLoadedEventStart: 1654391074189,\n  responseStart: 1654391072621,\n  responseEnd: 1654391072664,\n  domInteractive: 1654391073865,\n  domainLookupEnd: 1654391072118,\n  redirectStart: 0,\n  requestStart: 1654391072199,\n  &#x2F;&#x2F; 没有之前页面的卸载\n  unloadEventEnd: 0,\n  unloadEventStart: 0,\n\n  domComplete: 1654391076400,\n  domainLookupStart: 1654391072118,\n  loadEventStart: 1654391076400,\n  domContentLoadedEventEnd: 1654391074189,\n  redirectEnd: 0,\n  connectEnd: 1654391072199,\n&#125;;\n\n&#x2F;&#x2F; 时间戳 1654391072118： connectStart、secureConnectionStart、domainLookupStart、domainLookupEnd ，这个值是相同的\n\n&#x2F;&#x2F; 把上述 timing 使用dayjs进行转化，看下每个key对应的time,对于0是没有进行的操作，我们跳过不处理（知道没进行）\n\nvar timingfmt &#x3D; [\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;04:31:928&quot; &#125;,\n\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;04:31:969&quot; &#125;,\n  &#123; key: &quot;connectStart&quot;, value: &quot;04:32:118&quot; &#125;,\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;04:32:118&quot; &#125;,\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;04:32:118&quot; &#125;,\n  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;04:32:118&quot; &#125;,\n  &#123; key: &quot;requestStart&quot;, value: &quot;04:32:199&quot; &#125;,\n  &#123; key: &quot;connectEnd&quot;, value: &quot;04:32:199&quot; &#125;,\n\n  &#123; key: &quot;responseStart&quot;, value: &quot;04:32:621&quot; &#125;,\n  &#123; key: &quot;unloadEventStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;unloadEventEnd&quot;, value: 0 &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;04:32:664&quot; &#125;,\n\n  &#123; key: &quot;domLoading&quot;, value: &quot;04:32:670&quot; &#125;,\n  &#123; key: &quot;domInteractive&quot;, value: &quot;04:33:865&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;04:34:189&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;04:34:189&quot; &#125;,\n  &#123; key: &quot;domComplete&quot;, value: &quot;04:36:400&quot; &#125;,\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;04:36:400&quot; &#125;,\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;04:36:402&quot; &#125;,\n];\n\n我们看下结果 2022-06-05 09:04，年月日时分都是一致的，我们只关心三位的毫秒数\n非无痕第二次访问const timing2 &#x3D; &#123;\n  connectStart: 1654494048918,\n  navigationStart: 1654494048902,\n  loadEventEnd: 1654494054146,\n  domLoading: 1654494049851,\n  secureConnectionStart: 0, &#x2F;&#x2F; 走缓存\n  fetchStart: 1654494048918,\n  domContentLoadedEventStart: 1654494051380,\n  responseStart: 1654494049430,\n  responseEnd: 1654494049514,\n  domInteractive: 1654494051115,\n  domainLookupEnd: 1654494048918,\n  redirectStart: 0,\n  requestStart: 1654494048942,\n  &#x2F;&#x2F; 有之前页面卸载\n  unloadEventEnd: 1654494049537,\n  unloadEventStart: 1654494049536,\n\n  domComplete: 1654494054143,\n  domainLookupStart: 1654494048918,\n  loadEventStart: 1654494054143,\n  domContentLoadedEventEnd: 1654494051381,\n  redirectEnd: 0,\n  connectEnd: 1654494048918,\n&#125;;\n\nvar timingfmt2 &#x3D; [\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;40:48:902&quot; &#125;,\n\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;40:48:918&quot; &#125;,\n\n  &#123; key: &quot;connectStart&quot;, value: &quot;40:48:918&quot; &#125;,\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;40:48:918&quot; &#125;,\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;40:48:918&quot; &#125;,\n  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;connectEnd&quot;, value: &quot;40:48:918&quot; &#125;,\n  &#123; key: &quot;requestStart&quot;, value: &quot;40:48:942&quot; &#125;,\n  &#123; key: &quot;responseStart&quot;, value: &quot;40:49:430&quot; &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;40:49:514&quot; &#125;,\n  &#123; key: &quot;unloadEventStart&quot;, value: &quot;40:49:536&quot; &#125;,\n  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;40:49:537&quot; &#125;,\n  &#123; key: &quot;domLoading&quot;, value: &quot;40:49:851&quot; &#125;,\n\n  &#123; key: &quot;domInteractive&quot;, value: &quot;40:51:115&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;40:51:380&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;40:51:381&quot; &#125;,\n  &#123; key: &quot;domComplete&quot;, value: &quot;40:54:143&quot; &#125;,\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;40:54:143&quot; &#125;,\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;40:54:146&quot; &#125;,\n];\n\n非无痕 f5 手动刷新var timing3 &#x3D; &#123;\n  connectStart: 1654495600379,\n  navigationStart: 1654495600360,\n  loadEventEnd: 1654495604101,\n  domLoading: 1654495601005,\n  secureConnectionStart: 1654495600389,\n  fetchStart: 1654495600364,\n  domContentLoadedEventStart: 1654495601947,\n  responseStart: 1654495600935,\n  responseEnd: 1654495600989,\n  domInteractive: 1654495601794,\n  domainLookupEnd: 1654495600379,\n  redirectStart: 0,\n  requestStart: 1654495600404,\n  unloadEventEnd: 1654495600971,\n  unloadEventStart: 1654495600970,\n  domComplete: 1654495604099,\n  domainLookupStart: 1654495600379,\n  loadEventStart: 1654495604099,\n  domContentLoadedEventEnd: 1654495601947,\n  redirectEnd: 0,\n  connectEnd: 1654495600403,\n&#125;;\n\nvar timingfmt3 &#x3D; [\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;06:40:360&quot; &#125;,\n\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;06:40:364&quot; &#125;,\n\n  &#123; key: &quot;connectStart&quot;, value: &quot;06:40:379&quot; &#125;,\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;06:40:379&quot; &#125;,\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;06:40:379&quot; &#125;,\n\n  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;06:40:389&quot; &#125;,\n\n  &#123; key: &quot;connectEnd&quot;, value: &quot;06:40:403&quot; &#125;,\n  &#123; key: &quot;requestStart&quot;, value: &quot;06:40:404&quot; &#125;,\n\n  &#123; key: &quot;responseStart&quot;, value: &quot;06:40:935&quot; &#125;,\n  &#123; key: &quot;unloadEventStart&quot;, value: &quot;06:40:970&quot; &#125;,\n  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;06:40:971&quot; &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;06:40:989&quot; &#125;,\n\n  &#123; key: &quot;domLoading&quot;, value: &quot;06:41:005&quot; &#125;,\n  &#123; key: &quot;domInteractive&quot;, value: &quot;06:41:794&quot; &#125;,\n\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;06:41:947&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;06:41:947&quot; &#125;,\n  &#123; key: &quot;domComplete&quot;, value: &quot;06:44:099&quot; &#125;,\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;06:44:099&quot; &#125;,\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;06:44:101&quot; &#125;,\n];\n\n无痕模式首次var timing4 &#x3D; &#123;\n  connectStart: 1654496795083,\n  navigationStart: 1654496795041,\n  loadEventEnd: 1654496799718,\n  domLoading: 1654496795428,\n  secureConnectionStart: 1654496795093,\n  fetchStart: 1654496795050,\n  domContentLoadedEventStart: 1654496796111,\n  responseStart: 1654496795420,\n  responseEnd: 1654496795469,\n  domInteractive: 1654496795680,\n  domainLookupEnd: 1654496795083,\n  redirectStart: 0,\n  requestStart: 1654496795123,\n  unloadEventEnd: 0,\n  unloadEventStart: 0,\n  domComplete: 1654496799718,\n  domainLookupStart: 1654496795057,\n  loadEventStart: 1654496799718,\n  domContentLoadedEventEnd: 1654496796111,\n  redirectEnd: 0,\n  connectEnd: 1654496795123,\n&#125;;\n\nvar timing4fmt &#x3D; [\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;26:35:041&quot; &#125;,\n\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;26:35:050&quot; &#125;,\n\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;26:35:057&quot; &#125;,\n\n  &#123; key: &quot;connectStart&quot;, value: &quot;26:35:083&quot; &#125;,\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;26:35:083&quot; &#125;,\n  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;26:35:093&quot; &#125;,\n  &#123; key: &quot;requestStart&quot;, value: &quot;26:35:123&quot; &#125;,\n  &#123; key: &quot;connectEnd&quot;, value: &quot;26:35:123&quot; &#125;,\n\n  &#123; key: &quot;responseStart&quot;, value: &quot;26:35:420&quot; &#125;,\n\n  &#123; key: &quot;unloadEventEnd&quot;, value: 0 &#125;,\n  &#123; key: &quot;unloadEventStart&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;domLoading&quot;, value: &quot;26:35:428&quot; &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;26:35:469&quot; &#125;,\n\n  &#123; key: &quot;domInteractive&quot;, value: &quot;26:35:680&quot; &#125;,\n\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;26:36:111&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;26:36:111&quot; &#125;,\n\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;26:39:718&quot; &#125;,\n  &#123; key: &quot;domComplete&quot;, value: &quot;26:39:718&quot; &#125;,\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;26:39:718&quot; &#125;,\n];\n\n无痕模式刷新var timing5 &#x3D; &#123;\n  connectStart: 1654496848681,\n  navigationStart: 1654496848679,\n  loadEventEnd: 1654496850263,\n  domLoading: 1654496848983,\n  secureConnectionStart: 0,\n  fetchStart: 1654496848681,\n  domContentLoadedEventStart: 1654496849277,\n  responseStart: 1654496848959,\n  responseEnd: 1654496849017,\n  domInteractive: 1654496849096,\n  domainLookupEnd: 1654496848681,\n  redirectStart: 0,\n  requestStart: 1654496848702,\n  unloadEventEnd: 1654496848979,\n  unloadEventStart: 1654496848979,\n  domComplete: 1654496850262,\n  domainLookupStart: 1654496848681,\n  loadEventStart: 1654496850262,\n  domContentLoadedEventEnd: 1654496849277,\n  redirectEnd: 0,\n  connectEnd: 1654496848681,\n&#125;;\n\nvar timing5fmt &#x3D; [\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;27:28:679&quot; &#125;,\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;27:28:681&quot; &#125;,\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;27:28:681&quot; &#125;,\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;27:28:681&quot; &#125;,\n  &#123; key: &quot;connectStart&quot;, value: &quot;27:28:681&quot; &#125;,\n  &#123; key: &quot;connectEnd&quot;, value: &quot;27:28:681&quot; &#125;,\n\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;requestStart&quot;, value: &quot;27:28:702&quot; &#125;,\n  &#123; key: &quot;responseStart&quot;, value: &quot;27:28:959&quot; &#125;,\n\n  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;27:28:979&quot; &#125;,\n  &#123; key: &quot;unloadEventStart&quot;, value: &quot;27:28:979&quot; &#125;,\n\n  &#123; key: &quot;domLoading&quot;, value: &quot;27:28:983&quot; &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;27:29:017&quot; &#125;,\n\n  &#123; key: &quot;domInteractive&quot;, value: &quot;27:29:096&quot; &#125;,\n\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;27:29:277&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;27:29:277&quot; &#125;,\n\n  &#123; key: &quot;domComplete&quot;, value: &quot;27:30:262&quot; &#125;,\n\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;27:30:262&quot; &#125;,\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;27:30:263&quot; &#125;,\n];\n\n无痕模式刷新 + disable-cachevar timing6 &#x3D; &#123;\n  connectStart: 1654496917781,\n  navigationStart: 1654496917780,\n  loadEventEnd: 1654496921224,\n  domLoading: 1654496918186,\n  secureConnectionStart: 0,\n  fetchStart: 1654496917781,\n  domContentLoadedEventStart: 1654496918836,\n  responseStart: 1654496918156,\n  responseEnd: 1654496918293,\n  domInteractive: 1654496918654,\n  domainLookupEnd: 1654496917781,\n  redirectStart: 0,\n  requestStart: 1654496917784,\n  unloadEventEnd: 1654496918182,\n  unloadEventStart: 1654496918182,\n  domComplete: 1654496921224,\n  domainLookupStart: 1654496917781,\n  loadEventStart: 1654496921224,\n  domContentLoadedEventEnd: 1654496918836,\n  redirectEnd: 0,\n  connectEnd: 1654496917781,\n&#125;;\nvar timing6fmt &#x3D; [\n  &#x2F;&#x2F; 以下按照时间排序\n  &#123; key: &quot;navigationStart&quot;, value: &quot;28:37:780&quot; &#125;,\n\n  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理\n  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,\n  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;fetchStart&quot;, value: &quot;28:37:781&quot; &#125;,\n\n  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;28:37:781&quot; &#125;,\n  &#123; key: &quot;domainLookupStart&quot;, value: &quot;28:37:781&quot; &#125;,\n  &#123; key: &quot;connectStart&quot;, value: &quot;28:37:781&quot; &#125;,\n  &#123; key: &quot;connectEnd&quot;, value: &quot;28:37:781&quot; &#125;,\n\n  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,\n\n  &#123; key: &quot;requestStart&quot;, value: &quot;28:37:784&quot; &#125;,\n  &#123; key: &quot;responseStart&quot;, value: &quot;28:38:156&quot; &#125;,\n  &#x2F;&#x2F; 和 timing5fmt比较，之前页面的卸载，非常快\n  &#123; key: &quot;unloadEventStart&quot;, value: &quot;28:38:182&quot; &#125;,\n  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;28:38:182&quot; &#125;,\n  &#x2F;&#x2F; 注意 domLoading 和 responseEnd,这两个，顺序不定\n  &#123; key: &quot;domLoading&quot;, value: &quot;28:38:186&quot; &#125;,\n  &#123; key: &quot;responseEnd&quot;, value: &quot;28:38:293&quot; &#125;,\n\n  &#123; key: &quot;domInteractive&quot;, value: &quot;28:38:654&quot; &#125;,\n\n  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;28:38:836&quot; &#125;,\n  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;28:38:836&quot; &#125;,\n\n  &#123; key: &quot;loadEventEnd&quot;, value: &quot;28:41:224&quot; &#125;,\n  &#123; key: &quot;domComplete&quot;, value: &quot;28:41:224&quot; &#125;,\n  &#123; key: &quot;loadEventStart&quot;, value: &quot;28:41:224&quot; &#125;,\n];\n\n这个操作竟然有一个 base64 编码图片依然被缓存了,浏览器 disable-cache 对于有些内存缓存的图片竟然是无效的.\nRequest URL: data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAADwAAAA8AQMAAAAAMksxAAAAA1BMVEUAAACnej3aAAAAAXRSTlMAQObYZgAAAA5JREFUKM9jGAWjAAcAAAIcAAE27nY6AAAAAElFTkSuQmCC\nRequest Method: GET\nStatus Code: 200 OK (from memory cache)\nReferrer Policy: strict-origin-when-cross-origin\n\n\n参考资料Web 性能优化-首屏和白屏时间初探 performance – 监控网页与程序性能简述浏览器渲染机制\n","slug":"2022-05-12performance","date":"2022-05-12T10:27:05.000Z","categories_index":"performance","tags_index":"前端,performance,浏览器原理","author_index":"陈海龙"},{"id":"832da5e8309651301e718ddb27ca95fd","title":"vscode插件 paste code to snippets","content":"粘贴代码，生成用户代码片段背景\n其他插件具有共性，而不具特性 ，每次写代码，要么用第三方插件，现成的代码片段，时常不能满足日常开发需要\n自定义代码片段，手写 费时费力，一般步骤，粘贴、修改、格式化\n其他插件类似vscode宏变量的使用少之又少， 要么将开源插件定制化，要么重新开发\n快捷变量记不住\n\npaste code to snippets 优点：\n高度定制化\n跨语言（任何vscode支持的语言，都可在对应类型片段文件中进行增加）\n使用简单 （复制、唤起命令、挖孔）\n快捷变量完全自定义（想怎么写就怎么写）\n\n操作GIF\n问题\n如果配置了代码片段，没有提示, 查看settings.json对应\n打开 settings.json 命令： command + shift + p, 搜 &gt;settings\n\n以markdown为例 默认只读配置在升级后变成了false\n&#x2F;&#x2F; Configure settings to be overridden for the markdown language.\n&quot;[markdown]&quot;:  &#123;\n\t&quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false,\n\t&quot;editor.unicodeHighlight.invisibleCharacters&quot;: false,\n\t&quot;editor.wordWrap&quot;: &quot;on&quot;,\n\t&quot;editor.quickSuggestions&quot;: false \n&#125;,\n\n\n修改\n\n","slug":"2022-05-11vscode","date":"2022-05-11T01:38:30.000Z","categories_index":"vscode","tags_index":"增效,vscode","author_index":"陈海龙"},{"id":"8a3cd3de20e0b1971e27a9e96209af62","title":"HTTP3","content":"现状\n\n\n\n\n\n\n\n\n\nHTTP/3 的基础即谷歌多年探索的基于 UDP 的 QUIC 协议。与 TCP 相比，使用 UDP 可以提供更大的灵活性，并且可以使 QUIC 完全于用户空间中实现——对协议实现的更新不像 TCP 那样需要绑定到操作系统更新。使用 QUIC，可以简单地将 HTTP 级别的流映射到 QUIC 流的顶部，从而继承 HTTP/2 的所有优点，而不会产生队头阻塞。HTTP/3 虽仍处于草案状态，但很多用户已经跃跃欲试。\n优势\nHTTP&#x2F;3 利用 QUIC 加速 HTTP 请求，QUIC 提供比 TCP 和 TLS 更高的加密和性能\nQUIC 是一种默认加密的新传输协议，旨在加快 HTTP 传输速度以及使其更加安全\nHTTP&#x2F;3 基于 UDP，如果数据包丢失，只会中断一个流，而不会中断所有流，提高了同时获取多个对象的性能\n支持 0-RTT，消除服务器的 TLS 确认，使后续连接的启动速度更快\n\n演示下图表示 HTTP&#x2F;2 和 HTTP&#x2F;3 多路复用两个请求时，数据包丢失及其影响（请求及其相关的响应分别为深蓝和浅蓝色）\nHTTP&#x2F;2 多路复用 2 个请求。响应被分解为多个数据包，一旦一个数据包丢失了，两个请求都被阻止。HTTP&#x2F;3 复用 2 个请求。虽然浅色的数据包丢失了，但是深色的数据包传输得很好。在相同丢包率的条件下，HTTP&#x2F;3 和 HTTP&#x2F;2 性能测试对比如下测试环境：服务端（HTTP&#x2F;3 with cubic &amp; HTTP&#x2F;2 with bbr）、客户端（cubic）\n更多查看更多\n","slug":"2022-05-11http","date":"2022-05-11T01:26:00.000Z","categories_index":"工具","tags_index":"工具","author_index":"陈海龙"},{"id":"f5ccfd5f1ce5f78727a64a19669811c7","title":"Slate wiki-ui评论功能光标乱跳","content":"bug复现bug复现 (node:29) UnhandledPromiseRejectionWarning: Error: Forbidden at &amp;#x2F;code&amp;#x2F;client&amp;#x2F;.next&amp;#x2F;server&amp;#x2F;pages&amp;#x2F;_app-a05...\n\n在vite react项目上，输入汉字的同时按住删除键，光标会乱跳\n排查1:wiki（esm）组件问题，检查wiki-ui组件库，运行正常\n&quot;react&quot;: &quot;^16.8.0&quot;,\n&quot;react-dom&quot;: &quot;^16.8.0&quot;,\n排查2:vite加载wiki-ui组件时候，因为vite只能处理esm，在vite.config.ts, esbuildOptions自定义插件进行处理wiki-ui，不是很懂，换个角度\nesbuildOptions: &#123;\n  plugins: [\n    &#123;\n      name: &#39;originjs:commonjs&#39;,\n      setup(build) &#123;\n        build.onLoad(\n          &#123;\n            filter: &#x2F;@敏感数据-fe\\&#x2F;wiki-ui\\&#x2F;dist&#x2F;,\n            namespace: &#39;file&#39;,\n          &#125;,\n          async (&#123; path: id &#125;) &#x3D;&gt; &#123;\n            const code &#x3D; readFileSync(id).toString()\n            const result &#x3D; transformRequire(code, id)\n\n            return &#123;\n              contents: result,\n              loader: &#39;js&#39;,\n            &#125;\n          &#125;,\n        ),\n          build.onLoad(\n            &#123;\n              filter: &#x2F;@敏感数据-fe\\&#x2F;wiki-ui\\&#x2F;dist\\&#x2F;components\\&#x2F;iconfont&#x2F;,\n              namespace: &#39;file&#39;,\n            &#125;,\n            async (&#123; path: id &#125;) &#x3D;&gt; &#123;\n              const code &#x3D; readFileSync(id).toString()\n              const result &#x3D; transformRequire(code, id)\n\n              return &#123;\n                contents: result,\n                loader: &#39;js&#39;,\n              &#125;\n            &#125;,\n          )\n      &#125;,\n    &#125;,\n    esbuildPluginMonacoEditorNls(&#123;\n      locale: Languages.zh_hans,\n    &#125;),\n  ],\n&#125;,\n排查3:将wiki-ui组件放到umijs应用中运行\n# 搭建个项目\n# 移动demo组件到新项目\n# 运行，发现有相同的问题\n分析：1.dom输入过程中点击删除操作，那么在这个过程中，输入的内容是在contenteditable=&quot;true&quot; 中运行\n&lt;div data-gramm&#x3D;&quot;false&quot; role&#x3D;&quot;textbox&quot; spellcheck&#x3D;&quot;false&quot; class&#x3D;&quot;slash-slate-core&quot; id&#x3D;&quot;SLASH_SLATE_CORE&quot; data-app-id&#x3D;&quot;5A9BEA&quot; autocorrect&#x3D;&quot;false&quot; autocapitalize&#x3D;&quot;false&quot; data-slate-editor&#x3D;&quot;true&quot; data-slate-node&#x3D;&quot;value&quot; contenteditable&#x3D;&quot;true&quot; style&#x3D;&quot;position: relative; outline: none; white-space: pre-wrap; overflow-wrap: break-word;&quot;&gt;&lt;p data-slate-node&#x3D;&quot;element&quot;&gt;&lt;span data-slate-node&#x3D;&quot;text&quot;&gt;&lt;span data-slate-leaf&#x3D;&quot;true&quot;&gt;&lt;span data-slate-string&#x3D;&quot;true&quot;&gt;12121212哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈h h h h h h h h h h h h hs f s d f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;\n2.合成事件应该会走合成事件，合成事件之后会执行渲染，web端走的是react-dom，比对正常运行的项目，和新项目的版本\n# react 17版本\n# react-dom 17版本\n3.react先进行react降版本 16.14.0，检查合成事件是否有问题，降版本后，运行，问题同样存在，大概可以断定是react-dom渲染出了问题，\n4.react-dom对react-dom降低版本到16.14.0, 后运行正常，那么问题应该在react-dom上\n5.github版本 16.14.0两个版本有什么不同：查看react发布日志，16.14.0之后的一个版本是17.0.0 (October 20, 2020) 看上去与事件和渲染相关的东西不多\nUse browser focusin and focusout for onFocus and onBlur. (@trueadm in #19186)\nMake all Capture events use the browser capture phase. (@trueadm in #19221)\nThrow if forwardRef or memo component returns undefined. (@gaearon in #19550)\nRemove event pooling. (@trueadm in #18969)\nFix onBeforeInput reporting an incorrect event.type. (@eps1lon in #19561)\nFix event.relatedTarget reported as undefined in Firefox. (@claytercek in #19607)\nFix rendering into a shadow root. (@Jack-Works in #15894)\nFix movementX&#x2F;Y polyfill with capture events. (@gaearon in #19672)\nArtifacts\nreact: https:&#x2F;&#x2F;unpkg.com&#x2F;react@17.0.1&#x2F;umd&#x2F;\nreact-art: https:&#x2F;&#x2F;unpkg.com&#x2F;react-art@17.0.1&#x2F;umd&#x2F;\nreact-dom: https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@17.0.1&#x2F;umd&#x2F;\nreact-is: https:&#x2F;&#x2F;unpkg.com&#x2F;react-is@17.0.1&#x2F;umd&#x2F;\nreact-test-renderer: https:&#x2F;&#x2F;unpkg.com&#x2F;react-test-renderer@17.0.1&#x2F;umd&#x2F;\nscheduler: https:&#x2F;&#x2F;unpkg.com&#x2F;scheduler@0.20.1&#x2F;umd&#x2F;\n6.github版本 18.1.0在往后找最新的版本，发现在18.1.0 (April 26, 2022)，改了一堆react-dom的bug,看上去也没相关的\nFix the false positive warning about react-dom&#x2F;client when using UMD bundle. (@alireza-molaee in #24274)\nFix suppressHydrationWarning to work in production too. (@gaearon in #24271)\nFix componentWillUnmount firing twice inside of Suspense. (@acdlite in #24308)\nFix some transition updates being ignored. (@acdlite in #24353)\nFix useDeferredValue causing an infinite loop when passed an unmemoized value. (@acdlite in #24247)\nFix throttling of revealing Suspense fallbacks. (@sunderls in #24253)\nFix an inconsistency in whether the props object is the same between renders. (@Andarist and @acdlite in #24421)\nFix a missing warning about a setState loop in useEffect. (@gaearon in #24298)\nFix a spurious hydration error. (@gnoff in #24404)\nWarn when calling setState in useInsertionEffect. (@gaearon in #24295)\nEnsure the reason for hydration errors is always displayed. (@gaearon in #24276)\n\n可用版本&quot;react&quot;: &quot;^16.14.0&quot;,\n&quot;react-dom&quot;: &quot;16.14.0&quot;,\n\n\n这个演示代码正常&lt;embed type&#x3D;&quot;text&#x2F;html&quot; src&#x3D;&quot;https:&#x2F;&#x2F;stackblitz.com&#x2F;edit&#x2F;react-ts-m3y5yv?embed&#x3D;1&amp;file&#x3D;App.tsx&amp;view&#x3D;preview&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;200&quot;&gt;\n&lt;!--加载太慢，复制地址查看吧--&gt; \n&lt;!--https:&#x2F;&#x2F;stackblitz.com&#x2F;edit&#x2F;react-ts-m3y5yv?embed&#x3D;1&amp;file&#x3D;App.tsx&amp;view&#x3D;preview--&gt; \n\n懵逼。。。从头开始\n待办事项中的评论功能（组件问题）光标乱跳的问题；\n0. 项目 + wiki-ui 异常\n1. 单运行wiki-ui demo 正常\n2. 运行slate + umijs 正常\n3. 运行wiki-ui  + umijs 异常\n4. slate 与  wiki-ui  不一样在于slate版本\n5. wiki-ui 做了什么事情： 定制化一些节点展示，光标的渲染和wiki-ui无关\n贫僧先去slate官网化缘，回来再战slate-lean\n化缘归来问题怎么解决\n","slug":"2022-04-29slate","date":"2022-05-10T05:00:00.000Z","categories_index":"wiki","tags_index":"wiki","author_index":"陈海龙"},{"id":"1827bdebccdb6131916a11069d50f729","title":"跨域问题","content":"背景浏览器安全策略限制跨域访问\n内容安全策略是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。\n\n使用方式为使 CSP 可用, 你需要配置你的网络服务器返回 Content-Security-Policy，或者在 HTML  元素种也可配置该策略, 例如：\n\n&lt;meta\n  http-equiv&#x3D;&quot;Content-Security-Policy&quot;\n  content&#x3D;&quot;default-src &#39;self&#39;; img-src https:&#x2F;&#x2F;*; child-src &#39;none&#39;;&quot;\n&#x2F;&gt;\n\n\n配置示例（1）一个网站管理者想要所有内容均来自站点的同一个源 (不包括其子域名)\n\nContent-Security-Policy: default-src &#39;self&#39;\n\n（2）一个网站管理者允许内容来自信任的域名及其子域名 (域名不必须与 CSP 设置所在的域名相同)\nContent-Security-Policy: default-src &#39;self&#39; *.trusted.com\n\n（3）一个网站管理者允许网页应用的用户在他们自己的内容中包含来自任何源的图片, 但是限制音频或视频需从信任的资源提供者(获得)，所有脚本必须从特定主机服务器获取可信的代码。\nContent-Security-Policy: default-src &#39;self&#39;;\nimg-src *;\nmedia-src media1.com media2.com; script-src userscripts.example.com\n\n在这里，各种内容默认仅允许从文档所在的源获取, 但存在如下例外:\n图片可以从任何地方加载(注意 “*“ 通配符)。多媒体文件仅允许从 media1.com 和 media2.com 加载(不允许从这些站点的子域名)。可运行脚本仅允许来自于 userscripts.example.com。\n作者：菜鸡前端链接：https://www.jianshu.com/p/a45924e99a6d来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n处理方式nginx\n脚本\n\n\nlisten 80; # 监听的端⼝\n   add_header &#39;Access-Control-Allow-Origin&#39; &#39;$http_origin&#39; ;\n   add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39; ;\n   add_header &#39;Access-Control-Allow-Methods&#39; &#39;PUT,POST,GET,DELETE,OPTIONS&#39; ;\n   add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type,Content-Length,Authorization,Accept,X-Requested-With&#39; ;\n\n\n实际操作\n\n\njsonp 方式 &lt;动态 script&gt;服务端设置，类似 nginx其他（不常用）","slug":"2022-05-09cors","date":"2022-05-09T13:30:47.000Z","categories_index":"面试","tags_index":"面试","author_index":"陈海龙"},{"id":"99460a2013287be2d51642da6dd169f8","title":"面试题汇总","content":"值得收藏的链接\n码上通天\n面试完50个人后我写下这篇总结\nif 我是前端团队 Leader，怎么制定前端协作规范?\n做了一份前端面试复习计划，保熟～\n\n","slug":"2022-05-08interview","date":"2022-05-08T08:27:00.000Z","categories_index":"","tags_index":"面试","author_index":"陈海龙"},{"id":"8c2ce163d41ac846e552a207bb84d5a9","title":"js变量和作用域","content":"变量var let const区别\n变量提升：var 存在变量提升，let、const没有（let、const存在暂时性死区）\n作用域的限制：var不受作用域的限制，而let、const受当前作用域的限制\n重复声明：var可以重复声明，let、const不可以\nconst是常量，必须有初始值，否则报错，不能更改，但是可以更改对象内部属性\n\n变量分类\njs中的变量分为两种：\n全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；\n而局部变量就只能在函数的内部才能够调用的变量。\n\n\n\nvar a&#x3D;10;\nfunction show()&#123;\n  console.log(&#39;a:&#39;+a); &#x2F;&#x2F;a:10\n  var b&#x3D;2;\n  console.log(&#39;inside b:&#39;+b); &#x2F;&#x2F;inside b:2\n&#125;\nshow();\nconsole.log(&#39;outside b:&#39;+b); &#x2F;&#x2F;b is no defined\n　　在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。\n另外需要特别注意的是：\n\n\n\n\n\n\n\n\n\n如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。\nvar a&#x3D;10;\nfunction show()&#123;\n  console.log(&#39;a:&#39;+a); &#x2F;&#x2F;a:10\n  b&#x3D;2;\n  console.log(&#39;inside b:&#39;+b); &#x2F;&#x2F;inside b:2\n&#125;\nshow();\nconsole.log(&#39;outside b:&#39;+b); &#x2F;&#x2F;outside b:2\n对比两段代码，如果你在声明b&#x3D;2时没有写var，那么b就隐式地声明为全局变量，在函数外面还是能够被调用到的。虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了缺点：\n\n一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。\n影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，\n可移植性: 同时也降低了函数的可移植性。\n\n因此我们在定义变量时一般要尽可能少的定义全局变量。\n变量声明\n\n\n\n\n\n\n\n\n函数声明优先于变量声明\n　　下面我们通过一段代码来说明.\nvar a; \nfunction a()&#123;\n&#125;\nconsole.log(typeof a); &#x2F;&#x2F;function\n&#x2F;&#x2F; 或许有人是认为函数声明在后面的原因，那么调换一下位置。\nfunction a()&#123;\n&#125;\nvar a; \nconsole.log(typeof a); &#x2F;&#x2F;function\n&#x2F;&#x2F; 调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。\n&#x2F;&#x2F; 因此函数声明优先于变量的声明。\n&#x2F;&#x2F; 但是如果我们在声明的同时给a进行赋值。\nfunction a()&#123;\n&#125;\nvar a&#x3D;&#39;xyf&#39;; \nconsole.log(typeof a); &#x2F;&#x2F;string\n&#x2F;&#x2F; 我们将其调换一下位置再次进行验证。\nvar a&#x3D;&#39;xyf&#39;; \nfunction a()&#123;\n&#125;\nconsole.log(typeof a); &#x2F;&#x2F;string\n&#x2F;&#x2F; 可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：\nfunction a()&#123;\n&#125;\nvar a;\na&#x3D;&#39;xyf&#39;;\nconsole.log(typeof a); &#x2F;&#x2F;string\n&#x2F;&#x2F; a最后被赋值为字符串，因此a的类型自然是字符串\n作用域全局作用域　js中作用域只有函数作用域和全局作用域，\n函数作用域　js中作用域只有函数作用域和全局作用域，\n块级作用域  let const有块级作用域。函数作用域是比较容易理解的，那么什么是块级作用域呢？  &#123;var a &#x3D; 1&#125;\n\nconsole.log(a)\nVM2355:1 1\n  &#123;let a &#x3D;1&#125;\n\nconsole.log(a)\nVM2079:1 Uncaught ReferenceError: a is not defined\n\n\n\n\n\n\n\n\n\n任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n　　理解了块级作用域，来看一下下面的小例子。\nconsole.log(v); &#x2F;&#x2F;undefined\nvar v &#x3D; &quot;world&quot;;\n　　&#x2F;&#x2F; 这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。\n当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明\n由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：\nvar v;\nconsole.log(v); &#x2F;&#x2F;undefined\nv &#x3D; &quot;world&quot;;\n&#x2F;&#x2F; 这样就能很清晰地理解为什么变量v是undefined的了。\n&#x2F;&#x2F;下面我们把变量v放到一个方法中去：\nif(true)&#123;\n  var v &#x3D; &quot;hello&quot;;\n&#125;\nconsole.log(v); &#x2F;&#x2F;hello\n&#x2F;&#x2F; 在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，\n&#x2F;&#x2F; 并不能够“阻挡”外面的代码获取里面的变量。\n函数作用域　　我们再把变量v放到函数中去：\nfunction show()&#123;\n  var v&#x3D;&#39;world&#39;;\n&#125;\nshow();\nconsole.log(v); &#x2F;&#x2F;undefined\n　　由于show函数是一个函数作用域，“阻挡”外面的代码获取里面变量（并不能阻挡里面的代码获取外面的变量），所以函数外部并不能获取到函数里面的变量v。因此证明了js中只有函数作用域，没有块级作用域。　　再来看下面的一段代码：\nvar v&#x3D;&#39;hello&#39;;\nfunction show()&#123;\n  console.log(v); &#x2F;&#x2F;undefined\n  var v&#x3D;&#39;world&#39;;\n&#125;\nshow();\n　　很多人看到这边都会很疑惑，不是说这边show函数中能够获取到函数外面的变量的么？但是由于这边是一个函数作用域，而函数作用域存在着变量声明的提前，因此，上面的代码相当于下面的代码：\nvar v&#x3D;&#39;hello&#39;;\nfunction show()&#123;\n\tvar v;\n\tconsole.log(v); &#x2F;&#x2F;undefined\n\tv&#x3D;&#39;world&#39;;\n&#125;\nshow();\n　　这里把变量v的声明放到了整个函数作用域的最前面，因此显示为undefined。理解了上面的代码，相信下面的代码也不难理解了。\nvar v &#x3D; &quot;hello&quot;;\n(function()&#123;\n  console.log(v);\n  var v &#x3D; &quot;world&quot;;\n&#125;)();\n\n　　在这里自执行函数形成了函数作用域\n需要注意的是变量提升只提升函数的声明，并不提升函数的定义\nshow(); &#x2F;&#x2F;show is not a function\nvar show&#x3D;function()&#123;\n\t&#x2F;&#x2F;...\n&#125;\nshow(); &#x2F;&#x2F;成功运行\n\n　　或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。\n\n\n\n\n\n\n\n\n\n函数有两种定义方式，一种是函数声明，另一种是函数表达式。那么什么是函数声明什么是函数表达式呢？\n&#x2F;&#x2F;函数声明\nfunction show()&#123;\n\t&#x2F;&#x2F;....\n&#125;\n&#x2F;&#x2F;函数表达式\nvar show&#x3D;function()&#123;\n\t&#x2F;&#x2F;...\n&#125;\n乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。\n\njs的解析器对函数声明和函数表达式并不是一视同仁的对待的，有点“种族歧视”的意思在里面。\n函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。\n而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，因此，调用函数表达式要在定义后进行使用。\n\notherhttps://juejin.cn/post/6844904019165446158\n","slug":"2022-05-08varible","date":"2022-05-08T02:00:00.000Z","categories_index":"面试","tags_index":"面试","author_index":"陈海龙"},{"id":"39b06ee79b8fd96256d44a33e065e573","title":"如何更好的沉淀","content":"背景\n工作日常经验性总结放哪？\n存电脑，电脑坏了重做系统没了，\n放到电脑备忘录，卧槽，怎么没及时更新\n放自己的服务器，没时间打理，服务器到期，嗝屁了，没来的及迁移\n\nhexo\nhexo由于有丰富的插件和主题，使用及部署方便，备受欢迎\n自己购买服务器部署，服务器到期后续费很贵\n放到第三方博客上，好一点的像简书，每天发布限制两篇，可控性太差\n\nhexo 主题这里使用 aurora\ntheme: aurora\ntridiamondAlphaHinex\n阿里云oss\n图片资源放到github上，访问较慢，为了提升体验，将资源放到oss上，权限配置为公开，可被任何用户访问\n\n阿里云域名\n域名访问比较方便，图片资源只有在使用域名的情况下，各资源可以预览，而不仅仅是下载\n\nPicGo图床「贼好用，\n思考：除此之外，因为其开源我们可以学习下作者是如何处理插件的」\n为博客中md文档提供图片链接，放到阿里云oss上\n上传成功\n因为开发过electron，第一想到的是我要debug,打开控制台\n域名配错不可访问\n遇到图片,作为程序猿第一反应要优化「压缩」compress\n插件下载\n插件启用\n插件是否生效了\n插件列表github链接\n\n书写文章 hexo页面不热重载？yarn add global browser-sync\nyarn add hexo-browsersync\n\n启用评论# For local development only!\ngitalk:\n  enable: false\n  autoExpand: true\n  clientID: &#39;&#39;\n  clientSecret: &#39;&#39;\n  repo: &#39;dev-blog-comments&#39;\n  owner: &#39;TriDiamond&#39;\n  admin: [&#39;TriDiamond&#39;]\n  id: uid\n  language: en\n  distractionFreeMode: true\n  recentComment: true\n  proxy: &#39;&#39;\n\n# Valine comment plugin (recommended!)\n# see https:&#x2F;&#x2F;valine.js.org&#x2F;quickstart.html\nvaline:\n  enable: true\n  app_id: 去申请\n  app_key: 去申请\n  avatar: &#39;http:&#x2F;&#x2F;t-blog-images.aijs.top&#x2F;img&#x2F;avatar.jpeg&#39;\n  placeholder: Leave your thoughts behind~\n  visitor: true\n  lang: en\n  avatarForce: false\n  meta: [&#39;nick&#39;, &#39;mail&#39;]\n  requiredFields: []\n  admin: &#39;海龙&#39;\n  recentComment: true\n\n\n图片增加水印配置及效果\npicgo生成代码\n可选不同的代码方式\n\n常见问题\n每次发布后，github page 自定义域名会丢失\n\n\n\n\n\n\n\n\n在_posts目录下建立CNAME文件 填写上自己的域名\n\n图床picGo，上传了图片，在oss上查看也成功了，但是picGo相册中没有展示\n\n\n\n\n\n\n\n\n/Users/chenhailong/Library/Application Support/picgo目录下，删除 rm picgo.db,重新启动见issue #781\n\n调整博客文件时间，运行后文章排序并没有改变，需要清理根目录下db.json\n\n总结：总体而言picgo已经很好了，有几点可以优化\n\n已有图片二次重新上传压缩功能\n窗口实在是太小了，正常情况下可以手动拖拽改变大小\n插件列表插件卡片部分重叠\n\n","slug":"2022-04-28博客创建","date":"2022-05-06T01:17:27.000Z","categories_index":"","tags_index":"","author_index":"陈海龙"},{"id":"4e47b6e9bf7ea41cfbf0d4f0a3fe5d3c","title":"Lerna调试开源库遇到的问题","content":"yarn install --mutex network:42424 --non-interactive\n\n👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ lerna --version\n4.0.0\n\n\n👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ yarn global add lerna@3.19.0    \nUsage Error: The &#39;yarn global&#39; commands have been removed in 2.x - consider using &#39;yarn dlx&#39; or a third-party plugin instead\n\n$ yarn run [--inspect] [--inspect-brk] &lt;scriptName&gt; ...\n👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ yarn --version              \n3.0.1","slug":"2022-05-05lerna","date":"2022-05-05T13:30:47.000Z","categories_index":"工具","tags_index":"工具","author_index":"陈海龙"},{"id":"80947b2a66ed033838be54dc8f90264b","title":"MAC存储空间不足问题","content":"\n","slug":"2022-05-05mac","date":"2022-05-05T13:30:47.000Z","categories_index":"工具","tags_index":"工具","author_index":"陈海龙"},{"id":"462f06ba8f007318cafbef853cf322ba","title":"String相关面试代码","content":"转化为驼峰命名\n\n\n\n\n\n\n\n\nvar s1 = &quot;get-element-by-id&quot;\nvar f &#x3D; function (s) &#123;\n  return s.replace(&#x2F;-\\w&#x2F;g, function (x) &#123;\n    return x.splice(1).toUpperCase();\n  &#125;);\n&#125;;\n\n模版引擎实现let template &#x3D; &quot;我是&#123;&#123;name&#125;&#125;,年龄&#123;&#123;age&#125;&#125;,性别&#123;&#123;sex&#125;&#125;&quot;;\nlet data &#x3D; &#123;\n  name: &quot;姓名&quot;,\n  age: 18,\n&#125;;\n\nrender(template, data); &#x2F;&#x2F;我是姓名,年龄18,性别undefined\n\nfunction render(template, data) &#123;\n  &#x2F;&#x2F; 模版字符串正则\n  const resg &#x3D; &#x2F;\\&#123;\\&#123;(\\w+)\\&#125;\\&#125;&#x2F;;\n  &#x2F;&#x2F; 判断模版里是否有模版字符串\n  if (reg.test(template)) &#123;\n    &#x2F;&#x2F; 查找当前模版里第一个模版字符串的字符\n    const name &#x3D; reg.exec(template)[1];\n    &#x2F;&#x2F; 将第一个模版字符串渲染\n    template &#x3D; template.replace(reg, data[name]);\n    &#x2F;&#x2F; 递归的渲染并返回渲染后的结构\n    return render(template, data);\n  &#125;\n&#125;\n\n解析 URL Params 为对象let url &#x3D;\n  &quot;http:&#x2F;&#x2F;www.domain.com&#x2F;?user&#x3D;anonymouse&amp;id&#x3D;123&amp;id&#x3D;456&amp;city&#x3D;%E5%8C%97%E4%BA%AC&amp;enabled&quot;;\n\n&#x2F;**\n * 结果\n * &#123;\n *  user: &#39;anonymouse&#39;,\n *  id: [123,456], &#x2F;&#x2F; 重复出现的key，要转化成数组\n *  city: &#39;北京&#39;, &#x2F;&#x2F; 中文需要解码\n *  enabled: true &#x2F;&#x2F; 未指定值的key，约定为true\n *\n *\n * &#125;\n *\n **&#x2F;\nfunction paramParam(url) &#123;\n  const paramsStr &#x3D; &#x2F;.+\\?(.+)$&#x2F;.exec(url)[1];\n  const paramsArr &#x3D; paramsArr.split(&quot;&amp;&quot;);\n  let paramsObj &#x3D; &#123;&#125;;\n\n  paramsArr.forEach((param) &#x3D;&gt; &#123;\n    if (&#x2F;&#x3D;&#x2F;.test(param)) &#123;\n      let [key, val] &#x3D; param.split(&quot;&#x3D;&quot;); &#x2F;&#x2F; 拆分键&#x2F;值\n      val &#x3D; decodeURLComponent(val); &#x2F;&#x2F; 汉字解码\n      val &#x3D; &#x2F;^\\d+$&#x2F;.test(val) ? parseFloat(val) : val; &#x2F;&#x2F; 数字转化\n      if (paramsObj.hasOwnProperty(key)) &#123;\n        paramsObj[key] &#x3D; [].concat(paramsObj[key], val); &#x2F;&#x2F; 重复key转数组\n      &#125; else &#123;\n        paramsObj[key] &#x3D; val;\n      &#125;\n    &#125; else &#123;\n      paramsObj[key] &#x3D; true; &#x2F;&#x2F; 处理约定\n    &#125;\n  &#125;);\n&#125;\n\n查找字符串中，出现最多的字符和个数let str &#x3D; &quot;abcabcabcbbcccc&quot;;\nlet num &#x3D; 0;\nlet char &#x3D; &quot;&quot;;\n\n&#x2F;&#x2F; 先排序，后用正则处理个数\n\nstr &#x3D; str.split(&quot;&quot;).sort().join(&quot;&quot;);\n\nlet re &#x3D; &#x2F;(\\w)\\1+&#x2F;g;\n\nstr.replace(re, ($0, $1) &#x3D;&gt; &#123;\n  if (num &lt; $0.length) &#123;\n    num &#x3D; $0.length;\n    char &#x3D; $1;\n  &#125;\n&#125;);\n\n字符串查找a &#x3D; &quot;34&quot;;\nb &#x3D; &quot;1234567&quot;; &#x2F;&#x2F; 返回2\na &#x3D; &quot;35&quot;;\nb &#x3D; &quot;1234567&quot;; &#x2F;&#x2F; 返回 -1\na &#x3D; &quot;355&quot;;\nb &#x3D; &quot;1234355&quot;; &#x2F;&#x2F; 返回5\n\nfunction isContain(a, b) &#123;\n  for (let i in b) &#123;\n    if (a[0] &#x3D;&#x3D;&#x3D; b[i]) &#123;\n      let tmp &#x3D; true;\n      for (let j in a) &#123;\n        if (a[j] !&#x3D;&#x3D; b[~~i + ~~j]) &#123;\n          tmp &#x3D; false;\n        &#125;\n      &#125;\n      if (tmp) &#123;\n        return i;\n      &#125;\n    &#125;\n  &#125;\n  return -1;\n&#125;\n\n实现千分位分隔符&#x2F;&#x2F; 保留三位小数\nparaseToMoney(1234.56); &#x2F;&#x2F; return &#39;1,234.56&#39;\nparaseToMoney(123456789); &#x2F;&#x2F; return 123,456,789\nparaseToMoney(1087654.321); &#x2F;&#x2F; return 1,087,654.321\n\nfunction paraseToMoney(params) &#123;\n  num &#x3D; parseFloat(num.toFixed(3));\n  let [integer, decimal] &#x3D; String.prototype.split.call(num, &quot;.&quot;);\n  integer &#x3D; integer.replace(&#x2F;\\d(?&#x3D;(\\d&#123;3&#125;))+$&#x2F;, &quot;$&amp;,&quot;);\n  return integer + &quot;.&quot; + (decimal ?? &quot;&quot;);\n&#125;\n\n判断是否是电话号码function isPhone(str) &#123;\n  let regx &#x3D; &#x2F;^1[34578]\\d&#123;9&#125;$&#x2F;;\n  return regx.test(str);\n&#125;\n\n判断是否是邮箱function isEmail(mail) &#123;\n  var regx &#x3D; &#x2F;^(a-zA-Z0-9_\\-)+@(a-zA-Z0-9_\\-)+(\\.[a-zA-Z0-9_\\-])+$&#x2F;;\n\n  return regx.test(email);\n&#125;\n\n校验身份证function isCard(number) &#123;\n  var regx &#x3D; &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;;\n\n  return regx.test(number);\n&#125;\n","slug":"2022-05-03string","date":"2022-05-04T00:00:00.000Z","categories_index":"前端","tags_index":"前端","author_index":"陈海龙"},{"id":"be2d536c56c87a429a3dc062a6c5cd1f","title":"架构设计引发的血案","content":"记录个bug,并在此文中规避此处记下 hexo-theme-aurora 源码bug，没空时候帮他改\n.article .article-content p &#123;\n    font-size: .875rem;\n    line-height: 1.25rem;\n    margin-bottom: 0.5rem;\n    padding-bottom: 1rem;\n    word-break: break-all;\n&#125;\nbug复现\n(node:29) UnhandledPromiseRejectionWarning: Error: Forbidden\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)\n    at async Promise.all (index 3)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\n(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag &#96;--unhandled-rejections&#x3D;strict&#96; (see https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;cli.html#cli_unhandled_rejections_mode). (rejection id: 19)\n(node:29) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n(node:29) UnhandledPromiseRejectionWarning: Error: Forbidden\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)\n    at async Promise.all (index 3)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag &#96;--unhandled-rejections&#x3D;strict&#96; (see https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;cli.html#cli_unhandled_rejections_mode). (rejection id: 44)\nError: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Object.refreshPendingPerformanceNum (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11487:25)\n    at async Promise.all (index 2)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\nError: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Promise.all (index 0)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\nError: Forbidden\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)\n    at async Promise.all (index 3)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\nError: Forbidden\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Promise.all (index 0)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\nError: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Promise.all (index 0)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\nError: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Object.refreshPendingPerformanceNum (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11487:25)\n    at async Promise.all (index 2)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)\n\n\n源代码const [resp] &#x3D; await Promise.all([\n  getLoginInfo(ctx),\n  CommonModel.effects.refreshPendingObjectiveNum(req, ctx),\n  CommonModel.effects.refreshPendingPerformanceNum(req, ctx),\n  CommonModel.effects.getDataReport(req, ctx),\n])\n\nif (resp.success) &#123;\n  UserModal.actions.setUser(resp.result, req)\n&#125;\n增加异常捕获const [resp] &#x3D; await Promise.all([\n  getLoginInfo(ctx),\n  CommonModel.effects.refreshPendingObjectiveNum(req, ctx),\n  CommonModel.effects.refreshPendingPerformanceNum(req, ctx),\n  CommonModel.effects.getDataReport(req, ctx),\n]).catch(e&#x3D;&gt;&#123;\n  console.log(&quot;发生错误&quot;)\n  console.log(e)\n&#125;)\n日志日志仅 Forbidden 有效信息，大概是接口\n发生错误\nError: Forbidden\n    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-7be1c2d9b56a41e863e3.js:13144:29\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)\n    at async Promise.all (index 0)\n    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-7be1c2d9b56a41e863e3.js:12208:22)\n\n\n\n总结：\n因为acl 企业权限整了180天（顶配），时不时就出现系统瘫痪的情况，日常、线上都有此问题这架构设计的，估计没谁了。完全可以改成离职后，系统自动将用户禁权即可\n除此之外，sso也有个通病，三个月没改过密码，用户账户无法登录，需要重新密码方可登录\n\n","slug":"2022-04-29nextjs","date":"2022-04-29T02:56:00.000Z","categories_index":"bug","tags_index":"bug","author_index":"陈海龙"},{"id":"ea6c6af45eb8fb66a729fbe0ec8cd8f3","title":"Nestjs 结合 knife4j","content":"nest-knife4jknife4j githubknife4j 文档knife4j可以理解为一套swagger皮肤，不使用knife4j默认是swagger 1版本的样式\n","slug":"2022-02-29node","date":"2022-03-01T11:55:47.000Z","categories_index":"Node","tags_index":"Node","author_index":"陈海龙"},{"id":"0523d16168244c5c50ce4e647b1f2e1c","title":"Nestjs文件上传","content":"文件上传Nestjs 上传文件Nestjs 上传文件\n","slug":"2022-02-28node","date":"2022-02-28T12:55:47.000Z","categories_index":"Node","tags_index":"Node","author_index":"陈海龙"},{"id":"517bb0f5aa3a9a70442efc92a9ecc4e8","title":"React 拖拽兼容","content":"拖拽在web pc 端、iframe、h5移动端存在差异\nweb pc 端支持：onMouseDown、onMouseUp、onMousemove、onDragStart、onDragEnd、nDragOver\niframe web pc 端支持：onMouseDown、onMouseUp、onMousemove\nh5移动端支持：onTouchStart、onTouchEnd、onTouchmove代码\n\nexport default function Draggable(props: Props) &#123;\n  const &#123; children, style, className, onDragFinish, onDraggingStart, onPositionGet, boundary &#x3D; &#123; x: MARGIN_TO_PAGE, y: MARGIN_TO_PAGE &#125; &#125; &#x3D; props\n  const [dragging, setDragging] &#x3D; useState(false)\n  const [attaching, setAttaching] &#x3D; useState(false)\n  const [top, setTop] &#x3D; useState(0)\n  const [left, setLeft] &#x3D; useState(0)\n  const ghostRef: MutableRefObject&lt;HTMLDivElement&gt; &#x3D; useRef()\n  const elRef: MutableRefObject&lt;HTMLDivElement&gt; &#x3D; useRef()\n\n  const onDragStart &#x3D; useCallback((e: DragEvent&lt;HTMLDivElement&gt; | TouchEvent&lt;HTMLDivElement&gt;) &#x3D;&gt; &#123;\n    let x\n    let y\n    if (isDrag(e)) &#123;\n      if (e.target !&#x3D;&#x3D; elRef.current) &#123;\n        return\n      &#125;\n      e.dataTransfer.setDragImage(emptyImg, 0, 0)\n      x &#x3D; e.clientX\n      y &#x3D; e.clientY\n    &#125; else &#123;\n      if (!e.target || !(e.target instanceof HTMLElement)) &#123;\n        return\n      &#125;\n      if (!parentHasClass(e.target, [rootStyles.feedbackRoot])) &#123;\n        return\n      &#125;\n      x &#x3D; e.touches[0].clientX\n      y &#x3D; e.touches[0].clientY\n    &#125;\n    e.stopPropagation()\n\n\n    const rect &#x3D; e.currentTarget.getBoundingClientRect()\n    const offsetX &#x3D; x - rect.x\n    const offsetY &#x3D; y - rect.y\n    setTop(rect.y)\n    setLeft(rect.x)\n    setDragging(true)\n\n    if (isDrag(e)) &#123;\n      dragoverHandle &#x3D; (event: DragEvent) &#x3D;&gt; &#123;\n        if (event.clientX || event.clientY) &#123;\n          setTop(event.clientY - offsetY)\n          setLeft(event.clientX - offsetX)\n        &#125;\n      &#125;\n      &#x2F;&#x2F; firefox 中，ondrag 拿不到鼠标的坐标，所以这里使用 document 的 dragover\n      document.addEventListener(&#39;dragover&#39;, dragoverHandle)\n    &#125; else &#123;\n      dragoverHandle &#x3D; (event: TouchEvent) &#x3D;&gt; &#123;\n        const touch &#x3D; event.touches[0]\n        if (touch.clientX || touch.clientY) &#123;\n          setTop(touch.clientY - offsetY)\n          setLeft(touch.clientX - offsetX)\n        &#125;\n      &#125;\n      document.addEventListener(&#39;touchmove&#39;, dragoverHandle)\n    &#125;\n    onDraggingStart()\n  &#125;, [])\n\n  const onDragEnd &#x3D; useCallback((event) &#x3D;&gt; &#123;\n    if (!ghostRef.current) &#123;\n      setDragging(false)\n      return\n    &#125;\n    const rect &#x3D; ghostRef.current.getBoundingClientRect()\n    const &#123; rel, abs &#125; &#x3D; calcAttachSide(rect, boundary)\n\n    setTop(abs.top)\n    setLeft(abs.left)\n    setAttaching(true)\n\n    if (isDrag(event)) &#123;\n      document.removeEventListener(&#39;dragover&#39;, dragoverHandle)\n    &#125; else &#123;\n      document.removeEventListener(&#39;touchmove&#39;, dragoverHandle)\n    &#125;\n\n    &#x2F;&#x2F; onPosition &amp;&amp; onPosition(rel) &#x2F;&#x2F; 其他业务\n\n\n    dragoverHandle &#x3D; null\n\n    setTimeout(() &#x3D;&gt; &#123;\n      onDragFinish(rel)\n      setAttaching(false)\n      setDragging(false)\n    &#125;, 300)\n  &#125;, [])\n\n  const onMousedown &#x3D; useCallback((e) &#x3D;&gt; &#123;\n    const x &#x3D; e.clientX\n    const y &#x3D; e.clientY\n    const rect &#x3D; e.currentTarget.getBoundingClientRect()\n    const offsetX &#x3D; x - rect.x\n    const offsetY &#x3D; y - rect.y\n    setTop(rect.y)\n    setLeft(rect.x)\n    setDragging(true)\n    if (e.preventDefault) &#123;\n      e.preventDefault()\n    &#125; else &#123;\n      e.returnValue &#x3D; false\n    &#125;\n    document.onmousemove &#x3D; function (ev: any) &#123;\n      const _event &#x3D; ev || window.event\n      const endx &#x3D; _event.clientX - offsetX\n      const endy &#x3D; _event.clientY - offsetY\n      setTop(endy)\n      setLeft(endx)\n    &#125;\n  &#125;, [])\n\n  const onMouseup &#x3D; useCallback((e) &#x3D;&gt; &#123;\n    if (!ghostRef.current) &#123;\n      setDragging(false)\n      return\n    &#125;\n    const rect &#x3D; ghostRef.current.getBoundingClientRect()\n    const &#123; rel, abs &#125; &#x3D; calcAttachSide(rect, boundary)\n\n    setTop(abs.top)\n    setLeft(abs.left)\n    setAttaching(true)\n\n    document.onmousemove &#x3D; null\n    onPositionGet &amp;&amp; onPositionGet(rel)\n    setTimeout(() &#x3D;&gt; &#123;\n      onDragFinish(rel)\n      setAttaching(false)\n      setDragging(false)\n    &#125;, 300)\n  &#125;, [])\n &#x2F;&#x2F; 能力检测\n  if (&#39;dragover&#39; in document.documentElement || &#39;ontouchstart&#39; in document.documentElement) &#123;\n    return (\n      &lt;div\n        style&#x3D;&#123;style&#125;\n        className&#x3D;&#123;className&#125;\n        draggable\n        onTouchStart&#x3D;&#123;onDragStart&#125;\n        onTouchEnd&#x3D;&#123;onDragEnd&#125;\n        onDragStart&#x3D;&#123;onDragStart&#125;\n        onDragEnd&#x3D;&#123;onDragEnd&#125;\n        onDragOver&#x3D;&#123;prevent&#125;\n        ref&#x3D;&#123;elRef&#125;\n      &gt;\n        &lt;div\n          style&#x3D;&#123;dragging ? &#123; top, left &#125; : null&#125;\n          className&#x3D;&#123;cn(&#123;\n            [styles.dragging]: dragging,\n            [styles.attaching]: attaching,\n          &#125;)&#125;\n          ref&#x3D;&#123;ghostRef&#125;\n        &gt;\n          &#123;children&#125;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n  return (\n    &lt;div\n      style&#x3D;&#123;style&#125;\n      className&#x3D;&#123;className&#125;\n      draggable\n      onMouseDown&#x3D;&#123;onMousedown&#125;\n      onMouseUp&#x3D;&#123;onMouseup&#125;\n      ref&#x3D;&#123;elRef&#125;\n    &gt;\n      &lt;div\n        style&#x3D;&#123;dragging ? &#123; top, left &#125; : null&#125;\n        className&#x3D;&#123;cn(&#123;\n          [styles.dragging]: dragging,\n          [styles.attaching]: attaching,\n        &#125;)&#125;\n        ref&#x3D;&#123;ghostRef&#125;\n      &gt;\n        &#123;children&#125;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;","slug":"2022-02-27react","date":"2022-02-27T13:30:47.000Z","categories_index":"React","tags_index":"React","author_index":"陈海龙"},{"id":"4bcdaa6034eed07b809bf3bc6eec819f","title":"React DOM","content":"17.0.0 (October 20, 2020)\n\n\n\n\n\n\n\n\nDelegate events to roots instead of document来看下原因\n\n\n\n\n\n\n\n\n\nReact自首次发布以来一直在自动执行事件委派。它直接在文档节点上为每个事件类型附加一个处理程序。\n\n\n\n\n\n\n\n\n\n虽然它提高了应用程序的性能，但由于文档节点上的事件委派，已经报告了许多问题。\n\n\n\n\n\n\n\n\n\n为了演示其中一个问题，让我们以select下拉列表为例。下面示例中的CountryDropDown是用于国家选择的React组件，它将被呈现给id为React root的div。react DOM容器封装在id为main的div中，该div有一个包含stopPropagation（）的更改事件。\n&lt;!--Div&#39;s change event contains stopPropagation()--&gt;\n&lt;div id&#x3D;&quot;main&quot;&gt;\n  &lt;!--Div where react component will be rendered --&gt;\n  &lt;div id&#x3D;&quot;react-root&quot;&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n\nclass CountryDropDown extends React.Component &#123;\n  state &#x3D; &#123;\n    country: &#39;&#39;,\n  &#125;\n  const handleChange &#x3D; e &#x3D;&gt; &#123;\n    this.setState(&#123; country: e.target.value &#125;);\n  &#125;\n  render() &#123;\n    return (\n      &lt;table class&#x3D;&quot;table table-striped table-condensed&quot;&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;Country&lt;&#x2F;th&gt;\n            &lt;th&gt;Selected country&lt;&#x2F;th&gt;\n          &lt;&#x2F;tr&gt;\n        &lt;&#x2F;thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;\n            &lt;td&gt;\n              &lt;select value&#x3D;&#123;this.state.country&#125;\n                onChange&#x3D;&#123;this.handleChange&#125;\n              &gt;\n                &lt;option value&#x3D;&quot;&quot;&gt;--Select--&lt;&#x2F;option&gt;\n                &lt;option value&#x3D;&quot;India&quot;&gt;India&lt;&#x2F;option&gt;\n                &lt;option value&#x3D;&quot;US&quot;&gt;US&lt;&#x2F;option&gt;\n                &lt;option value&#x3D;&quot;Dubai&quot;&gt;Dubai&lt;&#x2F;option&gt;\n              &lt;&#x2F;select&gt;\n            &lt;&#x2F;td&gt;\n            &lt;td&gt;\n              &#123;this.state.country&#125;\n            &lt;&#x2F;td&gt;\n          &lt;&#x2F;tr&gt;\n        &lt;&#x2F;tbody&gt;\n      &lt;&#x2F;table&gt;\n    );\n  &#125;\n&#125;\nReactDOM.render(&lt;CountryDropDown &#x2F;&gt;, document.getElementById(&#39;react-root&#39;));\n\n\n\n\n\n\n\n\n\n\n将更改事件附加到主div\ndocument.getElementById(&quot;main&quot;).addEventListener(\n  &quot;change&quot;,\n  function (e) &#123;\n    e.stopPropagation();\n  &#125;,\n  false\n);\n\n\n\n\n\n\n\n\n\n当选择一个国家时，我们无法看到所选的国家\n\n\n\n\n\n\n\n\n\n此意外行为的原因是附加到文档节点的onChange dropdown事件。包含e.stopPropagation（）的主div的change事件阻止了下拉菜单的onChange事件。\n\n\n\n\n\n\n\n\n\n为了解决此类问题，React 17不再在文档级别附加事件处理程序。相反，它将它们附加到根DOM容器中，React树将被渲染到该容器中。\n\n\n\n\n\n\n\n\n\n在React 17中进行更改后，事件被附加到根DOM容器，React树被呈现到该容器中。在我们的示例中，onChange事件的下拉列表将附加到id为react root的div。当选择任何国家&#x2F;地区呈现预期行为时，将触发此事件。\n","slug":"2022-05-04react","date":"2022-02-27T13:30:47.000Z","categories_index":"React","tags_index":"React","author_index":"陈海龙"},{"id":"0fe71bf4ca9007e9b607927107758aa8","title":"Sentry错误日志获取","content":"\n先上图\n\n\n\nThis is a quick getting started guide. For in-depth instructions on integrating Sentry with React, view our complete documentation.\nTo instrument your React application with Sentry, first install the @sentry/react and @sentry/tracing packages:\n# Using yarn\nyarn add @sentry&#x2F;react @sentry&#x2F;tracing\n\n# Using npm\nnpm install --save @sentry&#x2F;react @sentry&#x2F;tracing\n\nNext, import and initialize the Sentry module as early as possible, before initializing React:\nimport React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\nimport * as Sentry from &quot;@sentry&#x2F;react&quot;;\nimport &#123; Integrations &#125; from &quot;@sentry&#x2F;tracing&quot;;\nimport App from &quot;.&#x2F;App&quot;;\n\nSentry.init(&#123;\n  dsn: &quot;https:&#x2F;&#x2F;a5f1c39789b24bb7a434868b677e0c65@&#x2F;1063&quot;,\n  integrations: [new Integrations.BrowserTracing()],\n\n  &#x2F;&#x2F; Set tracesSampleRate to 1.0 to capture 100%\n  &#x2F;&#x2F; of transactions for performance monitoring.\n  &#x2F;&#x2F; We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n&#125;);\n\nReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;root&quot;));\n\n&#x2F;&#x2F; Can also use with React Concurrent Mode\n&#x2F;&#x2F; ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;App &#x2F;&gt;);\n\nThe above configuration captures both error and performance data. To reduce the volume of performance data captured, change tracesSampleRate to a value between 0 and 1.\nAfter this step, Sentry will report any uncaught exceptions triggered by your application.\nYou can trigger your first event from your development environment by raising an exception somewhere within your application. An example of this would be rendering a button whose onClick handler attempts to invoke a method that does not exist:\nreturn &lt;button onClick&#x3D;&#123;methodDoesNotExist&#125;&gt;Break the world&lt;&#x2F;button&gt;;\n\nOnce you’ve verified the library is initialized properly and sent a test event, consider visiting our complete React docs. There you’ll find additional instructions for surfacing valuable context from React error boundaries, React Router, Redux, and more.\n","slug":"2021-06-20sentry","date":"2021-06-20T12:12:47.000Z","categories_index":"Web","tags_index":"Web","author_index":"陈海龙"},{"id":"40c248981d4dc9431fe8a0d461ef29a9","title":"CSS 自动生成 .d.ts","content":"CSS Module Typedvscode 插件列表中有好多个，不要安装错了\n\naddresslink\nInstallInstall deps first:\nrequirenpm install typed-css-modules\nif you need lessnpm install less\nif you need scss&#x2F;sassnpm install sass\nif you need stylusnpm install stylus\n\n\n\n\n\n\n\n\n\nModules can be installed globally. yarn is supported.\n\n\n\n\n\n\n\n\n\nTo switch the package manager (npm or yarn), you need to change the settings npm.packageManager of the built-in module vscode.npm.\nConfiguringBy default, the option to automatically format .d.ts files using eslint is enabled. You can disable this feature through the setting “typed-css-modules.eslint.enable”: false.\nUsageput\n// @type\nor\n/* @type */\nahead of your .css&#x2F;.less&#x2F;.scss&#x2F;.sass&#x2F;.styl file, and save, you will get a d.ts file in same directory.\npreview\ndemo&#x2F;* @type *&#x2F;\n\n.root &#123;\n  padding: 16px;\n  min-height: 100%;\n\n  .empty-wrapper &#123;\n    height: 380px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  &#125;\n\n  &gt; h3 &#123;\n    font-size: inherit;\n    margin-bottom: 4px;\n  &#125;\n\n  .toolbar-wrapper &#123;\n    position: relative;\n\n    .toolbar &#123;\n      position: absolute;\n      margin: 12px 0;\n      z-index: 1;\n\n      &amp;.static &#123;\n        position: static;\n      &#125;\n\n      &gt; *:not(:first-child) &#123;\n        margin-left: 8px;\n      &#125;\n    &#125;\n  &#125;\n  .buttons &#123;\n    button &#123;\n      margin-right: 8px;\n    &#125;\n  &#125;\n&#125;\n.use-select &#123;\n  width: 300px;\n&#125;\n\ndeclare const styles: &#123;\n  readonly root: string;\n  readonly &quot;empty-wrapper&quot;: string;\n  readonly &quot;toolbar-wrapper&quot;: string;\n  readonly toolbar: string;\n  readonly static: string;\n  readonly buttons: string;\n  readonly &quot;use-select&quot;: string;\n&#125;;\nexport &#x3D; styles;\n\nproblem\n\n\n\n\n\n\n\n\nCreates .d.ts files from css-modules .css&#x2F;.less&#x2F;.scss&#x2F;.sass&#x2F;.styl files.\n\n\n\n\n\n\n\n\n\nError: vscode-typed-css-modules: Cannot find global module ‘typed-css-modules’\nnpm install -g typed-css-modules\n","slug":"2021-06-10scss2type","date":"2021-06-10T13:30:47.000Z","categories_index":"工具","tags_index":"工具,增效,vscode","author_index":"陈海龙"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-03-19T16:00:00.000Z","categories_index":"","tags_index":"","author_index":"陈海龙"},{"id":"c52c4d2131250825dcd85d4b917f6cb4","title":"vscode GitHub Copilot","content":"Copilot\n\n\n\nYour AI pair programmer\n官网\n支持开发工具\n\n\n\n\n\n\n\n\nsupport Visual Studio Code, Neovim, and IntelliJ-based IDEs like JetBrains IntelliJ IDEA, Android Studio or PyCharm.\n注册\n需要人员审批通过，等[1-2 工作日]\n\n注册&#x2F;结果查看\n我等到了5月25号才通过，好像有两周的样子😂\n\n\n\n\n\n\n\n\n\nJoin the GitHub Copilot waitlistAccess is limited to a small group of testers during the technical preview of GitHub Copilot. Sign up today for your chance to try it out and help us improve.\n\n\n\n\n\n\n\n\n\nYou’re already on the waitlist for GitHub Copilot! We’ll notify you when we’ve enabled it on your account. Make sure your primary email address is up-to-date so we can notify you.\nvscode 安装插件 Copilot\n读源码的利器\n写文档的利器\n我这里需要某种格式的翻译效果\n\n","slug":"2022-05-08vscode","date":"2020-05-08T03:25:00.000Z","categories_index":"vscode","tags_index":"增效,vscode,AI编程","author_index":"陈海龙"},{"id":"e8f86794a8b73abb4c26e162bb1c7550","title":"Git public key","content":"[root@izbp1hun1qsl59e2nzqyvcz ~]# git config --global user.name &quot;hailong.chen&quot;\n[root@izbp1hun1qsl59e2nzqyvcz ~]# git config --global user.email &quot;841660202@qq.com&quot;\n\n\n\n\n\n\n\n\n\n\nSSHSSH keysSSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。 先执行以下语句来判断是否已经存在本地公钥：cat ~/.ssh/id_rsa.pub如果你看到一长串以 ssh-rsa或 ssh-dsa开头的字符串, 你可以跳过 ssh-keygen的步骤。提示: 最好的情况是一个密码对应一个ssh key，但是那不是必须的。你完全可以跳过创建密码这个步骤。请记住设置的密码并不能被修改或获取。你可以按如下命令来生成ssh keyssh-keygen -t rsa -C &quot;841660202@qq.com&quot;这个指令会要求你提供一个位置和文件名去存放键值对和密码，你可以点击Enter键去使用默认值。用以下命令获取你生成的公钥：cat ~/.ssh/id_rsa.pub复制这个公钥放到你的个人设置中的SSH&#x2F;My SSH Keys下，请完整拷贝从ssh-开始直到你的用户名和主机名为止的内容。如果打算拷贝你的公钥到你的粘贴板下，请参考你的操作系统使用以下的命令：Windows:clip &lt; ~/.ssh/id_rsa.pubMac:pbcopy &lt; ~/.ssh/id_rsa.pubGNU&#x2F;Linux (requires xclip):xclip -sel clip &lt; ~/.ssh/id_rsa.pubApplicationsEclipse如何在Eclipse中添加ssh key: https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_ConfigurationTip: Non-default OpenSSH key file names or locations如果，不管你有什么理由，当你决定去用一个非默认的位置或文件名去存放你的ssh key。你必须配置好你的ssh客户端以找到你的ssh私钥去连接Code服务器，对于OpenSSH客户端，这个通常是在~&#x2F;.ssh&#x2F;config类似的位置配置的：Host my-git.company.comRSAAuthentication yesIdentityFile ~&#x2F;my-ssh-key-directory&#x2F;company-com-private-key-filename\nLast login: Sun Apr 17 16:06:15 on console\nN&#x2F;A: version &quot;N&#x2F;A -&gt; N&#x2F;A&quot; is not yet installed.\n\nYou need to run &quot;nvm install N&#x2F;A&quot; to install it before using it.\nN&#x2F;A: version &quot;N&#x2F;A -&gt; N&#x2F;A&quot; is not yet installed.\n\nYou need to run &quot;nvm install N&#x2F;A&quot; to install it before using it.\n\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run &#96;chsh -s &#x2F;bin&#x2F;zsh&#96;.\nFor more details, please visit https:&#x2F;&#x2F;support.apple.com&#x2F;kb&#x2F;HT208050.\nchenhailong@chenhailongdeMacBook-Pro:~$ &#x2F;Users&#x2F;chenhailong&#x2F;Desktop \n-bash: &#x2F;Users&#x2F;chenhailong&#x2F;Desktop: is a directory\nchenhailong@chenhailongdeMacBook-Pro:~$ cd &#x2F;Users&#x2F;chenhailong&#x2F;Desktop \nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.git\nCloning into &#39;841660202.github.io&#39;...\nThe authenticity of host &#39;github.com (20.205.243.166)&#39; can&#39;t be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF&#x2F;zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes\nWarning: Permanently added &#39;github.com&#39; (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.git\nCloning into &#39;841660202.github.io&#39;...\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ pbcopy &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub\n-bash: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directory\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub\ncat: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directory\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git config --global user.name &quot;hailong.chen&quot;\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ \nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git config --global user.email &quot;841660202@qq.com&quot;\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub\ncat: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directory\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ ssh-keygen -t rsa -C &quot;841660202@qq.com&quot;\nGenerating public&#x2F;private rsa key pair.\nEnter file in which to save the key (&#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa\nYour public key has been saved in &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub\nThe key fingerprint is:\nSHA256:bdtIDeRXGKxGTEa&#x2F;Ex3QdPtVoOUiwuiq7YKjKrLakbU 841660202@qq.com\nThe key&#39;s randomart image is:\n+---[RSA 3072]----+\n|         +&#x3D;.o**.o|\n|       o +o.o*.oo|\n|      . o.+.* o..|\n|     .   oo&#x3D; +  o|\n|    . . S.+ +   .|\n|   o o   o + .   |\n| .o E     o .    |\n|&#x3D;..+             |\n|@oooo            |\n+----[SHA256]-----+\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ pbcopy &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.git\nCloning into &#39;841660202.github.io&#39;...\nremote: Enumerating objects: 441, done.\nremote: Counting objects: 100% (441&#x2F;441), done.\nremote: Compressing objects: 100% (216&#x2F;216), done.\nremote: Total 441 (delta 208), reused 401 (delta 168), pack-reused 0\nReceiving objects: 100% (441&#x2F;441), 1.34 MiB | 1.05 MiB&#x2F;s, done.\nResolving deltas: 100% (208&#x2F;208), done.\nchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ \n\n\n设置github SSH keyshttps://github.com/settings/keys\n","slug":"2016-06-20git","date":"2019-10-30T13:30:47.000Z","categories_index":"git","tags_index":"git","author_index":"陈海龙"},{"id":"2f05eb6cd7f25d74fcf01b828267389c","title":"MAC Iterm2美化终端","content":"MAC 环境注意：以下内容仅限MAC,其他环境，请自行谷歌\noh-my-zsh 插件推荐 :\nautojump 这个没用起来，使用没什么效果🥹\nzsh-autosuggestion 命令行输入有提示，（命令下载失败，手动下载，拷贝到 ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions）\nzsh-syntax-highlighting\n\n安装zsh1.使用 brew 安装\nbrew install oh-my-zsh\n2. 手动安装\ngit clone git:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zsh\n\ncp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc\n\n\n安装 autojump1.安装\nbrew install autojump\n2.配置code ~/.zshrc，把以下代码加到尾部\n# 使用brew安装的\n\n[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh\nsource $ZSH&#x2F;oh-my-zsh.sh\n\n# 使用git安装的\n\n[[ -s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh\n3.刷新配置\nsource ~&#x2F;.zshrc\n安装 zsh-autosuggestiongit clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions\n\n安装 zsh-syntax-highlightinggit clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting\n\n刷新配置最后用 source ~/.zshrc 命令更新配置文件\n.zshrc 配置如下：\n自己电脑配置，下面截图是办公电脑截图# If you come from bash you might have to change your $PATH.\n# export PATH&#x3D;$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH&#x3D;&quot;$HOME&#x2F;.oh-my-zsh&quot;\n\n# Set name of the theme to load --- if set to &quot;random&quot;, it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;wiki&#x2F;Themes\nZSH_THEME&#x3D;&quot;robbyrussell&quot;\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME&#x3D;random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH&#x2F;themes&#x2F;\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES&#x3D;( &quot;robbyrussell&quot; &quot;agnoster&quot; )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE&#x3D;&quot;true&quot;\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE&#x3D;&quot;true&quot;\n\n# Uncomment one of the following lines to change the auto-update behavior\n# zstyle &#39;:omz:update&#39; mode disabled  # disable automatic updates\n# zstyle &#39;:omz:update&#39; mode auto      # update automatically without asking\n# zstyle &#39;:omz:update&#39; mode reminder  # just remind me to update when it&#39;s time\n\n# Uncomment the following line to change how often to auto-update (in days).\n# zstyle &#39;:omz:update&#39; frequency 13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS&#x3D;&quot;true&quot;\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS&#x3D;&quot;true&quot;\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE&#x3D;&quot;true&quot;\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION&#x3D;&quot;true&quot;\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS&#x3D;&quot;%F&#123;yellow&#125;waiting...%f&quot;\n# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)\n# COMPLETION_WAITING_DOTS&#x3D;&quot;true&quot;\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY&#x3D;&quot;true&quot;\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# &quot;mm&#x2F;dd&#x2F;yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;\n# or set a custom format using the strftime function format specifications,\n# see &#39;man strftime&#39; for details.\n# HIST_STAMPS&#x3D;&quot;mm&#x2F;dd&#x2F;yyyy&quot;\n\n# Would you like to use another custom folder than $ZSH&#x2F;custom?\n# ZSH_CUSTOM&#x3D;&#x2F;path&#x2F;to&#x2F;new-custom-folder\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH&#x2F;plugins&#x2F;\n# Custom plugins may be added to $ZSH_CUSTOM&#x2F;plugins&#x2F;\n# Example format: plugins&#x3D;(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\n# 插件信息\nplugins&#x3D;(\n  git\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n  autojump\n)\n\nsource $ZSH&#x2F;oh-my-zsh.sh\n\n[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh\nsource $ZSH&#x2F;oh-my-zsh.sh\n\n# User configuration\nPROMPT&#x3D;&quot;%(?:%&#123;$fg_bold[yellow]%&#125;♠ :%&#123;$fg_bold[red]%&#125;♠ )%&#123;$fg[cyan]%&#125;%d $ &quot;\n# PROMPT&#x3D;&quot;%(?:%&#123;$fg_bold[yellow]%&#125;♠ :%&#123;$fg_bold[red]%&#125;♠ )%&#123;$fg[cyan]%&#125;%d %&#123;$fg_bold[magenta]%&#125;$ &quot;\nPROMPT+&#x3D;&#39;%&#123;$reset_color%&#125;&#39;\n\nZSH_THEME_GIT_PROMPT_PREFIX&#x3D;&quot;%&#123;$fg_bold[blue]%&#125;&quot;\nZSH_THEME_GIT_PROMPT_SUFFIX&#x3D;&quot;%&#123;$reset_color%&#125; &quot;\nZSH_THEME_GIT_PROMPT_DIRTY&#x3D;&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;✗&quot;\nZSH_THEME_GIT_PROMPT_CLEAN&#x3D;&quot;%&#123;$fg[blue]%&#125;)&quot;\n\n# 参考 https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b84d8b7b134e\n\n# code\tvalue\n# %T\t系统时间（时：分）\n# %*\t系统时间（时：分：秒）\n# %D\t系统日期（年-月-日）\n# %n\t用户名\n# %B - %b\t开始到结束使用粗体打印\n# %U - %u\t开始到结束使用下划线打印\n# %c\t仅当前文件夹路径\n# %d\t当前目录路径完整\n# %~\t当前目录相对于～的相对路径\n# %M\t计算机的主机名\n# %m\t计算机的主机名（在第一个句号之前截断\n# %l\t当前的tty\n\n\n\n# export MANPATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;man:$MANPATH&quot;\n\n# You may need to manually set your language environment\n# export LANG&#x3D;en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR&#x3D;&#39;vim&#39;\n# else\n#   export EDITOR&#x3D;&#39;mvim&#39;\n# fi\n\n# Compilation flags\n# export ARCHFLAGS&#x3D;&quot;-arch x86_64&quot;\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run &#96;alias&#96;.\n#\n# Example aliases\n# alias zshconfig&#x3D;&quot;mate ~&#x2F;.zshrc&quot;\n# alias ohmyzsh&#x3D;&quot;mate ~&#x2F;.oh-my-zsh&quot;\n\n推荐博客左岸博客使用效果\n\n","slug":"2017-07-09item2","date":"2019-10-30T13:30:47.000Z","categories_index":"工具","tags_index":"工具,增效","author_index":"陈海龙"},{"id":"8efdd810acba9c22bd1fc9e846bc2c89","title":"批量删除目录","content":"删除某个目录下所有子目录的node_modules# 查找 &#x2F;tmp&#x2F;test&#x2F; 子目录下所有 modu 执行删除\nfind &#x2F;tmp&#x2F;test&#x2F; -type d -name modu |xargs rm -rf\n\n# 查找 &#x2F;tmp&#x2F;test&#x2F; 子目录下所有 node_modules 执行删除\nfind &#x2F;tmp&#x2F;test&#x2F; -type d -name node_modules |xargs rm -rf","slug":"2019-10-30shell","date":"2019-10-30T13:30:47.000Z","categories_index":"Shell","tags_index":"增效,Shell","author_index":"陈海龙"},{"id":"9898e57ef559824ae32861e6fc17d4db","title":"Layoffs","content":"一家上市公司近期「B业」人数变化\n","slug":"2022-03-25Layoffs","date":"2019-10-30T13:30:47.000Z","categories_index":"Layoffs","tags_index":"Layoffs","author_index":"陈海龙"},{"id":"fa6ca4165b8b582ff1a69b1ccf9de547","title":"Nestjs服务端技术栈","content":"NestJS中文文档NestJS中文文档NestJS中文文档github 42.2K\n\n\n\n\n\n\n\n\n\nA progressive Node.js framework for building efficient, scalable, and enterprise-grade server-side applications on top of TypeScript &amp; JavaScript (ES6, ES7, ES8) 🚀\nTypeORMTypeORM中文文档github地址 26.3K\n\n\n\n\n\n\n\n\n\nORM for TypeScript and JavaScript (ES7, ES6, ES5). Supports MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server, Oracle, SAP Hana, WebSQL databases. Works in NodeJS, Browser, Ionic, Cordova and Electron platforms.\n","slug":"2021-06-30node","date":"2015-11-12T02:55:47.000Z","categories_index":"Node","tags_index":"Node","author_index":"陈海龙"},{"id":"6f9f700e5a026be1d86747100cd27059","title":"Web office预览","content":"第一步将文件上传到你的服务器里，并支持url下载这个文件。第二步访问：http://view.officeapps.live.com/op/view.aspx?src=要预览文件的url地址（记得url编码哦）第三步可以使用iframe嵌入你的系统更多详情查看：https://www.microsoft.com/en-us/microsoft-365/blog/2013/04/10/office-web-viewer-view-office-documents-in-a-browser/?eu=true\n","slug":"2021-09-07web","date":"2015-11-12T02:55:47.000Z","categories_index":"Web","tags_index":"Web","author_index":"陈海龙"},{"id":"038636b617c3d3d43c65b95b558e1735","title":"node-dev","content":"在幕后用ts-node调整node-dev\n作用：在幕后用ts-node调整node-dev\n优点：\n任意依赖的文件改变时候，重启node process，但是共享ts编译线程。\n因为不需要每次ts-node编译的实例化，而提升性能\n\n\n配置项：\n注意事项：\n截图：\n\n","slug":"2021-11-02node","date":"2015-11-12T02:55:47.000Z","categories_index":"Node","tags_index":"Node","author_index":"陈海龙"},{"id":"c15b0fd9b66d6749d042b7d88c5bcd12","title":"简书迁移到OSS","content":"命令cat .&#x2F;* |grep uploadimages.jianshu.io &gt; image.txt\nmkdir img3d\ncd img3d\nwget -i ..&#x2F;image.txt\nsed -i&#39;&#39; -e &#39;s&#x2F;!\\[image.png\\](&#x2F;&#x2F;g&#39; image.txt\nsed -i&#39;&#39; -e &#39;s&#x2F;)&#x2F;&#x2F;g&#39; image.txt\n迁移简书图片下载后重命名#! &#x2F;bin&#x2F;sh\n\nfor eachfile in &#96;ls -B&#96;\ndo  \n  # echo $&#123;eachfile%%\\%3F*&#125; # 截掉最后.txt    # $ % https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b3bdc3b3968e\n  filename&#x3D;$&#123;eachfile%%\\%3F*&#125;\n  filehead&#x3D;&#96;echo $eachfile | awk -F \\%3F &#39;&#123;print $1 &#125;&#39;&#96;\n  filelast&#x3D;&#96;echo $eachfile | awk -F \\%3F &#39;&#123;print $2 &#125;&#39;&#96;\n  # mv $filename.txt $&#123;filelast&#125;_$filehead.txt\n  # https:&#x2F;&#x2F;baijiahao.baidu.com&#x2F;s?id&#x3D;1726788915185806701&amp;wfr&#x3D;spider&amp;for&#x3D;pc\n  echo &#39;--&#39;\n  # echo $filename\n  echo $filehead #分割字符左边部分\n  echo $filelast #分割字符右边部分\n  # 右边文件存在的情况下才处理\n  if [ &quot;$filelast&quot; !&#x3D; &quot;&quot; ]\n  then\n    echo &#39;执行rename &#39;\n    mv $eachfile $filehead\n  fi\n\ndone\n","slug":"2022-04-27mv-blog-jianshu","date":"2015-11-12T02:55:47.000Z","categories_index":"Shell","tags_index":"Shell","author_index":"陈海龙"}]