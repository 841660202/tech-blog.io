<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>待办事项</title>
      <link href="//post/todo.html"/>
      <url>//post/todo.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 1. headless-recorder&#x2F;&#x2F; 2. lightHouse https:&#x2F;&#x2F;blog.csdn.net&#x2F;tangdou369098655&#x2F;article&#x2F;details&#x2F;122531766&#x2F;&#x2F; 3. 博客封面生成&#x2F;&#x2F; 4. 装饰器模式 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;decorator&#x2F;&#x2F; 5. iconfont自定义图标 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;decorator&#x2F;&#x2F; 6. 函数式编程 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;function-production&#x2F;&#x2F; 7. 换肤 https:&#x2F;&#x2F;www.zoo.team&#x2F;article&#x2F;theme-scss&#x2F;&#x2F; 8.[x] vscode setting sync 另一台电脑配置无法同步到本电脑&#x2F;&#x2F; 9.[x]item2本机重新配置&#x2F;&#x2F; 10.[x]莫名其妙的，代码片段在md上失效了&#x2F;&#x2F; 11. typescript 工具类型源码&#x2F;&#x2F; 12. react源码</code></pre><h2 id="好的博客"><a href="#好的博客" class="headerlink" title="好的博客"></a>好的博客</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 1.JerryWang_汪子熙  https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;99b8712e8850</code></pre>]]></content>
      
      
      <categories>
          
          <category> Todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript 工具类型源码</title>
      <link href="//post/2022-06-07typescript.html"/>
      <url>//post/2022-06-07typescript.html</url>
      
        <content type="html"><![CDATA[<h2 id="ts-类型如何调试"><a href="#ts-类型如何调试" class="headerlink" title="ts 类型如何调试"></a>ts 类型如何调试</h2><ul><li>不是代码逻辑如何调试，没想到</li></ul><h2 id="ts-自定义类型如何打印"><a href="#ts-自定义类型如何打印" class="headerlink" title="ts 自定义类型如何打印"></a>ts 自定义类型如何打印</h2><ul><li>不是 js 的结果如何打印，没想到</li></ul><h2 id="Creating-Types-from-Types"><a href="#Creating-Types-from-Types" class="headerlink" title="Creating Types from Types"></a>Creating Types from Types</h2><p>从已有类型中创建类型</p><p>TypeScript 的类型系统非常强大，因为它允许表达类型的另一种表达方式。<br>最简单的方式是泛型，我们实际上有一大堆的类型操作符可用。还可以表达类型的另一种表达方式，就是把已有的值作为类型。<br>通过合并多种类型操作符，我们可以表达复杂的操作和值，这里我们将介绍以另一个类型或值为基础如何表达一个新类型。</p><p><code>简单来说：使用 范型 或 6种表达式 来创建新类型</code></p><ul><li><p>范型 - 类型需要参数</p></li><li><p>Keyof Type Operator - 用 keyof 操作去创建新类型</p></li><li><p>Typeof Type Operator - 用 typeof 操作去创建新类型</p></li><li><p>Indexed Access Types - 使用 Type[‘a’]语法去访问一个类型的一部分</p></li><li><p>Conditional Types - 类型行为像 if 语句一样</p></li><li><p>Mapped Types - 通过映射已有类型的每个属性来创建新类型</p></li><li><p>Template Literal Types - 通过模板字符串来改变属性的映射类型</p></li></ul><h2 id="Keyof-Type-Operator"><a href="#Keyof-Type-Operator" class="headerlink" title="Keyof Type Operator"></a>Keyof Type Operator</h2><ul><li>这个操作符可以获取一个对象的所有 key，返回一个字符串或者数字的联合类型，接下来的类型 P 是这个类型的类型：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type P1 &#x3D; keyof any; &#x2F;&#x2F; 提示：type P1 &#x3D; string | number | symbol</code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Point &#x3D; &#123; x: number; y: number &#125;;type P &#x3D; keyof Point; &#x2F;&#x2F; 提示：type P &#x3D; keyof Point，这个提示等于没提示</code></pre><ul><li>如果这个类型有字符串或者数字索引，keyof 就会返回这个类型：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Arrayish &#x3D; &#123; [n: number]: unknown &#125;;type A &#x3D; keyof Arrayish; &#x2F;&#x2F;提示：type A &#x3D; numbertype Mapish &#x3D; &#123; [k: string]: boolean &#125;;type M &#x3D; keyof Mapish; &#x2F;&#x2F; 提示：type M &#x3D; string | number&#x2F;&#x2F; --------------------------------------------------------------&#x2F;&#x2F; 对于Arrayish&#x2F;&#x2F; 实例1:okvar a: Arrayish &#x3D; &#123;  1: &quot;string&quot;,  2: false,&#125;;&#x2F;&#x2F; 实例2: okvar a1: Arrayish &#x3D; [1, 2, 3, 4];&#x2F;&#x2F; 对于 Mapishvar b: Mapish &#x3D; &#123;  name: true,  age: false,&#125;;</code></pre><p>注意，这个例子中，M 是 string | number — 这是因为 JavaScript 对象键是总是被强制为字符串，所以 obj[0] 总是和 obj[“0”] 相同。</p><p>keyof 类型操作符可以获取一个对象的所有 key，返回一个字符串或者数字的联合类型，接下来的类型 P 是这个类型的类型：</p><h2 id="Typeof-type-operator"><a href="#Typeof-type-operator" class="headerlink" title="Typeof type operator"></a>Typeof type operator</h2><p>JavaScript 也有一个 typeof 操作符，可以用在表达式中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; Prints &quot;string&quot;console.log(typeof &quot;Hello world&quot;);</code></pre><p>TypeScript 增加了一个 typeof 操作符，可以用在类型上：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let s &#x3D; &quot;hello&quot;;let n: typeof s; &#x2F;&#x2F; 提示：let n: string</code></pre><h2 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h2><p>对于基本类型，typeof 操作符没有意义，但是与其他类型操作符结合使用，可以用 typeof 操作符来实现一些模式。例如，我们开始用 ReturnType<T> 来表示函数的返回类型：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Predicate &#x3D; (x: unknown) &#x3D;&gt; boolean;type K &#x3D; ReturnType&lt;Predicate&gt;; &#x2F;&#x2F; 提示 type K &#x3D; boolean</code></pre><p>如果我们尝试使用 ReturnType 在函数名上，我们会看到一个指示性的错误：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f() &#123;  return &#123; x: 10, y: 3 &#125;;&#125;type P &#x3D; ReturnType&lt;f&gt;;&#x2F;&#x2F; 提示：&#39;f&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof f&#39;?&#x2F;&#x2F; 提示：&#39;f&#39; 涉及到一个值，但是在这里被使用作为类型。你是否想使用 &#39;typeof f&#39; 来代替 &#39;f&#39;？</code></pre><p>记住，值和类型不是一回事。要引用值 f 所拥有的类型，我们使用 typeof：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f() &#123;  return &#123; x: 10, y: 3 &#125;;&#125;type P &#x3D; ReturnType&lt;typeof f&gt;;&#x2F;** * 提示 * type P &#x3D; &#123;    x: number;    y: number;&#125;**&#x2F;</code></pre><p><strong>限制</strong></p><p>typescript 通常限制了 typeof 的表达式的类型。<br>特殊的，typeof 的表达式<code>只能用于标识符（即变量名）其属性</code>。这个限制是为了避免写一些你认为是执行的代码，但实际上并不是的：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; Meant to use &#x3D; ReturnType&lt;typeof msgbox&gt;let shouldContinue: typeof msgbox(&quot;Are you sure you want to continue?&quot;);&#x2F;&#x2F; &#39;,&#39; expected.</code></pre><h2 id="Indexed-Access-Types"><a href="#Indexed-Access-Types" class="headerlink" title="Indexed Access Types"></a>Indexed Access Types</h2><p>我们可以使用索引访问类型来查找一个类型的特定属性：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Person &#x3D; &#123; age: number; name: string; alive: boolean &#125;;type Age &#x3D; Person[&quot;age&quot;]; &#x2F;&#x2F; 提示：type Age &#x3D; number</code></pre><p>这个索引类型本身是一个类型，所以我们可以使用联合，keyof 或者其他类型：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type I1 &#x3D; Person[&quot;age&quot; | &quot;name&quot;]; &#x2F;&#x2F; 提示：type I1 &#x3D; string | numbertype I2 &#x3D; Person[keyof Person]; &#x2F;&#x2F; 提示：type I2 &#x3D; string | number | booleantype AliveOrName &#x3D; &quot;alive&quot; | &quot;name&quot;;type I3 &#x3D; Person[AliveOrName]; &#x2F;&#x2F; 提示：type I3 &#x3D; string | boolean</code></pre><p>你会看到一个错误，如果你尝试索引一个不存在的属性：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type I1 &#x3D; Person[&quot;alve&quot;];Property &#39;alve&#39; does not exist on type &#39;Person&#39;.</code></pre><p>另一个例子是使用 number 来获取数组的元素类型。我们可以使用 typeof 来方便地捕获数组字面量的元素类型。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const MyArray &#x3D; [  &#123; name: &quot;Alice&quot;, age: 15 &#125;,  &#123; name: &quot;Bob&quot;, age: 23 &#125;,  &#123; name: &quot;Eve&quot;, age: 38 &#125;,];type Person &#x3D; typeof MyArray[number];&#x2F;&#x2F; 提示：type Person &#x3D; &#123; name: string; age: number; &#125;type Age &#x3D; typeof MyArray[number][&quot;age&quot;]; &#x2F;&#x2F; 提示 type Age &#x3D; number;&#x2F;&#x2F; Ortype Age2 &#x3D; Person[&quot;age&quot;]; &#x2F;&#x2F; 提示 type Age2 &#x3D; number;</code></pre><p>你只能使用类型来索引，意味着你不能使用 const 来创建一个变量引用：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const key &#x3D; &quot;age&quot;;type Age &#x3D; Person[key];&#x2F;&#x2F; Type &#39;key&#39; cannot be used as an index type.&#x2F;&#x2F; 这个错误是因为 key 是一个字面量，而不是一个变量。&#x2F;&#x2F; &#39;key&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof key&#39;?&#x2F;&#x2F; 这个错误是因为 key 涉及到一个值，但是在这里被使用作为类型。你是否想使用 &#39;typeof key&#39; 来代替 &#39;key&#39;？</code></pre><p>然而，你可以使用一个类型别名来替换相同的风格的重构：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type key &#x3D; &quot;age&quot;;type Age &#x3D; Person[key];</code></pre><h2 id="Conditional-Types"><a href="#Conditional-Types" class="headerlink" title="Conditional Types"></a>Conditional Types</h2><p>At the heart of most useful programs, we have to make decisions based on input. JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs. Conditional types help describe the relation between the types of inputs and outputs.<br>在最常见的程序中，我们需要根据输入来做决策。 JavaScript 程序是不同的，但是给定了这个事实，那些决策是根据输入的类型来做的。条件类型帮助描述输入和输出类型之间的关系。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Animal &#123;  live(): void;&#125;interface Dog extends Animal &#123;  woof(): void;&#125;type Example1 &#x3D; Dog extends Animal ? number : string; &#x2F;&#x2F; 提示：type Example1 &#x3D; numbertype Example2 &#x3D; RegExp extends Animal ? number : string; &#x2F;&#x2F; 提示：type Example2 &#x3D; string</code></pre><p>条件类型的表达式像 JavaScript 中的条件表达式一样：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">SomeType extends OtherType ? TrueType : FalseType;</code></pre><p><strong>此段内容，原文保留</strong><br>When the type on the left of the extends is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p><p>当 extends 左边的类型可以赋值给右边的类型时，你会得到第一个分支的类型（“true”分支）；否则你会得到第二个分支的类型（“false”分支）。</p><p>From the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not Dog extends Animal and pick number or string! But the power of conditional types comes from using them with generics.<br>从上面的例子中可以看到条件类型可能不会立即看起来很有用，我们可以告诉自己 Dog 是否继承了 Animal，然后选择 number 或 string！但是条件类型的力量来自于使用它们与泛型。</p><p>For example, let’s take the following createLabel function:<br>例如，我们可以把下面的 createLabel 函数拿来说说：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IdLabel &#123;  id: number &#x2F;* some fields *&#x2F;;&#125;interface NameLabel &#123;  name: string &#x2F;* other fields *&#x2F;;&#125;function createLabel(id: number): IdLabel;function createLabel(name: string): NameLabel;function createLabel(nameOrId: string | number): IdLabel | NameLabel;function createLabel(nameOrId: string | number): IdLabel | NameLabel &#123;  throw &quot;unimplemented&quot;;&#125;</code></pre><p>These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:<br>这些 createLabel 的重载描述了一个单一的 JavaScript 函数，它根据输入的类型来做决策。请注意一些事情：</p><p>If a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome.<br>We have to create three overloads: one for each case when we’re sure of the type (one for string and one for number), and one for the most general case (taking a string | number). For every new type createLabel can handle, the number of overloads grows exponentially.<br>如果一个库需要在其 API 中重复使用相同的选择，这就变得非常麻烦。我们需要创建三个重载：一个当我们知道类型时，一个当我们知道类型时，一个当我们不知道类型时。对于每个新的类型 createLabel 可以处理，重载的数量就会指数增长。<br>Instead, we can encode that logic in a conditional type:<br>反之，我们可以使用条件类型来表示逻辑：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type NameOrId&lt;T extends number | string&gt; &#x3D; T extends number  ? IdLabel  : NameLabel;</code></pre><p>We can then use that conditional type to simplify our overloads down to a single function with no overloads.<br>我们可以使用这个条件类型来简化我们的重载，只有一个函数。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;  throw &quot;unimplemented&quot;;&#125;let a &#x3D; createLabel(&quot;typescript&quot;);&#x2F;&#x2F; 提示：let a: NameLabel;let b &#x3D; createLabel(2.8);&#x2F;&#x2F; 提示：let b: IdLabel;let c &#x3D; createLabel(Math.random() ? &quot;hello&quot; : 42);&#x2F;&#x2F; 提示：let c: NameLabel | IdLabel;</code></pre><ul><li>Conditional Type Constraints</li></ul><p>条件类型约束</p><p>Often, the checks in a conditional type will provide us with some new information. Just like with narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constrain generics by the type we check against.<br>通常，在条件类型中的检查会提供我们一些新的信息。像类型检查一样，通过类型约束可以给我们更具体的类型，条件类型的 true 分支将通过我们检查的类型来约束泛型。<br>For example, let’s take the following:<br>例如，我们可以把下面的函数拿来说说：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type MessageOf&lt;T&gt; &#x3D; T[&quot;message&quot;];&#x2F;&#x2F; Type &#39;&quot;message&quot;&#39; cannot be used to index type &#39;T&#39;.</code></pre><p>In this example, TypeScript errors because T isn’t known to have a property called message. We could constrain T, and TypeScript would no longer complain:</p><p>在这个例子中，TypeScript 错误，因为 T 没有一个属性叫 message。我们可以约束 T，TypeScript 不会再报错了：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type MessageOf&lt;T extends &#123; message: unknown &#125;&gt; &#x3D; T[&quot;message&quot;];interface Email &#123;  message: string;&#125;type EmailMessageContents &#x3D; MessageOf&lt;Email&gt;;&#x2F;&#x2F; 提示：type EmailMessageContents &#x3D; string</code></pre><p>However, what if we wanted MessageOf to take any type, and default to something like never if a message property isn’t available? We can do this by moving the constraint out and introducing a conditional type:<br>然而，如果我们想要 MessageOf 取任意类型，并且默认为没有 message 属性的情况，我们可以这样做：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type MessageOf&lt;T&gt; &#x3D; T extends &#123; message: unknown &#125; ? T[&quot;message&quot;] : never;interface Email &#123;  message: string;&#125;interface Dog &#123;  bark(): void;&#125;type EmailMessageContents &#x3D; MessageOf&lt;Email&gt;;&#x2F;&#x2F; 提示：type EmailMessageContents &#x3D; string;type DogMessageContents &#x3D; MessageOf&lt;Dog&gt;;&#x2F;&#x2F; 提示：type DogMessageContents &#x3D; never;</code></pre><p>Within the true branch, TypeScript knows that T will have a message property.<br>在 true 分支中，TypeScript 知道 T 有一个 message 属性。</p><p>As another example, we could also write a type called Flatten that flattens array types to their element types, but leaves them alone otherwise:<br>作为另一个示例，我们还可以编写一个名为 Flatten 的类型，该类型将数组类型展平为其元素类型，但在其他情况下不使用它们：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Flatten&lt;T&gt; &#x3D; T extends any[] ? T[number] : T;&#x2F;&#x2F; Extracts out the element type. 提取元素类型。type Str &#x3D; Flatten&lt;string[]&gt;;type Str &#x3D; string;&#x2F;&#x2F; Leaves the type alone. 保留该类型。type Num &#x3D; Flatten&lt;number&gt;;type Num &#x3D; number;</code></pre><p>When Flatten is given an array type, it uses an indexed access with number to fetch out string[]’s element type. Otherwise, it just returns the type it was given.<br>当 Flatten 给定一个数组类型，它使用 number 下标得到 string[]元素类型，否则，仅返回所给类型</p><p>Inferring Within Conditional Types<br>在条件类型内推断</p><p>We just found ourselves using conditional types to apply constraints and then extract out types. This ends up being such a common operation that conditional types make it easier.</p><p>我们只是发现自己使用条件类型来应用约束，然后提取出类型。这最终是一种常见的操作，条件类型使其更容易实现。</p><p>Conditional types provide us with a way to infer from types we compare against in the true branch using the infer keyword. For example, we could have inferred the element type in Flatten instead of fetching it out “manually” with an indexed access type:</p><p>条件类型为我们提供了一种使用 infer 关键字从 true 分支中比较的类型推断的方法。例如，我们可以在 Flatten 中推断元素类型，而不是使用索引访问类型“手动”提取它：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Flatten&lt;Type&gt; &#x3D; Type extends Array&lt;infer Item&gt; ? Item : Type;</code></pre><p>Here, we used the infer keyword to declaratively introduce a new generic type variable named Item instead of specifying how to retrieve the element type of T within the true branch. This frees us from having to think about how to dig through and probing apart the structure of the types we’re interested in.</p><p>在这里，我们使用 infer 关键字声明性地引入一个名为 Item 的新泛型类型变量，而不是指定如何在 true 分支中检索 T 的元素类型。这使我们不必思考如何挖掘和探索我们感兴趣的类型的结构。</p><p>We can write some useful helper type aliases using the infer keyword. For example, for simple cases, we can extract the return type out from function types:</p><p>我们可以使用 infer 关键字编写一些有用的助手类型别名。例如，对于简单的情况，我们可以从函数类型中提取返回类型：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type GetReturnType&lt;Type&gt; &#x3D; Type extends (...args: never[]) &#x3D;&gt; infer Return  ? Return  : never;type Num &#x3D; GetReturnType&lt;() &#x3D;&gt; number&gt;;&#x2F;&#x2F; 提示： type Num &#x3D; numbertype Str &#x3D; GetReturnType&lt;(x: string) &#x3D;&gt; string&gt;;&#x2F;&#x2F; 提示：type Str &#x3D; stringtype Bools &#x3D; GetReturnType&lt;(a: boolean, b: boolean) &#x3D;&gt; boolean[]&gt;;&#x2F;&#x2F; 提示： type Bools &#x3D; boolean[]</code></pre><p>When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the last signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types.<br>当从具有多个调用签名的类型（例如重载函数的类型）进行推断时，将从最后一个签名进行推断（这可能是最允许的一网打尽的情况）。无法基于参数类型列表执行重载解析。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare function stringOrNum(x: string): number;declare function stringOrNum(x: number): string;declare function stringOrNum(x: string | number): string | number;type T1 &#x3D; ReturnType&lt;typeof stringOrNum&gt;;&#x2F;&#x2F; 提示：type T1 &#x3D; string | number;</code></pre><h2 id="Distributive-Conditional-Types"><a href="#Distributive-Conditional-Types" class="headerlink" title="Distributive Conditional Types"></a>Distributive Conditional Types</h2><p>分布条件类型</p><p>When conditional types act on a generic type, they become distributive when given a union type. For example, take the following:<br>当条件类型作用于泛型类型时，当给定一个联合类型时，它们将成为分布式的。例如，以以下内容为例：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ToArray&lt;Type&gt; &#x3D; Type extends any ? Type[] : never;</code></pre><p>If we plug a union type into ToArray, then the conditional type will be applied to each member of that union.<br>如果我们将一个联合类型插入 ToArray，那么条件类型将应用于该联合的每个成员。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ToArray&lt;Type&gt; &#x3D; Type extends any ? Type[] : never;type StrArrOrNumArr &#x3D; ToArray&lt;string | number&gt;;&#x2F;&#x2F; 提示：type StrArrOrNumArr &#x3D; string[] | number[];</code></pre><p>What happens here is that StrArrOrNumArr distributes on:<br>这里发生了什么？</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">string | number;</code></pre><p>and maps over each member type of the union, to what is effectively:<br>并映射到联合类型每个成员类型</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">ToArray&lt;string&gt; | ToArray&lt;number&gt;;</code></pre><p>which leaves us with:<br>这给我们留下了：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">string[] | number[];</code></pre><p>Typically, distributivity is the desired behavior. To avoid that behavior, you can surround each side of the extends keyword with square brackets.<br>通常情况下，分布式是所需的行为。要避免这种行为，你可以在每边 extends 关键字之前使用方括号。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ToArrayNonDist&lt;Type&gt; &#x3D; [Type] extends [any] ? Type[] : never;&#x2F;&#x2F; &#39;StrArrOrNumArr&#39; is no longer a union.type StrArrOrNumArr &#x3D; ToArrayNonDist&lt;string | number&gt;;&#x2F;&#x2F; 提示：type StrArrOrNumArr &#x3D; (string | number)[];</code></pre><h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><h2 id="模板字面量类型（Template-Literal-Types）"><a href="#模板字面量类型（Template-Literal-Types）" class="headerlink" title="模板字面量类型（Template Literal Types）"></a>模板字面量类型（Template Literal Types）</h2><p>模板字面量类型以字符串字面量类型为基础，可以通过联合类型扩展成多个字符串。</p><p>它们跟 JavaScript 的模板字符串是相同的语法，但是只能用在类型操作中。当使用模板字面量类型时，它会替换模板中的变量，返回一个新的字符串字面量：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type World &#x3D; &quot;world&quot;;type Greeting &#x3D; &#96;hello $&#123;World&#125;&#96;;&#x2F;&#x2F; type Greeting &#x3D; &quot;hello world&quot;</code></pre><ul><li>当模板中的变量是一个联合类型时，每一个可能的字符串字面量都会被表示：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type EmailLocaleIDs &#x3D; &quot;welcome_email&quot; | &quot;email_heading&quot;;type FooterLocaleIDs &#x3D; &quot;footer_title&quot; | &quot;footer_sendoff&quot;;type AllLocaleIDs &#x3D; &#96;$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;_id&#96;;&#x2F;&#x2F; type AllLocaleIDs &#x3D; &quot;welcome*email_id&quot; | &quot;email_heading_id&quot; | &quot;footer_title_id&quot; | &quot;footer_sendoff_id&quot;</code></pre><ul><li>如果模板字面量里的多个变量都是联合类型，结果会交叉相乘，比如下面的例子就有 2 * 2 _ 3 一共 12 种结果：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type AllLocaleIDs &#x3D; &#96;$&#123;EmailLocaleIDs | FooterLocaleIDs&#125;_id&#96;;type Lang &#x3D; &quot;en&quot; | &quot;ja&quot; | &quot;pt&quot;;type LocaleMessageIDs &#x3D; &#96;$&#123;Lang&#125;_$&#123;AllLocaleIDs&#125;&#96;;&#x2F;&#x2F; type LocaleMessageIDs &#x3D; &quot;en_welcome_email_id&quot; | &quot;en_email_heading_id&quot; | &quot;en_footer_title_id&quot; | &quot;en_footer_sendoff_id&quot; | &quot;ja_welcome_email_id&quot; | &quot;ja_email_heading_id&quot; | &quot;ja_footer_title_id&quot; | &quot;ja_footer_sendoff_id&quot; | &quot;pt_welcome_email_id&quot; | &quot;pt_email_heading_id&quot; | &quot;pt_footer_title_id&quot; | &quot;pt_footer_sendoff_id&quot;</code></pre><ul><li>如果真的是非常长的字符串联合类型，推荐提前生成，这种还是适用于短一些的情况。</li></ul><h2 id="类型中的字符串联合类型（String-Unions-in-Types）"><a href="#类型中的字符串联合类型（String-Unions-in-Types）" class="headerlink" title="类型中的字符串联合类型（String Unions in Types）"></a>类型中的字符串联合类型（String Unions in Types）</h2><p>模板字面量最有用的地方在于你可以基于一个类型内部的信息，定义一个新的字符串，让我们举个例子：</p><p>有这样一个函数 makeWatchedObject， 它会给传入的对象添加了一个 on 方法。在 JavaScript 中，它的调用看起来是这样：makeWatchedObject(baseObject)，我们假设这个传入对象为：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const passedObject &#x3D; &#123;  firstName: &quot;Saoirse&quot;,  lastName: &quot;Ronan&quot;,  age: 26,&#125;;</code></pre><p>这个 on 方法会被添加到这个传入对象上，该方法接受两个参数，eventName （ string 类型） 和 callBack （function 类型）：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 伪代码const result &#x3D; makeWatchedObject(baseObject);result.on(eventName, callBack);</code></pre><p>我们希望 eventName 是这种形式：attributeInThePassedObject + “Changed” ，举个例子，</p><ul><li>passedObject 有一个属性 firstName，对应产生的 eventName 为 firstNameChanged，</li><li>同理，lastName 对应的是 lastNameChanged，</li><li>age 对应的是 ageChanged。</li></ul><p>当这个 callBack 函数被调用的时候：</p><ul><li>应该被传入与 attributeInThePassedObject 相同类型的值。比如 passedObject 中，<ul><li>firstName 的值的类型为 string , 对应 firstNameChanged 事件的回调函数，则接受传入一个 string 类型的值。</li><li>age 的值的类型为 number，对应 ageChanged 事件的回调函数，则接受传入一个 number 类型的值。</li></ul></li><li>返回值类型为 void 类型。<br>on() 方法的签名最一开始是这样的：on(eventName: string, callBack: (newValue: any) &#x3D;&gt; void)。 使用这样的签名，我们是不能实现上面所说的这些约束的，这个时候就可以使用模板字面量：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const person &#x3D; makeWatchedObject(&#123;  firstName: &quot;Saoirse&quot;,  lastName: &quot;Ronan&quot;,  age: 26,&#125;);&#x2F;&#x2F; makeWatchedObject has added &#96;on&#96; to the anonymous Objectperson.on(&quot;firstNameChanged&quot;, (newValue) &#x3D;&gt; &#123;  console.log(&#96;firstName was changed to $&#123;newValue&#125;!&#96;);&#125;);</code></pre><p>注意这个例子里，on 方法添加的事件名为 “firstNameChanged”， 而不仅仅是 “firstName”，而回调函数传入的值 newValue ，我们希望约束为 string 类型。我们先实现第一点。</p><p>在这个例子里，我们希望传入的事件名的类型，是对象属性名的联合，只是每个联合成员都还在最后拼接一个 Changed 字符，在 JavaScript 中，我们可以做这样一个计算：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">Object.keys(passedObject).map(x &#x3D;&gt; $&#123;x&#125;Changed)</code></pre><p>模板字面量提供了一个相似的字符串操作：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PropEventSource&lt;Type&gt; &#x3D; &#123;  on(    eventName: &#96;$&#123;string &amp; keyof Type&#125;Changed&#96;,    callback: (newValue: any) &#x3D;&gt; void  ): void;&#125;;&#x2F;&#x2F;&#x2F; Create a &quot;watched object&quot; with an &#39;on&#39; method&#x2F;&#x2F;&#x2F; so that you can watch for changes to properties.declare function makeWatchedObject&lt;Type&gt;(  obj: Type): Type &amp; PropEventSource&lt;Type&gt;;</code></pre><p>注意，我们在这里例子中，模板字面量里我们写的是 string &amp; keyof Type，我们可不可以只写成 keyof Type 呢？如果我们这样写，会报错：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PropEventSource&lt;Type&gt; &#x3D; &#123;  on(    eventName: &#96;$&#123;keyof Type&#125;Changed&#96;,    callback: (newValue: any) &#x3D;&gt; void  ): void;&#125;;&#x2F;&#x2F; Type &#39;keyof Type&#39; is not assignable to type &#39;string | number | bigint | boolean | null | undefined&#39;.&#x2F;&#x2F; Type &#39;string | number | symbol&#39; is not assignable to type &#39;string | number | bigint | boolean | null | undefined&#39;.&#x2F;&#x2F; ...</code></pre><p>从报错信息中，我们也可以看出报错原因，在 《TypeScript 系列之 Keyof 操作符》里，我们知道</p><ul><li>keyof 操作符会返回 string | number | symbol 类型，</li><li>但是模板字面量的变量要求的类型却是 string | number | bigint | boolean | null | undefined，</li></ul><p>比较一下，多了一个 symbol 类型，所以其实我们也可以这样写：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PropEventSource&lt;Type&gt; &#x3D; &#123;  on(    eventName: &#96;$&#123;Exclude&lt;keyof Type, symbol&gt;&#125;Changed&#96;,    callback: (newValue: any) &#x3D;&gt; void  ): void;&#125;;</code></pre><p>再或者这样写：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PropEventSource&lt;Type&gt; &#x3D; &#123;  on(    eventName: &#96;$&#123;Extract&lt;keyof Type, string&gt;&#125;Changed&#96;,    callback: (newValue: any) &#x3D;&gt; void  ): void;&#125;;</code></pre><p>使用这种方式，在我们使用错误的事件名时，TypeScript 会给出报错：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const person &#x3D; makeWatchedObject(&#123;  firstName: &quot;Saoirse&quot;,  lastName: &quot;Ronan&quot;,  age: 26,&#125;);person.on(&quot;firstNameChanged&quot;, () &#x3D;&gt; &#123;&#125;);&#x2F;&#x2F; Prevent easy human error (using the key instead of the event name)person.on(&quot;firstName&quot;, () &#x3D;&gt; &#123;&#125;);&#x2F;&#x2F; Argument of type &#39;&quot;firstName&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.&#x2F;&#x2F; It&#39;s typo-resistantperson.on(&quot;frstNameChanged&quot;, () &#x3D;&gt; &#123;&#125;);&#x2F;&#x2F; Argument of type &#39;&quot;frstNameChanged&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.</code></pre><h2 id="模板字面量的推断（Inference-with-Template-Literals）"><a href="#模板字面量的推断（Inference-with-Template-Literals）" class="headerlink" title="模板字面量的推断（Inference with Template Literals）"></a>模板字面量的推断（Inference with Template Literals）</h2><p>现在我们来实现第二点，回调函数传入的值的类型与对应的属性值的类型相同。<br>我们现在只是简单的对 callBack 的参数使用 any 类型。实现这个约束的关键在于借助泛型函数：</p><p>捕获泛型函数第一个参数的字面量，生成一个字面量类型</p><ul><li>该字面量类型可以被对象属性构成的联合约束</li><li>对象属性的类型可以通过索引访问获取</li><li>应用此类型，确保回调函数的参数类型与对象属性的类型是同一个类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PropEventSource&lt;Type&gt; &#x3D; &#123;  on&lt;Key extends string &amp; keyof Type&gt;(    eventName: &#96;$&#123;Key&#125;Changed&#96;,    callback: (newValue: Type[Key]) &#x3D;&gt; void  ): void;&#125;;declare function makeWatchedObject&lt;Type&gt;(  obj: Type): Type &amp; PropEventSource&lt;Type&gt;;const person &#x3D; makeWatchedObject(&#123;  firstName: &quot;Saoirse&quot;,  lastName: &quot;Ronan&quot;,  age: 26,&#125;);person.on(&quot;firstNameChanged&quot;, (newName) &#x3D;&gt; &#123;  &#x2F;&#x2F; (parameter) newName: string  console.log(&#96;new name is $&#123;newName.toUpperCase()&#125;&#96;);&#125;);person.on(&quot;ageChanged&quot;, (newAge) &#x3D;&gt; &#123;  &#x2F;&#x2F; (parameter) newAge: number  if (newAge &lt; 0) &#123;    console.warn(&quot;warning! negative age&quot;);  &#125;&#125;);</code></pre><p>这里我们把 on 改成了一个泛型函数。</p><p>当一个用户调用的时候传入 “firstNameChanged”，TypeScript 会尝试着推断 Key 正确的类型。它会匹配 key 和 “Changed” 前的字符串 ，然后推断出字符串 “firstName” ，然后再获取原始对象的 firstName 属性的类型，在这个例子中，就是 string 类型。</p><h2 id="内置字符操作类型（Intrinsic-String-Manipulation-Types）"><a href="#内置字符操作类型（Intrinsic-String-Manipulation-Types）" class="headerlink" title="内置字符操作类型（Intrinsic String Manipulation Types）"></a>内置字符操作类型（Intrinsic String Manipulation Types）</h2><p>TypeScript 的一些类型可以用于字符操作，这些类型处于性能的考虑被内置在编译器中，你不能在 .d.ts 文件里找到它们。</p><h2 id="Uppercase"><a href="#Uppercase" class="headerlink" title="Uppercase"></a>Uppercase</h2><p>把每个字符转为大写形式：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;;type ShoutyGreeting &#x3D; Uppercase&lt;Greeting&gt;;&#x2F;&#x2F; type ShoutyGreeting &#x3D; &quot;HELLO, WORLD&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;ID-$&#123;Uppercase&lt;Str&gt;&#125;&#96;;type MainID &#x3D; ASCIICacheKey&lt;&quot;my_app&quot;&gt;;&#x2F;&#x2F; type MainID &#x3D; &quot;ID-MY_APP&quot;</code></pre><h2 id="Lowercase"><a href="#Lowercase" class="headerlink" title="Lowercase"></a>Lowercase</h2><p>把每个字符转为小写形式：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;;type QuietGreeting &#x3D; Lowercase&lt;Greeting&gt;;&#x2F;&#x2F; type QuietGreeting &#x3D; &quot;hello, world&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;id-$&#123;Lowercase&lt;Str&gt;&#125;&#96;;type MainID &#x3D; ASCIICacheKey&lt;&quot;MY_APP&quot;&gt;;&#x2F;&#x2F; type MainID &#x3D; &quot;id-my_app&quot;</code></pre><h2 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h2><ul><li>把字符串的第一个字符转为大写形式：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type LowercaseGreeting &#x3D; &quot;hello, world&quot;;type Greeting &#x3D; Capitalize&lt;LowercaseGreeting&gt;;&#x2F;&#x2F; type Greeting &#x3D; &quot;Hello, world&quot;</code></pre><h2 id="Uncapitalize"><a href="#Uncapitalize" class="headerlink" title="Uncapitalize"></a>Uncapitalize</h2><ul><li>把字符串的第一个字符转换为小写形式：</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type UppercaseGreeting &#x3D; &quot;HELLO WORLD&quot;;type UncomfortableGreeting &#x3D; Uncapitalize&lt;UppercaseGreeting&gt;;&#x2F;&#x2F; type UncomfortableGreeting &#x3D; &quot;hELLO WORLD&quot;</code></pre><ul><li>字符操作类型的技术细节<br>从 TypeScript 4.1 起，这些内置函数会直接使用 JavaScript 字符串运行时函数，而不是本地化识别 (locale aware)。</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function applyStringMapping(symbol: Symbol, str: string) &#123;  switch (intrinsicTypeKinds.get(symbol.escapedName as string)) &#123;    case IntrinsicTypeKind.Uppercase:      return str.toUpperCase();    case IntrinsicTypeKind.Lowercase:      return str.toLowerCase();    case IntrinsicTypeKind.Capitalize:      return str.charAt(0).toUpperCase() + str.slice(1);    case IntrinsicTypeKind.Uncapitalize:      return str.charAt(0).toLowerCase() + str.slice(1);  &#125;  return str;&#125;</code></pre><p>作者：冴羽<br>链接：<a href="https://www.imooc.com/article/322215">https://www.imooc.com/article/322215</a><br>来源：慕课网<br>本文原创发布于慕课网 ，转载请注明出处，谢谢合作</p><h2 id="在想一个问题"><a href="#在想一个问题" class="headerlink" title="在想一个问题"></a>在想一个问题</h2><p>为什么别人可以把文档翻译的那么准确，让读者一看就明白</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https</title>
      <link href="//post/2022-06-05https.html"/>
      <url>//post/2022-06-05https.html</url>
      
        <content type="html"><![CDATA[<h2 id="吐槽掘金"><a href="#吐槽掘金" class="headerlink" title="吐槽掘金"></a>吐槽掘金</h2><ul><li>后台有定时器在运行，一直发送请求，打开多个 web 标签页面，cpu 直接飙升到 100% +，鉴于掘金太卡，所以转载</li></ul><h2 id="为什么要有-HTTPS"><a href="#为什么要有-HTTPS" class="headerlink" title="为什么要有 HTTPS"></a>为什么要有 HTTPS</h2><p>在 HTTPS 出现之前，所有请求都是以明文方式送出的，那么如果有人在传输途中偷听或者抓包的话，你的所有通信内容都会泄漏。<br>比较安全的方法是将通信内容加密在发送给对方。加密方法有两种，对称加密和非对称加密。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><ul><li>对称加密指的是加密和解密用同一个密钥。</li><li>但是在通信之前，客户端和服务端是不会有这样同一把密钥的。需要其中一方将密钥发送给对方。</li><li>在整个传输过程没有任何验证操作，所以黑客也可以截取到这把密钥从而破译出加密的内容。<br>所以纯对称加密是不安全的。</li></ul><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密指的是加密和解密用不同的密钥。可以是用私钥加密，公钥解密，也可以是用公钥加密，私钥解密。<br>但是会有这种情况。</p><ul><li>服务端拥有私钥和公钥，将公钥发给客户端。<br>既然客户端可以获得公钥，黑客也可以获得公钥。那么服务端发送给客户端的所有内容黑客也是可以解读的。</li><li>客户端用公钥加密发送给服务端不受影响，因为黑客手上没有服务器的私钥。<br>所以纯非对称加密也是不安全的。</li></ul><h2 id="传输密钥的过程"><a href="#传输密钥的过程" class="headerlink" title="传输密钥的过程"></a>传输密钥的过程</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17217c84d03a66a9~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="图解传输密钥的过程"><a href="#图解传输密钥的过程" class="headerlink" title="图解传输密钥的过程"></a>图解传输密钥的过程</h2><p>HTTPS 采用对称加密来加密通信内容，所用的密钥称为 A。用非对称加密来加密密钥 A 再发送给对方（有点绕）。只要密钥 A 不落入他人手中，那传输的数据就不会被别人破译。</p><p>那么问题来了，要如何安全的将这把密钥送到对方手上呢？</p><p>我们来看密钥的传输过程<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17218630ec9be8b3~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="为什么-HTTPS-是可靠的？"><a href="#为什么-HTTPS-是可靠的？" class="headerlink" title="为什么 HTTPS 是可靠的？"></a>为什么 HTTPS 是可靠的？</h2><p>HTTPS 是可靠的，因为它解决了三个问题。</p><ol><li>加密通信，即使别人获取到了信息也没法复原成原来的信息。</li><li>防止中间人攻击。黑客没法冒充服务端。因为在第 2 步，服务端给了客户端一个 CA 证书。</li></ol><ul><li>如果客户端验证了这个证书，说明这个证书和公钥是由服务端发来的且真实可靠。</li><li>如果客户端验证不了这个证书，就说明这个证书不可靠，有可能是假的。</li></ul><ol start="3"><li>CA 证书的公信力<br>CA 证书需要由公司或者个人发出申请，再通过邮箱验证等方法验证域名存在。避免了黑客冒充网站获取证书的可能。<br>在技术层面上，CA 机构的公钥是写在操作系统或者浏览器里的。只有用 CA 机构的私钥加密的内容才能完成解密。确保了证书的确是 CA 机构发行的。</li></ol><h2 id="密钥的作用"><a href="#密钥的作用" class="headerlink" title="密钥的作用"></a>密钥的作用</h2><p>最后让我们再来回顾一下每一把密钥的作用<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/15/17217e2ee1709bcd~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="HTTPS一定安全吗"><a href="#HTTPS一定安全吗" class="headerlink" title="HTTPS一定安全吗"></a>HTTPS一定安全吗</h2><p>非全站HTTPS并不安全</p><p>登录页面支持HTTPS不就行了，首页又没有涉及账户信息<br>其实这是非常不安全的行为，黑客会利用这一点进行攻击，一般是以下流程：</p><p>1.用户在首页点击「登录」，页面跳转到有htps的网银页面，但此时由于首页是htp请求，所以是明文的，这就会被黑客劫持<br>2.黑客劫持用户的跳转请求，将https网银页面地址转换为http的地址再发送给银行</p><p>用户&lt;&#x3D;&#x3D;HTTP&#x3D;&#x3D;&gt;黑客&lt;&#x3D;&#x3D;HTTPS&#x3D;&#x3D;&gt;银行</p><p>1.此时如果用户输入账户信息，那么会被中间的黑客获取，此时的账号密码就被泄露了</p><p>好在是银行的网银页面,只支持htps,因此上述攻击暂时是无效的</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://link.juejin.cn/?target=https://www.bilibili.com/video/BV1w4411m7GL">【web 安全 3】【硬核】HTTPS 原理全解析</a></p><p>作者：站在书脊之上<br>链接：<a href="https://juejin.cn/post/6844904160089882631">https://juejin.cn/post/6844904160089882631</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-7 最佳实践</title>
      <link href="//post/2022-06-02vue-7.html"/>
      <url>//post/2022-06-02vue-7.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602200611.webp"></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><img src="http://t-blog-images.aijs.top/img/20220602200621.webp"></p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p><img src="http://t-blog-images.aijs.top/img/20220602200638.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-8 typescript</title>
      <link href="//post/2022-06-02vue-8.html"/>
      <url>//post/2022-06-02vue-8.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602201222.webp"></p><h3 id="组合式"><a href="#组合式" class="headerlink" title="组合式"></a>组合式</h3><p><img src="http://t-blog-images.aijs.top/img/20220602201022.webp"></p><h3 id="选项式"><a href="#选项式" class="headerlink" title="选项式"></a>选项式</h3><p><img src="http://t-blog-images.aijs.top/img/20220602201032.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-6 升级规模</title>
      <link href="//post/2022-06-02vue-6.html"/>
      <url>//post/2022-06-02vue-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602200123.webp"></p><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p><img src="http://t-blog-images.aijs.top/img/20220602200102.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-5 内置组件</title>
      <link href="//post/2022-06-02vue-5.html"/>
      <url>//post/2022-06-02vue-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602195846.webp"></p><h2 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h2><p><img src="http://t-blog-images.aijs.top/img/20220602195059.webp"></p><h3 id="teleport·传送门"><a href="#teleport·传送门" class="headerlink" title="teleport·传送门"></a>teleport·传送门</h3><p><img src="http://t-blog-images.aijs.top/img/20220602195124.webp"></p><h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h3><p><img src="http://t-blog-images.aijs.top/img/20220602195153.webp"></p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p> <img src="http://t-blog-images.aijs.top/img/20220602195252.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-4 可重用性</title>
      <link href="//post/2022-06-02vue-4.html"/>
      <url>//post/2022-06-02vue-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602185624.webp"></p><h2 id="可重用性"><a href="#可重用性" class="headerlink" title="可重用性"></a>可重用性</h2><p><img src="http://t-blog-images.aijs.top/img/20220602193659.webp"></p><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193738.webp"></p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193751.webp"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-3 深入组件</title>
      <link href="//post/2022-06-02vue-3.html"/>
      <url>//post/2022-06-02vue-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602185624.webp"></p><h2 id="深入组件"><a href="#深入组件" class="headerlink" title="深入组件"></a>深入组件</h2><p><img src="http://t-blog-images.aijs.top/img/20220602193405.webp"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193158.webp"></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193205.webp"></p><h3 id="透传-Attribute"><a href="#透传-Attribute" class="headerlink" title="透传 Attribute"></a>透传 Attribute</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193213.webp"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193228.webp"></p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193235.webp"></p><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193244.webp"></p><h2 id="可重用性"><a href="#可重用性" class="headerlink" title="可重用性"></a>可重用性</h2><p><img src="http://t-blog-images.aijs.top/img/20220602193659.webp"></p><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193738.webp"></p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><img src="http://t-blog-images.aijs.top/img/20220602193751.webp"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-2 v3</title>
      <link href="//post/2022-06-02vue-2.html"/>
      <url>//post/2022-06-02vue-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="v3"><a href="#v3" class="headerlink" title="v3"></a>v3</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><p><img src="http://t-blog-images.aijs.top/img/20220602191916.webp"></p><h3 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192006.webp"></p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192306.webp"></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192315.webp"></p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192323.webp"></p><h3 id="模版-ref"><a href="#模版-ref" class="headerlink" title="模版 ref"></a>模版 ref</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192333.webp"></p><h3 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h3><p><img src="http://t-blog-images.aijs.top/img/20220602192342.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-1 基础</title>
      <link href="//post/2022-06-02vue-1.html"/>
      <url>//post/2022-06-02vue-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><h2 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h2><p><img src="http://t-blog-images.aijs.top/img/20220602190150.webp"></p><h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><!-- ![](http://t-blog-images.aijs.top/img/20220602190219.webp) --><p><img src="http://t-blog-images.aijs.top/img/20220602191619.webp"></p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><!-- ![](http://t-blog-images.aijs.top/img/20220602190321.webp) --><p><img src="http://t-blog-images.aijs.top/img/20220602191251.webp"></p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p><img src="http://t-blog-images.aijs.top/img/20220602190525.webp"></p><h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3><p><img src="http://t-blog-images.aijs.top/img/20220602190828.webp"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><img src="http://t-blog-images.aijs.top/img/20220602191049.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再学Vue3-0 概览</title>
      <link href="//post/2022-06-02vue-0.html"/>
      <url>//post/2022-06-02vue-0.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><ul><li>使用 proxy 重写了 vue2，并增加了组合式 api</li><li>以下思维导图以<a href="https://staging-cn.vuejs.org/">vue3 文档</a>内容为依据，在学习过程中绘制</li><li>学习过程中对比了 vue3 和 react</li><li>很长一段时间没看vue了，vue3一直没接触，媳妇不学。万一哪天媳妇需要用vue3了，没人带岂不是要失业，赶紧学起来～<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2></li></ul><!-- ![](http://t-blog-images.aijs.top/img/20220602185624.webp) --><!-- ![](http://t-blog-images.aijs.top/img/20220602201338.webp) --><img src="http://t-blog-images.aijs.top/img/20220602201338.webp" style="max-width:240px" /><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>念叨着 <code>渐进式</code> <code>依赖收集</code> 去学习<a href="https://staging-cn.vuejs.org/guide/introduction.html">vue指南</a></li></ul><p><img src="http://t-blog-images.aijs.top/img/20220602201731.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react useState 错误使用</title>
      <link href="//post/2022-05-31bug.html"/>
      <url>//post/2022-05-31bug.html</url>
      
        <content type="html"><![CDATA[<h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const Share: FC&lt;ShareProps&gt; &#x3D; (props) &#x3D;&gt; &#123;  const &#123; entityType, entityCode &#125; &#x3D; props  const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;    value: props.value,    title: props.title,    shareId: props.shareId,    mappingPassword: props.mappingPassword,    passwordEnable: props.passwordEnable,    mappingState: props.mappingState,    expireTime: props.expireTime,    shortCode: props.shortCode,  &#125;)  const &#123; value &#125; &#x3D; state  ...  return (    &lt;div&gt;      &#123;renderBtn&#125;      &lt;ShareModal        entityType&#x3D;&#123;entityType&#125;        entityCode&#x3D;&#123;entityCode&#125;        &#123;...modalProps&#125;        state&#x3D;&#123;state&#125;        setState&#x3D;&#123;setState&#125;      &#x2F;&gt;    &lt;&#x2F;div&gt;  )&#125;export default Share</code></pre><h2 id="ShareModal"><a href="#ShareModal" class="headerlink" title="ShareModal"></a>ShareModal</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">interface ShareModalProps extends ModalFuncProps &#123;  entityType: EntityType  entityCode: string  className?: string  state: StateProps  setState: (state: StateProps) &#x3D;&gt; void&#125;const Copy &#x3D; (&#123; text, children &#125;: &#123; text: string; children: string &#125;) &#x3D;&gt; &#123;  return (    &lt;CopyToClipboard      text&#x3D;&#123;text&#125;      onCopy&#x3D;&#123;() &#x3D;&gt; &#123;        message.success(&#39;链接已复制&#39;)      &#125;&#125;    &gt;      &lt;span&gt;&#123;children&#125;&lt;&#x2F;span&gt;    &lt;&#x2F;CopyToClipboard&gt;  )&#125;const ShareModal: FC&lt;ShareModalProps&gt; &#x3D; (props) &#x3D;&gt; &#123;  const [form] &#x3D; HookForm.useForm()  const &#123; state, setState, entityType, entityCode, ...restProps &#125; &#x3D; props  const &#123; value, title, mappingPassword, shortCode, expireTime &#125; &#x3D; state  const &#123;    onChange: toggle,    resetPassword: reset,    update,  &#125; &#x3D; useShare(&#123;    entityCode,    entityType,    state,    setState,  &#125;)  ....  return (    &lt;Modal      &#123;...restProps&#125;      className&#x3D;&#123;styles[&#39;share-modal-wrap&#39;]&#125;      title&#x3D;&quot;链接分享&quot;      destroyOnClose      width&#x3D;&#123;420&#125;      footer&#x3D;&#123;null&#125;    &gt;      &lt;ConditionComponent isShow&#x3D;&#123;value&#125;&gt;        ....        &lt;HookForm form&#x3D;&#123;form&#125; style&#x3D;&#123;&#123; marginBottom: 10, width: &#39;100%&#39; &#125;&#125; layout&#x3D;&quot;vertical&quot;&gt;          &lt;HookForm.Item noStyle shouldUpdate&gt;            &#123;() &#x3D;&gt; &#123;              const &#123; url, mappingPassword, expireTime &#125; &#x3D; form.getFieldsValue()              const text &#x3D; &#96;$&#123;url&#125;（密码：$&#123;mappingPassword&#125;）《$&#123;title&#125;》$&#123;moment(                expireTime,              ).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)&#125;过期&#96;              return (                &lt;HookForm.Item name&#x3D;&quot;url&quot; label&#x3D;&quot;&quot;&gt;                  &lt;Input                    className&#x3D;&#123;styles[&#39;share-copy&#39;]&#125;                    addonAfter&#x3D;&#123;&lt;Copy text&#x3D;&#123;text&#125;&gt;复制链接和密码&lt;&#x2F;Copy&gt;&#125;                    disabled                  &#x2F;&gt;                &lt;&#x2F;HookForm.Item&gt;              )            &#125;&#125;          &lt;&#x2F;HookForm.Item&gt;        &lt;&#x2F;HookForm&gt;      &lt;&#x2F;ConditionComponent&gt;    &lt;&#x2F;Modal&gt;  )&#125;export default ShareModal</code></pre><h2 id="用户反馈"><a href="#用户反馈" class="headerlink" title="用户反馈"></a>用户反馈</h2><p>为什么分享的链接与要分享的链接对不上？</p><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>useCallback受依赖项的影响，不更新，之前改过同事的代码，这次扫了一样，没有callback，就这问题修改几个了</p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><ul><li>找了下数据<code>ShareModal</code>组件,看到两个入参<code>state, setState</code> ，我艹</li><li>继续往上层找<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&lt;ShareModal  entityType&#x3D;&#123;entityType&#125;  entityCode&#x3D;&#123;entityCode&#125;  &#123;...modalProps&#125;  state&#x3D;&#123;state&#125; &#x2F;&#x2F; 😓  setState&#x3D;&#123;setState&#125; &#x2F;&#x2F;😓 &#x2F;&gt;</code></pre></li><li>再往上找，useState 内部只执行一次，数据初始化完成不再改变</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;  value: props.value,  title: props.title,  shareId: props.shareId,  mappingPassword: props.mappingPassword,  passwordEnable: props.passwordEnable,  mappingState: props.mappingState,  expireTime: props.expireTime,  shortCode: props.shortCode,&#125;)const &#123; value &#125; &#x3D; state</code></pre><ul><li>这里代码这么写，其他地方肯定也有这样的写法，😓</li></ul><h2 id="改一下"><a href="#改一下" class="headerlink" title="改一下"></a>改一下</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const [state, setState] &#x3D; useState&lt;StateProps&gt;(&#123;&#125;)useEffect(() &#x3D;&gt; &#123;  setState(&#123; ...props &#125;)&#125;, [props.shareId])</code></pre>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程范式-函数式编程简单了解</title>
      <link href="//post/2022-05-28func.html"/>
      <url>//post/2022-05-28func.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的原型、原型链、继承，还有对人不友好的 this ；而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。<br><strong>简单来说就是：面向对象的思想在js中不是很好用</strong></p><h2 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h2><p>函数式编程（functional programing）是编程范式之一。我们常见的范式还有面向过程、面向行为、面向对象等。</p><p>范式：我们可以认为它是一种<code>思维模式</code>加上它的实现方法，<code>简单说就是编程的方法论</code>。</p><ul><li><p><strong>面向过程编程</strong>：简单解释就是按照步骤来实现。</p></li><li><p><strong>面向行为编程</strong>：它是函数式编程的衍生范型，将电脑运算平展为一系列的变化，并且避免使用程序指令以及堆叠的对象。</p></li><li><p><strong>面向对象编程</strong>：它的思维方式是把现实世界中的事物抽象成程序世界中的类和对象，然后通过封装，继承和多态来演示事物之间的联系。</p></li><li><p><strong>面向函数式编程</strong>：它的思维方式是把现实世界中的事物和事物之间的联系，抽象到程序世界中。</p></li></ul><h2 id="函数式编程特点："><a href="#函数式编程特点：" class="headerlink" title="函数式编程特点："></a>函数式编程特点：</h2><ul><li><p>程序的本质：就是利用计算机的计算能力将输入转化成对应的输出。</p></li><li><p>函数式编程中的函数指的不是编程语言里的函数，而是数学意义上的映射关系。比如 y&#x3D;sin(x) 中 x 和 y 值的映射关系。</p></li><li><p>纯函数：相同的输入获得相同的输出（无副作用）。</p></li><li><p>函数式编程就是对数据(函数)映射关系的抽象。</p></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>高阶函数</li><li>闭包</li><li>纯函数</li><li>柯里化</li><li>组合函数</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zoo.team/article/function-production"></a></p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki Laser Pen</title>
      <link href="//post/2022-05-27wiki-laserPen.html"/>
      <url>//post/2022-05-27wiki-laserPen.html</url>
      
        <content type="html"><![CDATA[<h2 id="Laser-Pen"><a href="#Laser-Pen" class="headerlink" title="Laser Pen"></a>Laser Pen</h2><p><code>Laser Pen </code>是一套用来在 web canvas 上绘制鼠标轨迹的工具集。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><code>wiki</code>全屏演示时候，为了便于听众跟随演讲者进度，给鼠标轨迹加上标记。</p><p><img src="http://t-blog-images.aijs.top/img/demo.gif"></p><p>注：公司项目由于版权问题，不便演示</p><h2 id="初步上手"><a href="#初步上手" class="headerlink" title="初步上手"></a>初步上手</h2><p>首先在你的项目中添加对 Laser Pen 的依赖：</p><pre class="line-numbers language-none"><code class="language-none">yarn add laser-pen</code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">npm i laser-pen</code></pre><p>然后监听鼠标的 move 事件，获取鼠标移动轨迹的坐标，并同时记录 move 事件触发时的时间戳。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 获取 canvas 元素的坐标const canvasDom &#x3D; document.querySelector(&#39;canvas&#39;)const canvasPos &#x3D; canvasDom.getBoundingClientRect()const ctx &#x3D; canvas.getContext(&#39;2d&#39;)&#x2F;&#x2F; 用来存储所有鼠标轨迹数据let mouseTrack &#x3D; []&#x2F;&#x2F; 监听鼠标事件document.addEventListener(&#39;mousemove&#39;, (event) &#x3D;&gt; &#123;  mouseTrack.push(&#123;    x: event.clientX - canvasPos.x,    y: event.clientY - canvasPos.y,    time: Date.now(),  &#125;)&#125;)</code></pre><p>最后在调用 drawLaserPen 方法绘制鼠标轨迹</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">import &#123; drainPoints, drawLaserPen &#125; from &#39;laser-pen&#39;function draw() &#123;  &#x2F;&#x2F; 过滤掉一些失效的轨迹坐标  mouseTrack &#x3D; drainPoints(mouseTrack)  if (mouseTrack.length &gt;&#x3D; 3) &#123;    &#x2F;&#x2F; 绘制鼠标轨迹    drawLaserPen(ctx, mouseTrack)  &#125;  requestAnimation(draw)&#125;</code></pre><p>到这里，你应该已经可以在 canvas 上实现鼠标轨迹的绘制了。</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>如果默认的轨迹效果不能满足你的要求，Laser Pen 还提供了一些接口让你可以方便的修改鼠标轨迹的样式。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 设置延迟时间，mousemove 事件产生的坐标点在超过延迟时间后就不会被绘制，会直接影响轨迹的长度setDelay: (millisecond: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置轨迹的最大宽度，轨迹是一条由粗变细的曲线，maxWidth 表示粗的那一头的线宽setMaxWidth: (width: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置轨迹的最小宽度，轨迹是一条由粗变细的曲线，minWidth 表示细的那一头的线宽setMinWidth: (width: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置曲线张力大小，张力越大拐点处越平滑，反之越尖锐setTension: (t: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置轨迹的最小透明度，轨迹是一条由不透明变透明的曲线，opacity 表示轨迹末尾的不透明度setOpacity: (o: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置轨迹的颜色setColor: (r: number, g: number, b: number) &#x3D;&gt; void;&#x2F;&#x2F; 设置轨迹头部是否是圆形setRoundCap: (b: boolean) &#x3D;&gt; void;</code></pre><p>在任何时候调用上述接口修改鼠标轨迹的样式，都会在紧接着的下一次绘制中生效。所以如果你想实现一个类似 RGB 跑马灯的鼠标轨迹也是可以的。</p><h2 id="定制化开发"><a href="#定制化开发" class="headerlink" title="定制化开发"></a>定制化开发</h2><p>如果上面的接口都不能满足你的要求，那么你就需要做一些定制化的开发了。</p><p>绘制鼠标轨迹的过程大概分为 5 个步骤：</p><p>清洗轨迹坐标数据<br>根据轨迹坐标计算每个坐标的控制点<br>通过坐标点和控制点数据生成 Bezier 曲线<br>将上一步生成的曲线分割为更短的 Bezier 曲线，并计算每条曲线的绘制样式<br>依次绘制每条 Bezier 曲线<br>这 5 个步骤对应下面的第 1 到第 5 个接口，最后的 drawLaserPen 接口是对前面 5 个接口的组合。 如果直接调用 drawLaserPen 不能满足你的要求，你可以在前 5 个接口的基础上自行组合，实现你想要的效果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 去掉原始鼠标坐标数据中不合理的数据，包括超过延迟时间的坐标，和一些排列不合法的坐标drainPoints: (originalPoints: IOriginalPointData[]) &#x3D;&gt; IOriginalPointData[];&#x2F;&#x2F; 根据鼠标坐标数据计算每个坐标点的前后控制点calControlPoints: (points: IPoint[]) &#x3D;&gt; IControlPoint[];&#x2F;&#x2F; 将鼠标坐标数据和控制点数据组合为贝塞尔曲线transformPointToBezier: (  points: IPoint[],  controlPoints: IControlPoint[]) &#x3D;&gt; Bezier[];&#x2F;&#x2F; 根据原始的贝塞尔曲线数据，计算出用于绘制的数据结构calDrawingData: (  bzArray: Bezier[],  totalLength: number) &#x3D;&gt; IDrawingBezierData[];&#x2F;&#x2F; 根据计算出的绘制数据，将曲线绘制到画布上drawDrawingBezierData: (  ctx: CanvasRenderingContext2D,  data: IDrawingBezierData[]) &#x3D;&gt; void;&#x2F;&#x2F; 一个方便简单使用的入口方法，直接通过处理好的鼠标坐标数据，绘制鼠标轨迹drawLaserPen: (ctx: CanvasRenderingContext2D, points: IPoint[]) &#x3D;&gt; void;</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://github.com/SilentTiger/laser-pen">laser-pen</a></li><li>突然有个想法：王者荣耀的拖尾效果实现原理，是不是和这个类似？</li></ul>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux-logger源码</title>
      <link href="//post/2022-05-27redux-logger.html"/>
      <url>//post/2022-05-27redux-logger.html</url>
      
        <content type="html"><![CDATA[<h2 id="redux-日志中间件"><a href="#redux-日志中间件" class="headerlink" title="redux 日志中间件"></a>redux 日志中间件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">.├── core.js├── defaults.js├── diff.js├── helpers.js &#x2F;&#x2F; 一些帮助函数└── index.js0 directories, 5 files</code></pre><h2 id="defaultLogger"><a href="#defaultLogger" class="headerlink" title="defaultLogger"></a>defaultLogger</h2><p><strong>v3 版本，破坏性变更</strong></p><p>之前</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import createLogger from &quot;redux-logger&quot;;</code></pre><p>之后</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">import &#123; createLogger &#125; from &quot;redux-logger&quot;;</code></pre><p><strong>源码</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; src&#x2F;index.jsconst defaultLogger &#x3D; (&#123; dispatch, getState &#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123;  if (typeof dispatch &#x3D;&#x3D;&#x3D; &quot;function&quot; || typeof getState &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;    &#x2F;&#x2F; createLogger，柯里化 工厂模式    return createLogger()(&#123; dispatch, getState &#125;);  &#125;  &#x2F;&#x2F; 如果没有传递dispatch和getState，打印错误信息  &#x2F;&#x2F; v3版本，破坏性变更, 根据《语义化版本》不看内容也知道有破坏性变更  &#x2F;&#x2F; Since 3.0.0 redux-logger exports by default logger with default settings  &#x2F;&#x2F; import createLogger from &#39;redux-logger&#39; &#x3D;&gt; import &#123; createLogger &#125; from &#39;redux-logger&#39;  console.error(&#96;[redux-logger v3] BREAKING CHANGE[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.[redux-logger v3] Change[redux-logger v3] import createLogger from &#39;redux-logger&#39;[redux-logger v3] to[redux-logger v3] import &#123; createLogger &#125; from &#39;redux-logger&#39;&#96;);&#125;;export &#123; defaults, createLogger, defaultLogger as logger &#125;;export default defaultLogger;</code></pre><h2 id="createLogger"><a href="#createLogger" class="headerlink" title="createLogger"></a>createLogger</h2><ul><li>使用传入的 options， 创建日志记录器</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;** * Creates logger with following options * 创建日志记录器，配置如下： * @namespace * @param &#123;object&#125; options - options for logger * @param &#123;string | function | object&#125; options.level - console[level] 日志级别 * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间 * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳 * @param &#123;object&#125; options.colors - custom colors 定制颜色 * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现 * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出 * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组 * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为 * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换 * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换 * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换 * * @returns &#123;function&#125; logger middleware 返回中间件 *&#x2F;function createLogger(options &#x3D; &#123;&#125;) &#123;  const loggerOptions &#x3D; Object.assign(&#123;&#125;, defaults, options);  const &#123;    logger,    stateTransformer,    errorTransformer,    predicate,    logErrors,    diffPredicate,  &#125; &#x3D; loggerOptions;  &#x2F;&#x2F; Return if &#39;console&#39; object is not defined  &#x2F;&#x2F; 如果&#39;console&#39;对象未定义，返回  if (typeof logger &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);  &#125;  &#x2F;&#x2F; Detect if &#39;createLogger&#39; was passed directly to &#39;applyMiddleware&#39;.  &#x2F;&#x2F; 判断是否传递给applyMiddleware  if (options.getState &amp;&amp; options.dispatch) &#123;    &#x2F;&#x2F; eslint-disable-next-line no-console    console.error(&#96;[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:&#x2F;&#x2F; Logger with default optionsimport &#123; logger &#125; from &#39;redux-logger&#39;const store &#x3D; createStore(  reducer,  applyMiddleware(logger))&#x2F;&#x2F; Or you can create your own logger with custom options http:&#x2F;&#x2F;bit.ly&#x2F;redux-logger-optionsimport &#123; createLogger &#125; from &#39;redux-logger&#39;const logger &#x3D; createLogger(&#123;  &#x2F;&#x2F; ...options&#125;);const store &#x3D; createStore(  reducer,  applyMiddleware(logger))&#96;);    &#x2F;&#x2F; 中间件书写套路    return () &#x3D;&gt; (next) &#x3D;&gt; (action) &#x3D;&gt; next(action);  &#125;  const logBuffer &#x3D; [];  return (&#123; getState &#125;) &#x3D;&gt;    (next) &#x3D;&gt;    (action) &#x3D;&gt; &#123;      &#x2F;&#x2F; Exit early if predicate function returns &#39;false&#39; 如果predicate函数返回false，退出      if (typeof predicate &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; !predicate(getState, action)) &#123;        return next(action);      &#125;      const logEntry &#x3D; &#123;&#125;;      logBuffer.push(logEntry);      logEntry.started &#x3D; timer.now();      logEntry.startedTime &#x3D; new Date();      logEntry.prevState &#x3D; stateTransformer(getState());      logEntry.action &#x3D; action;      let returnedValue;      if (logErrors) &#123;        try &#123;          returnedValue &#x3D; next(action);        &#125; catch (e) &#123;          logEntry.error &#x3D; errorTransformer(e);        &#125;      &#125; else &#123;        returnedValue &#x3D; next(action);      &#125;      logEntry.took &#x3D; timer.now() - logEntry.started;      logEntry.nextState &#x3D; stateTransformer(getState());      const diff &#x3D;        loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;          ? diffPredicate(getState, action)          : loggerOptions.diff;      printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;));      logBuffer.length &#x3D; 0;      if (logEntry.error) throw logEntry.error;      return returnedValue;    &#125;;&#125;</code></pre><p><strong>defaults 默认配置</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; src&#x2F;default.jsexport default &#123;  level: &quot;log&quot;,  logger: console,  logErrors: true,  collapsed: undefined,  predicate: undefined,  duration: false,  timestamp: true,  stateTransformer: (state) &#x3D;&gt; state,  actionTransformer: (action) &#x3D;&gt; action,  errorTransformer: (error) &#x3D;&gt; error,  colors: &#123;    title: () &#x3D;&gt; &quot;inherit&quot;,    prevState: () &#x3D;&gt; &quot;#9E9E9E&quot;,    action: () &#x3D;&gt; &quot;#03A9F4&quot;,    nextState: () &#x3D;&gt; &quot;#4CAF50&quot;,    error: () &#x3D;&gt; &quot;#F20404&quot;,  &#125;,  diff: false,  diffPredicate: undefined,  &#x2F;&#x2F; Deprecated options 已废弃配置  transformer: undefined,&#125;;&#x2F;&#x2F; 字段释义&#x2F;** * Creates logger with following options * 创建日志记录器，配置如下： * @namespace * @param &#123;object&#125; options - options for logger * @param &#123;string | function | object&#125; options.level - console[level] 日志级别 * @param &#123;boolean&#125; options.duration - print duration of each action? 打印每个action的时间 * @param &#123;boolean&#125; options.timestamp - print timestamp with each action? 打印每个action的时间戳 * @param &#123;object&#125; options.colors - custom colors 定制颜色 * @param &#123;object&#125; options.logger - implementation of the &#96;console&#96; API 打印日志的实现 * @param &#123;boolean&#125; options.logErrors - should errors in action execution be caught, logged, and re-thrown? 是否捕获action执行错误，打印错误，并重新抛出 * @param &#123;boolean&#125; options.collapsed - is group collapsed? 是否折叠组 * @param &#123;boolean&#125; options.predicate - condition which resolves logger behavior 条件，决定日志记录器行为 * @param &#123;function&#125; options.stateTransformer - transform state before print 打印前的状态转换 * @param &#123;function&#125; options.actionTransformer - transform action before print 打印前的action转换 * @param &#123;function&#125; options.errorTransformer - transform error before print  打印前的错误转换 * * @returns &#123;function&#125; logger middleware 返回中间件 *&#x2F;</code></pre><p><strong>奇怪</strong></p><ul><li>这两个配置在测试文件中，没找到相关测试代码</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"> &#x2F;&#x2F; 配置 diff: false, &#x2F;&#x2F; diffPredicate: undefined, &#x2F;&#x2F; ... const diff &#x3D;       loggerOptions.diff &amp;&amp; typeof diffPredicate &#x3D;&#x3D;&#x3D; &quot;function&quot;         ? diffPredicate(getState, action)         : loggerOptions.diff; &#x2F;&#x2F; 打印日志中 printBuffer(logBuffer, Object.assign(&#123;&#125;, loggerOptions, &#123; diff &#125;)); &#x2F;&#x2F; src&#x2F;core.js printBuffer的定义function printBuffer(buffer, options) &#123;   const &#123;     &#x2F;&#x2F; ...       diff,   &#125; &#x3D; options;   &#x2F;&#x2F; 如果开启   if (diff) &#123;     &#x2F;&#x2F; 执行了 diffLogger     diffLogger(prevState, nextState, logger, isCollapsed);   &#125;&#125;&#x2F;&#x2F; src&#x2F;diff.jsexport default function diffLogger(prevState, newState, logger, isCollapsed) &#123;  &#x2F;&#x2F; import differ from &#39;deep-diff&#39;;计算对象差异化的包  const diff &#x3D; differ(prevState, newState);  try &#123;    if (isCollapsed) &#123;      logger.groupCollapsed(&#39;diff&#39;);    &#125; else &#123;      logger.group(&#39;diff&#39;);    &#125;  &#125; catch (e) &#123;    logger.log(&#39;diff&#39;);  &#125;  &#x2F;&#x2F; 有差异执行输出，这个差异包含类型kind E:编辑 N:新增 D:删除 A:数组  &#x2F;&#x2F; dictionary为对象，对kind值进行枚举  &#x2F;&#x2F; 遍历输出  if (diff) &#123;    diff.forEach((elem) &#x3D;&gt; &#123;      const &#123; kind &#125; &#x3D; elem;      const output &#x3D; render(elem);      logger.log(&#96;%c $&#123;dictionary[kind].text&#125;&#96;, style(kind), ...output);    &#125;);  &#125; else &#123;    logger.log(&#39;—— no diff ——&#39;);  &#125;  try &#123;    logger.groupEnd();  &#125; catch (e) &#123;    logger.log(&#39;—— diff end —— &#39;);  &#125;&#125;</code></pre><h2 id="helpers"><a href="#helpers" class="headerlink" title="helpers"></a>helpers</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; repeat + pad &#x3D; padLeft 左侧补零， es多少有个apiexport const repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);export const pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;&#x2F;&#x2F; 时间格式化export const formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;&#x2F;&#x2F; Use performance API if it&#39;s available in order to get better precisionexport const timer &#x3D;(typeof performance !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; performance !&#x3D;&#x3D; null) &amp;&amp; typeof performance.now &#x3D;&#x3D;&#x3D; &#39;function&#39; ?  performance :  Date;</code></pre><p><strong>运行测试下</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">const repeat &#x3D; (str, times) &#x3D;&gt; (new Array(times + 1)).join(str);const pad &#x3D; (num, maxLength) &#x3D;&gt; repeat(&#39;0&#39;, maxLength - num.toString().length) + num;const formatTime &#x3D; time &#x3D;&gt; &#96;$&#123;pad(time.getHours(), 2)&#125;:$&#123;pad(time.getMinutes(), 2)&#125;:$&#123;pad(time.getSeconds(), 2)&#125;.$&#123;pad(time.getMilliseconds(), 3)&#125;&#96;;console.log(formatTime(new Date()))&#x2F;&#x2F; 输出18:58:15.667</code></pre><h2 id="源码图"><a href="#源码图" class="headerlink" title="源码图"></a>源码图</h2><p><img src="http://t-blog-images.aijs.top/img/20220527190102.webp"></p><h2 id="deep-diff"><a href="#deep-diff" class="headerlink" title="deep-diff"></a>deep-diff</h2><ul><li>看下两个对象比较的事例</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">var lhs &#x3D; &#123;name: &#39;my object&#39;,description: &#39;it\&#39;s an object!&#39;,details: &#123;it: &#39;has&#39;,an: &#39;array&#39;,with: [&#39;a&#39;, &#39;few&#39;, &#39;elements&#39;]&#125;&#125;;var rhs &#x3D; &#123;name: &#39;updated object&#39;,description: &#39;it\&#39;s an object!&#39;,details: &#123;it: &#39;has&#39;,an: &#39;array&#39;,with: [&#39;a&#39;, &#39;few&#39;, &#39;more&#39;, &#39;elements&#39;, &#123; than: &#39;before&#39; &#125;]&#125;&#125;;var differences &#x3D; deep.diff(lhs, rhs);&#x2F;&#x2F; 输出27 May 17:27:12 - [  DiffEdit &#123;    kind: &#39;E&#39;,    path: [ &#39;name&#39; ],    lhs: &#39;my object&#39;,    rhs: &#39;updated object&#39;  &#125;,  DiffArray &#123;    kind: &#39;A&#39;,    path: [ &#39;details&#39;, &#39;with&#39; ],    index: 4,    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#123; than: &#39;before&#39; &#125; &#125;  &#125;,  DiffArray &#123;    kind: &#39;A&#39;,    path: [ &#39;details&#39;, &#39;with&#39; ],    index: 3,    item: DiffNew &#123; kind: &#39;N&#39;, rhs: &#39;elements&#39; &#125;  &#125;,  DiffEdit &#123;    kind: &#39;E&#39;,    path: [ &#39;details&#39;, &#39;with&#39;, 2 ],    lhs: &#39;elements&#39;,    rhs: &#39;more&#39;  &#125;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode i18n-ally</title>
      <link href="//post/2022-05-27i18n.html"/>
      <url>//post/2022-05-27i18n.html</url>
      
        <content type="html"><![CDATA[<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li>大型公司的国际化需求很高，需要支持多语言，比如中文、英文、日文等等。</li><li>i18n-ally是一个基于vscode的国际化工具，可以帮助你快速的实现国际化。</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>如果经常做国际化的研发，应该很清楚，代码中写多语言，然而，多语言在项目中维护是非常困难的。</li><li>当遇到大型项目，业务要做拆分成为<code>微前端架构</code>，多语言要在多个项目中维护，浪费时间不说，还可能造成不一致问题</li><li>处理方式：<ol><li>将对应的多语言开发为npm包，在项目中引入</li><li>拆多语言为一个应用平台，实现多项目共享，实现可视化交互（我们目前使用，自研localize平台，实现多语言管理）</li></ol></li></ul><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p><strong>应用平台</strong></p><ul><li>动态生效： 修改多语言不需要重启、发布服务</li><li>翻译管理：多人协同在线翻译</li><li>版本管理： 记录翻译变更记录以及对应的操作人，方便定位与排错</li><li>自动多区同步：只需在中国区修改，系统会自动同步到国外5区</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>提示优雅，未处理的多语言会有提示</li><li>编辑方便</li></ul><p align="center"><img src="https://github.com/lokalise/i18n-ally/blob/main/screenshots/full-logo-new.png?raw=true" alt="logo" width="450"/></p><p align='center'>English | <a href="https://github.com/lokalise/i18n-ally/blob/main/README.zh-CN.md">简体中文</a></p><p align="center" style="display: flex; flex-wrap: wrap"><a href="https://marketplace.visualstudio.com/items?itemName=lokalise.i18n-ally" target="__blank"><img src="https://img.shields.io/visual-studio-marketplace/v/lokalise.i18n-ally.svg?color=blue&amp;label=VS%20Code%20Marketplace&logo=visual-studio-code" alt="Visual Studio Marketplace Version" /></a><a href="https://marketplace.visualstudio.com/items?itemName=lokalise.i18n-ally" target="__blank"><img src="https://img.shields.io/visual-studio-marketplace/d/lokalise.i18n-ally.svg?color=4bdbe3" alt="Visual Studio Marketplace Downloads" /></a><a href="https://marketplace.visualstudio.com/items?itemName=lokalise.i18n-ally" target="__blank"><img src="https://img.shields.io/visual-studio-marketplace/i/lokalise.i18n-ally.svg?color=63ba83" alt="Visual Studio Marketplace Installs" /></a><a href="https://marketplace.visualstudio.com/items?itemName=lokalise.i18n-ally" target="__blank"><img src="https://vsmarketplacebadge.apphb.com/trending-monthly/lokalise.i18n-ally.svg?color=a1b858" alt="Marketplace Trending Monthly" /></a><br/><a href="https://github.com/lokalise/i18n-ally/wiki" target="__blank"><img alt="Wiki" src="https://img.shields.io/static/v1?label=docs&message=wiki&color=e3897b"></a><a href="https://github.com/lokalise/i18n-ally" target="__blank"><img src="https://img.shields.io/github/last-commit/lokalise/i18n-ally.svg?color=c977be" alt="GitHub last commit" /></a><a href="https://github.com/lokalise/i18n-ally/issues" target="__blank"><img src="https://img.shields.io/github/issues/lokalise/i18n-ally.svg?color=a38eed" alt="GitHub issues" /></a><a href="https://github.com/lokalise/i18n-ally" target="__blank"><img alt="GitHub stars" src="https://img.shields.io/github/stars/lokalise/i18n-ally?style=social"></a></p><p align='center'><b>v2.0</b> is released with new <a href='https://github.com/lokalise/i18n-ally/wiki/Editor-UI'>Editor UI</a> and <a href='https://github.com/lokalise/i18n-ally/wiki/Review-&-Collaboration-System'>Review System</a> 🎉</p><p align='center'><i><a href="https://github.com/lokalise/i18n-ally/wiki/Migration-v1.x">Migrate from v1.x</a></i></p><br><p align="center"><a href='https://github.com/lokalise/i18n-ally/wiki/Supported-Frameworks' target="__blank"><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/supported-frameworks.png?raw=true" alt="Supported Frameworks" width="550"/></a></p><h3 align="center">Maintained by</h3><p align="center"><a title="Lokalise: accelerate localization from code to delivery" href="https://lokalise.com/?utm_source=vscmarket&amp;utm_campaign=i18nally&amp;utm_medium=banner"><img src="https://github.com/lokalise/i18n-ally/raw/screenshots/lokalise-logo.png?raw=true" alt="Lokalise logo" width="275px"></a><br><sup>Lokalise is the fastest growing language cloud technology made by developers, for developers.<br>As a collaborative productivity platform, it helps structure and automate the translation and localization process for any company in the world.<br>Lokalise是开发人员为开发人员开发的增长最快的语言云技术<br>作为一个协作生产力平台，它可以帮助世界上任何公司构建和自动化翻译和本地化过程。<a title="Lokalise: accelerate localization from code to delivery" href="https://lokalise.com/?utm_source=vscmarket&amp;utm_campaign=i18nally&amp;utm_medium=banner">Learn more</a></sup></p><br><br><h4 align="center"><a href="https://github.com/lokalise/i18n-ally/wiki">📖 Docs 文档</a>&nbsp;|&nbsp;<a href="https://github.com/lokalise/i18n-ally/wiki/FAQ">💭 FAQ 问答</a>&nbsp;|&nbsp;<a href="https://github.com/lokalise/i18n-ally/wiki/Configurations">⚙️ Configs 配置</a>&nbsp;|&nbsp;<a href="https://github.com/lokalise/i18n-ally/wiki/Locale-Formats#supported-locale-formats">📜 Supported Formats 支持格式</a>&nbsp;|&nbsp;<a href="https://github.com/lokalise/i18n-ally/wiki/Contribute">🧱 Contribute 贡献</a></h4><br><br><h3 align='center'>Inline Annotations 行内提示</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/annotation-animated.gif?raw=true"></p><h3 align='center'>Hover and Direct Actions 悬停和直接操作</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/hover.png?raw=true"></p><h3 align='center'>Manage All Translations in One Place 在一个位置管理所有翻译</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/review-sidebar.png?raw=true"></p><h3 align='center'><a href='https://github.com/lokalise/i18n-ally/wiki/Editor-UI'>Editor UI编辑界面</a> & <a href='https://github.com/lokalise/i18n-ally/wiki/Review-&-Collaboration-System'>Review System 预览系统</a></h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/review-editor.png?raw=true"></p><h3 align='center'>Extract Translations from Code 从代码中提取翻译</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/extract.png?raw=true"></p><h3 align='center'>Report Missing Translations 报告缺失的翻译</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/problems.png?raw=true"></p><h3 align='center'>Machine Translation 机器翻译</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/quick-actions.png?raw=true"></p><h3 align='center'>Annotations for JSON and YAML 来源于JSON 和 YAML的提示</h3><p><img src="https://github.com/lokalise/i18n-ally/blob/screenshots/annotation-locale.png?raw=true"></p><h3 align="center">General Features</h3><ul><li>Supports multi-root workspaces  支持多个工作空间</li><li>Supports remote development 支持远程开发</li><li>Supports numerous popular frameworks 支持多种流行框架</li><li>Supports <a href="https://kazupon.github.io/vue-i18n/guide/messages.html#linked-locale-messages">linked locale messages 链接的区域设置消息</a></li><li>Uses i18n for the extension itself, of course. 当然，将i18n用于扩展本身。 <a href="https://github.com/lokalise/i18n-ally#-multilingual-support">Translation List 翻译列表</a></li></ul><h2 id="🌍-Multilingual-Support-多语言支持"><a href="#🌍-Multilingual-Support-多语言支持" class="headerlink" title="🌍 Multilingual Support 多语言支持"></a>🌍 Multilingual Support 多语言支持</h2><p>This extension itself supports i18n as well. It will be auto-matched to the display language you use in your VS Code editor. We currently support the following languages.<br>这个扩展支持多语言。它将自动匹配到你在VS Code编辑器中使用的语言。我们目前支持的语言有：</p><table><thead><tr><th>Language</th><th>Maintainer</th><th>Contributors</th></tr></thead><tbody><tr><td>English   英语</td><td><a href="https://github.com/antfu">@antfu</a></td><td><a href="https://github.com/rubjo">@rubjo</a>, <a href="https://github.com/EdRands">@EdRands</a></td></tr><tr><td>Simplified Chinese (简体中文)</td><td><a href="https://github.com/antfu">@antfu</a></td><td></td></tr><tr><td>Traditional Chinese (繁體中文)</td><td><a href="https://github.com/antfu">@antfu</a></td><td></td></tr><tr><td>Norwegian (Norsk) 挪威语</td><td></td><td><a href="https://github.com/rubjo">@rubjo</a></td></tr><tr><td>Spanish (Español) 西班牙的</td><td></td><td><a href="https://github.com/Baltimer">@Baltimer</a></td></tr><tr><td>Japanese (日本語) 日语</td><td></td><td><a href="https://github.com/isdh">@isdh</a></td></tr><tr><td>Dutch (Nederlands) 荷兰语</td><td></td><td><a href="https://github.com/Niekvdm">@Niekvdm</a>, <a href="https://github.com/Excalibaard">@Excalibaard</a></td></tr><tr><td>Portuguese (Brazilian) 葡萄牙语</td><td></td><td><a href="https://github.com/Ibcs16">@Ibcs16</a></td></tr><tr><td>French (Français) 法语</td><td></td><td><a href="https://github.com/Nicoxx45">@Nicoxx45</a>, <a href="https://github.com/eri">@eri</a></td></tr><tr><td>Swedish (Svenska)瑞典语</td><td><a href="https://github.com/vladdeSV">@vladdeSV</a></td><td></td></tr><tr><td>Ukrainian (Українська) 乌克兰语</td><td></td><td><a href="https://github.com/uhodav">@uhodav</a></td></tr><tr><td>Russian (Русский) 俄语</td><td></td><td><a href="https://github.com/uhodav">@uhodav</a></td></tr><tr><td>German (Deutsch) 德语</td><td><a href="https://github.com/alexanderniebuhr">@alexanderniebuhr</a></td><td></td></tr><tr><td>Turkish (Türkçe) 土耳其语</td><td></td><td><a href="https://github.com/eri">@eri</a></td></tr></tbody></table><p><a href="https://github.com/lokalise/i18n-ally/wiki/Contribute#working-on-translations"><strong>帮忙翻译</strong></a></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>👨‍💻 如果您想帮助一种语言的翻译更新，请在<strong>维护者</strong>字段中输入您的姓名。我会在需要的时候提到你。非常感谢。</p></blockquote><h2 id="❤️-感谢"><a href="#❤️-感谢" class="headerlink" title="❤️ 感谢"></a>❤️ 感谢</h2><p>此插件的灵感来源于<a href="https://github.com/think2011/vscode-vue-i18n">think2011&#x2F;vscode-vue-i18n</a>. 如果没有<a href="https://github.com/think2011">@think2011</a>,i18n-ally不会存在</p><p>对Vue单文件组件（SFC）的支持由[kazupon&#x2F;Vue-i18n-locale-message]提供支持(<a href="https://github.com/kazupon/vue-i18n-locale-message)%EF%BC%8C%E5%AE%83%E6%98%AF%E7%94%B1vue-i18n%E7%9A%84%E4%BD%9C%E8%80%85%E5%88%9B%E5%BB%BA%E7%9A%84%E3%80%82%E8%B0%A2%E8%B0%A2%E4%BD%A0%E5%81%9A%E8%BF%99%E4%B8%AA%EF%BC%81">https://github.com/kazupon/vue-i18n-locale-message)，它是由vue-i18n的作者创建的。谢谢你做这个！</a></p><h3 id="代码共享者"><a href="#代码共享者" class="headerlink" title="代码共享者"></a>代码共享者</h3><p>非常感谢所有杰出的贡献者：<br><a href="https://github.com/lokalise/i18n-ally/graphs/contributors"><img src="https://opencollective.com/i18n-ally/contributors.svg?width=890"/></a></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><a href="https://github.com/lokalise/i18n-ally/blob/master/LICENSE">MIT License</a> © 2019-PRESENT <a href="https://github.com/antfu">Anthony Fu</a></p><p>MIT License © 2018-2019 <a href="https://github.com/think2011">think2011</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally">Visual Studio Code&gt;Other&gt;i18n Ally</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/lokalise/i18n-ally">github 官网</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 增效 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux-thunk源码</title>
      <link href="//post/2022-05-27redux-thunk.html"/>
      <url>//post/2022-05-27redux-thunk.html</url>
      
        <content type="html"><![CDATA[<h2 id="源码版本"><a href="#源码版本" class="headerlink" title="源码版本"></a>源码版本</h2><p><a href="https://github.com/reduxjs/redux-thunk/releases/tag/v2.4.1">v2.4.1</a></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>通过redux源码applyMiddleware了解到，是对store.dispatch进行增强</li><li>可以接受一个返回函数的action creator。如果这个action creator 返回的是一个函数，就执行它，如果不是，就按照原来的next(action)执行。</li><li>可以在这个函数中执行一些异步的操作</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export function addCount() &#123;  return &#123;type: ADD_COUNT&#125;&#125; export function addCountAsync() &#123;  return dispatch &#x3D;&gt; &#123; &#x2F;&#x2F; dispatch对应源码的 ： action(dispatch, getState, extraArgument);的第一个参数    setTimeout( () &#x3D;&gt; &#123;      dispatch(addCount())    &#125;,2000)  &#125;&#125;</code></pre><ul><li>addCountAsync函数就返回了一个函数，将dispatch作为函数的第一个参数传递进去，在函数内进行异步操作就可以了。</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>这个文件结构与redux、react-redux相比，没有什么特别之处，这里及以后如无必要不在进行阅读</li><li>简单扫一眼就好</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;** A function that accepts a potential &quot;extra argument&quot; value to be injected later, * and returns an instance of the thunk middleware that uses that value *&#x2F;&#x2F;** 一个函数接收一个可能的&quot;extra argument&quot;值，并返回一个thunk中间件，它使用这个值 *&#x2F;function createThunkMiddleware&lt;  State &#x3D; any,  BasicAction extends Action &#x3D; AnyAction,  ExtraThunkArg &#x3D; undefined&gt;(extraArgument?: ExtraThunkArg) &#123;  &#x2F;&#x2F; Standard Redux middleware definition pattern:  &#x2F;&#x2F; 标准Redux中间件定义模式:  &#x2F;&#x2F; See: https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#writing-custom-middleware  const middleware: ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt; &#x3D;    (&#123; dispatch, getState &#125;) &#x3D;&gt; (next) &#x3D;&gt;  (action) &#x3D;&gt; &#123;      &#x2F;&#x2F; The thunk middleware looks for any functions that were passed to &#96;store.dispatch&#96;.      &#x2F;&#x2F; If this &quot;action&quot; is really a function, call it and return the result.      &#x2F;&#x2F; 这个thunk中间件会查找store.dispatch传入的任何函数。如果这个&quot;action&quot;是一个函数，调用它并返回结果。      if (typeof action &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;        &#x2F;&#x2F; Inject the store&#39;s &#96;dispatch&#96; and &#96;getState&#96; methods, as well as any &quot;extra arg&quot;        &#x2F;&#x2F; 注入store的dispatch和getState方法，以及任意的&quot;extra arg&quot;        return action(dispatch, getState, extraArgument);      &#125;      &#x2F;&#x2F; 否则，像往常一样将操作传递给中间件链      &#x2F;&#x2F; Otherwise, pass the action down the middleware chain as usual      return next(action);    &#125;;  return middleware;&#125;</code></pre><p><strong>中间件模式</strong></p><p>柯里化：将一个函数的参数分解成多个参数，并且返回一个新的函数，这个新的函数可以被调用，并且返回原函数的结果。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const anotherExampleMiddleware &#x3D; storeAPI &#x3D;&gt; next &#x3D;&gt; action &#x3D;&gt; &#123;  &#x2F;&#x2F; Do something in here, when each action is dispatched  return next(action)&#125;</code></pre><p><strong>storeAPI</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; storeAPIconst store &#x3D; &#123;  dispatch: dispatch as Dispatch&lt;A&gt;,  subscribe,  getState,  replaceReducer,  [$$observable]: observable&#125; as unknown as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext</code></pre><p><em>工厂模式</em></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const thunk &#x3D; createThunkMiddleware() as ThunkMiddleware &amp; &#123;  withExtraArgument&lt;    ExtraThunkArg,    State &#x3D; any,    BasicAction extends Action &#x3D; AnyAction  &gt;(    extraArgument: ExtraThunkArg  ): ThunkMiddleware&lt;State, BasicAction, ExtraThunkArg&gt;&#125;&#x2F;&#x2F; Attach the factory function so users can create a customized version&#x2F;&#x2F; with whatever &quot;extra arg&quot; they want to inject into their thunks&#x2F;&#x2F; 尝试将工厂函数附加到用户可以创建任何额外的&quot;extra arg&quot;的thunk中间件thunk.withExtraArgument &#x3D; createThunkMiddlewareexport default thunk</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.ts">redux-thunk源码</a><br><a href="https://blog.csdn.net/hsany330/article/details/105951197">Redux中间件之redux-thunk使用详解</a></p>]]></content>
      
      
      <categories>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
            <tag> redux-thunk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 包发布相关</title>
      <link href="//post/2022-04-28npm.html"/>
      <url>//post/2022-04-28npm.html</url>
      
        <content type="html"><![CDATA[<h2 id="npm-包发布"><a href="#npm-包发布" class="headerlink" title="npm 包发布"></a>npm 包发布</h2><pre class="line-numbers language-none"><code class="language-none">npm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; npm notice name:          @tutu-fe&#x2F;wiki-ui                        npm notice version:       0.1.1-beta                              npm notice filename:      @tutu-fe&#x2F;wiki-ui-0.1.1-beta.tgz         npm notice package size:  85.7 kB                                 npm notice unpacked size: 449.9 kB                                npm notice shasum:        973f5eb8d74de04c34b8e9c94536f8924b1f9570npm notice integrity:     sha512-Uyo3zS0eaMOYE[...]60Ywmrmb&#x2F;brxQ&#x3D;&#x3D;npm notice total files:   205                                     npm notice npm ERR! code E403npm ERR! 403 403 Forbidden - PUT https:&#x2F;&#x2F;registry- - [maintainers_error] haotian.chen does not in maintainer listnpm ERR! 403 In most cases, you or one of your dependencies are requestingnpm ERR! 403 a package version that is forbidden by your security policy, ornpm ERR! 403 on a server you do not have access to.npm ERR! A complete log of this run can be found in:npm ERR!     &#x2F;Users&#x2F;haotian&#x2F;.npm&#x2F;_logs&#x2F;2022-04-28T09_58_10_365Z-debug.log</code></pre><h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;maintainers&quot;: [  &quot;davishua&quot;,å  &quot;haotian.chen&quot;],</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://t-blog-images.aijs.top/img/20220428180656.png"><br><img src="http://t-blog-images.aijs.top/img/20220428180602.png"></p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业微信： 图片附件无法预览的问题</title>
      <link href="//post/2022-04-19wework-preview.html"/>
      <url>//post/2022-04-19wework-preview.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://t-blog-images.aijs.top/img/11460713-13685d46ead24558.png"></p><ul><li>背景：安卓预览正常，部分iOS预览有问题（大部分手机都是正常的）<pre class="line-numbers language-none"><code class="language-none">downloadAttachment(downloadUrl).then(res &#x3D;&gt; &#123;      if (getWechatUserAgent(navigator.userAgent)) &#123; &#x2F;&#x2F; 判断是企业微信        const blob &#x3D; new Blob([res]);        wx.previewFile(&#123;          url: location.origin + downloadUrl, &#x2F;&#x2F; 需要预览文件的地址(必填，可以使用相对路径)          name: attachment.name, &#x2F;&#x2F; 需要预览文件的文件名，必须有带文件格式的后缀，例如.doc(不填的话取url的最后部分，最后部分是个包含格式后缀的文件名)          size: blob.size &#x2F;&#x2F; 需要预览文件的字节大小(必填，而且大小必须正确，否则会打开失败)        &#125;);        Toast.loading(i18n.loading, false)        return      &#125;      var reader &#x3D; new FileReader();      reader.readAsDataURL(res);   &#x2F;&#x2F; 转换为base64，可以直接放入a标签href      reader.onload &#x3D; function (e) &#123;        const anchorEle &#x3D; document.createElement(&#39;a&#39;)        document.body.appendChild(anchorEle)        anchorEle.href &#x3D; e?.target?.result as any        anchorEle.download &#x3D; attachment.name        anchorEle.click()        document.body.removeChild(anchorEle)      &#125;      Toast.loading(i18n.loading, false)    &#125;).catch(() &#x3D;&gt; &#123;      Toast.loading(i18n.loading, false)    &#125;)</code></pre><code>自研移动端</code>、<code>web端</code>、<code>企业微信桌面端</code>都没问题，当然喽，每一个端展示效果是不一样的，代码也不一样。排查了耗费一定时间。</li></ul><ol><li>排查 企业微信版本， 比对后发现，和正常使用的微信版本一致</li><li>排查手机版本不一致，客户iphone12和 系统版本15.1，我们开发人员是14.+，所以我把我的手机升级到最新，我的手机升级后是正常的，那么可能是数据问题，数据</li><li>排查数据，这是老系统的数据，和新系统数据走不同的业务代码，经排查也没问题</li><li>排查<code>size</code>如果不准确也会出现上述问题，由于预发环境获取票据的信息与线上是不一致的，所以无法在预发进行排查，能做的事保证代码执行到<code> const blob = new Blob([res]);</code>，并且能够获取到正确的size，所以进行了alert调试，这个在手机上比较直观，当然也可以<code>vconsole</code>【暂不考虑,因为之前开发人员没加，部门被砍掉，很多人被裁员了，所有项目都我来维护，没时间，不整了】，调试结果是size: 88214,各个手机都一样，用户手机也是88214，故排除size</li><li>最后可能问题在于，用户手机上版本与手机不匹配，有兼容性bug，尝试升级企业微信，最后解决</li></ol><br/><p>总结：如果考虑直接升级用户app版本，或许在第三步就解决问题了，我的iphoneX也不用升级到15.3了</p>]]></content>
      
      
      <categories>
          
          <category> WeWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WeWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 代码注释</title>
      <link href="//post/2022-05-26code.html"/>
      <url>//post/2022-05-26code.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><p><code>//</code>这种js注释代码在vscode其他地方引用时候，没有提示， 如果需要有提示，需要写成<code>/** 提示 **/</code></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">写法1export enum ELeaveType &#123;  MATERNITY_ &#x3D; 17, &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),&#125;写法2export enum ELeaveType &#123;  &#x2F;&#x2F; &quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),  MATERNITY_ &#x3D; 17, &#125;</code></pre><p><img src="http://t-blog-images.aijs.top/img/20220526153244.webp"></p><h2 id="有提示注释写法"><a href="#有提示注释写法" class="headerlink" title="有提示注释写法"></a>有提示注释写法</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export enum ELeaveType &#123;...  &#x2F;**&quot;产假&amp;补充假&quot;, &quot;连续使用，预产期前15天&quot;),**&#x2F;  MATERNITY_ &#x3D; 17, ...&#125;</code></pre><p><img src="http://t-blog-images.aijs.top/img/20220526153709.webp"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux 源码 2</title>
      <link href="//post/2022-05-25.redux2.html"/>
      <url>//post/2022-05-25.redux2.html</url>
      
        <content type="html"><![CDATA[<h2 id="redux-简介"><a href="#redux-简介" class="headerlink" title="redux 简介"></a>redux 简介</h2><p>Predictable state container for JavaScript apps</p><p>字面意思</p><p>js应用可预测状态容器</p><p><img src="http://t-blog-images.aijs.top/img/20220527091836.webp"></p><h2 id="怎么用，为什么用"><a href="#怎么用，为什么用" class="headerlink" title="怎么用，为什么用"></a>怎么用，为什么用</h2><p><a href="https://redux.js.org/">看官网。。。</a></p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p><strong>代码注释如下</strong></p><ul><li>redux store持有state树，唯一可以改变store中数据的方式是dispatch</li><li>在你的app中应该有唯一一个store.为了区分不同部分响应操作的的状态树，可以将几个reducer通过combinereducers合并为一个reducer</li><li>一个根据当前state和行为返回新state的函数</li><li>初始state，</li><li>store中间件。可以使用第三方中间件增强store</li><li>redux store 可以读取state，dispatch行为，订阅改变</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;** * Creates a Redux store that holds the state tree. * The only way to change the data in the store is to call &#96;dispatch()&#96; on it. *  * redux store持有state树，唯一可以改变store中数据的方式是dispatch *  * There should only be a single store in your app. To specify how different * parts of the state tree respond to actions, you may combine several reducers * into a single reducer function by using &#96;combineReducers&#96;. * * 在你的app中应该有唯一一个store.为了区分不同部分响应操作的的状态树，可以将几个reducer通过combinereducers合并为一个reducer *  * @param reducer A function that returns the next state tree, given * the current state tree and the action to handle. *  * 一个根据当前state和行为返回新state的函数 * * @param preloadedState The initial state. You may optionally specify it * to hydrate the state from the server in universal apps, or to restore a * previously serialized user session. * If you use &#96;combineReducers&#96; to produce the root reducer function, this must be * an object with the same shape as &#96;combineReducers&#96; keys. * * 初始state， *  * @param enhancer The store enhancer. You may optionally specify it * to enhance the store with third-party capabilities such as middleware, * time travel, persistence, etc. The only store enhancer that ships with Redux * is &#96;applyMiddleware()&#96;. * * store中间件。可以使用第三方中间件增强store *  * @returns A Redux store that lets you read the state, dispatch actions * and subscribe to changes. *  * redux store 可以读取state，dispatch行为，订阅改变 *&#x2F;</code></pre><p><strong>函数声明</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function createStore&lt;  S,  A extends Action,  Ext &#x3D; &#123;&#125;,  StateExt &#x3D; never&gt;(  reducer: Reducer&lt;S, A&gt;, &#x2F;&#x2F; reducer  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;&#x2F;&#x2F; 中间件): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Extexport default function createStore&lt;  S,  A extends Action,  Ext &#x3D; &#123;&#125;,  StateExt &#x3D; never&gt;(  reducer: Reducer&lt;S, A&gt;, &#x2F;&#x2F; reducer  preloadedState?: PreloadedState&lt;S&gt;, &#x2F;&#x2F; &#x2F;&#x2F;初始状态  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt; &#x2F;&#x2F; 中间件): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Extexport default function createStore&lt;  S,  A extends Action,  Ext &#x3D; &#123;&#125;,  StateExt &#x3D; never&gt;(  reducer: Reducer&lt;S, A&gt;,&#x2F;&#x2F; reducer  preloadedState?: PreloadedState&lt;S&gt; | StoreEnhancer&lt;Ext, StateExt&gt;, &#x2F;&#x2F;初始状态  enhancer?: StoreEnhancer&lt;Ext, StateExt&gt;&#x2F;&#x2F; 中间件  &#x2F;&#x2F; 这里可以看到 preloadedState的参数| StoreEnhancer&lt;Ext, StateExt&gt; 与 enhancer类型一致， 这里处理第二参数可能是 enhancer  &#x2F;&#x2F; 代码主体分有做判断：  &#x2F;&#x2F; if (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;  &#x2F;&#x2F;   enhancer &#x3D; preloadedState as StoreEnhancer&lt;Ext, StateExt&gt;  &#x2F;&#x2F;   preloadedState &#x3D; undefined  &#x2F;&#x2F; &#125; ): Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext &#123;&#125;</code></pre><p><strong>createStore 主体代码</strong></p><ul><li>一些入参校验</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">if (  (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;function&#39;) ||  (typeof enhancer &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof arguments[3] &#x3D;&#x3D;&#x3D; &#39;function&#39;)) &#123;  throw new Error(    &#39;It looks like you are passing several store enhancers to &#39; +      &#39;createStore(). This is not supported. Instead, compose them &#39; +      &#39;together to a single function. See https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#creating-a-store-with-enhancers for an example.&#39;  )&#125;if (typeof preloadedState &#x3D;&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof enhancer &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;  enhancer &#x3D; preloadedState as StoreEnhancer&lt;Ext, StateExt&gt;  preloadedState &#x3D; undefined&#125;if (typeof enhancer !&#x3D;&#x3D; &#39;undefined&#39;) &#123;  if (typeof enhancer !&#x3D;&#x3D; &#39;function&#39;) &#123;    throw new Error(      &#96;Expected the enhancer to be a function. Instead, received: &#39;$&#123;kindOf(        enhancer      )&#125;&#39;&#96;    )  &#125;  return enhancer(createStore)(    reducer,    preloadedState as PreloadedState&lt;S&gt;  ) as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Ext&#125;if (typeof reducer !&#x3D;&#x3D; &#39;function&#39;) &#123;  throw new Error(    &#96;Expected the root reducer to be a function. Instead, received: &#39;$&#123;kindOf(      reducer    )&#125;&#39;&#96;  )&#125;&#x2F;&#x2F; 当前reducerlet currentReducer &#x3D; reducer&#x2F;&#x2F; 当前状态let currentState &#x3D; preloadedState as S&#x2F;&#x2F; 当前订阅let currentListeners: (() &#x3D;&gt; void)[] | null &#x3D; []&#x2F;&#x2F; 新的订阅let nextListeners &#x3D; currentListenerslet isDispatching &#x3D; false&#x2F;** * This makes a shallow copy of currentListeners so we can use * nextListeners as a temporary list while dispatching. * * This prevents any bugs around consumers calling * subscribe&#x2F;unsubscribe in the middle of a dispatch. *&#x2F;&#x2F;&#x2F; 浅拷贝当前currentListeners得到 nextListeners 用于 dispatching   &#x2F;&#x2F; 确定新的可变监听function ensureCanMutateNextListeners() &#123;  。。。&#125;&#x2F;&#x2F; 获取store的状态function getState(): S &#123;  。。。&#125;&#x2F;&#x2F; 传入监听，返回监听移除的函数function subscribe(listener: () &#x3D;&gt; void) &#123;  。。。  return function unsubscribe() &#123;    。。。。  &#125;&#125;function dispatch(action: A) &#123;  。。。&#125;&#x2F;&#x2F; 用于同构更新reducerfunction replaceReducer&lt;NewState, NewActions extends A&gt;(  nextReducer: Reducer&lt;NewState, NewActions&gt;): Store&lt;ExtendState&lt;NewState, StateExt&gt;, NewActions, StateExt, Ext&gt; &amp; Ext &#123;  。。。&#125;&#x2F;** * Interoperability point for observable&#x2F;reactive libraries. * @returns A minimal observable of state changes. * For more information, see the observable proposal: * https:&#x2F;&#x2F;github.com&#x2F;tc39&#x2F;proposal-observable *&#x2F;&#x2F;&#x2F; 实现小型观察状态变更function observable() &#123;  。。。&#125;&#x2F;&#x2F; 当store被创建，初始化操作会被dispatch，，每个reducer会返回最初的state. 有效地填充初始状态树。dispatch(&#123; type: ActionTypes.INIT &#125; as A)const store &#x3D; &#123;  dispatch: dispatch as Dispatch&lt;A&gt;,  subscribe,  getState,  replaceReducer,  [$$observable]: observable&#125; as unknown as Store&lt;ExtendState&lt;S, StateExt&gt;, A, StateExt, Ext&gt; &amp; Extreturn store &#x2F;&#x2F; store上的api我们又熟悉了</code></pre><p><strong>ensureCanMutateNextListeners</strong></p><ul><li>浅拷贝当前currentListeners得到 nextListeners 用于 dispatching</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function ensureCanMutateNextListeners() &#123;  if (nextListeners &#x3D;&#x3D;&#x3D; currentListeners) &#123;    nextListeners &#x3D; currentListeners.slice()  &#125;&#125;</code></pre><p><strong>getState</strong></p><ul><li>获取store的状态</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function getState(): S &#123;  if (isDispatching) &#123;    throw new Error(      &#39;You may not call store.getState() while the reducer is executing. &#39; +        &#39;The reducer has already received the state as an argument. &#39; +        &#39;Pass it down from the top reducer instead of reading it from the store.&#39;    )  &#125;  return currentState as S&#125;</code></pre><p><strong>subscribe</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;**   * Adds a change listener. It will be called any time an action is dispatched,   * and some part of the state tree may potentially have changed. You may then   * call &#96;getState()&#96; to read the current state tree inside the callback.   *   * You may call &#96;dispatch()&#96; from a change listener, with the following   * caveats:   *   * 1. The subscriptions are snapshotted just before every &#96;dispatch()&#96; call.   * If you subscribe or unsubscribe while the listeners are being invoked, this   * will not have any effect on the &#96;dispatch()&#96; that is currently in progress.   * However, the next &#96;dispatch()&#96; call, whether nested or not, will use a more   * recent snapshot of the subscription list.   *   * 2. The listener should not expect to see all state changes, as the state   * might have been updated multiple times during a nested &#96;dispatch()&#96; before   * the listener is called. It is, however, guaranteed that all subscribers   * registered before the &#96;dispatch()&#96; started will be called with the latest   * state by the time it exits.   *   * @param listener A callback to be invoked on every dispatch.   * @returns A function to remove this change listener.   *&#x2F;  &#x2F;&#x2F; 上述注释  &#x2F;** 添加一个监听，在action被触发时候会调用，state会进行更新，在回调中可以用getState方法获取当前状态树   * 两个注意：订阅的是在每个dispatch之前的快照，   * 1.   * 订阅是在每次&#39;dispatch（）&#39;调用之前进行快照的。   * 如果在调用侦听器时订阅或取消订阅，这将不会对当前正在进行的“dispatch（）”产生任何影响。   * 但是，下一个&#39;dispatch（）&#39;调用（无论是否嵌套）将使用订阅列表的最新快照。   * 2。   * 监听器不应该期望看到所有的状态更改，因为在调用监听器之前，状态可能在嵌套的&#39;dispatch（）&#39;期间被多次更新。   * 但是，可以保证在“dispatch（）”启动之前注册的所有订阅者在退出时都将以最新状态调用。   * *&#x2F;  function subscribe(listener: () &#x3D;&gt; void) &#123;    if (typeof listener !&#x3D;&#x3D; &#39;function&#39;) &#123;      throw new Error(        &#96;Expected the listener to be a function. Instead, received: &#39;$&#123;kindOf(          listener        )&#125;&#39;&#96;      )    &#125;    if (isDispatching) &#123;      throw new Error(        &#39;You may not call store.subscribe() while the reducer is executing. &#39; +          &#39;If you would like to be notified after the store has been updated, subscribe from a &#39; +          &#39;component and invoke store.getState() in the callback to access the latest state. &#39; +          &#39;See https:&#x2F;&#x2F;redux.js.org&#x2F;api&#x2F;store#subscribelistener for more details.&#39;      )    &#125;    let isSubscribed &#x3D; true    ensureCanMutateNextListeners()    nextListeners.push(listener) &#x2F;&#x2F; 增加    return function unsubscribe() &#123;      if (!isSubscribed) &#123;        return      &#125;      if (isDispatching) &#123;        throw new Error(          &#39;You may not unsubscribe from a store listener while the reducer is executing. &#39; +            &#39;See https:&#x2F;&#x2F;redux.js.org&#x2F;api&#x2F;store#subscribelistener for more details.&#39;        )      &#125;      isSubscribed &#x3D; false      ensureCanMutateNextListeners()      const index &#x3D; nextListeners.indexOf(listener)      nextListeners.splice(index, 1) &#x2F;&#x2F; 移除      currentListeners &#x3D; null    &#125;  &#125;</code></pre><p><strong>dispatch</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;** * Dispatches an action. It is the only way to trigger a state change. * * The &#96;reducer&#96; function, used to create the store, will be called with the * current state tree and the given &#96;action&#96;. Its return value will * be considered the **next** state of the tree, and the change listeners * will be notified. * * The base implementation only supports plain object actions. If you want to * dispatch a Promise, an Observable, a thunk, or something else, you need to * wrap your store creating function into the corresponding middleware. For * example, see the documentation for the &#96;redux-thunk&#96; package. Even the * middleware will eventually dispatch plain object actions using this method. * * @param action A plain object representing “what changed”. It is * a good idea to keep actions serializable so you can record and replay user * sessions, or use the time travelling &#96;redux-devtools&#96;. An action must have * a &#96;type&#96; property which may not be &#96;undefined&#96;. It is a good idea to use * string constants for action types. * * @returns For convenience, the same action object you dispatched. * * Note that, if you use a custom middleware, it may wrap &#96;dispatch()&#96; to * return something else (for example, a Promise you can await). *&#x2F;function dispatch(action: A) &#123;  if (!isPlainObject(action)) &#123; &#x2F;&#x2F; 只能是简单的对象    throw new Error(      &#96;Actions must be plain objects. Instead, the actual type was: &#39;$&#123;kindOf(        action      )&#125;&#39;. You may need to add middleware to your store setup to handle dispatching other values, such as &#39;redux-thunk&#39; to handle dispatching functions. See https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-4-store#middleware and https:&#x2F;&#x2F;redux.js.org&#x2F;tutorials&#x2F;fundamentals&#x2F;part-6-async-logic#using-the-redux-thunk-middleware for examples.&#96;    )  &#125;  if (typeof action.type &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;    throw new Error(      &#39;Actions may not have an undefined &quot;type&quot; property. You may have misspelled an action type string constant.&#39;    )  &#125;  if (isDispatching) &#123;    throw new Error(&#39;Reducers may not dispatch actions.&#39;)  &#125;  try &#123;    isDispatching &#x3D; true    currentState &#x3D; currentReducer(currentState, action) &#x2F;&#x2F; 传入当前状态和操作，返回新的状态  &#125; finally &#123;    isDispatching &#x3D; false  &#125;  const listeners &#x3D; (currentListeners &#x3D; nextListeners) &#x2F;&#x2F; 触发更新  for (let i &#x3D; 0; i &lt; listeners.length; i++) &#123;    const listener &#x3D; listeners[i]    listener()  &#125;  return action&#125;</code></pre><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><ul><li>使用时候以键值对形式存在</li></ul><p><strong>使用</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import useInfoReducer from &#39;.&#x2F;userInfo&#39;import recordReducer from &#39;.&#x2F;record&#39;const rootReducer &#x3D; combineReducers(&#123;  useInfoReducer,  recordReducer&#125;)const store &#x3D; createStore(rootReducer)</code></pre><p><strong>源码</strong></p><ul><li>返回不期望的state型警告信息</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function getUnexpectedStateShapeWarningMessage(  inputState: object,  reducers: ReducersMapObject,  action: Action,  unexpectedKeyCache: &#123; [key: string]: true &#125;) &#123;  const reducerKeys &#x3D; Object.keys(reducers)  const argumentName &#x3D;    action &amp;&amp; action.type &#x3D;&#x3D;&#x3D; ActionTypes.INIT      ? &#39;preloadedState argument passed to createStore&#39;      : &#39;previous state received by the reducer&#39;  if (reducerKeys.length &#x3D;&#x3D;&#x3D; 0) &#123;    return (      &#39;Store does not have a valid reducer. Make sure the argument passed &#39; +      &#39;to combineReducers is an object whose values are reducers.&#39;    )  &#125;  if (!isPlainObject(inputState)) &#123;    return (      &#96;The $&#123;argumentName&#125; has unexpected type of &quot;$&#123;kindOf(        inputState      )&#125;&quot;. Expected argument to be an object with the following &#96; +      &#96;keys: &quot;$&#123;reducerKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot;&#96;    )  &#125;  const unexpectedKeys &#x3D; Object.keys(inputState).filter(    key &#x3D;&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]  )  unexpectedKeys.forEach(key &#x3D;&gt; &#123;    unexpectedKeyCache[key] &#x3D; true  &#125;)  if (action &amp;&amp; action.type &#x3D;&#x3D;&#x3D; ActionTypes.REPLACE) return  if (unexpectedKeys.length &gt; 0) &#123;    return (      &#96;Unexpected $&#123;unexpectedKeys.length &gt; 1 ? &#39;keys&#39; : &#39;key&#39;&#125; &#96; +      &#96;&quot;$&#123;unexpectedKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot; found in $&#123;argumentName&#125;. &#96; +      &#96;Expected to find one of the known reducer keys instead: &#96; +      &#96;&quot;$&#123;reducerKeys.join(&#39;&quot;, &quot;&#39;)&#125;&quot;. Unexpected keys will be ignored.&#96;    )  &#125;&#125; &#x2F;&#x2F; 对 reducer型进行断言function assertReducerShape(reducers: ReducersMapObject) &#123;  Object.keys(reducers).forEach(key &#x3D;&gt; &#123;    const reducer &#x3D; reducers[key]    const initialState &#x3D; reducer(undefined, &#123; type: ActionTypes.INIT &#125;)    if (typeof initialState &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;      throw new Error(         &#x2F;&#x2F; 初始化initialState时候可以用null,但是不可以用undefined        &#96;The slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined during initialization. &#96; +          &#96;If the state passed to the reducer is undefined, you must &#96; +          &#96;explicitly return the initial state. The initial state may &#96; +          &#96;not be undefined. If you don&#39;t want to set a value for this reducer, &#96; +          &#96;you can use null instead of undefined.&#96;      )    &#125;    if (      typeof reducer(undefined, &#123;        type: ActionTypes.PROBE_UNKNOWN_ACTION()      &#125;) &#x3D;&#x3D;&#x3D; &#39;undefined&#39;    ) &#123;      throw new Error(         &#x2F;&#x2F; 1.随机类型&#x2F; redux&#x2F;*类型 的操作类型为redux私有，不允许使用         &#x2F;&#x2F; 2.初始化状态不可以是undefined,         &#x2F;&#x2F; 3.新状态如果是undefined的，必须返回初始状态        &#96;The slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined when probed with a random type. &#96; +          &#96;Don&#39;t try to handle &#39;$&#123;ActionTypes.INIT&#125;&#39; or other actions in &quot;redux&#x2F;*&quot; &#96; +          &#96;namespace. They are considered private. Instead, you must return the &#96; +          &#96;current state for any unknown actions, unless it is undefined, &#96; +          &#96;in which case you must return the initial state, regardless of the &#96; +          &#96;action type. The initial state may not be undefined, but can be null.&#96;      )    &#125;  &#125;)&#125;&#x2F;&#x2F; combineReducers的实现，其实就是将多个值，合并在一个对象中export default function combineReducers(reducers: ReducersMapObject) &#123;  const reducerKeys &#x3D; Object.keys(reducers)  const finalReducers: ReducersMapObject &#x3D; &#123;&#125;  for (let i &#x3D; 0; i &lt; reducerKeys.length; i++) &#123;    const key &#x3D; reducerKeys[i]    if (typeof reducers[key] &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;      finalReducers[key] &#x3D; reducers[key]    &#125;  &#125;  const finalReducerKeys &#x3D; Object.keys(finalReducers)  &#x2F;&#x2F; This is used to make sure we don&#39;t warn about the same  &#x2F;&#x2F; keys multiple times.  &#x2F;&#x2F;这用于确保我们不会多次警告相同的key。  let unexpectedKeyCache: &#123; [key: string]: true &#125;  return function combination(    state: StateFromReducersMapObject&lt;typeof reducers&gt; &#x3D; &#123;&#125;,    action: AnyAction  ) &#123;    &#x2F;&#x2F;校验信息...    let hasChanged &#x3D; false    const nextState: StateFromReducersMapObject&lt;typeof reducers&gt; &#x3D; &#123;&#125;    for (let i &#x3D; 0; i &lt; finalReducerKeys.length; i++) &#123;      const key &#x3D; finalReducerKeys[i]      &#x2F;&#x2F; reducer      const reducer &#x3D; finalReducers[key]      &#x2F;&#x2F; 之前状态      const previousStateForKey &#x3D; state[key]      &#x2F;&#x2F; 新状态      const nextStateForKey &#x3D; reducer(previousStateForKey, action)      if (typeof nextStateForKey &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;        const actionType &#x3D; action &amp;&amp; action.type        throw new Error(          &#96;When called with an action of type $&#123;            actionType ? &#96;&quot;$&#123;String(actionType)&#125;&quot;&#96; : &#39;(unknown type)&#39;          &#125;, the slice reducer for key &quot;$&#123;key&#125;&quot; returned undefined. &#96; +            &#96;To ignore an action, you must explicitly return the previous state. &#96; +            &#96;If you want this reducer to hold no value, you can return null instead of undefined.&#96;        )      &#125;      nextState[key] &#x3D; nextStateForKey      &#x2F;&#x2F; 判断是否发生更新      hasChanged &#x3D; hasChanged || nextStateForKey !&#x3D;&#x3D; previousStateForKey    &#125;    hasChanged &#x3D;      hasChanged || finalReducerKeys.length !&#x3D;&#x3D; Object.keys(state).length      &#x2F;&#x2F; 更新返回新的状态，否则返回之前状态    return hasChanged ? nextState : state  &#125;&#125;</code></pre><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><ul><li>给action包裹层dispatch</li><li>action有两种类型： 函数、键值对</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function bindActionCreators(  actionCreators: ActionCreator&lt;any&gt; | ActionCreatorsMapObject,  dispatch: Dispatch) &#123;  &#x2F;&#x2F; 函数类型直接bindActionCreator返回  if (typeof actionCreators &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;    return bindActionCreator(actionCreators, dispatch)  &#125;  if (typeof actionCreators !&#x3D;&#x3D; &#39;object&#39; || actionCreators &#x3D;&#x3D;&#x3D; null) &#123;    throw new Error(      &#96;bindActionCreators expected an object or a function, but instead received: &#39;$&#123;kindOf(        actionCreators      )&#125;&#39;. &#96; +        &#96;Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?&#96;    )  &#125;  const boundActionCreators: ActionCreatorsMapObject &#x3D; &#123;&#125;  &#x2F;&#x2F; 对象遍历调用bindActionCreator  for (const key in actionCreators) &#123;    const actionCreator &#x3D; actionCreators[key]    if (typeof actionCreator &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;      boundActionCreators[key] &#x3D; bindActionCreator(actionCreator, dispatch)    &#125;  &#125;  return boundActionCreators&#125;</code></pre><p><strong>使用及测试代码见</strong></p><p><code>redux/test/typescript/actionCreators.ts</code></p><p><strong>bindActionCreator</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 作用是每个actionCreator增加一个dispatch包裹function bindActionCreator&lt;A extends AnyAction &#x3D; AnyAction&gt;(  actionCreator: ActionCreator&lt;A&gt;,  dispatch: Dispatch) &#123;  return function (this: any, ...args: any[]) &#123;    return dispatch(actionCreator.apply(this, args)) &#x2F;&#x2F; 主要代码  &#125;&#125;</code></pre><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><ul><li>中间件</li><li>对store能力进行增强</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function applyMiddleware(  ...middlewares: Middleware[]): StoreEnhancer&lt;any&gt; &#123;  return (createStore: StoreEnhancerStoreCreator) &#x3D;&gt;    &lt;S, A extends AnyAction&gt;(      reducer: Reducer&lt;S, A&gt;,      preloadedState?: PreloadedState&lt;S&gt;    ) &#x3D;&gt; &#123;      const store &#x3D; createStore(reducer, preloadedState)      &#x2F;&#x2F; 声明      let dispatch: Dispatch &#x3D; () &#x3D;&gt; &#123;        throw new Error(          &#39;Dispatching while constructing your middleware is not allowed. &#39; +            &#39;Other middleware would not be applied to this dispatch.&#39;        )      &#125;      const middlewareAPI: MiddlewareAPI &#x3D; &#123;        getState: store.getState,                                      &#x2F;&#x2F;使用上述函数进行        dispatch: (action, ...args) &#x3D;&gt; dispatch(action, ...args)      &#125;      &#x2F;&#x2F; 中间件数组      const chain &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(middlewareAPI))      &#x2F;&#x2F; 增强的是dispatch      dispatch &#x3D; compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)      return &#123;        ...store,        dispatch      &#125;    &#125;&#125;&#96;&#96;&#96;ts      const chain &#x3D; middlewares.map(middleware &#x3D;&gt; middleware(middlewareAPI))            dispatch &#x3D; compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)      return &#123;        ...store,        dispatch      &#125;    &#125;&#125;</code></pre><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><ul><li>洋葱模型</li></ul><p><strong>使用</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">compose(f, g, h)(...args) &#x3D;&gt; f(g(h(...args)))</code></pre><p><strong>源码</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function compose(...funcs: Function[]) &#123;  &#x2F;&#x2F; 参数长度判断  if (funcs.length &#x3D;&#x3D;&#x3D; 0) &#123;    &#x2F;&#x2F; infer the argument type so it is usable in inference down the line    return &lt;T&gt;(arg: T) &#x3D;&gt; arg  &#125;  &#x2F;&#x2F; 长度为1  if (funcs.length &#x3D;&#x3D;&#x3D; 1) &#123;    return funcs[0]  &#125;  &#x2F;&#x2F; 主要代码一行  return funcs.reduce((a, b) &#x3D;&gt; (...args: any) &#x3D;&gt;  a(b(...args)))&#125;</code></pre><p><strong>讲compose的文章</strong></p><p><a href="http://givencui.com/index.php/archives/28/" target="_blank" >这里有一篇非常好</a></p><h2 id="DO-NOT-USE-ActionTypes"><a href="#DO-NOT-USE-ActionTypes" class="headerlink" title="__DO_NOT_USE__ActionTypes"></a>__DO_NOT_USE__ActionTypes</h2><ul><li>一些私有的action被redux保留，对于不明确的action，必须返回当前state.</li><li>如果当前状态是undefined,必须返回初始状态</li><li>不要在代码中直接涉及这些action</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const ActionTypes &#x3D; &#123;  INIT: &#96;@@redux&#x2F;INIT$&#123;&#x2F;* #__PURE__ *&#x2F; randomString()&#125;&#96;,  REPLACE: &#96;@@redux&#x2F;REPLACE$&#123;&#x2F;* #__PURE__ *&#x2F; randomString()&#125;&#96;,  PROBE_UNKNOWN_ACTION: () &#x3D;&gt; &#96;@@redux&#x2F;PROBE_UNKNOWN_ACTION$&#123;randomString()&#125;&#96;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="http://t-blog-images.aijs.top/img/redux源码内容.png"/><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p><img src="http://t-blog-images.aijs.top/img/20220527091836.webp"></p><h2 id="巩固"><a href="#巩固" class="headerlink" title="巩固"></a>巩固</h2><p><img src="http://t-blog-images.aijs.top/img/20220527095407.webp"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.51cto.com/u_15283585/2958523">最精简的Redux源码解析，看完从此再也不怕面试官</a><br><a href="https://www.jianshu.com/p/490fc0d89029">Redux 源码解析</a><br><a href="https://github.com/841660202/redux">github 源码</a></p>]]></content>
      
      
      <categories>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux 源码 1</title>
      <link href="//post/2022-05-25.redux.html"/>
      <url>//post/2022-05-25.redux.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>A Predictable State Container for JS Apps</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;name&quot;: &quot;redux&quot;,  &quot;version&quot;: &quot;5.0.0-alpha.0&quot;,  &quot;description&quot;: &quot;Predictable state container for JavaScript apps&quot;,  &quot;keywords&quot;: [    &quot;redux&quot;,    &quot;reducer&quot;,  &#x2F;&#x2F; reducer, redux构成组成之一    &quot;state&quot;,    &#x2F;&#x2F; 状态管理    &quot;predictable&quot;,   &#x2F;&#x2F; 可预测的    &quot;functional&quot;,    &#x2F;&#x2F; 纯函数的    &quot;immutable&quot;,     &#x2F;&#x2F; 不可变的    &quot;hot&quot;,    &quot;live&quot;,    &quot;replay&quot;,        &#x2F;&#x2F; 回放    &quot;flux&quot;,          &#x2F;&#x2F; redux对flux的改进    &quot;elm&quot;            &#x2F;&#x2F; Elm 是一门专注于Web前端的纯函数式语言, reducer受elm启发  ],  &#x2F;&#x2F; 入口  &quot;main&quot;: &quot;lib&#x2F;redux.js&quot;,  &#x2F;&#x2F; unpkg 是一个内容源自 npm 的全球快速 CDN, 它能以快速而简单的方式提供任意包、任意文件，通过类似这样的 URL ：unpkg.com&#x2F;:package@:version&#x2F;:file  &#x2F;&#x2F; 当你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux@4.0.3&#x2F;dist&#x2F;redux.min.js 是对应redux@4.0.3版本的压缩后的js文件  &#x2F;&#x2F; 当你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux ——根据package.json配置的unpkg, 重定向为--—&gt; https:&#x2F;&#x2F;unpkg.com&#x2F;redux@4.0.4&#x2F;dist&#x2F;redux.js , 做了两次重定向  &#x2F;&#x2F; 如何你访问: https:&#x2F;&#x2F;unpkg.com&#x2F;redux&#x2F; (注意redux后有&#x2F;), 是一个页面  &quot;unpkg&quot;: &quot;dist&#x2F;redux.js&quot;, &#x2F;&#x2F; 用unpkg的裸url访问时, 指定到该文件  &#x2F;**    module      点击 Setting up multi-platform npm packages 查看相关介绍。      就像 main 字段一样，定义一个针对 es6 模块及语法的入口文件。      构建工具在构建项目的时候，如果发现了这个字段，会首先使用这个字段指向的文件，如果未定义，则回退到 main 字段指向的文件。      支持的工具：      rollup      webpack  **&#x2F;  &quot;module&quot;: &quot;es&#x2F;redux.js&quot;,&#x2F;&#x2F; TypeScript是javascript 的超集, typings&#x2F;types字段, 定义了TypeScript的入口文件  &quot;types&quot;: &quot;types&#x2F;index.d.ts&quot;,  &#x2F;&#x2F; 发布上传内容  &#x2F;&#x2F; 是一个可选字段, 用来描述作将软件包作为依赖项安装时要包含的条目, 相当于白名单, 类似.gitignore类似的语法, files字段中包含的文件不能通过.npmignore或.gitignore排除  &quot;files&quot;: [    &quot;dist&quot;,    &quot;lib&quot;,    &quot;es&quot;,    &quot;src&quot;,    &quot;types&quot;  ],  &quot;scripts&quot;: &#123;    ...  &#125;,  &#x2F;&#x2F; 表示在生产环境下使用该依赖, 对应 npm install xx -S 或 npm install xx --save  &quot;dependencies&quot;: &#123;    &quot;@babel&#x2F;runtime&quot;: &quot;^7.16.7&quot;  &#125;,  &#x2F;&#x2F; 表示仅在开发环境下使用, 不会在生产环境中使用的依赖, 对应 npm install xx -D 或 npm install xx --save-dev  &quot;devDependencies&quot;: &#123;   ...  &#125;,  &quot;npmName&quot;: &quot;redux&quot;,  &#x2F;&#x2F; npm文件映射。把需要同步到 cdnjs 的文件配置在这里。  &quot;npmFileMap&quot;: [    &#123;      &quot;basePath&quot;: &quot;&#x2F;dist&#x2F;&quot;,      &quot;files&quot;: [        &quot;*.js&quot;      ]    &#125;  ],  &#x2F;&#x2F; webpack相关字段, 声明该模块是否包含 sideEffects（副作用），从而可以为 tree-shaking 提供更大的优化空间。  &quot;sideEffects&quot;: false&#125;</code></pre><h2 id="version字段"><a href="#version字段" class="headerlink" title="version字段"></a>version字段</h2><p>包的版本, 必须有, 要符合<a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning guidelines</a>, 参考 <a href="https://semver.org/lang/zh-CN/">语义化版本控制规范</a>, 建议仔细通读<br><img src="http://t-blog-images.aijs.top/img/20220525140247.webp" width=600 style="object-fit: content"/></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://givencui.com/index.php/archives/29/">配合redux项目深度了解package.json</a><br><a href="https://docs.npmjs.com/about-semantic-versioning">semantic versioning guidelines</a><br><a href="https://semver.org/lang/zh-CN/">语义化版本控制规范</a></p><h2 id="源码目录"><a href="#源码目录" class="headerlink" title="源码目录"></a>源码目录</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.├── applyMiddleware.ts├── bindActionCreators.ts├── combineReducers.ts├── compose.ts├── createStore.ts├── index.ts├── types│   ├── actions.ts│   ├── middleware.ts│   ├── reducers.ts│   └── store.ts└── utils    ├── actionTypes.ts    ├── formatProdErrorMessage.ts    ├── isPlainObject.ts    ├── kindOf.ts    ├── symbol-observable.ts    └── warning.ts2 directories, 16 files</code></pre><h2 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export &#123;  createStore,  combineReducers,  bindActionCreators,  applyMiddleware,  compose,  __DO_NOT_USE__ActionTypes&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux  源码2</title>
      <link href="//post/2022-05-24react-redux2.html"/>
      <url>//post/2022-05-24react-redux2.html</url>
      
        <content type="html"><![CDATA[<p>源码版本<code>&quot;version&quot;: &quot;8.0.2&quot;,</code></p><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><ul><li>主要作用通过subscription调用redux中store的subscription产生订阅，订阅内容是onStateChange的回调</li><li>通过react的Provider功能，提供传递给根的store和根的subscription给后续使用了connect的组件</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;* provider 组件代码 *&#x2F;function Provider(&#123; store, context, children &#125;) &#123;   &#x2F;* 利用useMemo，跟据store变化创建出一个contextValue 包含一个根元素订阅器和当前store  *&#x2F;   const contextValue &#x3D; useMemo(() &#x3D;&gt; &#123;      &#x2F;* 创建了一个根 Subscription 订阅器 *&#x2F;    const subscription &#x3D; new Subscription(store)    &#x2F;* subscription 的 notifyNestedSubs 方法 ，赋值给  onStateChange方法 *&#x2F;    &#x2F;&#x2F;onStateChange就是之后触发的listenr    subscription.onStateChange &#x3D; subscription.notifyNestedSubs      return &#123;      store,      subscription    &#125; &#x2F;*  store 改变创建新的contextValue *&#x2F;  &#125;, [store])  &#x2F;*  获取更新之前的state值 ，函数组件里面的上下文要优先于组件更新渲染  *&#x2F;  const previousState &#x3D; useMemo(() &#x3D;&gt; store.getState(), [store])  useEffect(() &#x3D;&gt; &#123;    const &#123; subscription &#125; &#x3D; contextValue    &#x2F;* 触发trySubscribe方法执行，创建listens *&#x2F;    subscription.trySubscribe() &#x2F;&#x2F; 发起订阅    if (previousState !&#x3D;&#x3D; store.getState()) &#123;        &#x2F;* 组件更新渲染之后，如果此时state发生改变，那么立即触发 subscription.notifyNestedSubs 方法  *&#x2F;        &#x2F;&#x2F;触发所有的listener      subscription.notifyNestedSubs()     &#125;    &#x2F;*   *&#x2F;    return () &#x3D;&gt; &#123;      subscription.tryUnsubscribe()  &#x2F;&#x2F; 卸载订阅      subscription.onStateChange &#x3D; null    &#125;    &#x2F;*  contextValue state 改变出发新的 effect *&#x2F;  &#125;, [contextValue, previousState])  &#x2F;&#x2F;若Provider没有显示传入context，则为使用React.createContext创建的上下文  const Context &#x3D; context || ReactReduxContext  return &lt;Context.Provider value&#x3D;&#123;contextValue&#125;&gt;&#123;children&#125;&lt;&#x2F;Context.Provider&gt;&#125;</code></pre><h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><ul><li>订阅消息、发起更新</li><li>在根的Provider的作用是调用redux中store的订阅方法，将根的onStateChange进行订阅</li><li>在子代中是收集所有被 connect 包裹的组件中的Subscription的更新函数 onstatechange，然后形成一个 callback 链表，再由父级 Subscription 统一派发执行更新，只会往上传递一层，不会一直传递使得每一个上级都有自身的更新函数</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;* 发布订阅者模式 *&#x2F;export default class Subscription &#123;  constructor(store, parentSub) &#123;    this.store &#x3D; store    this.parentSub &#x3D; parentSub    this.unsubscribe &#x3D; null    this.listeners &#x3D; nullListeners    this.handleChangeWrapper &#x3D; this.handleChangeWrapper.bind(this)  &#125;  &#x2F;* 负责检测是否该组件订阅，然后添加订阅者也就是listener *&#x2F;    &#x2F;&#x2F;当父代调用过trySubscribe后，子代再调用，因为this.unsubscribe有值，所以并不会实际执行父代的trySubscribe，而只是将listener放进父代中管理  addNestedSub(listener) &#123;    this.trySubscribe()    return this.listeners.subscribe(listener)  &#125;  &#x2F;* 向listeners发布通知 *&#x2F;  notifyNestedSubs() &#123;    this.listeners.notify()  &#125;  &#x2F;* 对于 Provide onStateChange 就是 notifyNestedSubs 方法，  对于 connect 包裹接受更新的组件 ，onStateChange 就是 负责更新组件的函数 。   *&#x2F;  handleChangeWrapper() &#123;    if (this.onStateChange) &#123;      this.onStateChange()    &#125;  &#125;   &#x2F;* 判断有没有开启订阅 *&#x2F;  isSubscribed() &#123;    return Boolean(this.unsubscribe)  &#125;  &#x2F;* 开启订阅模式 首先判断当前订阅器有没有父级订阅器 ， 如果有父级订阅器(就是父级Subscription)，把自己的handleChangeWrapper放入到监听者链表中 *&#x2F;  trySubscribe() &#123;    &#x2F;*    parentSub即是provide value 里面的 Subscription 这里可以理解为 父级元素的 Subscription    *&#x2F;    &#x2F;&#x2F;当Subscription执行过一次改方法后，再调用因为this.unsubscribe有值    &#x2F;&#x2F;所以该方法调用一次后就不会再被调用了    &#x2F;&#x2F;意味着addNestedSub中只会添加listener，而不会再调用trySubscribe，使得listener不会往上传递    if (!this.unsubscribe) &#123;      this.unsubscribe &#x3D; this.parentSub        ? this.parentSub.addNestedSub(this.handleChangeWrapper)        &#x2F;* provider的Subscription是不存在parentSub，所以此时trySubscribe 就会调用 store.subscribe   *&#x2F;        : this.store.subscribe(this.handleChangeWrapper)      this.listeners &#x3D; createListenerCollection()    &#125;  &#125;  &#x2F;* 取消订阅 *&#x2F;  tryUnsubscribe() &#123;    if (this.unsubscribe) &#123;      this.unsubscribe()      this.unsubscribe &#x3D; null      this.listeners.clear()      this.listeners &#x3D; nullListeners    &#125;  &#125;&#125;</code></pre><ul><li>首先Provider创建 Subscription 时候没有第二个参数，就说明provider 中的Subscription 不存在 parentSub 。</li><li>那么再调用Provider组件中useEffect钩子中trySubscribe的时候,会触发this.store.subscribe , subscribe 就是 redux 的 subscribe ,此时真正发起了订阅</li><li>订阅的内容是notifyNestedSubs，即通知根管理的listeners触发<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">subscription.onStateChange &#x3D; subscription.notifyNestedSubs &#x2F;* 向listeners发布通知 *&#x2F;notifyNestedSubs() &#123;  this.listeners.notify()&#125;</code></pre><h2 id="createListenerCollection"><a href="#createListenerCollection" class="headerlink" title="createListenerCollection"></a>createListenerCollection</h2>通过双向链表的结构管理每一个listener<br>以链表的形式收集对应的 listeners (每一个Subscription) 的handleChangeWrapper函数即onStateChange。<br>通过 batch 方法( react-dom 中的 unstable_batchedUpdates ) 来进行批量更新，许将一次事件循环中的所有 React 更新都一起批量处理到一个渲染过程中。<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">import &#123; unstable_batchedUpdates as batch &#125; from &#39;.&#x2F;utils&#x2F;reactBatchedUpdates&#39;setBatch(batch)function createListenerCollection() &#123;   &#x2F;* batch 由getBatch得到的 unstable_batchedUpdates 方法 *&#x2F;  const batch &#x3D; getBatch()  let first &#x3D; null  let last &#x3D; null  return &#123;    &#x2F;* 清除当前listeners的所有listener *&#x2F;    clear() &#123;      first &#x3D; null      last &#x3D; null    &#125;,    &#x2F;* 派发更新 *&#x2F;    notify() &#123;      batch(() &#x3D;&gt; &#123;        let listener &#x3D; first        while (listener) &#123;          listener.callback()          listener &#x3D; listener.next        &#125;      &#125;)    &#125;,    &#x2F;* 获取listeners的所有listener *&#x2F;    get() &#123;      let listeners &#x3D; []      let listener &#x3D; first      while (listener) &#123;        listeners.push(listener)        listener &#x3D; listener.next      &#125;      return listeners    &#125;,     &#x2F;* 接收订阅，将当前的callback（handleChangeWrapper）存到当前的链表中  *&#x2F;    subscribe(callback) &#123;      let isSubscribed &#x3D; true      let listener &#x3D; (last &#x3D; &#123;        callback,        next: null,        prev: last &#x2F;&#x2F;首次last为空      &#125;)         if (listener.prev) &#123;        listener.prev.next &#x3D; listener      &#125; else &#123;        first &#x3D; listener      &#125;      &#x2F;* 取消当前 handleChangeWrapper 的订阅*&#x2F;      return function unsubscribe() &#123;        if (!isSubscribed || first &#x3D;&#x3D;&#x3D; null) return        isSubscribed &#x3D; false&#x2F;&#x2F;双向链表删除节点的操作        if (listener.next) &#123;          listener.next.prev &#x3D; listener.prev        &#125; else &#123;          last &#x3D; listener.prev        &#125;        if (listener.prev) &#123;          listener.prev.next &#x3D; listener.next        &#125; else &#123;          first &#x3D; listener.next        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2>基本使用<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)const mapStateToProps &#x3D; state &#x3D;&gt; (&#123; todos: state.todos &#125;)const mapDispatchToProps &#x3D; dispatch &#x3D;&gt; &#123;  return &#123;    increment: () &#x3D;&gt; dispatch(&#123; type: &#39;INCREMENT&#39; &#125;),    decrement: () &#x3D;&gt; dispatch(&#123; type: &#39;DECREMENT&#39; &#125;),    reset: () &#x3D;&gt; dispatch(&#123; type: &#39;RESET&#39; &#125;)  &#125;&#125;&#x2F;** stateProps , state 映射到 props 中的内容* dispatchProps， dispatch 映射到 props 中的内容。* ownProps 组件本身的 props当未传递时，默认的合并规则为&#123; ...ownProps, ...stateProps, ...dispatchProps &#125;*&#x2F;mergeProps&#x3D;(stateProps, dispatchProps, ownProps) &#x3D;&gt; Objectoptions&#x3D;&#123;  context?: Object,   &#x2F;&#x2F; 自定义上下文  pure?: boolean, &#x2F;&#x2F; 默认为 true , 当为 true 的时候 ，除了 mapStateToProps 和 props ,其他输入或者state 改变，均不会更新组件。  areStatesEqual?: Function, &#x2F;&#x2F; 当pure true , 比较引进store 中state值 是否和之前相等。 (next: Object, prev: Object) &#x3D;&gt; boolean  areOwnPropsEqual?: Function, &#x2F;&#x2F; 当pure true , 比较 props 值, 是否和之前相等。 (next: Object, prev: Object) &#x3D;&gt; boolean  areStatePropsEqual?: Function, &#x2F;&#x2F; 当pure true , 比较 mapStateToProps 后的值 是否和之前相等。  (next: Object, prev: Object) &#x3D;&gt; boolean  areMergedPropsEqual?: Function, &#x2F;&#x2F; 当 pure 为 true 时， 比较 经过 mergeProps 合并后的值 ， 是否与之前等  (next: Object, prev: Object) &#x3D;&gt; boolean  forwardRef?: boolean, &#x2F;&#x2F;当为true 时候,可以通过ref 获取被connect包裹的组件实例。&#125;</code></pre><img src="http://t-blog-images.aijs.top/img/20220525105732.webp"></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;** * Connects a React component to a Redux store. * * - Without arguments, just wraps the component, without changing the behavior &#x2F; props * * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior * is to override ownProps (as stated in the docs), so what remains is everything that&#39;s * not a state or dispatch prop * * - When 3rd param is passed, we don&#39;t know if ownProps propagate and whether they * should be valid component props, because it depends on mergeProps implementation. * As such, it is the user&#39;s responsibility to extend ownProps interface from state or * dispatch props or both when applicable * * @param mapStateToProps A function that extracts values from state * @param mapDispatchToProps Setup for dispatching actions * @param mergeProps Optional callback to merge state and dispatch props together * @param options Options for configuring the connection * *&#x2F;function connect&lt;  TStateProps &#x3D; &#123;&#125;,  TDispatchProps &#x3D; &#123;&#125;,  TOwnProps &#x3D; &#123;&#125;,  TMergedProps &#x3D; &#123;&#125;,  State &#x3D; unknown&gt;(  mapStateToProps?: MapStateToPropsParam&lt;TStateProps, TOwnProps, State&gt;,  mapDispatchToProps?: MapDispatchToPropsParam&lt;TDispatchProps, TOwnProps&gt;,  mergeProps?: MergeProps&lt;TStateProps, TDispatchProps, TOwnProps, TMergedProps&gt;,  &#123;    &#x2F;&#x2F; The &#96;pure&#96; option has been removed, so TS doesn&#39;t like us destructuring this to check its existence.    &#x2F;&#x2F; @ts-ignore    pure,    areStatesEqual &#x3D; strictEqual,    areOwnPropsEqual &#x3D; shallowEqual,    areStatePropsEqual &#x3D; shallowEqual,    areMergedPropsEqual &#x3D; shallowEqual,    &#x2F;&#x2F; use React&#39;s forwardRef to expose a ref of the wrapped component    forwardRef &#x3D; false,    &#x2F;&#x2F; the context consumer to use    context &#x3D; ReactReduxContext,  &#125;: ConnectOptions&lt;unknown, unknown, unknown, unknown&gt; &#x3D; &#123;&#125;): unknown &#123;    const Context &#x3D; context  &#x2F;*  * stateProps , state 映射到 props 中的内容  * dispatchProps， dispatch 映射到 props 中的内容。  * ownProps 组件本身的 props  当未传递时，默认的合并规则为  &#123; ...ownProps, ...stateProps, ...dispatchProps &#125;  *&#x2F; &#x2F;* 经过代理包装后的 mapStateToProps,完成传入store等操作*&#x2F;  const initMapStateToProps &#x3D; mapStateToPropsFactory(mapStateToProps)  &#x2F;* 经过代理包装后的 mapDispatchToProps，完成传入store.dispatch等操作*&#x2F;  const initMapDispatchToProps &#x3D; mapDispatchToPropsFactory(mapDispatchToProps)  &#x2F;* 经过代理包装后的 mergeProps，用于形成真正的 mergeProps函数，合并业务组件的 props , state 映射的 props , dispatch 映射的 props *&#x2F;  const initMergeProps &#x3D; mergePropsFactory(mergeProps)  const shouldHandleStateChanges &#x3D; Boolean(mapStateToProps)  &#x2F;&#x2F;默认的高阶组件connectAdvanced，实际渲染的组件是其中返回的一个ConnectFunction&#x2F;&#x2F;selectorFactory为整合connect更新过程中的形成新props的主要函数&#x2F;&#x2F;selectorFactory为后面的finalPropsSelectorFactory  const wrapWithConnect: AdvancedComponentDecorator&lt;    TOwnProps,    WrappedComponentProps  &gt; &#x3D; (WrappedComponent) &#x3D;&gt; &#123;    ...  &#125;&#125;</code></pre><ul><li>当我们不向connect传递第三个参数mergeProps 的时候，默认的defaultMergeProps如下，作为新的 props 传递给了业务组件</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export function defaultMergeProps(stateProps, dispatchProps, ownProps) &#123;  return &#123; ...ownProps, ...stateProps, ...dispatchProps &#125;&#125;</code></pre><h2 id="selectorFactory"><a href="#selectorFactory" class="headerlink" title="selectorFactory"></a>selectorFactory</h2><p><img src="http://t-blog-images.aijs.top/img/20220525101153.webp"></p><ul><li>首先得到真正connect 经过一层代理函数 mapStateToProps ,mapDispatchToProps ,mergeProps</li><li>然后调用selectorFactory (在pure模式下，selectorFactory 就是 pureFinalPropsSelectorFactory )<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function finalPropsSelectorFactory(  dispatch,  &#123; initMapStateToProps, initMapDispatchToProps, initMergeProps, ...options &#125;) &#123;  &#x2F;&#x2F; mapStateToProps mapDispatchToProps mergeProps 为真正connect 经过一层代理的 proxy 函数  const mapStateToProps &#x3D; initMapStateToProps(dispatch, options)  const mapDispatchToProps &#x3D; initMapDispatchToProps(dispatch, options)  const mergeProps &#x3D; initMergeProps(dispatch, options)  &#x2F;&#x2F;默认pure为true，selectorFactory默认为pureFinalPropsSelectorFactory  const selectorFactory &#x3D; options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory   &#x2F;&#x2F; 返回一个 函数用于生成新的 props   return selectorFactory(    mapStateToProps,    mapDispatchToProps,    mergeProps,    dispatch,    options  )&#125;</code></pre></li></ul><h2 id="pureFinalPropsSelectorFactory"><a href="#pureFinalPropsSelectorFactory" class="headerlink" title="pureFinalPropsSelectorFactory"></a>pureFinalPropsSelectorFactory</h2><p><img src="http://t-blog-images.aijs.top/img/20220525100640.webp"></p><ul><li>如果是第一次，那么直接调用mergeProps合并ownProps,stateProps,dispatchProps 形成最终的props。</li><li>如果不是第一次，那么判断到底是props还是 store.state 发生改变，然后针对那里变化，重新生成对应的props，最终合并到真正的props</li><li>整个 selectorFactory 逻辑就是形成新的props传递给我们的业务组件。</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;** pure组件处理 ， 对比 props 是否发生变化 然后 合并props *&#x2F;export function pureFinalPropsSelectorFactory(  mapStateToProps,  mapDispatchToProps,  mergeProps,  dispatch,  &#123; areStatesEqual, areOwnPropsEqual, areStatePropsEqual &#125; &#x2F;&#x2F;判断 state prop 是否相等) &#123;  let hasRunAtLeastOnce &#x3D; false  let state  let ownProps  let stateProps  let dispatchProps  let mergedProps   &#x2F;* 第一次 直接形成 ownProps  stateProps  dispatchProps 合并  形成新的 props *&#x2F;  function handleFirstCall(firstState, firstOwnProps) &#123;    state &#x3D; firstState    ownProps &#x3D; firstOwnProps    &#x2F;&#x2F;获取业务组件中mapStateToProps函数的返回值    stateProps &#x3D; mapStateToProps(state, ownProps)    &#x2F;&#x2F;获取业务组件中mapDispatchToProps函数的返回值    dispatchProps &#x3D; mapDispatchToProps(dispatch, ownProps)    &#x2F;&#x2F;合并state、dispatch、组件自身的props，形成最终传递给组件的props    mergedProps &#x3D; mergeProps(stateProps, dispatchProps, ownProps)    hasRunAtLeastOnce &#x3D; true    return mergedProps  &#125;    function handleNewPropsAndNewState() &#123;    &#x2F;&#x2F;  props 和 state 都改变  mergeProps   &#125;  function handleNewProps() &#123;    &#x2F;&#x2F; props 改变  mergeProps  &#125;  function handleNewState() &#123;     &#x2F;&#x2F; state 改变 mergeProps  &#125;  &#x2F;*  不是第一次的情况 props 或者 store.state 发生改变的情况。 *&#x2F;  function handleSubsequentCalls(nextState, nextOwnProps) &#123;      &#x2F;* 判断两次 props 是否相等 *&#x2F;    const propsChanged &#x3D; !areOwnPropsEqual(nextOwnProps, ownProps)       &#x2F;* 判断两次 store.state 是否相等 *&#x2F;    const stateChanged &#x3D; !areStatesEqual(nextState, state)    state &#x3D; nextState    ownProps &#x3D; nextOwnProps        &#x2F;&#x2F;根据改变的类型不同，返回对应合并策略下的props    if (propsChanged &amp;&amp; stateChanged) return handleNewPropsAndNewState()    if (propsChanged) return handleNewProps()    if (stateChanged) return handleNewState()    return mergedProps  &#125;    &#x2F;&#x2F;根据是否第一次形成props，执行对应方法  return function pureFinalPropsSelector(nextState, nextOwnProps) &#123;    return hasRunAtLeastOnce      ? handleSubsequentCalls(nextState, nextOwnProps)      : handleFirstCall(nextState, nextOwnProps)  &#125;&#125;</code></pre><h2 id="connectHOC"><a href="#connectHOC" class="headerlink" title="connectHOC"></a>connectHOC</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const mapStateToProp &#x3D; (store) &#x3D;&gt; (&#123; userInfo: store.root.userInfo &#125;)function Index()&#123;    &#x2F;* ..... *&#x2F;    return &lt;div&gt; &#123; &#x2F;* .... *&#x2F; &#125; &lt;&#x2F;div&gt;&#125;export default connect(mapStateToProp)(Index)</code></pre><ul><li>connect(mapStateToProp)&#x3D;&#x3D;&#x3D;connectAdvanced()</li></ul><details class="custom-details"><summary>点击查看更多</summary><p><ul><li>这部分代码，在8.x.x版本在conncet中直接处理，并没有拆分为单独函数</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function connectAdvanced(  selectorFactory, &#x2F;&#x2F; 每次 props,state改变执行 ，用于生成新的 props。  &#123;    getDisplayName &#x3D; name &#x3D;&gt; &#96;ConnectAdvanced($&#123;name&#125;)&#96;,    &#x2F;&#x2F;可能被包装函数（如connect（））重写    methodName &#x3D; &#39;connectAdvanced&#39;,    &#x2F;&#x2F;如果定义了，则传递给包装元素的属性的名称，指示要呈现的调用。用于监视react devtools中不必要的重新渲染。    renderCountProp &#x3D; undefined,    shouldHandleStateChanges &#x3D; true,  &#x2F;&#x2F;确定此HOC是否订阅存储更改    storeKey &#x3D; &#39;store&#39;,    withRef &#x3D; false,    forwardRef &#x3D; false, &#x2F;&#x2F; 是否 用 forwarRef 模式    context &#x3D; ReactReduxContext,&#x2F;&#x2F; Provider 保存的上下文    ...connectOptions  &#125; &#x3D; &#123;&#125;) &#123;  &#x2F;* ReactReduxContext 就是store存在的context *&#x2F;  const Context &#x3D; context   &#x2F;* WrappedComponent 为connect 包裹的组件本身  *&#x2F;     return  function wrapWithConnect(WrappedComponent)&#123;      &#x2F;&#x2F; WrappedComponent 被 connect 的业务组件本身  &#125;&#125;</code></pre><ul><li>拿到Provider提供的context上下文</li></ul></p></details><h2 id="wrapWithConnect"><a href="#wrapWithConnect" class="headerlink" title="wrapWithConnect"></a>wrapWithConnect</h2><p>wrapWithConnect作为高阶组件，会返回一个组件，这个组件会对原有的业务组件，进行一系列增强等工作<br>判断是否是 pure 纯组件模式，如果是用react.memo包裹,这样做的好处是，会向 pureComponent 一样对 props 进行浅比较<br>如果 connect 有forwardRef配置项，用React.forwardRef处理</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">function wrapWithConnect(WrappedComponent) &#123;&#x2F;&#x2F;WrappedComponent为实际传递的业务组件    const wrappedComponentName &#x3D;      WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;      const displayName &#x3D; getDisplayName(wrappedComponentName)        &#x2F;&#x2F;要合并都内容，connectOptions为上一步闭包拿到的内容    const selectorFactoryOptions &#x3D; &#123;      ...connectOptions,      getDisplayName,      methodName,      renderCountProp,      shouldHandleStateChanges,      storeKey,      displayName,      wrappedComponentName,      WrappedComponent    &#125;    const &#123; pure &#125; &#x3D; connectOptions        &#x2F;&#x2F;selectorFactory为finalPropsSelectorFactory    function createChildSelector(store) &#123;      &#x2F;&#x2F; 合并函数 mergeprops 得到最新的props      &#x2F;&#x2F; 及默认返回pureFinalPropsSelectorFactory，会根据是否第一次合并、修改类型等进行不同策略等合并以及返回最终都props      return selectorFactory(store.dispatch, selectorFactoryOptions)    &#125;    &#x2F;&#x2F;判断是否是pure纯组件模式 如果是将用 useMemo 缓存组件提升性能    const usePureOnlyMemo &#x3D; pure ? useMemo : callback &#x3D;&gt; callback()    &#x2F;&#x2F; 负责更新的容器子组件，可以看作是实际渲染的类组件    function ConnectFunction (props)&#123;        &#x2F;&#x2F; props 为 业务组件 真正的 props     &#125;    &#x2F;&#x2F;如果    const Connect &#x3D; pure ? React.memo(ConnectFunction) : ConnectFunction      Connect.WrappedComponent &#x3D; WrappedComponent    Connect.displayName &#x3D; displayName    &#x2F;* forwardRef *&#x2F;    if (forwardRef) &#123;      const forwarded &#x3D; React.forwardRef(function forwardConnectRef(        props,        ref      ) &#123;      &#x2F;&#x2F;connect中是否传递了forwardRef选项        return &lt;Connect &#123;...props&#125; reactReduxForwardedRef&#x3D;&#123;ref&#125; &#x2F;&gt;      &#125;)        forwarded.displayName &#x3D; displayName      forwarded.WrappedComponent &#x3D; WrappedComponent      &#x2F;&#x2F;hoistStatics为一个第三方库，负责把一个类中的静态属性拷贝到另一个类中      return hoistStatics(forwarded, WrappedComponent)    &#125;      return hoistStatics(Connect, WrappedComponent)  &#125;&#125;</code></pre><h2 id="为何要传递forwardRef？"><a href="#为何要传递forwardRef？" class="headerlink" title="为何要传递forwardRef？"></a>为何要传递forwardRef？</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">connect(mapStateToProp,mapDispatchToProps,mergeProps,&#123; forwardRef:true  &#125;)(Child)</code></pre><p>如果不传递，而是在其他组件中直接放ref到使用了connect的组件，则ref实际应用到的是ConncectFunction组件，而非真正的WrappedComponent组件<br>所以react-redux提供forwardRef选项，使用React.forwardRef，将ref实际放到真正的WrappedComponent上</p><h2 id="ConnectFunction"><a href="#ConnectFunction" class="headerlink" title="ConnectFunction"></a>ConnectFunction</h2><ul><li><p>实际渲染的组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">function ConnectFunction(props) &#123;    &#x2F;* TODO:  第一步 把 context ForwardedRef props 取出来 *&#x2F;    &#x2F;&#x2F;取出forwardRef和传递给ConnectFunction的所有除forwardRef的props    &#x2F;&#x2F;除了forwardRef以外的props也就是实际业务代码中传递给conncec包裹组件都props    const [      reactReduxForwardedRef,      wrapperProps &#x2F;&#x2F; props 传递的props    ] &#x3D; useMemo(() &#x3D;&gt; &#123;      const &#123; reactReduxForwardedRef, ...wrapperProps &#125; &#x3D; props      return [reactReduxForwardedRef, wrapperProps]    &#125;, [props])   &#x2F;&#x2F; 获取上层Provider提供的context，多个Provider只会取最近的Provider    &#x2F;&#x2F; 获取 context内容 里面含有  redux 中store 和 subscription    const contextValue &#x3D; useContext(Context)    &#x2F;&#x2F;TODO: 判断 store 是否来自props  didStoreComeFromProps ,正常情况下 ，prop 中是不存在 store 所以  didStoreComeFromProps &#x3D; false    const didStoreComeFromProps &#x3D;      Boolean(props.store) &amp;&amp;      Boolean(props.store.getState) &amp;&amp;      Boolean(props.store.dispatch)    &#x2F;&#x2F;store是否来自Provider提供的上下文    const didStoreComeFromContext &#x3D;      Boolean(contextValue) &amp;&amp; Boolean(contextValue.store)    &#x2F;&#x2F;根据两种情况获取store    const store &#x3D; didStoreComeFromProps ? props.store : contextValue.store          &#x2F;&#x2F;返回merge函数 用于生成真正传给子组件 props    const childPropsSelector &#x3D; useMemo(() &#x3D;&gt; &#123;    &#x2F;&#x2F;默认情况下pure为true，返回的是pureFinalPropsSelectorFactory      return createChildSelector(store)    &#125;, [store])    &#x2F;&#x2F; TODO:  第二步  创建connect组件自身的subscription 监听者实例      const [subscription, notifyNestedSubs] &#x3D; useMemo(() &#x3D;&gt; &#123;        &#x2F;&#x2F; 如果没有订阅更新，那么直接返回，默认情况下开启了订阅      if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY&#x2F;&#x2F;为每一个conncet的组件创建订阅器，获取上层Provider提供的contextValue.subscription&#x2F;&#x2F;connct的组件获取的是上层的Provder提供的subscription，有多个Provider，只会取层级最近的一个&#x2F;&#x2F;所以connect中的connect组件，获取到的是离它最近的Provider中的订阅器，通过它来管理自身的listener更新函数      const subscription &#x3D; new Subscription(        store,        didStoreComeFromProps ? null : contextValue.subscription &#x2F;&#x2F; 和 上级 &#96;subscription&#96; 建立起关系。 this.parentSub &#x3D; contextValue.subscription      )      &#x2F;&#x2F; notifyNestedSubs 触发 noticy 所有子代 listener 监听者 -&gt; 触发batch方法,触发 batchupdate方法 ,批量更新      &#x2F;&#x2F;并更新一下this指向      const notifyNestedSubs &#x3D; subscription.notifyNestedSubs.bind(        subscription      )      return [subscription, notifyNestedSubs]    &#125;, [store, didStoreComeFromProps, contextValue])    &#x2F;*  创建出一个新的contextValue ,把父级的 subscription 换成自己的 subscription   *&#x2F;    const overriddenContextValue &#x3D; useMemo(() &#x3D;&gt; &#123;         if (didStoreComeFromProps) &#123;         return contextValue      &#125;      &#x2F;&#x2F;默认情况下，返回自身的订阅器以及redux中的store给自身的子代connect中获取      return &#123;        ...contextValue,        subscription      &#125;    &#125;, [didStoreComeFromProps, contextValue, subscription])        &#x2F;&#x2F;定义了一个useReducer，当actualChildProps变化时，调用dispatch方法forceComponentUpdateDispatch进行组件更新    const [      [previousStateUpdateResult], &#x2F;&#x2F;调用dispatch更新后的内容      forceComponentUpdateDispatch  &#x2F;*  *&#x2F;    ] &#x3D; useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates)    &#x2F;&#x2F; TODO: 第三步缓存组件本次的props等内容，在下一次组件更新时做比较    const lastChildProps &#x3D; useRef() &#x2F;&#x2F;保存上一次 合并过的 props信息（经过 ownprops ,stateProps , dispatchProps 合并过的 ）    const lastWrapperProps &#x3D; useRef(wrapperProps) &#x2F;&#x2F;保存本次业务组件的 props     const childPropsFromStoreUpdate &#x3D; useRef() &#x2F;&#x2F;用来保存更新后的最新的props    const renderIsScheduled &#x3D; useRef(false) &#x2F;&#x2F; 当前组件是否处于渲染阶段        &#x2F;&#x2F; actualChildProps 为当前真正处理过后，经过合并的 props    const actualChildProps &#x3D; usePureOnlyMemo(() &#x3D;&gt; &#123;        &#x2F;&#x2F; 调用 mergeProps 进行合并，返回合并后的最新 porps        &#x2F;&#x2F;及调用pureFinalPropsSelectorFactory后的合并结果      return childPropsSelector(store.getState(), wrapperProps)         &#x2F;&#x2F;会在store、调用了checkForUpdates、传递给组建的props发生变化后，重新计算获取合并后的props     &#125;, [store, previousStateUpdateResult, wrapperProps])   &#x2F;* 负责更新缓存变量，方便下一次更新的时候比较 *&#x2F;    useEffect(()&#x3D;&gt;&#123;      captureWrapperProps(...[          lastWrapperProps,          lastChildProps,          renderIsScheduled,          wrapperProps,          actualChildProps,          childPropsFromStoreUpdate,          notifyNestedSubs       ])    &#125;)        &#x2F;&#x2F;实际订阅更新组件的地方    useEffect(()&#x3D;&gt;&#123;        subscribeUpdates(...[        shouldHandleStateChanges,        store,        subscription,        childPropsSelector,        lastWrapperProps,        lastChildProps,        renderIsScheduled,        childPropsFromStoreUpdate,        notifyNestedSubs,        forceComponentUpdateDispatch       ])    &#125;,[store, subscription, childPropsSelector])    &#x2F;&#x2F; TODO: 第四步：渲染实际挂载的组件，通过useMemo进行组件的缓存    const renderedWrappedComponent &#x3D; useMemo(      () &#x3D;&gt; (        &lt;WrappedComponent          &#123;...actualChildProps&#125;          ref&#x3D;&#123;reactReduxForwardedRef&#125;        &#x2F;&gt;      ),      &#x2F;&#x2F;当actualChildProps发生变化的时候重新渲染组件      &#x2F;&#x2F;这里就是组件重新渲染的原因：主要通过监听actualChildProps的变化      [reactReduxForwardedRef, WrappedComponent, actualChildProps]    )    &#x2F;&#x2F; 将上一步的renderedWrappedComponent包裹一层Provider    &#x2F;&#x2F; 提供该connect组件自身的订阅器、store给子代中的connect组件获取    const renderedChild &#x3D; useMemo(() &#x3D;&gt; &#123;      &#x2F;&#x2F;shouldHandleStateChanges 来源 connect是否有第一个参数      if (shouldHandleStateChanges) &#123;        return (          &#x2F;&#x2F; ContextToUse 传递 context           &lt;ContextToUse.Provider value&#x3D;&#123;overriddenContextValue&#125;&gt;            &#123;renderedWrappedComponent&#125;          &lt;&#x2F;ContextToUse.Provider&gt;        )      &#125;      return renderedWrappedComponent    &#125;, [ContextToUse, renderedWrappedComponent, overriddenContextValue])    return renderedChild  &#125;</code></pre></li><li><p>创建该connect组件自身的subscription, 并使用Provider包裹，层层传递新的context(很重要)</p></li><li><p>所以connect组件的子代connect组件，获取到的都是其上层最近的connect提供的Provider中的订阅器，然后将更新函数checkForUpdates放进其中管理</p></li><li><p>然后通过 useMemo 创建出一个新的 contextValue ,把父级的 subscription 换成自己的 subscription。用于通过 Provider 传递新的 context</p></li><li><p>接下来通过useReducer制造出真正触发更新的forceComponentUpdateDispatch 这个dispatch函数。也就是整个 state 或者是 props改变，触发组件更新的函数，这个函数放进checkForUpdates中执行</p></li></ul><h2 id="captureWrapperProps"><a href="#captureWrapperProps" class="headerlink" title="captureWrapperProps"></a>captureWrapperProps</h2><ul><li>进行内容缓存，为了下次组件更新进行比较<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;获取包装的props function captureWrapperProps(  lastWrapperProps,  lastChildProps,  renderIsScheduled,  wrapperProps,  actualChildProps,  childPropsFromStoreUpdate,  notifyNestedSubs) &#123;  lastWrapperProps.current &#x3D; wrapperProps  &#x2F;&#x2F;子props   lastChildProps.current &#x3D; actualChildProps &#x2F;&#x2F;经过 megeprops 之后形成的新prop  renderIsScheduled.current &#x3D; false  &#x2F;&#x2F; 当前组件渲染完成&#125;</code></pre></li></ul><h2 id="subscribeUpdates"><a href="#subscribeUpdates" class="headerlink" title="subscribeUpdates"></a>subscribeUpdates</h2><ul><li><p>实际添加更新回调的地方</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function subscribeUpdates(  shouldHandleStateChanges,  store,  subscription,  childPropsSelector,  lastWrapperProps,  &#x2F;&#x2F;子props   lastChildProps, &#x2F;&#x2F;经过 megeprops 之后形成的 prop  renderIsScheduled,  childPropsFromStoreUpdate,  notifyNestedSubs,  forceComponentUpdateDispatch) &#123;  if (!shouldHandleStateChanges) return   &#x2F;&#x2F; 捕获值以检查此组件是否卸载以及何时卸载  let didUnsubscribe &#x3D; false  let lastThrownError &#x3D; null   &#x2F;&#x2F;store更新订阅传播到此组件时，运行此回调  const checkForUpdates &#x3D; ()&#x3D;&gt;&#123;      &#x2F;&#x2F;....  &#125;  &#x2F;&#x2F;将checkForUpdates作为listener  subscription.onStateChange &#x3D; checkForUpdates  &#x2F;&#x2F;开启订阅者 ，当前是被connect 包转的情况 会把 当前的 checkForceUpdate 放在存入 父元素的addNestedSub中。  subscription.trySubscribe()  &#x2F;&#x2F;在第一次呈现之后从存储中提取数据，以防存储从我们开始就改变了。  &#x2F;&#x2F;确保获取到的最新的store.getState,然后判断是否更新组件  checkForUpdates()  &#x2F;* 卸载订阅起 *&#x2F;  const unsubscribeWrapper &#x3D; () &#x3D;&gt; &#123;    didUnsubscribe &#x3D; true    subscription.tryUnsubscribe()    subscription.onStateChange &#x3D; null  &#125;  return unsubscribeWrapper&#125;</code></pre></li><li><p>首先声明 store 更新订阅传播到此组件时的回调函数checkForUpdates把它赋值给onStateChange,如果store中的state发生改变，那么在组件订阅了state内容之后，相关联的state改变就会触发当前组件的onStateChange,来合并得到新的props</p></li><li><p>subscription.trySubscribe()把订阅函数onStateChange绑定给父级subscription,进行了层层订阅</p></li><li><p>为了确保拿到的store内容是最新的，所以首先执行了一次checkForUpdates<br><img src="https://img-blog.csdnimg.cn/d03af8b00dcd4deaad5bcb09c5cc2903.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56We5aWH5aSn5Y-U,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="checkForUpdates"><a href="#checkForUpdates" class="headerlink" title="checkForUpdates"></a>checkForUpdates</h2></li><li><p>判断是否需要更新的函数</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F;store更新订阅传播到此组件时，运行此回调const checkForUpdates &#x3D; () &#x3D;&gt; &#123;  if (didUnsubscribe) &#123;    &#x2F;&#x2F;如果取消订阅了    return  &#125;   &#x2F;&#x2F; 获取 store 里state  const latestStoreState &#x3D; store.getState()q  let newChildProps, error  try &#123;    &#x2F;* 得到最新的 props *&#x2F;    newChildProps &#x3D; childPropsSelector(      latestStoreState,      lastWrapperProps.current    )  &#125;   &#x2F;&#x2F;如果新的合并的 props没有更改，则此处不做任何操作-层叠订阅更新  if (newChildProps &#x3D;&#x3D;&#x3D; lastChildProps.current) &#123;     if (!renderIsScheduled.current) &#123;        notifyNestedSubs() &#x2F;* 通知子代 subscription 触发 checkForUpdates 来检查是否需要更新。 *&#x2F;    &#125;  &#125; else &#123;    lastChildProps.current &#x3D; newChildProps    childPropsFromStoreUpdate.current &#x3D; newChildProps    renderIsScheduled.current &#x3D; true    &#x2F;&#x2F; 触发useReducer的dispatch来进行更新，该dispatch会改变useReducer返回的previousStateUpdateResult    &#x2F;&#x2F; 而previousStateUpdateResult是作为actualChildProps的依赖项引发actualChildProps的改变    &#x2F;&#x2F; actualChildProps又是实际渲染组件的依赖性，从而引发组件的重新渲染更新    forceComponentUpdateDispatch(&#123;      type: &#39;STORE_UPDATED&#39;,      payload: &#123;        error      &#125;    &#125;)  &#125;&#125;</code></pre></li><li><p>checkForUpdates 通过调用 childPropsSelector来形成新的props,然后判断之前的 prop 和当前新的 prop 是否相等。如果相等，证明没有发生变化,无须更新当前组件，那么通过调用notifyNestedSubs来通知子代容器组件，检查是否需要更新。如果不相等证明订阅的store.state发生变化，那么立即执行forceComponentUpdateDispatch来触发组件的更新</p></li></ul><h2 id="整个订阅流程"><a href="#整个订阅流程" class="headerlink" title="整个订阅流程"></a>整个订阅流程</h2><p>整个订阅的流程是，如果被connect包裹，并且具有第一个参数。首先通过context获取最近的 subscription，然后创建一个新的subscription,并且和父级的subscription建立起关联。当第一次hoc容器组件挂在完成后，在useEffect里，进行订阅，将自己的订阅函数checkForUpdates,作为回调函数，通过trySubscribe 和this.parentSub.addNestedSub ,加入到父级subscription的listeners中。由此完成整个订阅流程</p><h2 id="整个发布流程"><a href="#整个发布流程" class="headerlink" title="整个发布流程"></a>整个发布流程</h2><p>整个更新流程是，当组件中调用dispatch触发了redux的state改变和redux的订阅器，从而触发根订阅器的触发listeners.notify ,也就是checkForUpdates函数，然后checkForUpdates函数首先根据mapStoretoprops，mergeprops等操作，验证该组件是否发起订阅，props 是否改变，并更新，如果发生改变，那么触发useReducer的forceComponentUpdateDispatch函数，来更新业务组件，如果没有发生更新，那么通过调用notifyNestedSubs,来通知当前subscription的listeners检查是否更新，然后尽心层层checkForUpdates,逐级向下，借此完成整个更新流程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>connect使用柯里化</li><li>useMemo缓存渲染组件的操作</li><li>发布订阅模式以及通过双向链表来管理</li><li>如何通过Provider进行层层订阅</li><li>react-redux触发更新的依据是actualChildProps是否改变</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_43294560/article/details/123284317">react-redux源码解析</a><br><a href="https://github.com/841660202/react-redux">github 源码</a><br><a href="https://blog.csdn.net/qq_33715850/article/details/122535984">React-redux源码解析–准备知识</a><br><a href="https://blog.csdn.net/qq_33715850/article/details/122590433">React-redux源码解析</a></p>]]></content>
      
      
      <categories>
          
          <category> react-redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-redux </tag>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux 源码1</title>
      <link href="//post/2022-05-24react-redux.html"/>
      <url>//post/2022-05-24react-redux.html</url>
      
        <content type="html"><![CDATA[<h2 id="react-redux官方介绍"><a href="#react-redux官方介绍" class="headerlink" title="react-redux官方介绍"></a>react-redux官方介绍</h2><ul><li>官方UI绑定层。 React Redux is the <code>official React UI bindings layer</code> for Redux. </li><li>从redux的store读数据。 It lets your React components <code>read data from a Redux store</code>,</li><li>触发行为给store来更新状态。and <code>dispatch actions to the store to update state</code>.</li></ul><h2 id="react-redux-源码"><a href="#react-redux-源码" class="headerlink" title="react-redux 源码"></a>react-redux 源码</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.├── alternate-renderers.ts├── components│   ├── Context.ts│   ├── Provider.tsx│   └── connect.tsx # 大部分代码都在这里├── connect # 给 connect.tsx使用│   ├── invalidArgFactory.ts│   ├── mapDispatchToProps.ts│   ├── mapStateToProps.ts│   ├── mergeProps.ts│   ├── selectorFactory.ts│   ├── verifySubselectors.ts│   └── wrapMapToProps.ts├── exports.ts├── hooks│   ├── useDispatch.ts│   ├── useReduxContext.ts│   ├── useSelector.ts│   └── useStore.ts├── index.ts├── next.ts├── types.ts└── utils    ├── Subscription.ts    ├── batch.ts    ├── bindActionCreators.ts    ├── isPlainObject.ts    ├── reactBatchedUpdates.native.ts    ├── reactBatchedUpdates.ts    ├── shallowEqual.ts    ├── useIsomorphicLayoutEffect.native.ts    ├── useIsomorphicLayoutEffect.ts    ├── useSyncExternalStore.ts    ├── verifyPlainObject.ts    └── warning.ts</code></pre><h2 id="packge-json"><a href="#packge-json" class="headerlink" title="packge.json"></a>packge.json</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; packge.json&#123;  &quot;name&quot;: &quot;react-redux&quot;,  &quot;version&quot;: &quot;8.0.2&quot;,  &quot;description&quot;: &quot;Official React bindings for Redux&quot;,  &quot;keywords&quot;: [    &quot;react&quot;,    &quot;reactjs&quot;,    &quot;redux&quot;  ],  &quot;license&quot;: &quot;MIT&quot;,  &quot;author&quot;: &quot;Dan Abramov &lt;dan.abramov@me.com&gt; (https:&#x2F;&#x2F;github.com&#x2F;gaearon)&quot;,  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&quot;,  &quot;repository&quot;: &quot;github:reduxjs&#x2F;react-redux&quot;,  &quot;bugs&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&#x2F;issues&quot;,  &#x2F;&#x2F; 找找入口，入口有3种：  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;index.js&quot;, &#x2F;&#x2F; 常规操作入口  &quot;types&quot;: &quot;.&#x2F;es&#x2F;index.d.ts&quot;, &#x2F;&#x2F; 类型入口  &quot;unpkg&quot;: &quot;dist&#x2F;react-redux.js&quot;, &#x2F;&#x2F; cdn入口  &quot;module&quot;: &quot;es&#x2F;index.js&quot;,&#x2F;&#x2F;esm入口  &#x2F;&#x2F; npm发布上传的文件  &quot;files&quot;: [    &quot;dist&quot;,    &quot;lib&quot;,    &quot;src&quot;, &#x2F;&#x2F; 一般用于开发阶段代码调试,soucemap    &quot;es&quot;  ],  &quot;scripts&quot;: &#123;    &#x2F;&#x2F; 脚本不看了...  &#125;,  &#x2F;&#x2F; 配置了依赖项，这些依赖项不需要在本包安装，在项目中安装即可  &quot;peerDependencies&quot;: &#123;    &quot;@types&#x2F;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,    &quot;@types&#x2F;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,    &quot;react&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,    &quot;react-dom&quot;: &quot;^16.8 || ^17.0 || ^18.0&quot;,    &quot;react-native&quot;: &quot;&gt;&#x3D;0.59&quot;,    &quot;redux&quot;: &quot;^4&quot;  &#125;,  &quot;peerDependenciesMeta&quot;: &#123;    &quot;@types&#x2F;react&quot;: &#123;      &quot;optional&quot;: true    &#125;,    &quot;@types&#x2F;react-dom&quot;: &#123;      &quot;optional&quot;: true    &#125;,    &quot;react-dom&quot;: &#123;      &quot;optional&quot;: true    &#125;,    &quot;react-native&quot;: &#123;      &quot;optional&quot;: true    &#125;,    &quot;redux&quot;: &#123;      &quot;optional&quot;: true    &#125;  &#125;,  &#x2F;&#x2F; 发布后，业务开发者使用，需要安装，&#x2F;&#x2F;自动安装  &quot;dependencies&quot;: &#123;    &quot;@babel&#x2F;runtime&quot;: &quot;^7.12.1&quot;,    &quot;@types&#x2F;hoist-non-react-statics&quot;: &quot;^3.3.1&quot;,    &quot;@types&#x2F;use-sync-external-store&quot;: &quot;^0.0.3&quot;,    &quot;hoist-non-react-statics&quot;: &quot;^3.3.2&quot;,    &quot;react-is&quot;: &quot;^18.0.0&quot;,    &quot;use-sync-external-store&quot;: &quot;^1.0.0&quot;  &#125;,  &#x2F;&#x2F; 开发阶段需要用到的，一般是examples中demo使用  &quot;devDependencies&quot;: &#123;    &#x2F;&#x2F;...  &#125;&#125;</code></pre><h2 id="exports-ts"><a href="#exports-ts" class="headerlink" title="exports.ts"></a>exports.ts</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export &#123;  Provider, &#x2F;&#x2F; import Provider from &#39;.&#x2F;components&#x2F;Provider&#39;  ReactReduxContext, &#x2F;&#x2F; import &#123; ReactReduxContext &#125; from &#39;.&#x2F;components&#x2F;Context&#39;  connect, &#x2F;&#x2F; import connect from &#39;.&#x2F;components&#x2F;connect&#39;  useDispatch, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;  createDispatchHook, &#x2F;&#x2F; import &#123; useDispatch, createDispatchHook &#125; from &#39;.&#x2F;hooks&#x2F;useDispatch&#39;  useSelector, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;  createSelectorHook, &#x2F;&#x2F; import &#123; useSelector, createSelectorHook &#125; from &#39;.&#x2F;hooks&#x2F;useSelector&#39;  useStore, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;  createStoreHook, &#x2F;&#x2F; import &#123; useStore, createStoreHook &#125; from &#39;.&#x2F;hooks&#x2F;useStore&#39;  shallowEqual, &#x2F;&#x2F; import shallowEqual from &#39;.&#x2F;utils&#x2F;shallowEqual&#39;&#125;</code></pre><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p>先看下 ，最熟悉的api</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; components&#x2F;Provider.tsx&#x2F;&#x2F; 这个组件做的事情&#x2F;&#x2F; 1. 合并浏览器和服务器的状态&#x2F;&#x2F; 2. 对于同构的应用，处理subscription订阅function Provider&lt;A extends Action &#x3D; AnyAction&gt;(&#123;  store,  context,  children,  serverState,&#125;: ProviderProps&lt;A&gt;) &#123;  &#x2F;&#x2F; 1.useMemo，对入参进行格式化「处理了store和 服务端的 serverState」  const contextValue &#x3D; useMemo(() &#x3D;&gt; &#123;    const subscription &#x3D; createSubscription(store)    return &#123;      store,      subscription,      getServerState: serverState ? () &#x3D;&gt; serverState : undefined,    &#125;  &#125;, [store, serverState])  &#x2F;&#x2F; 2.之前的state状态从store中直接获取  const previousState &#x3D; useMemo(() &#x3D;&gt; store.getState(), [store])  &#x2F;&#x2F; 3.同构相关，跳过  useIsomorphicLayoutEffect(() &#x3D;&gt; &#123;    const &#123; subscription &#125; &#x3D; contextValue    subscription.onStateChange &#x3D; subscription.notifyNestedSubs    subscription.trySubscribe()    if (previousState !&#x3D;&#x3D; store.getState()) &#123;      subscription.notifyNestedSubs()    &#125;    return () &#x3D;&gt; &#123;      subscription.tryUnsubscribe()      subscription.onStateChange &#x3D; undefined    &#125;  &#125;, [contextValue, previousState])  &#x2F;&#x2F; 4.react-redux上下文  const Context &#x3D; context || ReactReduxContext  &#x2F;&#x2F; @ts-ignore &#39;AnyAction&#39; is assignable to the constraint of type &#39;A&#39;, but &#39;A&#39; could be instantiated with a different subtype  return &lt;Context.Provider value&#x3D;&#123;contextValue&#125;&gt;&#123;children&#125;&lt;&#x2F;Context.Provider&gt; &#x2F;&#x2F; 这行代码是不是非常熟悉了&#125;export default Provider</code></pre><h2 id="ReactReduxContext"><a href="#ReactReduxContext" class="headerlink" title="ReactReduxContext"></a>ReactReduxContext</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; .&#x2F;components&#x2F;Context.tsx&#x2F;&#x2F; 这个组件做的事情&#x2F;&#x2F; 1.创建个createContext&#x2F;&#x2F; 2.给个名字displayName&#x2F;&#x2F; ...类型代码不关注export const ReactReduxContext &#x3D;&#x2F;*#__PURE__*&#x2F; React.createContext&lt;ReactReduxContextValue&gt;(null as any)&#x2F;&#x2F; ...类型代码不关注if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;  ReactReduxContext.displayName &#x3D; &#39;ReactRedux&#39;&#125;export default ReactReduxContext</code></pre><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; .&#x2F;components&#x2F;connect.tsx&#x2F;&#x2F; 这个文件比较长，先不看&#x2F;&#x2F; hoist-non-react-statics这个依赖可以帮助我们自动拷贝非React的静态方法</code></pre><h2 id="useDispatch、createDispatchHook"><a href="#useDispatch、createDispatchHook" class="headerlink" title="useDispatch、createDispatchHook"></a>useDispatch、createDispatchHook</h2><p>把ts类型删删，看上去更简单了</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; .&#x2F;hooks&#x2F;useDispatch&#x2F;&#x2F; 用createDispatchHook钩子工厂创建了个钩子useDispatchexport function createDispatchHook(context) &#123;  &#x2F;&#x2F; TODO: createStoreHook下面再看，先跳过  const useStore &#x3D; context &#x3D;&#x3D;&#x3D; ReactReduxContext ? useDefaultStore : createStoreHook(context)  return function useDispatch() &#123;    const store &#x3D; useStore()    &#x2F;&#x2F; @ts-ignore    return store.dispatch  &#125;&#125;&#x2F;** * A hook to access the redux &#96;dispatch&#96; function. * * @returns &#123;any|function&#125; redux store&#39;s &#96;dispatch&#96; function * * @example * * import React, &#123; useCallback &#125; from &#39;react&#39; * import &#123; useDispatch &#125; from &#39;react-redux&#39; * * export const CounterComponent &#x3D; (&#123; value &#125;) &#x3D;&gt; &#123; *   const dispatch &#x3D; useDispatch() *   const increaseCounter &#x3D; useCallback(() &#x3D;&gt; dispatch(&#123; type: &#39;increase-counter&#39; &#125;), []) *   return ( *     &lt;div&gt; *       &lt;span&gt;&#123;value&#125;&lt;&#x2F;span&gt; *       &lt;button onClick&#x3D;&#123;increaseCounter&#125;&gt;Increase counter&lt;&#x2F;button&gt; *     &lt;&#x2F;div&gt; *   ) * &#125; *&#x2F;export const useDispatch &#x3D; &#x2F;*#__PURE__*&#x2F; createDispatchHook()</code></pre><h2 id="useSelector、createSelectorHook"><a href="#useSelector、createSelectorHook" class="headerlink" title="useSelector、createSelectorHook"></a>useSelector、createSelectorHook</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; .&#x2F;hooks&#x2F;useSelector&#x2F;&#x2F; 用 createSelectorHook 钩子工厂创建了个钩子 useSelectorlet useSyncExternalStoreWithSelector &#x3D; notInitialized as uSESWSexport const initializeUseSelector &#x3D; (fn: uSESWS) &#x3D;&gt; &#123;  useSyncExternalStoreWithSelector &#x3D; fn&#125;const refEquality: EqualityFn&lt;any&gt; &#x3D; (a, b) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; b&#x2F;&#x2F; 下面的代码保留范型，Selectedexport function createSelectorHook(  context &#x3D; ReactReduxContext): &lt;TState &#x3D; unknown, Selected &#x3D; unknown&gt;(  selector: (state: TState) &#x3D;&gt; Selected,  equalityFn?: EqualityFn&lt;Selected&gt;) &#x3D;&gt; Selected &#123;  const useReduxContext &#x3D;    context &#x3D;&#x3D;&#x3D; ReactReduxContext      ? useDefaultReduxContext      : () &#x3D;&gt; useContext(context)  return function useSelector(    selector,    equalityFn &#x3D; refEquality  ) &#123;    const &#123; store, subscription, getServerState &#125; &#x3D; useReduxContext()!    const selectedState &#x3D; useSyncExternalStoreWithSelector(      subscription.addNestedSub,      store.getState,      getServerState || store.getState,      selector,      equalityFn    )    useDebugValue(selectedState) &#x2F;&#x2F; 标记    return selectedState  &#125;&#125;&#x2F;** * A hook to access the redux store&#39;s state. This hook takes a selector function * as an argument. The selector is called with the store state. * * This hook takes an optional equality comparison function as the second parameter * that allows you to customize the way the selected state is compared to determine * whether the component needs to be re-rendered. * * @param &#123;Function&#125; selector the selector function * @param &#123;Function&#x3D;&#125; equalityFn the function that will be used to determine equality * * @returns &#123;any&#125; the selected state * * @example * * import React from &#39;react&#39; * import &#123; useSelector &#125; from &#39;react-redux&#39; * * export const CounterComponent &#x3D; () &#x3D;&gt; &#123; *   const counter &#x3D; useSelector(state &#x3D;&gt; state.counter) *   return &lt;div&gt;&#123;counter&#125;&lt;&#x2F;div&gt; * &#125; *&#x2F;export const useSelector &#x3D; &#x2F;*#__PURE__*&#x2F; createSelectorHook()</code></pre><h2 id="useStore、createStoreHook"><a href="#useStore、createStoreHook" class="headerlink" title="useStore、createStoreHook"></a>useStore、createStoreHook</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 1.用钩子工厂创建了个钩子&#x2F;&#x2F; 2.从   const &#123; store &#125; &#x3D; useReduxContext()! 获取store&#x2F;** * Hook factory, which creates a &#96;useStore&#96; hook bound to a given context. * * @param &#123;React.Context&#125; [context&#x3D;ReactReduxContext] Context passed to your &#96;&lt;Provider&gt;&#96;. * @returns &#123;Function&#125; A &#96;useStore&#96; hook bound to the specified context. *&#x2F;export function createStoreHook&lt;  S &#x3D; unknown,  A extends BasicAction &#x3D; AnyAction  &#x2F;&#x2F; @ts-ignore&gt;(context?: Context&lt;ReactReduxContextValue&lt;S, A&gt;&gt; &#x3D; ReactReduxContext) &#123;  const useReduxContext &#x3D;    &#x2F;&#x2F; @ts-ignore    context &#x3D;&#x3D;&#x3D; ReactReduxContext      ? useDefaultReduxContext      : () &#x3D;&gt; useContext(context)  return function useStore&lt;    State &#x3D; S,    Action extends BasicAction &#x3D; A    &#x2F;&#x2F; @ts-ignore  &gt;() &#123;    const &#123; store &#125; &#x3D; useReduxContext()!    &#x2F;&#x2F; @ts-ignore    return store as Store&lt;State, Action&gt;  &#125;&#125;&#x2F;** * A hook to access the redux store. * * @returns &#123;any&#125; the redux store * * @example * * import React from &#39;react&#39; * import &#123; useStore &#125; from &#39;react-redux&#39; * * export const ExampleComponent &#x3D; () &#x3D;&gt; &#123; *   const store &#x3D; useStore() *   return &lt;div&gt;&#123;store.getState()&#125;&lt;&#x2F;div&gt; * &#125; *&#x2F;export const useStore &#x3D; &#x2F;*#__PURE__*&#x2F; createStoreHook()</code></pre><h2 id="connect-1"><a href="#connect-1" class="headerlink" title="connect"></a>connect</h2><p> 见：react-redux 源码2</p>]]></content>
      
      
      <categories>
          
          <category> react-redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-redux </tag>
            
            <tag> redux </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex width:0</title>
      <link href="//post/2022-05-23width0.html"/>
      <url>//post/2022-05-23width0.html</url>
      
        <content type="html"><![CDATA[<h2 id="flex嵌套"><a href="#flex嵌套" class="headerlink" title="flex嵌套"></a>flex嵌套</h2><p>内部元素宽度默认100%，撑开父元素，父元素的根元素限制最大宽度，子元素并不受flex控制</p><p>遇到多次了，这次是维护其他同事的代码，又撞见了，说明这个问题很常见，一个不留神，就踩到了</p><pre class="line-numbers language-none"><code class="language-none">根元素  ……  - 父元素flex  …… flex   - 子元素flex(默认宽度100%)</code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css">.doc-tree-base-title-node .doc-tree-base-title-text &gt; a &#123;    display: flex;    align-items: center;    color: #777;    white-space: nowrap;    overflow: hidden;    text-overflow: ellipsis;    flex: 1;&#125;</code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="http://t-blog-images.aijs.top/img/20220523171556.webp"></p><p> 观察下发现，flex是嵌套的，最外层的还是flex，一层一层，最外层的宽度，却是由最内层的宽度决定（这个调试可以看到）</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li>图1</li></ul><p> <img src="http://t-blog-images.aijs.top/img/20220523171802.webp"></p><ul><li>图2</li></ul><p> <img src="http://t-blog-images.aijs.top/img/20220523171918.webp"></p><ul><li>图3</li></ul><p> <img src="http://t-blog-images.aijs.top/img/20220523172024.webp"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p> 图1 元素没有宽度，宽度默认是<code>100%</code></p><p> 图1到图3是由a标签子元素撑开的，宽度是<code>100%</code>,加上操作按钮，元素宽度超100%</p><p> 而在侧边树结构的最外层设置了<code>max-width: 500px</code>,而内部子元素尺寸却是<code>599.48 x 36</code></p><p> 显然是不合理的</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2> <pre class="line-numbers language-none"><code class="language-none">根元素  ……  - 父元素flex  …… flex   - 子元素flex(默认宽度设置宽度0 或者其他小点的宽度，越小越好)</code></pre><p> <img src="http://t-blog-images.aijs.top/img/20220523173256.webp"></p><h2 id="什么原因导致的"><a href="#什么原因导致的" class="headerlink" title="什么原因导致的"></a>什么原因导致的</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex">MDN flex</a></p><p>语法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 关键字值 *&#x2F;flex: auto;flex: initial;flex: none;&#x2F;* 一个值, 无单位数字: flex-grow *&#x2F;flex: 2;&#x2F;* 一个值, width&#x2F;height: flex-basis *&#x2F;flex: 10em;flex: 30px;flex: min-content;&#x2F;* 两个值: flex-grow | flex-basis *&#x2F;flex: 1 30px;&#x2F;* 两个值: flex-grow | flex-shrink *&#x2F;flex: 2 2;&#x2F;* 三个值: flex-grow | flex-shrink | flex-basis *&#x2F;flex: 2 2 10%;&#x2F;*全局属性值 *&#x2F;flex: inherit;flex: initial;flex: unset;</code></pre><p>可以使用一个，两个或三个值来指定 flex属性。</p><p>1.<strong>单值语法</strong>: 值必须为以下其中之一:</p><ul><li>一个无单位数(<code>&lt;number&gt;</code>): 它会被当作flex:<number> 1 0; <flex-shrink>的值被假定为1，然后<flex-basis> 的值被假定为0。</li><li>一个有效的宽度(width)值: 它会被当作 <flex-basis>的值。</li><li>关键字none，auto或initial.</li></ul><p>2.<strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当作 <flex-shrink> 的值。</li><li>一个有效的宽度值: 它会被当作 <flex-basis> 的值。</li></ul><p>3.<strong>三值语法</strong>:</p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</li><li>第二个值必须为一个无单位数，并且它会被当作  <flex-shrink> 的值。</li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <flex-basis> 的值。</li></ul><p> 可以看到单值，作为双值处理</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css">flex-shrink:1;flex-basis: 0;</code></pre><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p> 自来看下<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis">flex-base</a></p><p> 查看文档后发现，文档上没说关于<code>flex-basic: 0 </code>的事情,给了个演示，也看不出来想表达什么</p><p><a href="https://blog.csdn.net/u010951953/article/details/124145786">flex-basis 属性的含义</a><br><a href="https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/#flex-basis-property">w3c flex-basis-property</a><br>flex布局一般由flex容器（display 属性值为 flex 或 inline-flex）和其子元素（后文亦称flex子项或flex item）构成。flex-basis 属性一般作用在flex子项上，它定义了：在flex容器分配剩余空间前flex子项在主轴方向上的初始尺寸。flex子项在主轴方向上的实际尺寸是根据元素自身尺寸、flex-basis、flex-grow、flex-shrink 等属性共同决定的。如何计算实际尺寸不是本文重点，不继续展开。</p><h2 id="flex-basis-0px与0"><a href="#flex-basis-0px与0" class="headerlink" title="flex-basis:0px与0%"></a>flex-basis:0px与0%</h2><ul><li>如果 flex-basis 的值为百分数，且它flex容器的尺寸没有被显式设置，此时 flex-basis 的值会被解析为 content</li><li></li></ul><h2 id="其他，值得一看"><a href="#其他，值得一看" class="headerlink" title="其他，值得一看"></a>其他，值得一看</h2><h2 id="flex-1"><a href="#flex-1" class="headerlink" title="flex: 1"></a>flex: 1</h2><p>在浏览器中，flex: 1 的 flex-basis 值为什么不是W3C文档中提到的 0 ？</p><p>当使用 flex 属性但又省略不写它其中的 flex-basis 值时，会将 flex-basis 设置为 0.</p><p>这里的 0 单位是 px 还是 % 我们在Chrome浏览器里就能验证：</p><img src="http://t-blog-images.aijs.top/img/20220523181618.webp" width=400  style="object-fit: content"/><p>答案是 px.</p><p>这段是2015年修正日志里的，意思是将之前 flex 简写语法里的 flex-basis 的解析值从 0% 恢复为原来的 0.</p><p>注意： 这个值的解析规则经历了 0px -&gt; 0% -&gt; 0px 的变化，这是W3C flex 标准文档的视角。</p><p>简而言之就是有兼容性问题。现在已有很多网页都利用了 flex 属性的这个特性来开发。如果简写语法里 flex-basis 的解析从 0% 变为 0px 会导致部分情况下flex容器塌陷，致使很多网页异常</p><p><a href="https://blog.csdn.net/u010951953/article/details/124145786">建议看原文</a></p>]]></content>
      
      
      <categories>
          
          <category> css3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS如何工作</title>
      <link href="//post/2022-05-23css.html"/>
      <url>//post/2022-05-23css.html</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当浏览器展示一个文件的时候，它必须兼顾文件的内容和文件的样式信息</p></blockquote><h2 id="如何加载CSS和HTML"><a href="#如何加载CSS和HTML" class="headerlink" title="如何加载CSS和HTML"></a>如何加载CSS和HTML</h2><p>下面的步骤是浏览加载网页的简化版本:</p><ol><li>浏览器载入HTML文件（比如从网络上获取）。</li><li>将HTML文件转化成一个DOM（Document Object Model），DOM是文件在计算机内存中的表现形式，下一节将更加详细的解释DOM。</li><li>接下来，浏览器会拉取该HTML相关的大部分资源，比如嵌入到页面的图片、视频和CSS样式。JavaScript则会稍后进行处理，简单起见，同时此节主讲CSS，所以这里对如何加载JavaScript不会展开叙述。</li><li>浏览器拉取到CSS之后会进行解析，根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）应用在对应的DOM的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><p><strong>运行图</strong></p><img src="http://t-blog-images.aijs.top/img/rendering.svg" width=400 style="object-fit:content; background: #fff"/><hr/><h2 id="无法解析的CSS会发生什么"><a href="#无法解析的CSS会发生什么" class="headerlink" title="无法解析的CSS会发生什么"></a>无法解析的CSS会发生什么</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>答案就是浏览器什么也不会做，继续解析下一个CSS样式！</p></blockquote><p>以下是废话：</p><ul><li><p>浏览器并不会同时实现所有的新CSS，此外很多人也不会使用最新版本的浏览器。鉴于CSS一直不断的开发，因此领先于浏览器可以识别的范围，那么你也许会好奇当浏览器遇到无法解析的CSS选择器或声明的时候会发生什么呢？</p></li><li><p>CSS规则： 如果一个浏览器在解析你所书写的CSS规则的过程中遇到了无法理解的属性或者值，它会忽略这些并继续解析下面的CSS声明。在你书写了错误的CSS代码（或者误拼写），又或者当浏览器遇到对于它来说很新的还没有支持的CSS代码的时候上述的情况同样会发生（直接忽略）。</p></li><li><p>选择器： 相似的，当浏览器遇到无法解析的选择器的时候，他会<code>直接忽略整个选择器规则</code>，然后解析下一个CSS选择器。</p></li></ul><hr/><h2 id="关于DOM"><a href="#关于DOM" class="headerlink" title="关于DOM"></a>关于DOM</h2><p>一个DOM有一个树形结构，标记语言中的每一个元素、属性以及每一段文字都对应着结构树中的一个节点（Node&#x2F;DOM或DOM node）。节点由节点本身和其他DOM节点的关系定义，有些节点有父节点，有些节点有兄弟节点（同级节点）。</p><p>对于DOM的理解会很大程度上帮助你设计、调试和维护你的CSS，因为DOM是你的CSS样式和文件内容的结合。当你使用浏览器F12调试的时候你需要操作DOM以查看使用了哪些规则。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;p&gt;  Let&#39;s use:  &lt;span&gt;Cascading&lt;&#x2F;span&gt;  &lt;span&gt;Style&lt;&#x2F;span&gt;  &lt;span&gt;Sheets&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">P├─ &quot;Let&#39;s use:&quot;├─ SPAN|  └─ &quot;Cascading&quot;├─ SPAN|  └─ &quot;Style&quot;└─ SPAN   └─ &quot;Sheets&quot;</code></pre><hr/><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/How_CSS_works">MDN</a></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monorepo</title>
      <link href="//post/2022-05-23monorepo.html"/>
      <url>//post/2022-05-23monorepo.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>调试源码时候，总会遇到多包的仓库，遇到了不晓得如何调试</li><li>开发个库或者是插件之类的开发的比较混乱</li><li>经历多个项目的毒打，终于有时间学下<code>monorepo</code></li></ul><h2 id="lerna、yarn-workspace"><a href="#lerna、yarn-workspace" class="headerlink" title="lerna、yarn workspace"></a>lerna、yarn workspace</h2><ul><li>和java微服务架构代码很像</li><li>很多项目是 lerna+yarn workspace，如果不懂，或者了解了一点<code>lerna</code>。上去一顿操作，各种报错，在所难免（亲身经历）</li></ul><h2 id="monorepo管理"><a href="#monorepo管理" class="headerlink" title="monorepo管理"></a>monorepo管理</h2><p>对于维护过多个package(功能相近)的同学来说，都会遇到一个选择题，这些package是放在一个仓库里维护还是放在多个仓库里单独维护。Multirepo 是比较传统的做法，即每一个 package 都单独用一个仓库来进行管理。Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块&#x2F;包 (package)，不同于常见的每个模块建一个 repo。</p><p>目前有不少大型开源项目采用了这种方式，如 Babel，React, Meteor, Ember, Angular,Jest, Umijs, Vue, 还有 create-react-app, react-router 等。几乎我们熟知的仓库，都无一例外的采用了monorepo 的方式，可以看到这些项目的第一级目录的内容以脚手架为主，主要内容都在 packages目录中、分多个 package 进行管理。</p><p>目录结构如下:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">├── packages|   ├── pkg1|   |   ├── package.json|   ├── pkg2|   |   ├── package.json├── package.json</code></pre><p>monorepo 最主要的好处是统一的工作流和Code Sharing。比如我想看一个 pacakge 的代码、了解某段逻辑，不需要找它的 repo，直接就在当前 repo；当某个需求要修改多个 pacakge 时，不需要分别到各自的 repo 进行修改、测试、发版或者 npm link，直接在当前 repo 修改，统一测试、统一发版。只要搭建一套脚手架，就能管理（构建、测试、发布）多个 package。</p><p>一图胜千言:<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOThmNTYwZDgxZDg"></p><p>前者允许多元化发展（各项目可以有自己的构建工具、依赖管理策略、单元测试方法），后者希望集中管理，减少项目间的差异带来的沟通成本。</p><p>虽然拆分子仓库、拆分子 npm 包是进行项目隔离的天然方案，但当仓库内容出现关联时，没有任何一种调试方式比源码放在一起更高效。</p><p>结合shop-service门户的实际场景和业务需要，天然的 MonoRepo ! 一个理想的开发环境可以抽象成这样：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>“只关心业务代码，可以直接跨业务复用而不关心复用方式，调试时所有代码都在源码中。”</p></blockquote><p>在前端开发环境中，多 Git Repo，多 npm 则是这个理想的阻力，它们导致复用要关心版本号，调试需要 npm link。而这些是 MonoRepo 最大的优势。</p><p>上图中提到的利用相关工具就是今天的主角 Lerna ! Lerna是业界知名度最高的 Monorepo 管理工具，功能完整。</p><h2 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h2><p>Lerna 是一个管理多个 npm 模块的工具，是 Babel 自己用来维护自己的 Monorepo 并开源出的一个项目。优化维护多包的工作流，解决多个包互相依赖，且发布需要手动维护多个包的问题。</p><p>2.1 安装<br>推荐全局安装，因为会经常用到 lerna 命令</p><pre class="line-numbers language-none"><code class="language-none">npm i -g lerna</code></pre><p>2.2 初始化项目</p><pre class="line-numbers language-none"><code class="language-none">lerna init</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWE5MDhiMTkyOWQ"></p><p>其中 package.json &amp; lerna.json 如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; package.json&#123;  &quot;name&quot;: &quot;root&quot;,  &quot;private&quot;: true, &#x2F;&#x2F; 私有的，不会被发布，是管理整个项目，与要发布到npm的解耦  &quot;devDependencies&quot;: &#123;    &quot;lerna&quot;: &quot;^3.15.0&quot;  &#125;&#125; &#x2F;&#x2F; lerna.json&#123;  &quot;packages&quot;: [    &quot;packages&#x2F;*&quot;  ],  &quot;version&quot;: &quot;0.0.0&quot;&#125;</code></pre><p>2.3 创建npm包<br>增加两个 packages</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWIyOTgzNjExZDE"></p><p>2.4 增加模块依赖<br>分别给相应的 package 增加依赖模块</p><pre class="line-numbers language-none"><code class="language-none">lerna add chalk &#x2F;&#x2F; 为所有 package 增加 chalk 模块 lerna add semver --scope @mo-demo&#x2F;cli-shared-utils &#x2F;&#x2F; 为 @mo-demo&#x2F;cli-shared-utils 增加 semver 模块 lerna add @mo-demo&#x2F;cli-shared-utils --scope @mo-demo&#x2F;cli &#x2F;&#x2F; 增加内部模块之间的依赖</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWI2NTNmMGQ5NjQ"></p><p>2.5 发布</p><pre class="line-numbers language-none"><code class="language-none">lerna publish</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWJiMWY4MjhjZjk"></p><p>2.6 依赖包管理<br>上述1-5步已经包含了 Lerna 整个生命周期的过程了，但当我们维护这个项目时，新拉下来仓库的代码后，需要为各个 package 安装依赖包。</p><p>我们在第4步 lerna add 时也发现了，为某个 package 安装的包被放到了这个 package 目录下的 node_modules 目录下。这样对于多个 package 都依赖的包，会被多个 package 安装多次，并且每个 package 下都维护 node_modules ，也不清爽。于是我们使用 –hoist 来把每个 package 下的依赖包都提升到工程根目录，来降低安装以及管理的成本。</p><pre class="line-numbers language-none"><code class="language-none">lerna bootstrap --hoist</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWJmNjUxZDkxMWY"></p><p>为了省去每次都输入 –hoist 参数的麻烦，可以在 lerna.json 配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;packages&quot;: [    &quot;packages&#x2F;*&quot;  ],  &quot;command&quot;: &#123;    &quot;bootstrap&quot;: &#123;      &quot;hoist&quot;: true    &#125;  &#125;,  &quot;version&quot;: &quot;0.0.1-alpha.0&quot;&#125;</code></pre><p>配置好后，对于之前依赖包已经被安装到各个 package 下的情况，我们只需要清理一下安装的依赖即可：</p><pre class="line-numbers language-none"><code class="language-none">lerna clean</code></pre><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyOWM2OTdjODVjMWM" width=350 style="object-fit:contain"/>然后执行 lerna bootstrap 即可看到 package 的依赖都被安装到根目录下的 `node_modules` 中了。<h2 id="Lerna-Monorepo-最佳实践"><a href="#Lerna-Monorepo-最佳实践" class="headerlink" title="Lerna + Monorepo 最佳实践"></a>Lerna + Monorepo 最佳实践</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>lerna不负责构建，测试等任务，它提出了一种集中管理package的目录模式，提供了一套自动化管理程序，让开发者不必再深耕到具体的组件里维护内容，在项目根目录就可以全局掌控，基于 npm scripts，使用者可以很好地完成组件构建，代码格式化等操作。接下来我们就来看看，如果基于 Lerna，并结合其它工具来搭建 Monorepo 项目的最佳实践。</p></blockquote><p>目前最常见的 monorepo 解决方案是 Lerna 和 yarn 的 workspaces 特性，基于lerna和yarn workspace的monorepo工作流。由于yarn和lerna在功能上有较多的重叠,我们采用yarn官方推荐的做法,用yarn来处理依赖问题，用lerna来处理发布问题。能用yarn做的就用yarn做吧</p><h2 id="yarn-workspace"><a href="#yarn-workspace" class="headerlink" title="yarn workspace"></a>yarn workspace</h2><p>3.1.1 搭建环境<br>普通项目：clone下来后通过yarn install,即可搭建完项目，有时需要配合postinstall hooks,来进行自动编译，或者其他设置。</p><p>monorepo: 各个库之间存在依赖，如A依赖于B，因此我们通常需要将B link到A的node_module里，一旦仓库很多的话，手动的管理这些link操作负担很大，因此需要自动化的link操作，按照拓扑排序将各个依赖进行link</p><p>解决方式：通过使用workspace，yarn install会自动的帮忙解决安装和link问题</p><pre class="line-numbers language-none"><code class="language-none">yarn install # 等价于 lerna bootstrap --npm-client yarn --use-workspaces</code></pre><p>3.1.2 清理环境<br>在依赖乱掉或者工程混乱的情况下，清理依赖</p><p>普通项目： 直接删除node_modules以及编译后的产物。</p><p>monorepo： 不仅需要删除root的node_modules的编译产物还需要删除各个package里的node_modules以及编译产物</p><p>解决方式：使用lerna clean来删除所有的node_modules，使用yarn workspaces run clean来执行所有package的清理工作</p><pre class="line-numbers language-none"><code class="language-none">lerna clean # 清理所有的node_modulesyarn workspaces run clean # 执行所有package的clean操作</code></pre><p>3.1.3 安装|删除依赖<br>普通项目： 通过yarn add和yarn remove即可简单姐解决依赖库的安装和删除问题</p><p>monorepo: 一般分为三种场景</p><p>给某个package安装依赖：yarn workspace packageB add packageA 将packageA作为packageB的依赖进行安装</p><p>给所有的package安装依赖: 使用yarn workspaces add lodash 给所有的package安装依赖</p><p>给root 安装依赖：一般的公用的开发工具都是安装在root里，如typescript,我们使用yarn add -W -D typescript来给root安装依赖</p><p>对应的三种场景删除依赖如下</p><pre class="line-numbers language-none"><code class="language-none">yarn workspace packageB remove packageAyarn workspaces remove lodashyarn remove -W -D typescript</code></pre><p>3.1.4 项目构建<br>普通项目：建立一个build的npm script，使用yarn build即可完成项目构建</p><p>monorepo:区别于普通项目之处在于各个package之间存在相互依赖，如packageB只有在packageA构建完之后才能进行构建，否则就会出错，这实际上要求我们以一种拓扑排序的规则进行构建。</p><p>我们可以自己构建拓扑排序规则，很不幸的是yarn的workspace暂时并未支持按照拓扑排序规则执行命令,虽然该 rfc已经被accepted，但是尚未实现, 幸运的是lerna支持按照拓扑排序规则执行命令, –sort参数可以控制以拓扑排序规则执行命令</p><pre class="line-numbers language-none"><code class="language-none">lerna run --stream --sort build</code></pre><p>3.1.5 版本升级及发包<br>项目测试完成后，就涉及到版本发布，版本发布一般涉及到如下一些步骤</p><p>条件验证: 如验证测试是否通过，是否存在未提交的代码，是否在主分支上进行版本发布操作</p><p>version_bump:发版的时候需要更新版本号，这时候如何更新版本号就是个问题，一般大家都会遵循 semVer语义，</p><p>生成changelog: 为了方便查看每个package每个版本解决了哪些功能，我们需要给每个package都生成一份changelog方便用户查看各个版本的功能变化。</p><p>生成git tag：为了方便后续回滚问题及问题排查通常需要给每个版本创建一个git tag</p><p>git 发布版本：每次发版我们都需要单独生成一个commit记录来标记milestone</p><p>发布npm包：发布完git后我们还需要将更新的版本发布到npm上，以便外部用户使用</p><p>我们发现手动的执行这些操作是很麻烦的且及其容易出错，幸运的是lerna可以帮助我们解决这些问题</p><p>yarn官方并不打算支持发布流程，只是想做好包管理工具，因此这部分还是需要通过lerna支持</p><p>lerna提供了publish和version来支持版本的升级和发布, publish的功能可以即包含version的工作，也可以单纯的只做发布操作。</p><p>3.2 优雅的提交<br>3.2.1 <code>commitizen</code> &amp;&amp; <code>cz-lerna-changelog</code><br>commitizen 是用来格式化 git commit message 的工具，它提供了一种问询式的方式去获取所需的提交信息。</p><p>cz-lerna-changelog 是专门为 Lerna 项目量身定制的提交规范，在问询的过程，会有类似影响哪些 package 的选择。如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyYTNmZGEyMTA3MGI"></p><p>我们使用 commitizen 和 cz-lerna-changelog 来规范提交，为后面自动生成日志作好准备。</p><p>因为这是整个工程的开发依赖，所以在根目录安装：</p><pre class="line-numbers language-none"><code class="language-none">yarn add  -D commitizenyarn add  -D cz-lerna-changelog</code></pre><p>安装完成后，在 <code>package.json</code> 中增加 <code>config</code> 字段，把 <code>cz-lerna-changelog</code> 配置给 <code>commitizen</code>。同时因为<code>commitizen</code>不是全局安全的，所以需要添加 <code>scripts</code> 脚本来执行 <code>git-cz</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;name&quot;: &quot;root&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;commit&quot;: &quot;git-cz&quot;  &#125;,  &quot;config&quot;: &#123;    &quot;commitizen&quot;: &#123;      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;    &#125;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;commitizen&quot;: &quot;^3.1.1&quot;,    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,    &quot;lerna&quot;: &quot;^3.15.0&quot;  &#125;&#125;</code></pre><p>之后在常规的开发中就可以使用 yarn run commit 来根据提示一步一步输入，来完成代码的提交。</p><p>3.2.2 commitlint &amp;&amp; husky<br>上面我们使用了 commitizen 来规范提交，但这个要靠开发自觉使用<code>yarn run commit</code> 。万一忘记了，或者直接使用 git commit 提交怎么办？答案就是在提交时对提交信息进行校验，如果不符合要求就不让提交，并提示。校验的工作由 commitlint 来完成，校验的时机则由 husky 来指定。husky 继承了 Git 下所有的钩子，在触发钩子的时候，husky 可以阻止不合法的 commit,push 等等。</p><p>安装 commitlint 以及要遵守的规范</p><pre class="line-numbers language-none"><code class="language-none">yarn add -D @commitlint&#x2F;cli @commitlint&#x2F;config-conventional</code></pre><p>在工程根目录为 commitlint 增加配置文件 commitlint.config.js 为commitlint 指定相应的规范</p><pre class="line-numbers language-none"><code class="language-none">module.exports &#x3D; &#123; extends: [&#39;@commitlint&#x2F;config-conventional&#39;] &#125;</code></pre><p>安装 husky</p><pre class="line-numbers language-none"><code class="language-none">yarn add -D husky</code></pre><p>在 package.json 中增加如下配置</p><pre class="line-numbers language-none"><code class="language-none">&quot;husky&quot;: &#123; &quot;hooks&quot;: &#123;    &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;     &#125;&#125;</code></pre><p>“commit-msg”是git提交时校验提交信息的钩子，当触发时便会使用 commitlit 来校验。安装配置完成后，想通过 git commit 或者其它第三方工具提交时，只要提交信息不符合规范就无法提交。从而约束开发者使用 yarn run commit 来提交。</p><p>3.2.3 eslint &amp;&amp; lint-staged<br>除了规范提交信息，代码本身肯定也少了靠规范来统一风格。</p><p>安装</p><pre class="line-numbers language-none"><code class="language-none">yarn add  -D standard lint-staged</code></pre><p>eslint就是完整的一套 JavaScript（typescript） 代码规范，自带 linter &amp; 代码自动修正。自动格式化代码并修正，提前发现风格以及程序问题, 同时也支持typescript的代码规范校验，<code>eslintrc.json</code>配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;extends&quot;: [        &quot;yayajing&quot;,        &quot;plugin:@typescript-eslint&#x2F;recommended&quot;    ],    &quot;parser&quot;: &quot;typescript-eslint-parser&quot;,    &quot;plugins&quot;: [&quot;@typescript-eslint&quot;],    &quot;rules&quot;: &#123;        &quot;eqeqeq&quot;:&quot;off&quot;,        &quot;@typescript-eslint&#x2F;explicit-function-return-type&quot;: &quot;off&quot;,        &quot;no-template-curly-in-string&quot;: &quot;off&quot;    &#125;  &#125;</code></pre><p><code>lint-staged staged</code> 是 Git 里的概念，表示暂存区，lint-staged 表示只检查并矫正暂存区中的文件。一来提高校验效率，二来可以为老的项目带去巨大的方便。<br>package.json配置</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; package.json&#123;  &quot;name&quot;: &quot;root&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;c&quot;: &quot;git-cz&quot;  &#125;,  &quot;config&quot;: &#123;    &quot;commitizen&quot;: &#123;      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;    &#125;  &#125;,  &quot;husky&quot;: &#123;    &quot;hooks&quot;: &#123;      &quot;pre-commit&quot;: &quot;lint-staged&quot;,      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;    &#125;  &#125;,  &quot;lint-staged&quot;: &#123;    &quot;*.ts&quot;: [      &quot;eslint --fix&quot;,      &quot;git add&quot;    ]  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;@commitlint&#x2F;cli&quot;: &quot;^8.1.0&quot;,    &quot;@commitlint&#x2F;config-conventional&quot;: &quot;^8.1.0&quot;,    &quot;commitizen&quot;: &quot;^3.1.1&quot;,    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,    &quot;husky&quot;: &quot;^3.0.0&quot;,    &quot;lerna&quot;: &quot;^3.15.0&quot;,    &quot;lint-staged&quot;: &quot;^9.2.0&quot;  &#125;&#125;</code></pre><p>安装完成后，在 package.json 增加 lint-staged 配置，如上所示表示对暂存区中的 js 文件执行 eslint –fix 校验并自动修复。那什么时候去校验呢，就又用到了上面安装的 husky ，husky的配置中增加pre-commit的钩子用来执行 lint-staged 的校验操作。</p><p>此时提交 ts 文件时，便会自动修正并校验错误。即保证了代码风格统一，又能提高代码质量。</p><p>3.3 发布自动生成日志<br>有了之前的规范提交，自动生成日志便水到渠成了。再详细看下 lerna publish 时做了哪些事情：</p><p>3.3.1 lerna version 更新版本</p><ul><li><p>找出从上一个版本发布以来有过变更的 package</p></li><li><p>提示开发者确定要发布的版本号</p></li><li><p>将所有更新过的的 package 中的package.json的version字段更新</p></li><li><p>将依赖更新过的 package 的 包中的依赖版本号更新</p></li><li><p>更新 lerna.json 中的 version 字段</p></li><li><p>提交上述修改，并打一个 tag</p></li><li><p>推送到 git 仓库<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyYTMzNTMzMzhkYTA"></p></li></ul><p>3.3.2 使用 npm publish 将新版本推送到 npm<br><code>CHANGELOG</code> 很明显是和 version 一一对应的，所以需要在 lerna version 中想办法，查看 lerna version 命令的详细说明后，会看到一个配置参数 <code>--conventional-commits</code>。没错，只要我们按规范提交后，在 lerna version 的过程中会便会自动生成当前这个版本的 CHANGELOG。为了方便，不用每次输入参数，可以配置在 <code>lerna.json</code>中，如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;packages&quot;: [    &quot;packages&#x2F;*&quot;  ],  &quot;command&quot;: &#123;    &quot;bootstrap&quot;: &#123;      &quot;hoist&quot;: true    &#125;,    &quot;version&quot;: &#123;      &quot;conventionalCommits&quot;: true    &#125;  &#125;,  &quot;ignoreChanges&quot;: [    &quot;**&#x2F;*.md&quot;  ],  &quot;version&quot;: &quot;0.0.1-alpha.1&quot;&#125;</code></pre><p><code>lerna version</code> 会检测从上一个版本发布以来的变动，但有一些文件的提交，我们不希望触发版本的变动，譬如 .md 文件的修改，并没有实际引起 package 逻辑的变化，不应该触发版本的变更。可以通过 <code>ignoreChanges</code> 配置排除。如上。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzE4LzE2Y2EyYTM3NTQwN2Y0MzY"></p><p>实际 <code>lerna version</code>很少直接使用，因为它包含在 <code>lerna publish</code> 中了，直接使用 <code>lerna publish</code>就好了。</p><p>3.4 完善的测试用例<br>monorepo项目：测试有两种方式</p><ul><li><p>使用统一的jest测试配置这样方便全局的跑jest即可，好处是可以方便统计所有代码的测试覆盖率，坏处是如果package比较异构（如小程序，前端，node 服务端等），统一的测试配置不太好编写</p></li><li><p>每个package单独支持test命令，使用yarn workspace run test，坏处是不好统一收集所有代码的测试覆盖率</p></li></ul><p>如果采用jest编写测试用例，支持typescript的话，需要初始化配置jest.config.js：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module.exports &#x3D; &#123;  preset: &#39;ts-jest&#39;,  moduleFileExtensions: [&#39;ts&#39;],  testEnvironment: &#39;node&#39;&#125;</code></pre><p>4 实践总结<br>到这里，基本上已经构建了基于lerna和yarn workspace的monorepo项目的最佳实践了，该有的功能都有：</p><ul><li><p>完善的工作流</p></li><li><p>typescript支持</p></li><li><p>风格统一的编码</p></li><li><p>完整的单元测试</p></li><li><p>一键式的发布机制</p></li><li><p>完美的更新日志</p></li></ul><p>……</p><p>当然，构建一套完善的仓库管理机制，可能它的收益不是一些量化的指标可以衡量出来的，也没有直接的价值输出，但它能在日常的工作中极大的提高工作效率，解放生产力，节省大量的人力成本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/i10630226/article/details/99702447">lerna+yarn workspace+monorepo项目的最佳实践</a><br><a href="https://www.jianshu.com/p/c10d0b8c5581">5分钟搞懂Monorepo</a><br><a href="https://www.easemob.com/news/5948">2021年管理Monorepo代码库的11种出色工具</a></p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 增效 </tag>
            
            <tag> npm </tag>
            
            <tag> monorepo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信标（Beacon ）</title>
      <link href="//post/2022-05-23beacon.html"/>
      <url>//post/2022-05-23beacon.html</url>
      
        <content type="html"><![CDATA[<h2 id="Beacon-特点"><a href="#Beacon-特点" class="headerlink" title="Beacon  特点"></a>Beacon  特点</h2><ul><li>接口用于将<em>异步</em>和<em>非阻塞</em>请求发送到服务器。</li><li>请求使用HTTP协议中的POST方法，请求通常<em>不需要响应</em>。</li><li>这个请求被保证在，页面的unload状态从发起到完成之前，被发送。而并不需要一个阻塞请求，例如 XMLHttpRequest 。<h2 id="Beacon-场景"><a href="#Beacon-场景" class="headerlink" title="Beacon  场景"></a>Beacon  场景</h2>发送异步非阻塞数据到服务端<h2 id="为什么是信标？"><a href="#为什么是信标？" class="headerlink" title="为什么是信标？"></a>为什么是信标？</h2>Beacon 接口满足了<em>分析</em>和<em>诊断代码</em>的需要，这些代码通常会尝试在<em>卸载文档之前将数据发送到 web服务器</em>。发送数据的任何过早时机都可能导致错失收集数据的机会。但是，确保在卸载文档期间发送数据是开发人员难以做到的。</li></ul><p>用户代理通常会忽略卸载文档处理程序中的异步 XMLHttpRequests 请求。若要解决此问题，为了分析和诊断代码，通常会在 unload (en-US) 事件或 beforeunload (en-US) 事件中创建同步 XMLHttpRequest 请求以提交数据。同步 XMLHttpRequest 请求强制浏览器延迟卸载文档，并使下一个页面跳转看起来较慢。下一页面没有任何办法来避免这种页面加载性能不佳的感觉。</p><h2 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h2><p>其中一种技术是通过创建 Image 元素并在卸载文档处理程序中设置其 src 属性来延迟卸载以提交数据。由于大多数用户代理会延迟文档卸载，以完成挂起的图片加载，因此可以在卸载过程中提交数据。另一种方法是在卸载处理程序中创建一个无操作循环，花费数秒以延迟卸载并将数据提交到服务器。</p><p>但是上述技术不仅代表了较差的编码模式，其中一些还是不可靠的，会导致下一个导航的页面加载性能较差的感觉。信标 API 提供了解决这些问题的标准方法。</p><h2 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h2><p>Beacon API 的 Navigator.sendBeacon() 方法用于在全局浏览上下文中向服务器发送数据信标。该方法有两个参数，URL和要在请求中发送的数据data。data参数是可选的，其类型可以是 ArrayBufferView、Blob、DOMString 或FormData。如果浏览器成功的以队列形式排列了用于传递的请求，则该方法返回“true”，否则返回“false”。</p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>Beacon API的 WorkerNavigator.sendBeacon() 方法用于从 worker global scope 向服务器发送数据信标。该方法有两个参数，URL和要在请求中发送的数据data。data参数是可选的，其类型可以是 ArrayBufferView、Blob、DOMString 或 FormData。如果浏览器成功的以队列形式排列了用于传递的请求，则该方法返回“true”，否则返回“false”。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>API 提供了解决这些问题的标准方法</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>浏览器兼容性<br>Navigator.sendBeacon().Browser_compatibility表说明了该方法具有相对广泛地实现。但是，WorkerNavigator.sendBeacon().Browser_compatibility数据显示该方法没有被实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter Bruno</title>
      <link href="//post/2022-05-20fluter-bruno.html"/>
      <url>//post/2022-05-20fluter-bruno.html</url>
      
        <content type="html"><![CDATA[<h1 id="Bruno"><a href="#Bruno" class="headerlink" title="Bruno"></a>Bruno</h1><p><img src="http://t-blog-images.aijs.top/img/20220520105610.webp"><br>Bruno 是由贝壳「用户体验中心 &amp; 移动端作业组」联合打造的一套企业级移动端 Flutter 组件库，于 12 月 10 日正式开源:</p><p><a href="https://bruno.ke.com/">官网</a></p><p><a href="https://pub.flutter-io.cn/packages/bruno">Pub 地址</a></p><p><a href="https://github.com/LianjiaTech/bruno">GitHub 仓库</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>贝壳自 2018 年底开始对 Flutter 的探索和实践，Flutter 落地业务有效地提升了产研效率。但跨业务线协同效率较低，重复劳动力大，代码维护成本高等问题依旧凸显。Bruno 是贝壳针对上述问题在公司内发起的提效专项，致力于打造贝壳标准 Flutter 生态。经过两年的打磨和沉淀，Bruno 现已服务贝壳 B 端全线业务，涵盖 30 多种类型 100+  组件，为近 18 个 App 服务，新增页面组件覆盖率平均达到 80% 以上。</p><p>相信贝壳遇到的问题也是大型团队或者个人开发者不可避免的问题，目前针对该类问题的中后台解决方案层出不穷，但在 Flutter 生态中类似成熟解决方案匮乏。我们希望将贝壳在 Flutter 领域的实践经验回馈给社区，更加完善 Flutter 生态，因此 Bruno 正式开源。</p><h1 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h1><p>Bruno 基于生长、包容、联接的设计理念，赋予组件轻巧灵活、拥抱变化、包容万物的品质。</p><h1 id="Bruno-的优势"><a href="#Bruno-的优势" class="headerlink" title="Bruno 的优势"></a>Bruno 的优势</h1><ol><li>适度灵活、充分可扩展</li></ol><p>Bruno 倡导标准化下的自由、简单、灵活，基于 Flutter 基础组件的封装，使其具备适度灵活，使用组件提效尤为重要。同时组件支持充分可扩展，既可满足多产品的快速接入又能包容特殊场景。</p><p>经过两年的业务实践，我们最终产出了 102 个组件，覆盖类型有 图表、导航、数据录入、操作反馈、内容展示 等。</p><p><img src="http://t-blog-images.aijs.top/img/54b2f46cdc6ee8467b67d92d9c0d2d98.gif"><br>2. 连接设计&lt;–&gt;开发</p><p>Bruno 基于 Sketch MeaXure 二次开发，实现组件自动识别和标注。开发者可以从设计侧产出的标注稿中清晰的看到页面涵盖的组件，信息无缝传达，高效连接设计与开发。</p><p><img src="http://t-blog-images.aijs.top/img/a72e4aee43eb8e32589bef23dd95c75d.gif"><br>3. 主题定制、品牌风格自定义</p><p>Bruno 不仅支持全局色号的替换，还支持组件圆角、字体大小、内部间距等属性的定制。在定制全局样式打造自有品牌风格的同时，支持单个组件自定义满足特异化场景需求。</p><ul><li>默认基础规范</li></ul><img src="http://t-blog-images.aijs.top/img/20220520105949.webp" style="width:400px;object-fit:contain" /><img src="http://t-blog-images.aijs.top/img/20220520110003.webp" style="width:400px;object-fit:contain" /><ul><li>全局样式定制</li></ul><p><img src="http://t-blog-images.aijs.top/img/61dc33d90cd80e88c4a52cccdc713c48.gif"></p><ul><li>单组件样式定制</li></ul><p><img src="http://t-blog-images.aijs.top/img/6da0a3d9b63b47e64a127320597900eb.gif"><br>Bruno 还可支持单业务的全局配置，也就是说如果你是组件化工程结构，那么你可以定义每个业务组件的特有风格。</p><ol start="4"><li>物料承载、教程指引</li></ol><p>Bruno 官网承载产品设计物料、组件配套文档、Demo 下载、搜索等基础能力，同时配有教程指引开发也可操作 Sketch 插件设计页面，实现零设计资源介入。</p><p><img src="http://t-blog-images.aijs.top/img/ea334037633605e094d03338cc151045.gif"><br>Bruno 官网: <a href="https://bruno.ke.com/">https://bruno.ke.com</a></p><h1 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h1><ol><li>丰富和完善组件</li></ol><p>目前 Bruno 组件涵盖种类可以覆盖常见使用场景，满足企业建立自有品牌形象 App 需求。未来我们会根据业务发展和产品升级不断迭代组件，丰富产品内容提升视觉体验。</p><ol start="2"><li>提升落地效率</li></ol><p>我们不止关注组件的设计与研发，组件落地也是提升产研效率至关重要的环节，因此我们对 Sketch MeaXure 做了二次改造，实现组件自动化标注。同时贝壳产研团队把自动化标注能力线上化，进一步提升组件落地效率。</p><p>3、UI 自动化走查</p><p>贝壳产研团队也在探索 UI 自动化走查方向，期望解放设计侧走查人力，让设计师更多投入对产品的洞察理解，创造优质设计，提升视觉体验。</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 增效 </tag>
            
            <tag> flutter </tag>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm开发wiki编辑器问题总结</title>
      <link href="//post/2022-05-19npm-pkg.html"/>
      <url>//post/2022-05-19npm-pkg.html</url>
      
        <content type="html"><![CDATA[<h2 id="原架构"><a href="#原架构" class="headerlink" title="原架构"></a>原架构</h2><p><img src="http://t-blog-images.aijs.top/img/wiki-ui.webp"></p><h2 id="重构后"><a href="#重构后" class="headerlink" title="重构后"></a>重构后</h2><p><img src="http://t-blog-images.aijs.top/img/slate-wiki.webp"></p><h2 id="tsconfig-ts"><a href="#tsconfig-ts" class="headerlink" title="tsconfig.ts"></a>tsconfig.ts</h2><pre class="line-numbers language-none"><code class="language-none">&#123;  &#x2F;&#x2F; 编译选项  &quot;compilerOptions&quot;: &#123;    &#x2F;&#x2F; 生成代码的语言版本：将我们写的 TS 代码编译成哪个版本的 JS 代码    &quot;target&quot;: &quot;es5&quot;,    &#x2F;&#x2F; 指定要包含在编译中的 library    &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;blob&#x2F;90e83adb44&#x2F;lib&#x2F;lib.dom.iterable.d.ts    &quot;lib&quot;: [&quot;dom&quot;, &quot;dom.iterable&quot;, &quot;esnext&quot;],    &#x2F;&#x2F; 允许 ts 编译器编译 js 文件    &quot;allowJs&quot;: true,    &#x2F;&#x2F; 跳过类型声明文件的类型检查    &quot;skipLibCheck&quot;: true,    &#x2F;&#x2F; es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异    &quot;esModuleInterop&quot;: true,    &#x2F;&#x2F; 允许通过 import x from &#39;y&#39; 即使模块没有显式指定 default 导出    &quot;allowSyntheticDefaultImports&quot;: true,    &#x2F;&#x2F; 开启严格模式    &quot;strict&quot;: true,    &#x2F;&#x2F; 对文件名称强制区分大小写    &quot;forceConsistentCasingInFileNames&quot;: true,    &#x2F;&#x2F; 为 switch 语句启用错误报告    &quot;noFallthroughCasesInSwitch&quot;: true,    &#x2F;&#x2F; 生成代码的模块化标准    &quot;module&quot;: &quot;esnext&quot;,    &#x2F;&#x2F; 模块解析（查找）策略    &quot;moduleResolution&quot;: &quot;node&quot;,    &#x2F;&#x2F; 允许导入扩展名为.json的模块    &quot;resolveJsonModule&quot;: true,    &#x2F;&#x2F; 是否将没有 import&#x2F;export 的文件视为旧（全局而非模块化）脚本文件    &quot;isolatedModules&quot;: true,    &#x2F;&#x2F; 编译时不生成任何JS文件（只进行类型检查）    &quot;noEmit&quot;: true,    &#x2F;&#x2F; 指定将 JSX 编译成什么形式    &quot;jsx&quot;: &quot;react-jsx&quot;  &#125;,  &#x2F;&#x2F; 指定允许 ts 处理的目录  &quot;include&quot;: [&quot;src&quot;]&#125;&#x2F;&#x2F; https:&#x2F;&#x2F;blog.csdn.net&#x2F;m0_62118859&#x2F;article&#x2F;details&#x2F;124543485</code></pre><h2 id="Cannot-read-properties-of-null"><a href="#Cannot-read-properties-of-null" class="headerlink" title="Cannot read properties of null"></a>Cannot read properties of null</h2><pre class="line-numbers language-none"><code class="language-none">react.development.js:1621 Uncaught TypeError: Cannot read properties of null</code></pre><hr/><h2 id="ahooks-版本"><a href="#ahooks-版本" class="headerlink" title="ahooks  版本"></a>ahooks  版本</h2><ol><li><p>useControlledValue</p><pre class="line-numbers language-none"><code class="language-none">Uncaught SyntaxError: The requested module &#39;&#x2F;node_modules&#x2F;.vite&#x2F;deps&#x2F;ahooks.js?v&#x3D;a7b43f7a&#39; does not provide an export named &#39;useControlledValue&#39; (at index.tsx:2:1)</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Deprecated the useControlledValue naming left over from 1.0, please use useControllableValue instead<br><a href="https://github.com/alibaba/hooks/releases?page=5#:~:text=Deprecated%20the%20useControlledValue%20naming%20left%20over%20from%201.0%2C%20please%20use%20useControllableValue%20instead"><a href="https://github.com/alibaba/hooks/releases/tag/v3.0.0-alpha.4">v3.0.0-alpha.4</a></a></p></blockquote></li><li><p>useRequest</p></li></ol><pre class="line-numbers language-none"><code class="language-none">react_devtools_backend.js:4026 Warning: Failed prop type: The prop &#96;loadMore&#96; is marked as required in &#96;InfiniteScroll&#96;, but its value is &#96;undefined&#96;.</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Removed loadMore related attributes, it is recommended to use useInfiniteScroll to achieve unlimited loading capacity.<br><a href="https://github.com/alibaba/hooks/releases/tag/v3.0.0-alpha.4">v3.0.0-alpha.4</a></p></blockquote><p><a href="http://quanzhan.applemei.com/webStack/TmpJeE1BPT0=">除了 dependencies 和 devDependencies，其他的依赖有什么作用呢</a></p><pre class="line-numbers language-none"><code class="language-none">Pre-bundling dependencies:reactrecoilreact-domreact-router-domantd(...and 29 more)</code></pre><h3 id="本地npm-link处理不了依赖冲突"><a href="#本地npm-link处理不了依赖冲突" class="headerlink" title="本地npm link处理不了依赖冲突"></a>本地<code>npm link</code>处理不了依赖冲突</h3><ul><li>老版本可以运行</li></ul><p><img src="http://t-blog-images.aijs.top/img/20220519183558.webp"></p><ul><li>新版本报错</li><li>原因 ahooks^3.x.x没有v2版本api</li></ul><hr/><h3 id="发布安装到项目中测试"><a href="#发布安装到项目中测试" class="headerlink" title="发布安装到项目中测试"></a>发布安装到项目中测试</h3><ul><li>发布</li></ul><ol><li><p>npm 脚本</p><pre class="line-numbers language-none"><code class="language-none">&quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;vite --port 3004&quot;,    &quot;start&quot;: &quot;yarn build:css &amp;&amp; webpack serve --config config&#x2F;webpack.dev.config.js&quot;,    &quot;copy:css&quot;: &quot;cp src&#x2F;**&#x2F;*.css dist&#x2F; &amp;&amp; rsync src&#x2F;styles&#x2F;*.css dist&#x2F;styles&#x2F;&quot;,    &quot;build&quot;: &quot;tsc&quot;,    &quot;build:css&quot;: &quot;node-sass src&#x2F; -o src&#x2F; &quot;,    &quot;prepublishOnly&quot;: &quot;rm -rf dist&#x2F; &amp;&amp; yarn build &amp;&amp; yarn build:css &amp;&amp; yarn copy:css&quot;,    &quot;t&quot;: &quot;rm -rf dist&#x2F; &amp;&amp; yarn build &amp;&amp; yarn build:css &amp;&amp; yarn copy:css&quot;,    &quot;push:beta&quot;: &quot;npm publish --tag beta&quot;  &#125;,</code></pre></li><li><p>执行脚本<br><code>$ yarn push:beta</code></p></li><li><p>发布结果</p></li></ol><pre class="line-numbers language-none"><code class="language-none">## Current Tags*   [0.0.1 ](https:&#x2F;&#x2F;tnpm.ty-inc.top&#x2F;package&#x2F;@ty-fe&#x2F;slate-wiki-pro&#x2F;v&#x2F;0.0.1)                               ...           beta (a few seconds ago)*   [0.0.1 ](https:&#x2F;&#x2F;tnpm.ty-inc.top&#x2F;package&#x2F;@ty-fe&#x2F;slate-wiki-pro&#x2F;v&#x2F;0.0.1)                               ...           latest (a few seconds ago)</code></pre><p><img src="http://t-blog-images.aijs.top/img/20220519183625.webp"><br><img src="http://t-blog-images.aijs.top/img/20220519183638.webp"></p><hr/><h2 id="图片没有渲染，修改，打包重新发布0-0-1-220519beta版本测试"><a href="#图片没有渲染，修改，打包重新发布0-0-1-220519beta版本测试" class="headerlink" title="图片没有渲染，修改，打包重新发布0.0.1-220519beta版本测试"></a>图片没有渲染，修改，打包重新发布<code>0.0.1-220519beta</code>版本测试</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">slate-wiki@0.0.1-220519betanpm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; npm notice name:          @ty-fe&#x2F;slate-wiki                     npm notice version:       0.0.1-220519beta                        npm notice filename:      @ty-fe&#x2F;slate-wiki-0.0.1-220519beta.tgznpm notice package size:  228.0 kB                                npm notice unpacked size: 1.2 MB                                  npm notice shasum:        a2991de4933a9e5039ceb7082c5e0a80c2db828cnpm notice integrity:     sha512-iHQKpR2LM+F6Z[...]XDN40tHfwMxNg&#x3D;&#x3D;npm notice total files:   417                                     npm notice + @ty-fe&#x2F;slate-wiki@0.0.1-220519beta✨  Done in 16.36s.slate-wiki-pro@0.0.1-220519betanpm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D; npm notice name:          @ty-fe&#x2F;slate-wiki-pro                     npm notice version:       0.0.1-220519beta                            npm notice filename:      @ty-fe&#x2F;slate-wiki-pro-0.0.1-220519beta.tgznpm notice package size:  83.5 kB                                     npm notice unpacked size: 413.7 kB                                    npm notice shasum:        85cbe6fbffafc75db16e02427d1eac9b6a906ec3    npm notice integrity:     sha512-3viVco6ssb2N3[...]xxisHN9+qYnCA&#x3D;&#x3D;    npm notice total files:   205                                         npm notice + @ty-fe&#x2F;slate-wiki-pro@0.0.1-220519beta✨  Done in 14.68s.</code></pre><hr/><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>传染性<br>slate-wiki-pro,依赖于slate-wiki。slate-wiki改动，项目依赖slate-wiki-pro，需要发slate-wiki和slate-wiki-pro，项目要安装slate-wiki-pro</li></ol><p><code>是否可以让项目直接依赖slate-wiki、slate-wiki-pro改动哪个发布哪个，互不影响？</code></p><ol start="2"><li>项目很卡</li></ol><p><code>将slate、slate-wiki、slate-wiki-pro使用umd资源，避免重复编译是否可以？</code></p><ol start="3"><li>依赖贼多</li></ol><pre class="line-numbers language-none"><code class="language-none">[######--------------------------------------------------] 49992&#x2F;102014</code></pre><ol start="4"><li>启动没有想象中那么快了</li></ol><p>vite预编译时间过长  130262ms &#x2F; 1000 &#x2F; 60 大概两分钟，加载编译大概几分钟，慢的吓人</p><pre class="line-numbers language-none"><code class="language-none">vite v2.7.1 dev server running at:&gt; Local: http:&#x2F;&#x2F;localhost:3005&#x2F;&gt; Network: use &#96;--host&#96; to exposeready in 130262ms.  #首次编译vite v2.7.1 dev server running at:&gt; Local: http:&#x2F;&#x2F;localhost:3005&#x2F;&gt; Network: use &#96;--host&#96; to exposeready in 43312ms. #非首次编译</code></pre><hr/><h2 id="代码放仓库"><a href="#代码放仓库" class="headerlink" title="代码放仓库"></a>代码放仓库</h2><ul><li>slate-wiki</li></ul><p><img src="http://t-blog-images.aijs.top/img/20220519183700.webp"></p><p>Command line instructions<br>You can also upload existing files from your computer using the instructions below.</p><p>Git global setup</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;陈海龙&quot;git config --global user.email &quot;haotian.chen@ty.com&quot;</code></pre><p>Create a new repository</p><pre class="line-numbers language-none"><code class="language-none">git clone ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.gitcd slate-wikitouch README.mdgit add README.mdgit commit -m &quot;add README&quot;</code></pre><p>Push an existing folder</p><pre class="line-numbers language-none"><code class="language-none">cd existing_foldergit initgit remote add origin ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.gitgit add .git commit -m &quot;Initial commit&quot;</code></pre><p>Push an existing Git repository</p><pre class="line-numbers language-none"><code class="language-none">cd existing_repogit remote rename origin old-origingit remote add origin ssh:&#x2F;&#x2F;git@registry.code.ty-inc.top:10023&#x2F;fe-efficacy&#x2F;slate-wiki.git</code></pre><ul><li>slate-wiki-pro<br>略<hr/></li></ul><p>深入了解打包，本站请搜<a href="https://v.aijs.top/post/2022-05-19npm"><code>npm 版本的依赖</code></a></p><h2 id="react-codemirror使用版本react16-插件及项目使用react18"><a href="#react-codemirror使用版本react16-插件及项目使用react18" class="headerlink" title="react-codemirror使用版本react16,插件及项目使用react18"></a>react-codemirror使用版本react16,插件及项目使用react18</h2><pre class="line-numbers language-none"><code class="language-none">react-dom.development.js:22738 Uncaught TypeError: cm is not a function    at UnControlled.componentDidMount (react-codemirror.tsx:718:19)    at commitLayoutEffectOnFiber (react-dom.development.js:23204:30)    at commitLayoutMountEffects_complete (react-dom.development.js:24578:9)    at commitLayoutEffects_begin (react-dom.development.js:24564:7)    at commitLayoutEffects (react-dom.development.js:24502:3)    at commitRootImpl (react-dom.development.js:26779:5)    at commitRoot (react-dom.development.js:26638:5)    at performSyncWorkOnRoot (react-dom.development.js:26073:3)    at flushSyncCallbacks (react-dom.development.js:12009:22)    at flushSyncCallbacksOnlyInLegacyMode (react-dom.development.js:11988:5)</code></pre><p><img src="http://t-blog-images.aijs.top/img/20220520141611.webp"></p><h2 id="vite-关于-global-is-not-defined-问题"><a href="#vite-关于-global-is-not-defined-问题" class="headerlink" title="vite 关于 global is not defined 问题"></a>vite 关于 global is not defined 问题</h2><p><a href="https://github.com/scniro/react-codemirror2/blob/0f2bb13cad2fb1364eb063cbd7ec9aae726a55eb/src/index.tsx#L7">react-codemirror2 源码</a></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">declare let global: any;declare let require: any;const SERVER_RENDERED &#x3D; (typeof navigator &#x3D;&#x3D;&#x3D; &#39;undefined&#39; || (typeof global !&#x3D;&#x3D; &#39;undefined&#39; &amp;&amp; global[&#39;PREVENT_CODEMIRROR_RENDER&#39;] &#x3D;&#x3D;&#x3D; true));let cm;if (!SERVER_RENDERED) &#123;  cm &#x3D; require(&#39;codemirror&#39;);&#125;</code></pre><h2 id="vite-404"><a href="#vite-404" class="headerlink" title="vite 404"></a>vite 404</h2><pre class="line-numbers language-none"><code class="language-none">Could not load content for http:&#x2F;&#x2F;localhost:3005&#x2F;node_modules&#x2F;@tuya-fe&#x2F;slate-wiki&#x2F;src&#x2F;slate&#x2F;3rd&#x2F;react-codemirror.tsx (HTTP error: status code 404, net::ERR_HTTP_RESPONSE_CODE_FAILURE)</code></pre><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>codemirror 在vite中运行报错，codemirror找不到，webpack打包正常</li></ul>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 版本的依赖</title>
      <link href="//post/2022-05-19npm.html"/>
      <url>//post/2022-05-19npm.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提起 npm，大家第一个想到的应该就是 npm install 了，但是 npm install 之后生成的 node_modules 大家有观察过吗？package-lock.json 文件的作用大家知道吗？除了 dependencies 和 devDependencies，其他的依赖有什么作用呢？接下来，本文将针对 npm 中的你可能忽略的细节和大家分享一些经验 。</p><h1 id="npm-安装机制"><a href="#npm-安装机制" class="headerlink" title="npm 安装机制"></a>npm 安装机制</h1><p>A 和 B 同时依赖 C，C 这个包会被安装在哪里呢？C 的版本相同和版本不同时安装会有什么差异呢？package.json 中包的前后顺序对于安装时有什么影响吗？这些问题平时大家可能没有注意过，今天我们就来一起研究一下吧。</p><h2 id="A-和-B-同时依赖-C，这个包会被安装在哪里呢？"><a href="#A-和-B-同时依赖-C，这个包会被安装在哪里呢？" class="headerlink" title="A 和 B 同时依赖 C，这个包会被安装在哪里呢？"></a>A 和 B 同时依赖 C，这个包会被安装在哪里呢？</h2><p>假如有 A 和 B 两个包，两个包都依赖 C 这个包，npm 2 会依次递归安装 A 和 B 两个包及其子依赖包到 node_modules 中。执行完毕后，我们会看到 <code>./node_modules</code> 这层目录只含有这两个子目录：</p><pre class="line-numbers language-none"><code class="language-none">node_modules&#x2F; ├─┬ A │ ├── C ├─┬ B │ └── C </code></pre><p>如果使用 npm 3 来进行安装的话，<code>./node_modules</code> 下的目录将会包含三个子目录：</p><pre class="line-numbers language-none"><code class="language-none">node_modules&#x2F; ├─┬ A ├─┬ B ├─┬ C </code></pre><p>为什么会出现这样的区别呢？这就要从 npm 的工作方式说起了：</p><h2 id="npm-2-和-npm-3-模块安装机制的差异"><a href="#npm-2-和-npm-3-模块安装机制的差异" class="headerlink" title="npm 2 和 npm 3 模块安装机制的差异"></a>npm 2 和 npm 3 模块安装机制的差异</h2><p>虽然目前最新的 npm 版本是 npm 6，但 npm 2 到 npm 3 的版本变更中实现了目录打平，与其他版本相比差别较大。因此，让我们具体看下这两个版本的差异。</p><p>npm 2 在安装依赖包时，采用简单的递归安装方法。执行 npm install 后，npm 根据 dependencies 和 devDependencies 属性中指定的包来确定第一层依赖，npm 2 会根据第一层依赖的子依赖，递归安装各个包到子依赖的 node_modules 中，直到子依赖不再依赖其他模块。执行完毕后，我们会看到 .&#x2F;node_modules 这层目录中包含有我们 package.json 文件中所有的依赖包，而这些依赖包的子依赖包都安装在了自己的 node_modules 中 ，形成类似于下面的依赖树：</p><p><img src="http://t-blog-images.aijs.top/img/20220519181427.webp"></p><p>这样的目录有较为明显的好处：</p><p>1）层级结构非常明显，可以清楚的在第一层的 node_modules 中看到我们安装的所有包的子目录；</p><p>2）在已知自己所需包的名字以及版本号时，可以复制粘贴相应的文件到 node_modules 中，然后手动更改 package.json 中的配置；</p><p>3）如果想要删除某个包，只需要简单的删除 package.json 文件中相应的某一行，然后删除 node_modules 中该包的目录；</p><p>但是这样的层级结构也有较为明显的缺陷，当我的 A，B，C 三个包中有相同的依赖 D 时，执行 <code>npm install</code> 后，D 会被重复下载三次，而随着我们的项目越来越复杂，<code>node_modules</code> 中的依赖树也会越来越复杂，像 D 这样的包也会越来越多，造成了大量的冗余；在 windows 系统中，甚至会因为目录的层级太深导致文件的路径过长，触发文件路径不能超过 280 个字符的错误；</p><p>为了解决以上问题，npm 3 的 node_modules 目录改成了更为扁平状的层级结构，尽量把依赖以及依赖的依赖平铺在 node_modules 文件夹下共享使用。</p><h2 id="npm-3-对于同一依赖的不同版本会怎么处理呢？"><a href="#npm-3-对于同一依赖的不同版本会怎么处理呢？" class="headerlink" title="npm 3 对于同一依赖的不同版本会怎么处理呢？"></a>npm 3 对于同一依赖的不同版本会怎么处理呢？</h2><p>npm 3 会遍历所有的节点，逐个将模块放在 node_modules 的第一层，当发现有重复模块时，则丢弃， 如果遇到某些依赖版本不兼容的问题，则继续采用 npm 2 的处理方式，前面的放在 node_modules 目录中，后面的放在依赖树中。举个例子： A，B，依赖 D(v 0.0.1)，C 依赖 D(v 0.0.2):</p><p><img src="http://t-blog-images.aijs.top/img/20220519181500.webp"></p><p>但是 npm 3 会带来一个新的问题：由于在执行 npm install 的时候，按照 package.json 里依赖的顺序依次解析，上图如果 C 的顺序在 A，B 的前边，node_modules 树则会改变，会出现下边的情况：</p><p><img src="http://t-blog-images.aijs.top/img/20220519181517.webp"></p><p>由此可见，npm 3 并未完全解决冗余的问题，甚至还会带来新的问题。</p><h2 id="为什么会出现-package-lock-json-呢？"><a href="#为什么会出现-package-lock-json-呢？" class="headerlink" title="为什么会出现 package-lock.json 呢？"></a>为什么会出现 package-lock.json 呢？</h2><p>为什么会有 package-lock.json 文件呢？这个我们就要先从 package.json 文件说起了。</p><h2 id="package-json-的不足之处"><a href="#package-json-的不足之处" class="headerlink" title="package.json 的不足之处"></a>package.json 的不足之处</h2><p>npm install 执行后，会生成一个 node_modules 树，在理想情况下， 希望对于同一个 package.json 总是生成完全相同 node_modules 树。在某些情况下，确实如此。但在多数情况下，npm 无法做到这一点。有以下两个原因：</p><p>1）某些依赖项自上次安装以来，可能已发布了新版本 。比如：A 包在团队中第一个人安装的时候是 1.0.5 版本，package.json 中的配置项为 <code>A: &#39;^1.0.5&#39;</code> ；团队中第二个人把代码拉下来的时候，A 包的版本已经升级成了 1.0.8，根据 package.json 中的 semver-range version 规范，此时第二个人 npm install 后 A 的版本为 1.0.8； 可能会造成因为依赖版本不同而导致的 bug；</p><p>2）针对 1）中的问题，可能有的小伙伴会想，把 A 的版本号固定为 <code>A: &#39;1.0.5&#39;</code> 不就可以了吗？但是这样的做法其实并没有解决问题， 比如 A 的某个依赖在第一个人下载的时候是 2.1.3 版本，但是第二个人下载的时候已经升级到了 2.2.5 版本，此时生成的 node_modules 树依旧不完全相同 ，固定版本只是固定来自身的版本，依赖的版本无法固定。</p><h2 id="针对-package-json-不足的解决方法"><a href="#针对-package-json-不足的解决方法" class="headerlink" title="针对 package.json 不足的解决方法"></a>针对 package.json 不足的解决方法</h2><p>为了解决上述问题以及 npm 3 的问题，在 npm 5.0 版本后，npm install 后都会自动生成一个 package-lock.json 文件 ，当包中有 package-lock.json 文件时，npm install 执行时，如果 package.json 和 package-lock.json 中的版本兼容，会根据 package-lock.json 中的版本下载；如果不兼容，将会根据 package.json 的版本，更新 package-lock.json 中的版本，已保证 package-lock.json 中的版本兼容 package.json。</p><h2 id="package-lock-json-文件的结构"><a href="#package-lock-json-文件的结构" class="headerlink" title="package-lock.json 文件的结构"></a>package-lock.json 文件的结构</h2><p>package-lock.json 文件中的 name、version 与 package.json 中的 name、version 一样，描述了当前包的名字和版本，dependencies 是一个对象，该对象和 node_modules 中的包结构一一对应，对象的 key 为包的名称，值为包的一些描述信息， 根据 <a href="https://docs.npmjs.com/configuring-npm/package-lock-json.html#requires">package-lock-json官方文档</a>，主要的结构如下：</p><ul><li><p>version ：包版本，即这个包当前安装在 node_modules 中的版本</p></li><li><p>resolved ：包具体的安装来源</p></li><li><p>integrity ：包 hash 值，验证已安装的软件包是否被改动过、是否已失效</p></li><li><p>requires ：对应子依赖的依赖，与子依赖的 package.json 中 dependencies 的依赖项相同</p></li><li><p>dependencies ：结构和外层的 <code>dependencies</code> 结构相同，存储安装在子依赖 <code>node_modules</code> 中的依赖包</p></li></ul><p>需要注意的是，并不是所有的子依赖都有 <code>dependencies</code> 属性，只有子依赖的依赖和当前已安装在根目录的 <code>node_modules</code> 中的依赖冲突之后，才会有这个属性。</p><h2 id="package-lock-json-文件的作用"><a href="#package-lock-json-文件的作用" class="headerlink" title="package-lock.json 文件的作用"></a>package-lock.json 文件的作用</h2><p>在团队开发中，确保每个团队成员安装的依赖版本是一致的，确定一棵唯一的 node_modules 树；</p><p>node_modules 目录本身是不会被提交到代码库的，但是 package-lock.json 可以提交到代码库，如果开发人员想要回溯到某一天的目录状态，只需要把 package.json 和 package-lock.json 这两个文件回退到那一天即可 。</p><p>由于 package-lock.json 和 node_modules 中的依赖嵌套完全一致，可以更加清楚的了解树的结构及其变化。</p><p>在安装时，npm 会比较 node_modules 已有的包，和 package-lock.json 进行比较，如果重复的话，就跳过安装 ，从而优化了安装的过程。</p><h1 id="依赖的区别与使用场景"><a href="#依赖的区别与使用场景" class="headerlink" title="依赖的区别与使用场景"></a>依赖的区别与使用场景</h1><h2 id="npm-目前支持以下几类依赖包管理包括"><a href="#npm-目前支持以下几类依赖包管理包括" class="headerlink" title="npm 目前支持以下几类依赖包管理包括"></a>npm 目前支持以下几类依赖包管理包括</h2><ol><li><p>dependencies</p></li><li><p>devDependencies</p></li><li><p>optionalDependencies 可选择的依赖包</p></li><li><p>peerDependencies 同等依赖</p></li><li><p>bundledDependencies 捆绑依赖包</p></li></ol><p>下面我们来看一下这几种依赖的区别以及各自的应用场景：</p><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p>dependencies 是无论在开发环境还是在生产环境都必须使用的依赖，是我们最常用的依赖包管理对象，例如 React，Loadsh，Axios 等，通过 npm install XXX 下载的包都会默认安装在 dependencies 对象中，也可以使用 <code>npm install XXX --save</code> 下载 dependencies 中的包；</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;devDependencies&quot;:&#123;  &quot;eslint&quot;: &quot;^5.0.0&quot;,  &quot;debug&quot;: &quot;^3.1.0&quot;,&#125;</code></pre><h2 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h2><p>devDependencies 是指可以在开发环境使用的依赖，例如 eslint，debug 等，通过 <code>npm install packageName --save-dev</code> 下载的包都会在 devDependencies 对象中；</p><p>dependencies 和 devDependencies 最大的区别是在打包运行时，执行 <code>npm install</code> 时默认会把所有依赖全部安装，但是如果使用 <code>npm install --production</code> 时就只会安装 dependencies 中的依赖，如果是 node 服务项目，就可以采用这样的方式用于服务运行时安装和打包，减少包大小。</p><h2 id="optionalDependencies"><a href="#optionalDependencies" class="headerlink" title="optionalDependencies"></a>optionalDependencies</h2><p>optionalDependencies 指的是可以选择的依赖，当你希望某些依赖即使下载失败或者没有找到时，项目依然可以正常运行或者 npm 继续运行的时，就可以把这些依赖放在 optionalDependencies 对象中，但是 optionalDependencies 会覆盖 dependencies 中的同名依赖包，所以不要把一个包同时写进两个对象中。</p><p>optionalDependencies 就像是我们的代码的一种保护机制一样，如果包存在的话就走存在的逻辑，不存在的就走不存在的逻辑。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">try &#123;   var axios &#x3D; require(&#39;axios&#39;)   var fooVersion &#x3D; require(&#39;axios&#x2F;package.json&#39;).version &#125; catch (er) &#123;   foo &#x3D; null &#125; &#x2F;&#x2F; .. then later in your program .. if (foo) &#123;   foo.doFooThings() &#125; </code></pre><h2 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h2><p>peerDependencies 用于指定你当前的插件兼容的宿主必须要安装的包的版本，这个是什么意思呢？举个例子🌰：我们常用的 react 组件库 <code>ant-design@3.x</code> 的 <code>package.json</code> 中的配置如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;peerDependencies&quot;: &#123;   &quot;react&quot;: &quot;&gt;&#x3D;16.9.0&quot;,   &quot;react-dom&quot;: &quot;&gt;&#x3D;16.9.0&quot;  &#125;, </code></pre><p>假设我们创建了一个名为 project 的项目，在此项目中我们要使用 <code>ant-design@3.x</code> 这个插件，此时我们的项目就必须先安装 React &gt;&#x3D; 16.9.0 和 React-dom &gt;&#x3D; 16.9.0 的版本。</p><p>在 npm 2 中，当我们下载 <code>ant-design@3.x</code> 时，peerDependencies 中指定的依赖会随着 <code>ant-design@3.x</code> 一起被强制安装，所以我们不需要在宿主项目的 <code>package.json</code> 文件中指定 peerDependencies 中的依赖，但是在 npm 3 中，不会再强制安装 peerDependencies 中所指定的包，而是通过警告的方式来提示我们，此时就需要手动在 package.json 文件中手动添加依赖；</p><h2 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h2><p>这个依赖项也可以记为 bundleDependencies，与其他几种依赖项不同，他不是一个键值对的对象，而是一个数组，数组里是包名的字符串，例如：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;   &quot;name&quot;: &quot;project&quot;,   &quot;version&quot;: &quot;1.0.0&quot;,   &quot;bundleDependencies&quot;: [     &quot;axios&quot;,      &quot;lodash&quot;   ] &#125; </code></pre><p>当使用 npm pack 的方式来打包时，上述的例子会生成一个 project-1.0.0.tgz 的文件，在使用了 bundledDependencies 后，打包时会把 Axios 和 Lodash 这两个依赖一起放入包中，之后有人使用 <code>npm install project-1.0.0.tgz</code> 下载包时，Axios 和 Lodash 这两个依赖也会被安装。需要注意的是安装之后 Axios 和 Lodash 这两个包的信息在 dependencies 中，并且不包括版本信息。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;bundleDependencies&quot;: [     &quot;axios&quot;,     &quot;lodash&quot;   ], &quot;dependencies&quot;: &#123;   &quot;axios&quot;: &quot;*&quot;,   &quot;lodash&quot;: &quot;*&quot; &#125;, </code></pre><p>如果我们使用常规的 npm publish 来发布的话，这个属性是不会生效的，所以日常情况中使用的较少。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍的是 npm 2，npm 3，package-lock.json 以及几种依赖的区别和使用场景，希望能够让大家对 npm 的了解更加多一点，有什么不清楚的地方或者不足之处欢迎大家在评论区留言。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.zoo.team/article/npm-details">原文</a></li><li><a href="https://docs.npmjs.com/files/package.json#peerdependencies">package.json官方文档</a></li><li><a href="https://docs.npmjs.com/configuring-npm/package-lock-json.html#requires">package-lock-json官方文档</a></li><li><a href="https://juejin.im/post/6844903582337237006#heading-0">npm文档总结</a></li><li><a href="https://www.npmjs.cn/cli/pack/">npm-pack</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript noEmit</title>
      <link href="//post/2022-05-18ts.html"/>
      <url>//post/2022-05-18ts.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>No Emit -<br>noEmit<br>Do not emit compiler output files like JavaScript source code, source-maps or declarations.<br>不要发出编译器输出文件，如JavaScript源代码、源映射或声明。</p><p>This makes room for another tool like Babel, or swc to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p><p>You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.</p><p><code>导致outDir不输出</code></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slate 学习</title>
      <link href="//post/2022-04-29slate-lean.html"/>
      <url>//post/2022-04-29slate-lean.html</url>
      
        <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://doodlewind.github.io/slate-doc-cn/">slate 中文文档</a><br><a href="https://docs.slatejs.org/">slate 英文文档</a></p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://doodlewind.github.io/slate-doc-cn/">Slate</a> 是一个 完全 可定制的富文本编辑框架。<br>通过 Slate，你可以构建出类似 Medium、Dropbox Paper 或者 Canvas 这样使用直观、富交互、体验业已成为 Web 应用标杆的编辑器。同时，你也无需担心在代码实现上陷入复杂度的泥潭之中。</p></blockquote><h2 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>通过 Slate，你可以构建出类似 Medium、Dropbox Paper 或者 Canvas 这样使用直观、富交互、体验业已成为 Web 应用标杆的编辑器。同时，你也无需担心在代码实现上陷入复杂度的泥潭之中。<br>Slate 之所以能做到这一点，是因为它的所有逻辑都是通过一系列的插件实现的。这样，你就再也不会被某项特性 在 或 不在 编辑器【核心】边界之内的问题所困扰了。你可以将它理解为在 React 和 Immutable 基础上，一种可插拔的 contenteditable 实现。另外，它的灵感来自于 Draft.js，Prosemirror 和 Quill 等类库。</p></blockquote><h2 id="产生的背景"><a href="#产生的背景" class="headerlink" title="产生的背景"></a>产生的背景</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>为什么发明 Slate 呢？好吧…（注意，这部分内容包含了一些我的个人观点！）</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在发明 Slate 之前，我尝试了许多不同的富文本编辑器。我发现虽然它们在编写简单示例时基本没有问题，但一旦想要构建一些类似 Medium、Dropbox Paper 或者 Google Docs 这样的内容，你就会发现一些深层次的问题，比如…</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>编辑器硬编码了文档的结构规范，难以定制</strong>。类似加粗和斜体的结构可以开箱即用，但评论、嵌入内容以及更多的定制性需求呢？</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>对文档的编程式变换非常错综复杂</strong>。用户的编写体验可能不错，但在执行编程式变更时却不必要地复杂，而这对于构建高级的编辑行为至关重要。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>对 HTML、Markdown 等内容的序列化支持看起来像是事后加上的</strong>。这是一个非常常见的使用场景，但要实现将文档转换为 HTML 或 Markdown 的简单功能都需要编写大量的模板代码。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>重新学习一个新的视图层效率不高且十分受限</strong>。各种编辑器在重新发明视图层的轮子，而非使用 React 这样已有的技术方案。你必须学习一套带着自有限制和陷阱的新系统。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>**<code>对协同编辑没有预先设计好的支持</code>**。编辑器内部的数据结构使其无法用于实时、协作的编辑场景中，除非重写编辑器。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>代码仓库是单体的，而非小而可复用的</strong>。许多编辑器没有对外开放本应为开发者所复用的内部工具，以至于不得不重新发明轮子。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>无法构建复杂而存在嵌套关系的文档</strong>。不少编辑器是围绕简单的【扁平】文档结构设计的，这使得表格、嵌入内容和字幕等内容难以理解，有时甚至无法实现。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当然，并非所有的编辑器都存在以上的问题，但如果你已经尝试过一些编辑器，你可能已经踩过类似的坑了。为了摆脱它们在 API 上的限制来达到你期望的用户体验，你得使用各种奇技淫巧，有些体验甚至是完全无法实现的。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果你遇到了相似的问题，那么也许你会喜欢上 Slate。让我来介绍一下 Slate 是如何解决这些问题的吧…</p></blockquote><h2 id="提供了什么能力"><a href="#提供了什么能力" class="headerlink" title="提供了什么能力"></a>提供了什么能力</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Slate 尝试通过一些原则来解决 “Why?” 这一节中的问题：</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>作为一等公民的插件</strong>。 在 Slate 中最重要的一点是，插件是一等公民（first-class）的实体——甚至连编辑器的核心逻辑都是通过插件实现的。这意味着你能够 完全地 定制编辑体验，构建出对标 Medium 和 Canvas 那样的复杂编辑器，而无需对抗各种类库的预设条件。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>精简 Schema 的核心</strong>。 Slate 的核心逻辑并不对你所编辑的数据结构做任何假设，这意味着你在需要应对复杂场景时不会被编辑器预置的内容所束缚（译者注：此处 Schema 可理解为类似 XML Schema 的文档结构规范）。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>支持嵌套的文档模型</strong>。 Slate 所使用的文档模型是一棵嵌套的、递归的树，和 DOM 本身十分接近。这使得构建表格和嵌套引用等能够满足进阶需求的复杂组件成为了可能。当然，你同样可以使用单一的层级关系以保证简单性。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>无状态、不可变的数据</strong>。 通过使用 React 和 Immutable.js，我们是基于不可变数据结构，以无状态的方式构建 Slate 编辑器的。这大大降低了理解代码的难度，也节约了大量开发插件的时间。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>直观的 changes</strong>。 Slate 中的内容是通过 “change” 来编辑的，这是一种被设计为支持高阶使用，且极其符合直觉的概念。这样，我们就能够通过它来尽可能简单地编写插件和自定义功能了。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>**<code>为协同编辑准备的数据模型</code>**。 Slate 使用的数据模型——尤其是由 change 更改文档的方式——在设计时就已考虑到对协同编辑的支持。所以，如果你决定为编辑器添加协作功能，你不需要进行彻底的重构。（当然，这还需要你投入更多的努力！）</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>明确的【核心】边界划分。 通过插件优先的架构与精简 Schema 的内核，Slate 对于【核心】和【自定义】有着明确得多的划分，从而保证核心的编辑体验不会为各种边缘情况所困扰。</p></blockquote><h2 id="协同编辑，这个后面会持续关注"><a href="#协同编辑，这个后面会持续关注" class="headerlink" title="协同编辑，这个后面会持续关注"></a>协同编辑，这个后面会持续关注</h2><p><img src="http://t-blog-images.aijs.top/img/20220429152337.png"><br><a href="https://docs.slate-yjs.dev/">slate-yjs</a><br><a href="https://docs.yjs.dev/">yjs</a></p><h2 id="slate-文档不是很多，半小时看完"><a href="#slate-文档不是很多，半小时看完" class="headerlink" title="slate 文档不是很多，半小时看完"></a>slate 文档不是很多，半小时看完</h2><p>主要内容 </p><ul><li>插件定制化</li><li>渲染节点定制化</li><li>按键监听处理</li><li>数据格式编码、反编码</li><li>数据存储</li></ul><h2 id="就这点东西😱"><a href="#就这点东西😱" class="headerlink" title="就这点东西😱"></a>就这点东西😱</h2><p>竟然有些同学凭借slate的使用拿了3.75,赶紧学～</p>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="//post/2022-05-13design_mode.html"/>
      <url>//post/2022-05-13design_mode.html</url>
      
        <content type="html"><![CDATA[<h2 id="先聊用到过哪些，背后的设计模式是什么"><a href="#先聊用到过哪些，背后的设计模式是什么" class="headerlink" title="先聊用到过哪些，背后的设计模式是什么"></a>先聊用到过哪些，背后的设计模式是什么</h2><ol><li>实例化一个 axios 实例，全局都来使用它 <em>单例模式</em></li><li>兄弟组件通信,事件监听 <em>观察者模式</em></li><li>构造函数继承、类的继承 <em>构造函数模式</em></li><li>实例化不同的实例 <em>工厂模式</em></li><li>优化中的<code>事件代理</code><em>代理模式</em></li><li>esm、commonjs<em>模块模式</em></li></ol><p><em>熟悉而又陌生</em>：熟悉的是一直在用，陌生的是学名竟然是这些。我都有点怀疑了，这是真的吗？是真的吗？～～～</p><p><img    src="https://img1.baidu.com/it/u=1902986975,2375222058&fm=253&fmt=auto&app=138&f=JPEG?w=535&h=500"    width=100 style="border-radius: 10px"    /></p>   <div style="font-size: 20px; color: orange;margin-top: 30px">来～来～来～，我们继续。。。</div><h2 id="啥呀"><a href="#啥呀" class="headerlink" title="啥呀"></a>啥呀</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>“设计模式(英语 design pattern)是对面向对象设计中<code>反复出现的问题的解决方案</code>。这个术语是在1990年代由Erich Gamma等人从建筑设计领域<code>引入到</code>计算机科学中来的。”</p></blockquote><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li>作用：访问控制</li><li>场景：事件代理、Proxy、Object.defineProperty</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>定义：唯一实例，全局可访问</li><li>场景：请求实例、全局缓存、线程池、window 对象、登录浮框</li><li>实现：已经创建过的直接返回，不重复创建</li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>作用：创建同一类对象</li><li>分类：<em>简单工厂_、_方法工厂</em></li></ul><h3 id="1-简单工厂"><a href="#1-简单工厂" class="headerlink" title="1. 简单工厂"></a>1. 简单工厂</h3><ul><li>例如：项目中根据用户权限渲染不同的页面，在不同权限等级用户的构造函数中，保存用户可以看到的页面</li><li>优点：一个正确的参数，就可以获取到所需要的对象，无需知道其创建的具体细节</li><li>缺点：函数会成为一个超级函数，难以维护，简单工厂适用于创建少量对象，对象的逻辑不能复杂</li></ul><h3 id="2-工厂方法"><a href="#2-工厂方法" class="headerlink" title="2. 工厂方法"></a>2. 工厂方法</h3><ul><li>本质：将创建对象的工作，推迟到子类中，这样核心类就变成抽象类</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">let UserFactory &#x3D; function (type) &#123;  if (this instanceof UserFactory) &#123;    return new this[type]();  &#125; else &#123;    return new UserFactory(type);  &#125;&#125;;&#x2F;&#x2F; 工厂方法，函数的原型中设置所有对象的构造函数UserFactory.prototype &#x3D; &#123;  SuperAdmin: function () &#123;    this.name &#x3D; &quot;超级管理员&quot;;    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;, &quot;应用管理&quot;, &quot;权限管理&quot;];  &#125;,  Admin: function () &#123;    this.name &#x3D; &quot;管理员&quot;;    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;, &quot;用户管理&quot;];  &#125;,  NormalUser: function () &#123;    this.name &#x3D; &quot;普通用户&quot;;    this.viewPage &#x3D; [&quot;首页&quot;, &quot;订单管理&quot;];  &#125;,&#125;;&#x2F;&#x2F; 调用let superAdmin &#x3D; new UserFactory(&quot;SuperAdmin&quot;);let admin &#x3D; new UserFactory(&quot;Admin&quot;);let normalUser &#x3D; new UserFactory(&quot;NormalUser&quot;);</code></pre><h3 id="3-抽象工厂"><a href="#3-抽象工厂" class="headerlink" title="3. 抽象工厂"></a>3. 抽象工厂</h3><ul><li></li></ul><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><h2 id="👀-观察者模式"><a href="#👀-观察者模式" class="headerlink" title="👀 观察者模式"></a>👀 观察者模式</h2><ul><li>定义： 对象间的一种一对多的依赖关系</li><li>作用：一个对象状态发生变化时，所有依赖他的对象，都将得到通知</li><li>优点：解耦</li><li>组成：发布者、订阅者</li><li>场景：事件监听、eventBus</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">document.body.addEventListener(&quot;click&quot;, function () &#123;&#125;, false);</code></pre><h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2><h2 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h2><ul><li>作用：避免全局污染，按需暴露</li><li>实现：多采用闭包</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">var Person &#x3D; (function () &#123;  var name &#x3D; &quot;xxx&quot;;  function sayName(params) &#123;    console.log(name);  &#125;  return &#123;    name,    sayName,  &#125;;&#125;)();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant design form设置值 !== 获取值</title>
      <link href="//post/2022-05-13react.html"/>
      <url>//post/2022-05-13react.html</url>
      
        <content type="html"><![CDATA[<h2 id="有意思的事"><a href="#有意思的事" class="headerlink" title="有意思的事"></a>有意思的事</h2><ul><li>今天维护项目遇到一个有意思的事，直观感受，设置值，再取出来，貌似没毛病<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">  &#x2F;&#x2F; ...  const [values, setValues] &#x3D; useState&lt;Record&lt;string, any&gt;&gt;()  const &#123; applyStartTime, applyEndTime, attendanceType, staffId &#125; &#x3D; values || &#123;&#125;  const getDetail &#x3D; usePersistFn(async () &#x3D;&gt; &#123;    &#x2F;&#x2F; ...略    const obj: Record&lt;string, any&gt; &#x3D; &#123;      staffId: applyStaff.staffId,      attendanceType: res.result.attendanceType,      applyStartTime: &#123;        value: moment(res.result.applyStartTime),        half: res.result.startDayType,      &#125;,      applyEndTime: &#123;        value: moment(res.result.applyEndTime),        half: res.result.endDayType,      &#125;,      applyReason,      applyAttachments,    &#125;    &#x2F;&#x2F; ...略    form.setFieldsValue(obj)    setValues(form.getFieldsValue())  &#125;)  &#x2F;&#x2F; ...略  const &#123; total, loading: totalLoading &#125; &#x3D; useCaculateDays(    &#123;      start: applyStartTime,      end: applyEndTime,    &#125;,    staffId,    attendanceType,  )  &#x2F;&#x2F; ...略  &#x2F;&#x2F; AnualForm组件  &lt;Form.Item name&#x3D;&quot;applyStartTime&quot; label&#x3D;&quot;起始日期&quot; rules&#x3D;&#123;[&#123; required: true &#125;]&#125;&gt;      &lt;HalftDatePicker predict&#x3D;&#123;&#123; lessThan: end?.value &#125;&#125; &#x2F;&gt;    &lt;&#x2F;Form.Item&gt;  &lt;Form.Item name&#x3D;&quot;applyEndTime&quot; label&#x3D;&quot;结束日期&quot; rules&#x3D;&#123;[&#123; required: true &#125;]&#125;&gt;    &lt;HalftDatePicker predict&#x3D;&#123;&#123; moreThan: start?.value &#125;&#125; &#x2F;&gt;  &lt;&#x2F;Form.Item&gt;  type IValue &#x3D; &#123;    value?: moment.Moment    half: 1 | 2  &#125; &#x2F;&#x2F; HalftDatePicker组件const HalftDatePicker: React.ForwardRefRenderFunction&lt;any, PickerProps&lt;moment.Moment&gt; &amp; &#123;  value?: IValue  onChange?: (v?: IValue) &#x3D;&gt; void  predict?: &#123;    lessThan?: moment.Moment    moreThan?: moment.Moment    holiday?: boolean  &#125;&#125;&gt; &#x3D; (props, ref) &#x3D;&gt; &#123;  &#x2F;&#x2F; ...略&#125;</code></pre></li></ul><p>代码的目的是： </p><ol><li>请求详情</li><li>装配数据，更新values</li><li>useCaculateDays 通过后台动态计算有效工作日，返回total请假天数，</li><li>渲染total到表单对应位置</li></ol><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>经过一点一点回溯调试，发现 useCaculateDays 没请求，被判断拦截掉了，往上找找，</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">form.setFieldsValue(obj)setValues(form.getFieldsValue())</code></pre><h3 id="打上日志"><a href="#打上日志" class="headerlink" title="打上日志"></a>打上日志</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">&#x2F;&#x2F; ...略console.log(&quot;obj&quot;,obj);form.setFieldsValue(obj)console.log(&quot;obj1&quot;,form.getFieldsValue());setValues(obj)</code></pre><p>发现<code>obj</code>键值内容不等于<code>obj1</code></p><ul><li>obj</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;staffId&quot;: &quot;02333&quot;,    &quot;attendanceType&quot;: 11,    &quot;applyStartTime&quot;: &#123;        &quot;value&quot;: &quot;2022-03-23T16:00:00.000Z&quot;,        &quot;half&quot;: 1    &#125;,    &quot;applyEndTime&quot;: &#123;        &quot;value&quot;: &quot;2022-03-23T16:00:00.000Z&quot;,        &quot;half&quot;: 2    &#125;,    &quot;applyReason&quot;: &quot;&quot;,    &quot;applyAttachments&quot;: []&#125;</code></pre><ul><li>obj1<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;staffId&quot;: &quot;02333&quot;,    &quot;attendanceType&quot;: 11,    &quot;applyReason&quot;: &quot;&quot;,    &quot;applyAttachments&quot;: []&#125;</code></pre></li></ul><p><em>猜想</em></p><ul><li>会不会<code>form.setFieldsValue</code>异步？查了下api是同步的<em>排除这种可能</em></li><li>断点调试过程中，也会遇到表单渲染一半的情况，<code>AnualForm组件</code>是条件渲染，如果这块表单没有渲染出来，通过<code>form.getFieldsValue</code>就拿不到</li></ul><h3 id="修改代码验证下猜想"><a href="#修改代码验证下猜想" class="headerlink" title="修改代码验证下猜想"></a>修改代码验证下猜想</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">console.log(&quot;obj&quot;,obj);form.setFieldsValue(obj)console.log(&quot;obj1&quot;,form.getFieldsValue());setTimeout(() &#x3D;&gt; &#123;  setValues(form.getFieldsValue())  &#125;, 5000);&#125;</code></pre><img src="http://t-blog-images.aijs.top/img/Kapture%202022-05-13%20at%2016.01.46.gif" width=300 /><h3 id="最终修改"><a href="#最终修改" class="headerlink" title="最终修改"></a>最终修改</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">form.setFieldsValue(obj)setValues(obj)</code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModHeader</title>
      <link href="//post/2022-05-13modeheader.html"/>
      <url>//post/2022-05-13modeheader.html</url>
      
        <content type="html"><![CDATA[<h2 id="通过不同请求头字段标识请求不同的环境"><a href="#通过不同请求头字段标识请求不同的环境" class="headerlink" title="通过不同请求头字段标识请求不同的环境"></a>通过不同请求头字段标识请求不同的环境</h2><img src="http://t-blog-images.aijs.top/img/20220513145839.webp" width=400 /><h3 id="Requesr-Headers"><a href="#Requesr-Headers" class="headerlink" title="Requesr Headers"></a>Requesr Headers</h3><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Accept: *&#x2F;*Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,zh-TW;q&#x3D;0.7Cache-Control: no-cacheConnection: keep-alivecontent-type: application&#x2F;json; charset&#x3D;utf-8Cookie: perfLang&#x3D;zh; envtag: ladon-1        Host: localhost:3119Pragma: no-cacheReferer: http:&#x2F;&#x2F;localhost:3119&#x2F;sec-ch-ua: &quot; Not A;Brand&quot;;v&#x3D;&quot;99&quot;, &quot;Chromium&quot;;v&#x3D;&quot;101&quot;, &quot;Google Chrome&quot;;v&#x3D;&quot;101&quot;sec-ch-ua-mobile: ?0sec-ch-ua-platform: &quot;macOS&quot;</code></pre><h3 id="不生效了"><a href="#不生效了" class="headerlink" title="不生效了"></a>不生效了</h3><p>理论上是没问题，应该是由于某些原因导致这个插件内部运行出了问题，具体什么问题不知<br><em>处理：</em>将浏览器重启动后,请求头<code>envtag: ladon-1</code>增加成功</p>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器首屏优化-首屏时间获取</title>
      <link href="//post/2022-05-12performance.html"/>
      <url>//post/2022-05-12performance.html</url>
      
        <content type="html"><![CDATA[<h2 id="优化的指标"><a href="#优化的指标" class="headerlink" title="优化的指标"></a>优化的指标</h2><p>白屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器出现第一个元素<br>首屏时间 &#x3D; 地址栏输入网址后回车 - 浏览器第一屏渲染完成</p><p>影响白屏时间的因素：网络，服务端性能，前端页面结构设计。<br>影响首屏时间的因素：白屏时间，资源下载执行时间。</p><p>通常在 head 解析完，body 开始渲染此时是白屏结束<br>白屏时间 &#x3D; firstPaint - performance.timing.navigationStart || pageStartTime</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>首屏模块标签标记， 你觉得首屏完成的地方插入脚本</li><li>同级首屏内加载最慢的图片&#x2F;iframe</li></ol><p>这个图看不懂没关系，往下看，后面会以简书代码和掘金来验证这幅图的正确性</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9sejV6LmNvbS9hc3NldHMvaW1nL3BlcmZvcm1hbmNlLnBuZw?x-oss-process=image/format,png"></p><h2 id="输入-url-发生了什么"><a href="#输入-url-发生了什么" class="headerlink" title="输入 url 发生了什么"></a>输入 url 发生了什么</h2><ul><li>1、当浏览器地址中输入 url 后，<code>navigationStart</code>如果之前有前一个网页（与当前页面不一定同域）unload 的时间戳,如果无前一个网页 unload ，则与 fetchStart 值相等,</li><li>2、接着，是否有重定向（<code>redirect</code> ）</li><li>3、接着，准备用 HTTP 抓取文档的内容（<code>fetchStart</code>）<ul><li>域名查询（<code>domainLookupStart、domainLookupEnd</code>）</li><li>TCP 连接（<code>connectStart、connectEnd</code>）,如果是安全链接，在 connectEnd 之前，会有 SSL 连接(secureConnectionStart)</li></ul></li><li>4、接着，HTTP 请求（<code>requestStart、responseStart、responseEnd</code>）,如果有缓存，在 responseStart 之前，会有 cacheStart，如果之前有网页，还涉及到网页的 unload，在 cacheStart 之前，会有<code>unloadStart、unloadEnd</code></li><li>5、接着，dom 解析<ul><li><code>domLoading</code>Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</li><li><code>domInteractive</code>Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</li><li><code>domContentLoadedEventStart、domContentLoadedEventEnd </code>DOM 解析完成后，<ul><li>网页内资源加载开始，并将抛出 readystatechange 相关事件</li><li>网页内资源加载完成，并将抛出 readystatechange 相关事件</li></ul></li><li><code>loadEventStart</code>load 事件发送给文档，也即 load 回调函数开始执行</li><li><code>loadEventEnd</code>load 事件的回调函数执行完毕的时间</li><li><code>domComplete</code>Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</li><li>说明：dom 解析过程，HTML 生成 dom 树，解析 CSS 文件生成 CSSOM 树，DOM 树和 CSSOM 树生成 render 树，也就是渲染树， render 树中对每个节点进行布局，计算每个元素的大小，确定其在屏幕中的位置，绘制。根据 render 树和布局将显示页面</li></ul></li></ul><h2 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h2><p>左边红线代表的是网络传输层面的过程，右边红线代表了服务器传输回字节后浏览器的各种事件状态，这个阶段包含了浏览器对文档的解析，DOM 树构建，布局，绘制等等。<br><em>1. prompt for unload</em></p><ul><li>navigationStart: 表示从上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，这个值将和 fetchStart 相等。<br><em>2. 前一个网页卸载</em></li><li>unloadEventStart: 表示前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0。</li><li>unloadEventEnd: 返回前一个页面 unload 时间绑定的回掉函数执行完毕的时间戳。<br><em>3. 重定向</em></li><li>redirectStart: 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0。</li><li>redirectEnd: 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0。<br><em>4. 使用 HTTP 请求</em></li><li>fetchStart: 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前。<br><em>5. 域名解析</em></li><li>domainLookupStart&#x2F;domainLookupEnd: DNS 域名查询开始&#x2F;结束的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等<br><em>6. tcp 链接</em></li><li>connectStart: HTTP（TCP）开始&#x2F;重新 建立连接的时间，如果是持久连接，则与 fetchStart 值相等。</li><li>connectEnd: HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等。<br><em>7. ssl 建立</em></li><li>secureConnectionStart: HTTPS 连接开始的时间，如果不是安全连接，则值为 0。<br><em>8. 读取文档</em></li><li>requestStart: HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存。<br><em>9. 响应</em></li><li>responseStart: HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存。</li><li>responseEnd: HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存。<br><em>10. 解析 dom</em></li><li>domLoading: 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件。<br><em>11. dom 可交互</em></li><li>domInteractive: 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源。<br><em>12. 页面内资源加载</em></li><li>domContentLoadedEventStart: DOM 解析完成后，网页内资源加载开始的时间，在 DOMContentLoaded 事件抛出前发生。</li><li>domContentLoadedEventEnd: DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）。<br><em>13. dom 树解析完成</em></li><li>domComplete: DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件。<br><em>14. load 事件</em></li><li>loadEventStart: load 事件发送给文档，也即 load 回调函数开始执行的时间。</li><li>loadEventEnd: load 事件的回调函数执行完毕的时间。</li></ul><h2 id="Performance-接口"><a href="#Performance-接口" class="headerlink" title="Performance 接口"></a>Performance 接口</h2><p>Performance 接口可以获取到当前页面与性能相关的信息。</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p><strong>数据先不要关注时间循序，后面我们会从多个角度来验证顺序</strong></p></div><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;timeOrigin&quot;: 1652338539312.5,  &#x2F;&#x2F; 顺序已经排好了  &quot;timing&quot;: &#123;    &#x2F;&#x2F; 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等    &quot;navigationStart&quot;: 1652338539312,    &#x2F;&#x2F; 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0    &quot;redirectStart&quot;: 0,    &#x2F;&#x2F; 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0    &quot;redirectEnd&quot;: 0,    &#x2F;&#x2F; 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前    &quot;fetchStart&quot;: 1652338539316,    &#x2F;&#x2F; DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等    &quot;domainLookupStart&quot;: 1652338539353,    &#x2F;&#x2F; DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等    &quot;domainLookupEnd&quot;: 1652338539353,    &#x2F;&#x2F; HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等    &#x2F;&#x2F; 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间    &quot;connectStart&quot;: 1652338539353,    &#x2F;&#x2F; HTTPS 连接开始的时间，如果不是安全连接，则值为 0    &quot;secureConnectionStart&quot;: 1652338539401,    &#x2F;&#x2F; HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等    &#x2F;&#x2F; 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间    &#x2F;&#x2F; 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过    &quot;connectEnd&quot;: 1652338539504,    &#x2F;&#x2F; HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存    &#x2F;&#x2F; 连接错误重连时，这里显示的也是新建立连接的时间    &quot;requestStart&quot;: 1652338539505,    &#x2F;&#x2F; HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存    &quot;responseStart&quot;: 1652338539807,    &#x2F;&#x2F; 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0    &quot;unloadEventStart&quot;: 0,    &#x2F;&#x2F; 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳    &quot;unloadEventEnd&quot;: 0,    &#x2F;&#x2F; HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存    &quot;responseEnd&quot;: 1652338539828,    &#x2F;&#x2F; 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件    &quot;domLoading&quot;: 1652338539823,    &#x2F;&#x2F; 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件    &#x2F;&#x2F; 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源    &quot;domInteractive&quot;: 1652338540574,    &#x2F;&#x2F; DOM 解析完成后，网页内资源加载开始的时间    &#x2F;&#x2F; 在 DOMContentLoaded 事件抛出前发生    &quot;domContentLoadedEventStart&quot;: 1652338540574,    &#x2F;&#x2F; DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）    &quot;domContentLoadedEventEnd&quot;: 1652338540575,    &#x2F;&#x2F; load 事件发送给文档，也即 load 回调函数开始执行的时间    &#x2F;&#x2F; 注意如果没有绑定 load 事件，值为 0    &quot;loadEventStart&quot;: 1652338542489,    &#x2F;&#x2F; load 事件的回调函数执行完毕的时间    &quot;loadEventEnd&quot;: 1652338542492,    &#x2F;&#x2F; DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件    &quot;domComplete&quot;: 1652338542489  &#125;,  &quot;navigation&quot;: &#123;    &#x2F;&#x2F; 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）    &#x2F;&#x2F; 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面    &#x2F;&#x2F; 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）    &#x2F;&#x2F; 255 即 TYPE_UNDEFINED    非以上方式进入的页面    &quot;type&quot;: 0,    &quot;redirectCount&quot;: 0 &#x2F;&#x2F; &#x2F;&#x2F; 如果有重定向的话，页面通过几次重定向跳转而来  &#125;&#125;</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">function getPerfermanceTiming() &#123;  let t &#x3D; performance.timing;  &#x2F;&#x2F; 重定向结束时间 - 重定向开始时间  let redirect &#x3D; t.redirectEnd - t.redirectStart;  &#x2F;&#x2F; DNS 查询开始时间 - fetech start 时间  let appCache &#x3D; t.domainLookupStart - t.fetchStart;  &#x2F;&#x2F; DNS 查询结束时间 - DNS 查询开始时间  let dns &#x3D; t.domainLookupEnd - t.domainLookupStart;  &#x2F;&#x2F; 完成 TCP 连接握手时间 - TCP 连接开始时间  let tcp &#x3D; t.connectEnd - t.connectStart;  &#x2F;&#x2F; 从请求开始到接收到第一个响应字符的时间  let ttfb &#x3D; t.responseStart - t.requestStart;  &#x2F;&#x2F; 资源下载时间，响应结束时间 - 响应开始时间  let contentDL &#x3D; t.responseEnd - t.responseStart;  &#x2F;&#x2F; 从请求开始到响应结束的时间  let httpTotal &#x3D; t.responseEnd - t.requestStart;  &#x2F;&#x2F; 从页面开始到 domContentLoadedEventEnd  let domContentloaded &#x3D; t.domContentLoadedEventEnd - t.navigationStart;  &#x2F;&#x2F; 从页面开始到 loadEventEnd  let loaded &#x3D; t.loadEventEnd - t.navigationStart;  let result &#x3D; [    &#123; key: &quot;Redirect&quot;, desc: &quot;网页重定向的耗时&quot;, value: redirect &#125;,    &#123; key: &quot;AppCache&quot;, desc: &quot;检查本地缓存的耗时&quot;, value: appCache &#125;,    &#123; key: &quot;DNS&quot;, desc: &quot;DNS查询的耗时&quot;, value: dns &#125;,    &#123; key: &quot;TCP&quot;, desc: &quot;TCP连接的耗时&quot;, value: tcp &#125;,    &#123;      key: &quot;Waiting(TTFB)&quot;,      desc: &quot;从客户端发起请求到接收到响应的时间 &#x2F; Time To First Byte&quot;,      value: ttfb,    &#125;,    &#123;      key: &quot;Content Download&quot;,      desc: &quot;下载服务端返回数据的时间&quot;,      value: contentDL,    &#125;,    &#123; key: &quot;HTTP Total Time&quot;, desc: &quot;http请求总耗时&quot;, value: httpTotal &#125;,    &#123;      key: &quot;DOMContentLoaded&quot;,      desc: &quot;dom加载完成的时间&quot;,      value: domContentloaded,    &#125;,    &#123; key: &quot;Loaded&quot;, desc: &quot;页面load的总耗时&quot;, value: loaded &#125;,  ];  return result;&#125;getPerfermanceTiming();</code></pre><hr/><h2 id="聊下性能计算"><a href="#聊下性能计算" class="headerlink" title="聊下性能计算"></a>聊下性能计算</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 计算加载时间function getPerformanceTiming() &#123;  var performance &#x3D; window.performance;  if (!performance) &#123;    &#x2F;&#x2F; 当前浏览器不支持    console.log(&quot;你的浏览器不支持 performance 接口&quot;);    return;  &#125;  var t &#x3D; performance.timing;  var times &#x3D; &#123;&#125;;  &#x2F;&#x2F;【重要】页面加载完成的时间  &#x2F;&#x2F;【原因】这几乎代表了用户等待页面可用的时间  times.loadPage &#x3D; t.loadEventEnd - t.navigationStart;  &#x2F;&#x2F;【重要】解析 DOM 树结构的时间  &#x2F;&#x2F;【原因】反省下你的 DOM 树嵌套是不是太多了！  times.domReady &#x3D; t.domComplete - t.responseEnd;  &#x2F;&#x2F;【重要】重定向的时间  &#x2F;&#x2F;【原因】拒绝重定向！比如，http:&#x2F;&#x2F;example.com&#x2F; 就不该写成 http:&#x2F;&#x2F;example.com  times.redirect &#x3D; t.redirectEnd - t.redirectStart;  &#x2F;&#x2F;【重要】DNS 查询时间  &#x2F;&#x2F;【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？  &#x2F;&#x2F; 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000000633364)  times.lookupDomain &#x3D; t.domainLookupEnd - t.domainLookupStart;  &#x2F;&#x2F;【重要】读取页面第一个字节的时间  &#x2F;&#x2F;【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？  &#x2F;&#x2F; TTFB 即 Time To First Byte 的意思  &#x2F;&#x2F; 维基百科：https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time_To_First_Byte  times.ttfb &#x3D; t.responseStart - t.navigationStart;  &#x2F;&#x2F;【重要】内容加载完成的时间  &#x2F;&#x2F;【原因】页面内容经过 gzip 压缩了么，静态资源 css&#x2F;js 等压缩了么？  times.request &#x3D; t.responseEnd - t.requestStart;  &#x2F;&#x2F;【重要】执行 onload 回调函数的时间  &#x2F;&#x2F;【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？  times.loadEvent &#x3D; t.loadEventEnd - t.loadEventStart;  &#x2F;&#x2F; DNS 缓存时间  times.appcache &#x3D; t.domainLookupStart - t.fetchStart;  &#x2F;&#x2F; 卸载页面的时间  times.unloadEvent &#x3D; t.unloadEventEnd - t.unloadEventStart;  &#x2F;&#x2F; TCP 建立连接完成握手的时间  times.connect &#x3D; t.connectEnd - t.connectStart;  return times;&#125;</code></pre><h2 id="聊下性能优化"><a href="#聊下性能优化" class="headerlink" title="聊下性能优化"></a>聊下性能优化</h2><p><strong>假设你对 performance API 很熟悉</strong></p><ul><li>减少重定向次数</li><li>DNS 查询时间：HTML5 Prefetch 预查询</li><li>TCP 连接: http1.1 开启 connect: keep-alive, http2.0， 如果可以的话 <strong>http3.0 可以看本站另一篇文章</strong></li><li>资源压缩：gzip、brotli、图片压缩、tree-shaking、console 移除</li><li>资源整合：减少请求次数、减少网络请求，雪碧图（虽然 http2 提供了<strong>多路复用</strong>[多路复用代替了 HTTP1.x 的序列和阻塞机制，所有的相同域名请求都通过同一个 TCP 连接并发完成。在 HTTP1.x 中，并发多个请求需要多个 TCP 连接，浏览器为了控制资源会有 6-8 个 TCP 连接都限制,单个连接上可以并行交错的请求和响应，之间互不干扰,但是数量猛增，服务器要处理，多多少少也耗性能]的能力，而且现在还有使用的常见，比聊天表情，飞书也在用）</li><li>资源加载：CDN、强缓存和协商缓存、按需加载</li><li>DOM 解析：自上而下，script 标签放在底部，css 放在上面，无论是 html 还是 css 的层级，应尽量少的解析，解析消耗性能</li><li>渲染时候：回流和重绘、懒加载、虚拟列表</li></ul><h2 id="两个事例"><a href="#两个事例" class="headerlink" title="两个事例"></a>两个事例</h2><p><strong>飞书雪碧图</strong></p><ul><li>为什么拿飞书桌端数据来说（之前开发桌面端Electron，扒拉过飞书应用包的数据)</li></ul><img src="http://t-blog-images.aijs.top/img/20220606170307.webp" width=200 style="object-fit:content"/><p><strong>京东移动端 dns-prefetch</strong></p><ul><li>为什么拿京东数据来说（之前爬取过京东移动端数据开发 RN)</li></ul><p><img src="http://t-blog-images.aijs.top/img/20220606172316.webp"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;head&gt;  &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    window.alert &#x3D; console.log;  &lt;&#x2F;script&gt;  &lt;script&gt;    window._PFM_TIMING &#x3D; [[1351, new Date()]]; &#x2F;&#x2F;TODO  &lt;&#x2F;script&gt;  &lt;meta    name&#x3D;&quot;viewport&quot;    content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot;  &#x2F;&gt;  &lt;title&gt;多快好省，购物上京东！&lt;&#x2F;title&gt;  &lt;!-- 强缓存Cache-Control --&gt;  &lt;meta http-equiv&#x3D;&quot;Cache-Control&quot; content&#x3D;&quot;max-age&#x3D;180&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;apple-mobile-web-app-capable&quot; content&#x3D;&quot;yes&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;apple-mobile-web-app-status-bar-style&quot; content&#x3D;&quot;black&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt;  &lt;!-- 京东 &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt; 写重复了 --&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;m.360buyimg.com&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot; &#x2F;&gt;  &lt;meta    name&#x3D;&quot;viewport&quot;    content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0, shrink-to-fit&#x3D;no, viewport-fit&#x3D;cover&quot;  &#x2F;&gt;  &lt;!-- X-DNS-Prefetch-Control 头控制着浏览器的 DNS 预读取功能  DNS 预读取是一项使浏览器主动去执行域名解析的功能--&gt;  &lt;meta http-equiv&#x3D;&quot;x-dns-prefetch-control&quot; content&#x3D;&quot;on&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img11.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img10.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img12.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img13.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img14.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img20.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;img30.360buyimg.com&quot; &#x2F;&gt;  &lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;wq.360buyimg.com&quot; &#x2F;&gt;&lt;&#x2F;head&gt;</code></pre><h2 id="performance-数据能干啥用？"><a href="#performance-数据能干啥用？" class="headerlink" title="performance 数据能干啥用？"></a>performance 数据能干啥用？</h2><p>（开发者）熟悉 Chrome 开发者工具的朋友应该知道：在开发环境下，其实我们自己打开 Chrome 的开发者工具，切换到网络面板，就能很详细的看到网页性能相关的数据。</p><p>（网站用户）但当我们需要统计分析用户打开我们网页时的性能如何时，我们将 performance 原始信息或通过简单计算后的信息 (如上面写到的 getPerformanceTiming()) 上传到服务器，配合其他信息（如 HTTP 请求头信息），就完美啦~</p><h2 id="来看下简书"><a href="#来看下简书" class="headerlink" title="来看下简书"></a>来看下简书</h2><ul><li>链接 <a href="https://www.jianshu.com/p/464593cea4dc" target="_blank" >简书</a> ,打开控制台可以看到输出结果一个数组（<strong>如果简书没将此日志去除</strong>）</li><li>简书代码</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">window.addEventListener(&quot;load&quot;, function () &#123;  setTimeout(function () &#123;    var e &#x3D; window.performance;    if (e) &#123;      var t &#x3D; e.getEntriesByType(&quot;navigation&quot;)[0],        r &#x3D; 0;      t || (r &#x3D; (t &#x3D; e.timing).navigationStart);      var n &#x3D; [        &#123;          key: &quot;Redirect&quot;,          desc: &quot;\u7f51\u9875\u91cd\u5b9a\u5411\u7684\u8017\u65f6&quot;,          value: t.redirectEnd - t.redirectStart,        &#125;,        &#123;          key: &quot;AppCache&quot;,          desc: &quot;\u68c0\u67e5\u672c\u5730\u7f13\u5b58\u7684\u8017\u65f6&quot;,          value: t.domainLookupStart - t.fetchStart,        &#125;,        &#123;          key: &quot;DNS&quot;,          desc: &quot;DNS\u67e5\u8be2\u7684\u8017\u65f6&quot;,          value: t.domainLookupEnd - t.domainLookupStart,        &#125;,        &#123;          key: &quot;TCP&quot;,          desc: &quot;TCP\u8fde\u63a5\u7684\u8017\u65f6&quot;,          value: t.connectEnd - t.connectStart,        &#125;,        &#123;          key: &quot;Waiting(TTFB)&quot;,          desc: &quot;\u4ece\u5ba2\u6237\u7aef\u53d1\u8d77\u8bf7\u6c42\u5230\u63a5\u6536\u5230\u54cd\u5e94\u7684\u65f6\u95f4 &#x2F; Time To First Byte&quot;,          value: t.responseStart - t.requestStart,        &#125;,        &#123;          key: &quot;Content Download&quot;,          desc: &quot;\u4e0b\u8f7d\u670d\u52a1\u7aef\u8fd4\u56de\u6570\u636e\u7684\u65f6\u95f4&quot;,          value: t.responseEnd - t.responseStart,        &#125;,        &#123;          key: &quot;HTTP Total Time&quot;,          desc: &quot;http\u8bf7\u6c42\u603b\u8017\u65f6&quot;,          value: t.responseEnd - t.requestStart,        &#125;,        &#123;          key: &quot;DOMContentLoaded&quot;,          desc: &quot;dom\u52a0\u8f7d\u5b8c\u6210\u7684\u65f6\u95f4&quot;,          value: t.domContentLoadedEventEnd - r,        &#125;,        &#123;          key: &quot;Loaded&quot;,          desc: &quot;\u9875\u9762load\u7684\u603b\u8017\u65f6&quot;,          value: t.loadEventEnd - r,        &#125;,      ];      if (Math.random() &gt; 0.75) &#123;        var s &#x3D; window.location,          i &#x3D; s.href,          c &#x3D; s.pathname,          u &#x3D; navigator.userAgent,          d &#x3D; i.split(&quot;?&quot;)[0];        o.a          .post(&quot;https:&#x2F;&#x2F;tr.jianshu.com&#x2F;fe&#x2F;1&#x2F;mon&#x2F;atf&quot;, &#123;            app: &quot;shakespeare-performance&quot;,            url: d,            ua: u,            path: c,            stats_ttfb: t.responseStart - t.requestStart,            stats_domLoaded: t.domContentLoadedEventEnd - r,            stats_loaded: t.loadEventEnd - r,          &#125;)          .then(a.a)          .catch(a.a);      &#125;      console &amp;&amp; console.log &amp;&amp; console.log(n);    &#125;  &#125;, 0);&#125;);</code></pre><h2 id="简书截图"><a href="#简书截图" class="headerlink" title="简书截图"></a>简书截图</h2><p><img src="http://t-blog-images.aijs.top/img/20220605112219.webp"></p><h2 id="domContentLoaded-与-loaded"><a href="#domContentLoaded-与-loaded" class="headerlink" title="domContentLoaded 与 loaded"></a>domContentLoaded 与 loaded</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F; 从页面开始到 domContentLoadedEventEndlet domContentloaded &#x3D; t.domContentLoadedEventEnd - t.navigationStart;&#x2F;&#x2F; 从页面开始到 loadEventEndlet loaded &#x3D; t.loadEventEnd - t.navigationStart;</code></pre><p><strong>domContentLoadedEventEnd 比 loaded 先触发</strong></p><p><img src="http://t-blog-images.aijs.top/img/20220605133905.webp"></p><hr/><h2 id="掘金页面"><a href="#掘金页面" class="headerlink" title="掘金页面"></a>掘金页面</h2><ul><li><p>话说已经到了 6 月 6 号，闲逛掘金，遇到面试题：<code>从输入url到页面展示发生了什么</code>，突然想起个 performance,就拿掘金的一个页面来验证这幅图</p><p><img src="http://t-blog-images.aijs.top/img/20220606151451.webp"></p></li></ul><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">WARNING</p><p>注意：此代码放到 dayjs 网站的 Sources&#x2F;Snippets 中执行，利用全局的 dayjs，无需引入 dayjs</div><p><a href="https://dayjs.fenxianglu.cn/category/display.html#%E6%A0%BC%E5%BC%8F%E5%8C%96" target="_blank" >dayjs 网站</a></p><p><img src="http://t-blog-images.aijs.top/img/20220606152413.webp"></p><ul><li>代码是为了对performance.timing按照时间值进行排序，排序结果大致是执行的顺序，稍微有出入，会手动做调整</li><li>代码如下：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">var timing &#x3D; &#123;  connectStart: 1654499041800,  navigationStart: 1654499041744,  loadEventEnd: 1654499043641,  domLoading: 1654499042279,  secureConnectionStart: 1654499041820,  fetchStart: 1654499041746,  domContentLoadedEventStart: 1654499042718,  responseStart: 1654499042247,  responseEnd: 1654499042304,  domInteractive: 1654499042495,  domainLookupEnd: 1654499041800,  redirectStart: 0,  requestStart: 1654499041849,  unloadEventEnd: 1654499042267,  unloadEventStart: 1654499042267,  domComplete: 1654499043640,  domainLookupStart: 1654499041750,  loadEventStart: 1654499043641,  domContentLoadedEventEnd: 1654499042718,  redirectEnd: 0,  connectEnd: 1654499041849,&#125;;&#x2F;&#x2F; YYYY-MM-DD HH:一定一致，这个就不看了var fmt &#x3D; &quot;mm:ss:SSS&quot;;var arr &#x3D; [];var sort_obj &#x3D; &#123;&#125;;function fmt_sort_key(obj) &#123;  for (let [key, value] of Object.entries(obj)) &#123;    arr.push(&#123;      key,      value,    &#125;);  &#125;  const sortArr &#x3D; arr.sort((a, b) &#x3D;&gt; a.value - b.value);  const fmtSortArr &#x3D; sortArr.map((item) &#x3D;&gt; &#123;    if (!item.value) return item;    return &#123;      ...item,      value: dayjs(item.value).format(fmt),    &#125;;  &#125;);  console.log(fmtSortArr);&#125;fmt_sort_key(timing);</code></pre><h2 id="非无痕首次访问"><a href="#非无痕首次访问" class="headerlink" title="非无痕首次访问"></a>非无痕首次访问</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">const timing &#x3D; &#123;  connectStart: 1654391072118,  navigationStart: 1654391071928,  loadEventEnd: 1654391076402,  domLoading: 1654391072670,  secureConnectionStart: 1654391072118,  fetchStart: 1654391071969,  domContentLoadedEventStart: 1654391074189,  responseStart: 1654391072621,  responseEnd: 1654391072664,  domInteractive: 1654391073865,  domainLookupEnd: 1654391072118,  redirectStart: 0,  requestStart: 1654391072199,  &#x2F;&#x2F; 没有之前页面的卸载  unloadEventEnd: 0,  unloadEventStart: 0,  domComplete: 1654391076400,  domainLookupStart: 1654391072118,  loadEventStart: 1654391076400,  domContentLoadedEventEnd: 1654391074189,  redirectEnd: 0,  connectEnd: 1654391072199,&#125;;&#x2F;&#x2F; 时间戳 1654391072118： connectStart、secureConnectionStart、domainLookupStart、domainLookupEnd ，这个值是相同的&#x2F;&#x2F; 把上述 timing 使用dayjs进行转化，看下每个key对应的time,对于0是没有进行的操作，我们跳过不处理（知道没进行）var timingfmt &#x3D; [  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;04:31:928&quot; &#125;,  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;04:31:969&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;04:32:118&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;04:32:118&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;04:32:118&quot; &#125;,  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;04:32:118&quot; &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;04:32:199&quot; &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;04:32:199&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;04:32:621&quot; &#125;,  &#123; key: &quot;unloadEventStart&quot;, value: 0 &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: 0 &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;04:32:664&quot; &#125;,  &#123; key: &quot;domLoading&quot;, value: &quot;04:32:670&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;04:33:865&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;04:34:189&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;04:34:189&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;04:36:400&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;04:36:400&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;04:36:402&quot; &#125;,];</code></pre><p><strong>我们看下结果 2022-06-05 09:04，年月日时分都是一致的，我们只关心三位的毫秒数</strong></p><h2 id="非无痕第二次访问"><a href="#非无痕第二次访问" class="headerlink" title="非无痕第二次访问"></a>非无痕第二次访问</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">const timing2 &#x3D; &#123;  connectStart: 1654494048918,  navigationStart: 1654494048902,  loadEventEnd: 1654494054146,  domLoading: 1654494049851,  secureConnectionStart: 0, &#x2F;&#x2F; 走缓存  fetchStart: 1654494048918,  domContentLoadedEventStart: 1654494051380,  responseStart: 1654494049430,  responseEnd: 1654494049514,  domInteractive: 1654494051115,  domainLookupEnd: 1654494048918,  redirectStart: 0,  requestStart: 1654494048942,  &#x2F;&#x2F; 有之前页面卸载  unloadEventEnd: 1654494049537,  unloadEventStart: 1654494049536,  domComplete: 1654494054143,  domainLookupStart: 1654494048918,  loadEventStart: 1654494054143,  domContentLoadedEventEnd: 1654494051381,  redirectEnd: 0,  connectEnd: 1654494048918,&#125;;var timingfmt2 &#x3D; [  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;40:48:902&quot; &#125;,  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;40:48:918&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;40:48:918&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;40:48:918&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;40:48:918&quot; &#125;,  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;40:48:918&quot; &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;40:48:942&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;40:49:430&quot; &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;40:49:514&quot; &#125;,  &#123; key: &quot;unloadEventStart&quot;, value: &quot;40:49:536&quot; &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;40:49:537&quot; &#125;,  &#123; key: &quot;domLoading&quot;, value: &quot;40:49:851&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;40:51:115&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;40:51:380&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;40:51:381&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;40:54:143&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;40:54:143&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;40:54:146&quot; &#125;,];</code></pre><h2 id="非无痕-f5-手动刷新"><a href="#非无痕-f5-手动刷新" class="headerlink" title="非无痕 f5 手动刷新"></a>非无痕 f5 手动刷新</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">var timing3 &#x3D; &#123;  connectStart: 1654495600379,  navigationStart: 1654495600360,  loadEventEnd: 1654495604101,  domLoading: 1654495601005,  secureConnectionStart: 1654495600389,  fetchStart: 1654495600364,  domContentLoadedEventStart: 1654495601947,  responseStart: 1654495600935,  responseEnd: 1654495600989,  domInteractive: 1654495601794,  domainLookupEnd: 1654495600379,  redirectStart: 0,  requestStart: 1654495600404,  unloadEventEnd: 1654495600971,  unloadEventStart: 1654495600970,  domComplete: 1654495604099,  domainLookupStart: 1654495600379,  loadEventStart: 1654495604099,  domContentLoadedEventEnd: 1654495601947,  redirectEnd: 0,  connectEnd: 1654495600403,&#125;;var timingfmt3 &#x3D; [  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;06:40:360&quot; &#125;,  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;06:40:364&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;06:40:379&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;06:40:379&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;06:40:379&quot; &#125;,  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;06:40:389&quot; &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;06:40:403&quot; &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;06:40:404&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;06:40:935&quot; &#125;,  &#123; key: &quot;unloadEventStart&quot;, value: &quot;06:40:970&quot; &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;06:40:971&quot; &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;06:40:989&quot; &#125;,  &#123; key: &quot;domLoading&quot;, value: &quot;06:41:005&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;06:41:794&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;06:41:947&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;06:41:947&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;06:44:099&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;06:44:099&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;06:44:101&quot; &#125;,];</code></pre><h2 id="无痕模式首次"><a href="#无痕模式首次" class="headerlink" title="无痕模式首次"></a>无痕模式首次</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">var timing4 &#x3D; &#123;  connectStart: 1654496795083,  navigationStart: 1654496795041,  loadEventEnd: 1654496799718,  domLoading: 1654496795428,  secureConnectionStart: 1654496795093,  fetchStart: 1654496795050,  domContentLoadedEventStart: 1654496796111,  responseStart: 1654496795420,  responseEnd: 1654496795469,  domInteractive: 1654496795680,  domainLookupEnd: 1654496795083,  redirectStart: 0,  requestStart: 1654496795123,  unloadEventEnd: 0,  unloadEventStart: 0,  domComplete: 1654496799718,  domainLookupStart: 1654496795057,  loadEventStart: 1654496799718,  domContentLoadedEventEnd: 1654496796111,  redirectEnd: 0,  connectEnd: 1654496795123,&#125;;var timing4fmt &#x3D; [  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;26:35:041&quot; &#125;,  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;26:35:050&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;26:35:057&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;26:35:083&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;26:35:083&quot; &#125;,  &#123; key: &quot;secureConnectionStart&quot;, value: &quot;26:35:093&quot; &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;26:35:123&quot; &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;26:35:123&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;26:35:420&quot; &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: 0 &#125;,  &#123; key: &quot;unloadEventStart&quot;, value: 0 &#125;,  &#123; key: &quot;domLoading&quot;, value: &quot;26:35:428&quot; &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;26:35:469&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;26:35:680&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;26:36:111&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;26:36:111&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;26:39:718&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;26:39:718&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;26:39:718&quot; &#125;,];</code></pre><h2 id="无痕模式刷新"><a href="#无痕模式刷新" class="headerlink" title="无痕模式刷新"></a>无痕模式刷新</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">var timing5 &#x3D; &#123;  connectStart: 1654496848681,  navigationStart: 1654496848679,  loadEventEnd: 1654496850263,  domLoading: 1654496848983,  secureConnectionStart: 0,  fetchStart: 1654496848681,  domContentLoadedEventStart: 1654496849277,  responseStart: 1654496848959,  responseEnd: 1654496849017,  domInteractive: 1654496849096,  domainLookupEnd: 1654496848681,  redirectStart: 0,  requestStart: 1654496848702,  unloadEventEnd: 1654496848979,  unloadEventStart: 1654496848979,  domComplete: 1654496850262,  domainLookupStart: 1654496848681,  loadEventStart: 1654496850262,  domContentLoadedEventEnd: 1654496849277,  redirectEnd: 0,  connectEnd: 1654496848681,&#125;;var timing5fmt &#x3D; [  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;27:28:679&quot; &#125;,  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;27:28:681&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;27:28:681&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;27:28:681&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;27:28:681&quot; &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;27:28:681&quot; &#125;,  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;27:28:702&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;27:28:959&quot; &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;27:28:979&quot; &#125;,  &#123; key: &quot;unloadEventStart&quot;, value: &quot;27:28:979&quot; &#125;,  &#123; key: &quot;domLoading&quot;, value: &quot;27:28:983&quot; &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;27:29:017&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;27:29:096&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;27:29:277&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;27:29:277&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;27:30:262&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;27:30:262&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;27:30:263&quot; &#125;,];</code></pre><h2 id="无痕模式刷新-disable-cache"><a href="#无痕模式刷新-disable-cache" class="headerlink" title="无痕模式刷新 + disable-cache"></a>无痕模式刷新 + disable-cache</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">var timing6 &#x3D; &#123;  connectStart: 1654496917781,  navigationStart: 1654496917780,  loadEventEnd: 1654496921224,  domLoading: 1654496918186,  secureConnectionStart: 0,  fetchStart: 1654496917781,  domContentLoadedEventStart: 1654496918836,  responseStart: 1654496918156,  responseEnd: 1654496918293,  domInteractive: 1654496918654,  domainLookupEnd: 1654496917781,  redirectStart: 0,  requestStart: 1654496917784,  unloadEventEnd: 1654496918182,  unloadEventStart: 1654496918182,  domComplete: 1654496921224,  domainLookupStart: 1654496917781,  loadEventStart: 1654496921224,  domContentLoadedEventEnd: 1654496918836,  redirectEnd: 0,  connectEnd: 1654496917781,&#125;;var timing6fmt &#x3D; [  &#x2F;&#x2F; 以下按照时间排序  &#123; key: &quot;navigationStart&quot;, value: &quot;28:37:780&quot; &#125;,  &#x2F;&#x2F; 时间为0是没有进行相应的操作，跳过不处理  &#123; key: &quot;redirectStart&quot;, value: 0 &#125;,  &#123; key: &quot;redirectEnd&quot;, value: 0 &#125;,  &#123; key: &quot;fetchStart&quot;, value: &quot;28:37:781&quot; &#125;,  &#123; key: &quot;domainLookupEnd&quot;, value: &quot;28:37:781&quot; &#125;,  &#123; key: &quot;domainLookupStart&quot;, value: &quot;28:37:781&quot; &#125;,  &#123; key: &quot;connectStart&quot;, value: &quot;28:37:781&quot; &#125;,  &#123; key: &quot;connectEnd&quot;, value: &quot;28:37:781&quot; &#125;,  &#123; key: &quot;secureConnectionStart&quot;, value: 0 &#125;,  &#123; key: &quot;requestStart&quot;, value: &quot;28:37:784&quot; &#125;,  &#123; key: &quot;responseStart&quot;, value: &quot;28:38:156&quot; &#125;,  &#x2F;&#x2F; 和 timing5fmt比较，之前页面的卸载，非常快  &#123; key: &quot;unloadEventStart&quot;, value: &quot;28:38:182&quot; &#125;,  &#123; key: &quot;unloadEventEnd&quot;, value: &quot;28:38:182&quot; &#125;,  &#x2F;&#x2F; 注意 domLoading 和 responseEnd,这两个，顺序不定  &#123; key: &quot;domLoading&quot;, value: &quot;28:38:186&quot; &#125;,  &#123; key: &quot;responseEnd&quot;, value: &quot;28:38:293&quot; &#125;,  &#123; key: &quot;domInteractive&quot;, value: &quot;28:38:654&quot; &#125;,  &#123; key: &quot;domContentLoadedEventStart&quot;, value: &quot;28:38:836&quot; &#125;,  &#123; key: &quot;domContentLoadedEventEnd&quot;, value: &quot;28:38:836&quot; &#125;,  &#123; key: &quot;loadEventEnd&quot;, value: &quot;28:41:224&quot; &#125;,  &#123; key: &quot;domComplete&quot;, value: &quot;28:41:224&quot; &#125;,  &#123; key: &quot;loadEventStart&quot;, value: &quot;28:41:224&quot; &#125;,];</code></pre><p>这个操作竟然有一个 base64 编码图片依然被缓存了,浏览器 disable-cache 对于有些内存缓存的图片竟然是无效的.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Request URL: data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAADwAAAA8AQMAAAAAMksxAAAAA1BMVEUAAACnej3aAAAAAXRSTlMAQObYZgAAAA5JREFUKM9jGAWjAAcAAAIcAAE27nY6AAAAAElFTkSuQmCCRequest Method: GETStatus Code: 200 OK (from memory cache)Referrer Policy: strict-origin-when-cross-origin</code></pre><p><img src="http://t-blog-images.aijs.top/img/20220606143138.webp"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/z9061/article/details/101454438">Web 性能优化-首屏和白屏时间</a><br><a href="http://www.alloyteam.com/2015/09/explore-performance/">初探 performance – 监控网页与程序性能</a><br><a href="https://blog.csdn.net/abuanden/article/details/114530985">简述浏览器渲染机制</a></p>]]></content>
      
      
      <categories>
          
          <category> performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> performance </tag>
            
            <tag> 浏览器原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件 paste code to snippets</title>
      <link href="//post/2022-05-11vscode.html"/>
      <url>//post/2022-05-11vscode.html</url>
      
        <content type="html"><![CDATA[<h2 id="粘贴代码，生成用户代码片段"><a href="#粘贴代码，生成用户代码片段" class="headerlink" title="粘贴代码，生成用户代码片段"></a>粘贴代码，生成用户代码片段</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>其他插件具有<code>共性</code>，而<code>不具特性 </code>，每次写代码，要么用第三方插件，现成的代码片段，时常不能满足日常开发需要</li><li>自定义代码片段，手写 <code>费时费力</code>，一般步骤，粘贴、修改、格式化</li><li>其他插件类似vscode宏变量的使用少之又少， 要么将开源插件定制化，要么重新开发</li><li>快捷变量记不住</li></ol><h2 id="paste-code-to-snippets-优点："><a href="#paste-code-to-snippets-优点：" class="headerlink" title="paste code to snippets 优点："></a>paste code to snippets 优点：</h2><ol><li>高度定制化</li><li>跨语言（任何vscode支持的语言，都可在对应类型片段文件中进行增加）</li><li>使用简单 （复制、唤起命令、挖孔）</li><li>快捷变量完全自定义（想怎么写就怎么写）</li></ol><h2 id="操作GIF"><a href="#操作GIF" class="headerlink" title="操作GIF"></a>操作GIF</h2><p><img src="http://t-blog-images.aijs.top/img/Kapture%202022-05-11%20at%2009.39.01.gif"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>如果配置了代码片段，没有提示, 查看<code>settings.json</code>对应</li><li>打开 <code>settings.json</code> 命令： <code>command + shift + p</code>, 搜 <code>&gt;settings</code></li></ul><p><strong>以markdown为例</strong> 默认只读配置在升级后变成了false</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; Configure settings to be overridden for the markdown language.&quot;[markdown]&quot;:  &#123;&quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false,&quot;editor.unicodeHighlight.invisibleCharacters&quot;: false,&quot;editor.wordWrap&quot;: &quot;on&quot;,&quot;editor.quickSuggestions&quot;: false &#125;,</code></pre><ul><li>修改<br><img src="http://t-blog-images.aijs.top/img/20220602184856.webp"></li></ul>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 增效 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP3</title>
      <link href="//post/2022-05-11http.html"/>
      <url>//post/2022-05-11http.html</url>
      
        <content type="html"><![CDATA[<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><img src="https://www.upyun.com/static/img/title@3x.5597f51.png" />HTTP/3 的基础即谷歌多年探索的基于 UDP 的 QUIC 协议。与 TCP 相比，使用 UDP 可以提供更大的灵活性，并且可以使 QUIC 完全于用户空间中实现——对协议实现的更新不像 TCP 那样需要绑定到操作系统更新。使用 QUIC，可以简单地将 HTTP 级别的流映射到 QUIC 流的顶部，从而继承 HTTP/2 的所有优点，而不会产生队头阻塞。HTTP/3 虽仍处于草案状态，但很多用户已经跃跃欲试。</blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>HTTP&#x2F;3 利用 QUIC 加速 HTTP 请求，QUIC 提供比 TCP 和 TLS 更高的加密和性能</li><li>QUIC 是一种默认加密的新传输协议，旨在加快 HTTP 传输速度以及使其更加安全</li><li>HTTP&#x2F;3 基于 UDP，如果数据包丢失，只会中断一个流，而不会中断所有流，提高了同时获取多个对象的性能</li><li>支持 0-RTT，消除服务器的 TLS 确认，使后续连接的启动速度更快</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>下图表示 HTTP&#x2F;2 和 HTTP&#x2F;3 多路复用两个请求时，数据包丢失及其影响（请求及其相关的响应分别为深蓝和浅蓝色）</p><p>HTTP&#x2F;2 多路复用 2 个请求。响应被分解为多个数据包，一旦一个数据包丢失了，两个请求都被阻止。<br><img src="https://www.upyun.com/static/img/http_3%20&%20QUIC.d73f941.gif" /><br>HTTP&#x2F;3 复用 2 个请求。虽然浅色的数据包丢失了，但是深色的数据包传输得很好。<br><img src="https://www.upyun.com/static/img/http2.27d52a1.gif" /><br>在相同丢包率的条件下，HTTP&#x2F;3 和 HTTP&#x2F;2 性能测试对比如下<br>测试环境：服务端（HTTP&#x2F;3 with cubic &amp; HTTP&#x2F;2 with bbr）、客户端（cubic）<br><img src="https://www.upyun.com/static/img/%E5%BB%BA%E8%BF%9E%E6%97%B6%E9%97%B4.35656db.png" /><br><img src="https://www.upyun.com/static/img/%E8%AF%B7%E6%B1%82%E6%97%B6%E9%97%B41x.7069918.png" /></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="https://www.upyun.com/tech/tags/HTTP3" target="_blank" >查看更多</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slate wiki-ui评论功能光标乱跳</title>
      <link href="//post/2022-04-29slate.html"/>
      <url>//post/2022-04-29slate.html</url>
      
        <content type="html"><![CDATA[<h2 id="bug复现"><a href="#bug复现" class="headerlink" title="bug复现"></a>bug复现</h2><pre class="line-numbers language-none"><code class="language-none">bug复现 (node:29) UnhandledPromiseRejectionWarning: Error: Forbidden at &amp;#x2F;code&amp;#x2F;client&amp;#x2F;.next&amp;#x2F;server&amp;#x2F;pages&amp;#x2F;_app-a05...</code></pre><p><img src="https://t-blog-images.aijs.top/img/Kapture%202022-04-29%20at%2015.41.56.gif"></p><p>在vite react项目上，输入汉字的同时按住删除键，光标会乱跳</p><h3 id="排查1"><a href="#排查1" class="headerlink" title="排查1:"></a>排查1:</h3><p>wiki（esm）组件问题，检查wiki-ui组件库，运行正常</p><pre class="line-numbers language-none"><code class="language-none">&quot;react&quot;: &quot;^16.8.0&quot;,&quot;react-dom&quot;: &quot;^16.8.0&quot;,</code></pre><h3 id="排查2"><a href="#排查2" class="headerlink" title="排查2:"></a>排查2:</h3><p>vite加载wiki-ui组件时候，因为vite只能处理esm，在vite.config.ts, esbuildOptions自定义插件进行处理<br>wiki-ui，不是很懂，换个角度</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">esbuildOptions: &#123;  plugins: [    &#123;      name: &#39;originjs:commonjs&#39;,      setup(build) &#123;        build.onLoad(          &#123;            filter: &#x2F;@敏感数据-fe\&#x2F;wiki-ui\&#x2F;dist&#x2F;,            namespace: &#39;file&#39;,          &#125;,          async (&#123; path: id &#125;) &#x3D;&gt; &#123;            const code &#x3D; readFileSync(id).toString()            const result &#x3D; transformRequire(code, id)            return &#123;              contents: result,              loader: &#39;js&#39;,            &#125;          &#125;,        ),          build.onLoad(            &#123;              filter: &#x2F;@敏感数据-fe\&#x2F;wiki-ui\&#x2F;dist\&#x2F;components\&#x2F;iconfont&#x2F;,              namespace: &#39;file&#39;,            &#125;,            async (&#123; path: id &#125;) &#x3D;&gt; &#123;              const code &#x3D; readFileSync(id).toString()              const result &#x3D; transformRequire(code, id)              return &#123;                contents: result,                loader: &#39;js&#39;,              &#125;            &#125;,          )      &#125;,    &#125;,    esbuildPluginMonacoEditorNls(&#123;      locale: Languages.zh_hans,    &#125;),  ],&#125;,</code></pre><h3 id="排查3"><a href="#排查3" class="headerlink" title="排查3:"></a>排查3:</h3><p>将wiki-ui组件放到umijs应用中运行</p><pre class="line-numbers language-none"><code class="language-none"># 搭建个项目# 移动demo组件到新项目# 运行，发现有相同的问题</code></pre><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><h4 id="1-dom"><a href="#1-dom" class="headerlink" title="1.dom"></a>1.dom</h4><p>输入过程中点击删除操作，那么在这个过程中，输入的内容是在<code>contenteditable=&quot;true&quot; </code>中运行</p><pre class="line-numbers language-none"><code class="language-none">&lt;div data-gramm&#x3D;&quot;false&quot; role&#x3D;&quot;textbox&quot; spellcheck&#x3D;&quot;false&quot; class&#x3D;&quot;slash-slate-core&quot; id&#x3D;&quot;SLASH_SLATE_CORE&quot; data-app-id&#x3D;&quot;5A9BEA&quot; autocorrect&#x3D;&quot;false&quot; autocapitalize&#x3D;&quot;false&quot; data-slate-editor&#x3D;&quot;true&quot; data-slate-node&#x3D;&quot;value&quot; contenteditable&#x3D;&quot;true&quot; style&#x3D;&quot;position: relative; outline: none; white-space: pre-wrap; overflow-wrap: break-word;&quot;&gt;&lt;p data-slate-node&#x3D;&quot;element&quot;&gt;&lt;span data-slate-node&#x3D;&quot;text&quot;&gt;&lt;span data-slate-leaf&#x3D;&quot;true&quot;&gt;&lt;span data-slate-string&#x3D;&quot;true&quot;&gt;12121212哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈h h h h h h h h h h h h hs f s d f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</code></pre><h4 id="2-合成事件"><a href="#2-合成事件" class="headerlink" title="2.合成事件"></a>2.合成事件</h4><p>应该会走合成事件，合成事件之后会执行渲染，web端走的是react-dom，比对正常运行的项目，和新项目的版本</p><pre class="line-numbers language-none"><code class="language-none"># react 17版本# react-dom 17版本</code></pre><h4 id="3-react"><a href="#3-react" class="headerlink" title="3.react"></a>3.react</h4><p>先进行<code>react</code>降版本 <code>16.14.0</code>，检查合成事件是否有问题，降版本后，运行，问题同样存在，大概可以断定是<code>react-dom</code>渲染出了问题，</p><h4 id="4-react-dom"><a href="#4-react-dom" class="headerlink" title="4.react-dom"></a>4.react-dom</h4><p>对<code>react-dom</code>降低版本到<code>16.14.0</code>, 后运行正常，那么问题应该在<code>react-dom</code>上</p><h4 id="5-github版本-16-14-0"><a href="#5-github版本-16-14-0" class="headerlink" title="5.github版本 16.14.0"></a>5.github版本 16.14.0</h4><p>两个版本有什么不同：查看<code>react</code>发布日志，16.14.0之后的一个版本是<a href="https://github.com/facebook/react/releases#:~:text=17.0.0%20(October%2020%2C%202020)">17.0.0 (October 20, 2020)</a> 看上去与事件和渲染相关的东西不多</p><pre class="line-numbers language-none"><code class="language-none">Use browser focusin and focusout for onFocus and onBlur. (@trueadm in #19186)Make all Capture events use the browser capture phase. (@trueadm in #19221)Throw if forwardRef or memo component returns undefined. (@gaearon in #19550)Remove event pooling. (@trueadm in #18969)Fix onBeforeInput reporting an incorrect event.type. (@eps1lon in #19561)Fix event.relatedTarget reported as undefined in Firefox. (@claytercek in #19607)Fix rendering into a shadow root. (@Jack-Works in #15894)Fix movementX&#x2F;Y polyfill with capture events. (@gaearon in #19672)Artifactsreact: https:&#x2F;&#x2F;unpkg.com&#x2F;react@17.0.1&#x2F;umd&#x2F;react-art: https:&#x2F;&#x2F;unpkg.com&#x2F;react-art@17.0.1&#x2F;umd&#x2F;react-dom: https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@17.0.1&#x2F;umd&#x2F;react-is: https:&#x2F;&#x2F;unpkg.com&#x2F;react-is@17.0.1&#x2F;umd&#x2F;react-test-renderer: https:&#x2F;&#x2F;unpkg.com&#x2F;react-test-renderer@17.0.1&#x2F;umd&#x2F;scheduler: https:&#x2F;&#x2F;unpkg.com&#x2F;scheduler@0.20.1&#x2F;umd&#x2F;</code></pre><h4 id="6-github版本-18-1-0"><a href="#6-github版本-18-1-0" class="headerlink" title="6.github版本 18.1.0"></a>6.github版本 18.1.0</h4><p>在往后找最新的版本，发现在<a href="https://github.com/facebook/react/releases#:~:text=Compare-,18.1.0%20(April%2026%2C%202022),-Latest">18.1.0 (April 26, 2022)</a>，改了一堆<code>react-dom</code>的bug,看上去也没相关的</p><pre class="line-numbers language-none"><code class="language-none">Fix the false positive warning about react-dom&#x2F;client when using UMD bundle. (@alireza-molaee in #24274)Fix suppressHydrationWarning to work in production too. (@gaearon in #24271)Fix componentWillUnmount firing twice inside of Suspense. (@acdlite in #24308)Fix some transition updates being ignored. (@acdlite in #24353)Fix useDeferredValue causing an infinite loop when passed an unmemoized value. (@acdlite in #24247)Fix throttling of revealing Suspense fallbacks. (@sunderls in #24253)Fix an inconsistency in whether the props object is the same between renders. (@Andarist and @acdlite in #24421)Fix a missing warning about a setState loop in useEffect. (@gaearon in #24298)Fix a spurious hydration error. (@gnoff in #24404)Warn when calling setState in useInsertionEffect. (@gaearon in #24295)Ensure the reason for hydration errors is always displayed. (@gaearon in #24276)</code></pre><h3 id="可用版本"><a href="#可用版本" class="headerlink" title="可用版本"></a>可用版本</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;react&quot;: &quot;^16.14.0&quot;,&quot;react-dom&quot;: &quot;16.14.0&quot;,</code></pre><h3 id="这个演示代码正常"><a href="#这个演示代码正常" class="headerlink" title="这个演示代码正常"></a>这个演示代码正常</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;embed type&#x3D;&quot;text&#x2F;html&quot; src&#x3D;&quot;https:&#x2F;&#x2F;stackblitz.com&#x2F;edit&#x2F;react-ts-m3y5yv?embed&#x3D;1&amp;file&#x3D;App.tsx&amp;view&#x3D;preview&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;200&quot;&gt;&lt;!--加载太慢，复制地址查看吧--&gt; &lt;!--https:&#x2F;&#x2F;stackblitz.com&#x2F;edit&#x2F;react-ts-m3y5yv?embed&#x3D;1&amp;file&#x3D;App.tsx&amp;view&#x3D;preview--&gt; </code></pre><h2 id="懵逼。。。"><a href="#懵逼。。。" class="headerlink" title="懵逼。。。"></a>懵逼。。。</h2><p>从头开始</p><pre class="line-numbers language-none"><code class="language-none">待办事项中的评论功能（组件问题）光标乱跳的问题；0. 项目 + wiki-ui 异常1. 单运行wiki-ui demo 正常2. 运行slate + umijs 正常3. 运行wiki-ui  + umijs 异常4. slate 与  wiki-ui  不一样在于slate版本5. wiki-ui 做了什么事情： 定制化一些节点展示，光标的渲染和wiki-ui无关</code></pre><h2 id="贫僧先去slate官网化缘，回来再战"><a href="#贫僧先去slate官网化缘，回来再战" class="headerlink" title="贫僧先去slate官网化缘，回来再战"></a>贫僧先去slate官网<code>化缘</code>，回来再战</h2><p><a href="http://localhost:4000/post/2022-04-29slate-lean">slate-lean</a></p><h2 id="化缘归来"><a href="#化缘归来" class="headerlink" title="化缘归来"></a>化缘归来</h2><p>问题怎么解决</p>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="//post/2022-05-09cors.html"/>
      <url>//post/2022-05-09cors.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>浏览器安全策略限制跨域访问</p><p>内容安全策略是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p><ol><li>使用方式<br>为使 CSP 可用, 你需要配置你的网络服务器返回 Content-Security-Policy，或者在 HTML <meta> 元素种也可配置该策略, 例如：</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;meta  http-equiv&#x3D;&quot;Content-Security-Policy&quot;  content&#x3D;&quot;default-src &#39;self&#39;; img-src https:&#x2F;&#x2F;*; child-src &#39;none&#39;;&quot;&#x2F;&gt;</code></pre><ol start="2"><li>配置示例<br>（1）一个网站管理者想要所有内容均来自站点的同一个源 (不包括其子域名)</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">Content-Security-Policy: default-src &#39;self&#39;</code></pre><p>（2）一个网站管理者允许内容来自信任的域名及其子域名 (域名不必须与 CSP 设置所在的域名相同)</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: default-src &#39;self&#39; *.trusted.com</code></pre><p>（3）一个网站管理者允许网页应用的用户在他们自己的内容中包含来自任何源的图片, 但是限制音频或视频需从信任的资源提供者(获得)，所有脚本必须从特定主机服务器获取可信的代码。</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: default-src &#39;self&#39;;img-src *;media-src media1.com media2.com; script-src userscripts.example.com</code></pre><p>在这里，各种内容默认仅允许从文档所在的源获取, 但存在如下例外:</p><p>图片可以从任何地方加载(注意 “*“ 通配符)。<br>多媒体文件仅允许从 media1.com 和 media2.com 加载(不允许从这些站点的子域名)。<br>可运行脚本仅允许来自于 userscripts.example.com。</p><p>作者：菜鸡前端<br>链接：<a href="https://www.jianshu.com/p/a45924e99a6d">https://www.jianshu.com/p/a45924e99a6d</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ul><li>脚本</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">listen 80; # 监听的端⼝   add_header &#39;Access-Control-Allow-Origin&#39; &#39;$http_origin&#39; ;   add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39; ;   add_header &#39;Access-Control-Allow-Methods&#39; &#39;PUT,POST,GET,DELETE,OPTIONS&#39; ;   add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type,Content-Length,Authorization,Accept,X-Requested-With&#39; ;</code></pre><ul><li>实际操作</li></ul><p><img src="http://t-blog-images.aijs.top/img/20220509181853.webp"></p><h3 id="jsonp-方式-lt-动态-script-gt"><a href="#jsonp-方式-lt-动态-script-gt" class="headerlink" title="jsonp 方式 &lt;动态 script&gt;"></a>jsonp 方式 &lt;动态 script&gt;</h3><h3 id="服务端设置，类似-nginx"><a href="#服务端设置，类似-nginx" class="headerlink" title="服务端设置，类似 nginx"></a>服务端设置，类似 nginx</h3><h3 id="其他（不常用）"><a href="#其他（不常用）" class="headerlink" title="其他（不常用）"></a>其他（不常用）</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总</title>
      <link href="//post/2022-05-08interview.html"/>
      <url>//post/2022-05-08interview.html</url>
      
        <content type="html"><![CDATA[<h2 id="值得收藏的链接"><a href="#值得收藏的链接" class="headerlink" title="值得收藏的链接"></a>值得收藏的链接</h2><ol><li><a target="_blank" href="https://juejin.cn/user/1381458394494461">码上通天</a></li><li><a target="_blank" href="https://juejin.cn/post/6844904019165446158#heading-42">面试完50个人后我写下这篇总结</a></li><li><a target="_blank" href="https://juejin.cn/post/6844903897610321934">if 我是前端团队 Leader，怎么制定前端协作规范?</a></li><li><a target="_blank" href="https://juejin.cn/post/7061588533214969892">做了一份前端面试复习计划，保熟～</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js变量和作用域</title>
      <link href="//post/2022-05-08varible.html"/>
      <url>//post/2022-05-08varible.html</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="var-let-const区别"><a href="#var-let-const区别" class="headerlink" title="var let const区别"></a>var let const区别</h3><ul><li><strong>变量提升</strong>：var 存在变量提升，let、const没有（let、const存在暂时性死区）</li><li><strong>作用域的限制</strong>：var不受作用域的限制，而let、const受当前作用域的限制</li><li><strong>重复声明</strong>：var可以重复声明，let、const不可以</li><li><strong>const是常量</strong>，必须有初始值，否则报错，不能更改，但是可以更改对象内部属性</li></ul><h3 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h3><ul><li>js中的变量分为两种：<ul><li>全局变量和局部变量。全局变量很好理解，就是在js任何地方都能够调用的变量；</li><li>而局部变量就只能在函数的内部才能够调用的变量。</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">var a&#x3D;10;function show()&#123;  console.log(&#39;a:&#39;+a); &#x2F;&#x2F;a:10  var b&#x3D;2;  console.log(&#39;inside b:&#39;+b); &#x2F;&#x2F;inside b:2&#125;show();console.log(&#39;outside b:&#39;+b); &#x2F;&#x2F;b is no defined</code></pre><p>　　在上面的程序中，变量a就是一个全局变量，在函数的内部能够调用。但是这里的变量b就是局部变量，当函数结束调用后，变量b就被回收了，因此在函数外部调用失败。</p><p><em>另外需要特别注意的是：</em></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果在声明局部变量时不用var声明，那么这个变量自动“提升”为全局变量。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">var a&#x3D;10;function show()&#123;  console.log(&#39;a:&#39;+a); &#x2F;&#x2F;a:10  b&#x3D;2;  console.log(&#39;inside b:&#39;+b); &#x2F;&#x2F;inside b:2&#125;show();console.log(&#39;outside b:&#39;+b); &#x2F;&#x2F;outside b:2</code></pre><p>对比两段代码，<em>如果你在声明b&#x3D;2时没有写var，那么b就隐式地声明为全局变量</em>，在函数外面还是能够被调用到的。<br>虽然使用全局变量能够在任何地方调用，很方便，但是全局变量的优点也给他带来了<em>缺点</em>：</p><ol><li>一直占用内存：全局变量保存在静态存储区，如果全局变量过多会占多大量内存，严重影响页面的性能。</li><li>影响了函数的独立性：一般函数都是传入参数和传出返回值进行运算的，如果函数依赖于全局变量，破坏了函数的这种独立性，</li><li>可移植性: 同时也降低了函数的可移植性。</li></ol><p><strong>因此我们在定义变量时一般要尽可能少的定义全局变量。</strong></p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>函数声明优先于变量声明</p></blockquote><p>　　下面我们通过一段代码来说明.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">var a; function a()&#123;&#125;console.log(typeof a); &#x2F;&#x2F;function&#x2F;&#x2F; 或许有人是认为函数声明在后面的原因，那么调换一下位置。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">function a()&#123;&#125;var a; console.log(typeof a); &#x2F;&#x2F;function&#x2F;&#x2F; 调换位置后变量a的类型还是function，这时候声明变量a的语句没有起作用，被函数声明覆盖了。&#x2F;&#x2F; 因此函数声明优先于变量的声明。&#x2F;&#x2F; 但是如果我们在声明的同时给a进行赋值。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">function a()&#123;&#125;var a&#x3D;&#39;xyf&#39;; console.log(typeof a); &#x2F;&#x2F;string&#x2F;&#x2F; 我们将其调换一下位置再次进行验证。</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">var a&#x3D;&#39;xyf&#39;; function a()&#123;&#125;console.log(typeof a); &#x2F;&#x2F;string&#x2F;&#x2F; 可以看到，给变量a进行赋值后，不管变量a在哪，其类型变为字符串类型，上面两段代码相当于如下代码：</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">function a()&#123;&#125;var a;a&#x3D;&#39;xyf&#39;;console.log(typeof a); &#x2F;&#x2F;string&#x2F;&#x2F; a最后被赋值为字符串，因此a的类型自然是字符串</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>　js中作用域只有<em>函数作用域</em>和<em>全局作用域</em>，</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>　js中作用域只有<em>函数作用域</em>和<em>全局作用域</em>，</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>  let const<em>有块级作用域</em>。函数作用域是比较容易理解的，那么什么是块级作用域呢？<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">&#123;var a &#x3D; 1&#125;console.log(a)VM2355:1 1</code></pre><br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">&#123;let a &#x3D;1&#125;console.log(a)VM2079:1 Uncaught ReferenceError: a is not defined</code></pre></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。</p></blockquote><p>　　理解了块级作用域，来看一下下面的小例子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console.log(v); &#x2F;&#x2F;undefinedvar v &#x3D; &quot;world&quot;;　　&#x2F;&#x2F; 这段代码很好理解，由于变量v在没有赋值前使用了，所以是undefined。其实这里存在着声明的提前。</code></pre><p>当前作用域内的声明都会提升到作用域的最前面，包括变量和函数的声明</p><p>由于js作用域中的声明都会被提升到作用域的最前面，所以，上面的代码相当于：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">var v;console.log(v); &#x2F;&#x2F;undefinedv &#x3D; &quot;world&quot;;&#x2F;&#x2F; 这样就能很清晰地理解为什么变量v是undefined的了。&#x2F;&#x2F;下面我们把变量v放到一个方法中去：</code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">if(true)&#123;  var v &#x3D; &quot;hello&quot;;&#125;console.log(v); &#x2F;&#x2F;hello&#x2F;&#x2F; 在这里由于js没有块级作用域，所以if方法没有“形成”一个封闭的作用域，&#x2F;&#x2F; 并不能够“阻挡”外面的代码获取里面的变量。</code></pre><p>函数作用域<br>　　我们再把变量v放到函数中去：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">function show()&#123;  var v&#x3D;&#39;world&#39;;&#125;show();console.log(v); &#x2F;&#x2F;undefined</code></pre><p>　　由于show函数是一个函数作用域，“阻挡”外面的代码获取里面变量（并不能阻挡里面的代码获取外面的变量），所以函数外部并不能获取到函数里面的变量v。因此证明了js中只有函数作用域，没有块级作用域。<br>　　再来看下面的一段代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">var v&#x3D;&#39;hello&#39;;function show()&#123;  console.log(v); &#x2F;&#x2F;undefined  var v&#x3D;&#39;world&#39;;&#125;show();</code></pre><p>　　很多人看到这边都会很疑惑，不是说这边show函数中能够获取到函数外面的变量的么？但是由于这边是一个函数作用域，而函数作用域存在着变量声明的提前，因此，上面的代码相当于下面的代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">var v&#x3D;&#39;hello&#39;;function show()&#123;var v;console.log(v); &#x2F;&#x2F;undefinedv&#x3D;&#39;world&#39;;&#125;show();</code></pre><p>　　这里把变量v的声明放到了整个函数作用域的最前面，因此显示为undefined。理解了上面的代码，相信下面的代码也不难理解了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">var v &#x3D; &quot;hello&quot;;(function()&#123;  console.log(v);  var v &#x3D; &quot;world&quot;;&#125;)();</code></pre><p>　　在这里自执行函数形成了函数作用域</p><p>需要注意的是<br>变量提升只提升函数的声明，并不提升函数的定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">show(); &#x2F;&#x2F;show is not a functionvar show&#x3D;function()&#123;&#x2F;&#x2F;...&#125;show(); &#x2F;&#x2F;成功运行</code></pre><p>　　或许有人有疑问，为什么这边定义的函数就不能执行呢？在这里我们需要明白函数在js中是如何进行定义的。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>函数有两种定义方式，一种是<code>函数声明</code>，另一种是<code>函数表达式</code>。那么什么是函数声明什么是函数表达式呢？</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">&#x2F;&#x2F;函数声明function show()&#123;&#x2F;&#x2F;....&#125;&#x2F;&#x2F;函数表达式var show&#x3D;function()&#123;&#x2F;&#x2F;...&#125;</code></pre><p>乍一看，他们长得很像，写法都差不多，但是实际上还是有区别的。</p><ul><li>js的解析器对<code>函数声明</code>和<code>函数表达式</code>并不是一视同仁的对待的，有点“种族歧视”的意思在里面。</li><li><code>函数声明就像是“一等公民”，js会优先读取，确保在执行前就已经被解析了</code>，所以函数声明放在当前作用域的任何地方都能够被调用，甚至放到调用函数声明之后面。</li><li><code>而函数表达式就显得比较“普通”，和一般的变量一样，只有到执行到该行时才进行解析，</code>因此，调用函数表达式要在定义后进行使用。</li></ul><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p><a href="https://juejin.cn/post/6844904019165446158">https://juejin.cn/post/6844904019165446158</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更好的沉淀</title>
      <link href="//post/2022-04-28%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA.html"/>
      <url>//post/2022-04-28%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>工作日常经验性总结放哪？</li><li>存电脑，电脑坏了重做系统没了，</li><li>放到电脑备忘录，卧槽，怎么没及时更新</li><li>放自己的服务器，没时间打理，服务器到期，嗝屁了，没来的及迁移</li></ul><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul><li>hexo由于有丰富的插件和主题，使用及部署方便，备受欢迎</li><li>自己购买服务器部署，服务器到期后续费很贵</li><li>放到第三方博客上，好一点的像简书，每天发布限制两篇，可控性太差</li></ul><h2 id="hexo-主题"><a href="#hexo-主题" class="headerlink" title="hexo 主题"></a>hexo 主题</h2><p>这里使用 <code>aurora</code></p><pre class="line-numbers language-none"><code class="language-none">theme: aurora</code></pre><p><a href="https://tridiamond.tech/">tridiamond</a><br><a href="https://github.com/AlphaHinex/AlphaHinex.github.io">AlphaHinex</a></p><h2 id="阿里云oss"><a href="#阿里云oss" class="headerlink" title="阿里云oss"></a>阿里云oss</h2><ul><li>图片资源放到github上，访问较慢，为了提升体验，将资源放到oss上，权限配置为公开，可被任何用户访问</li></ul><h2 id="阿里云域名"><a href="#阿里云域名" class="headerlink" title="阿里云域名"></a>阿里云域名</h2><ul><li>域名访问比较方便，图片资源只有在使用域名的情况下，各资源可以预览，而不仅仅是下载</li></ul><h2 id="PicGo图床「贼好用，"><a href="#PicGo图床「贼好用，" class="headerlink" title="PicGo图床「贼好用，"></a>PicGo图床「贼好用，</h2><ul><li>思考：除此之外，因为其开源我们可以学习下作者是如何处理插件的」</li><li>为博客中md文档提供图片链接，放到阿里云oss上</li><li>上传成功<br><img src="http://t-blog-images.aijs.top/img/20220428101247.png?x-oss-process=image/resize,h_300,w_500"></li><li>因为开发过electron，第一想到的是我要debug,打开控制台</li><li>域名配错不可访问<br><img src="http://t-blog-images.aijs.top/img/20220428104003.png?x-oss-process=image/resize,h_300,w_500"><br><img src="http://t-blog-images.aijs.top/img/20220428104024.png?x-oss-process=image/resize,h_300,w_500"></li><li>遇到图片,作为程序猿第一反应要优化「压缩」<code>compress</code></li><li>插件下载<br><img src="http://t-blog-images.aijs.top/img/20220428104511.png?x-oss-process=image/resize,h_300,w_500" alt="下载插件"></li><li>插件启用<br><img src="http://t-blog-images.aijs.top/img/20220428104919.png?x-oss-process=image/resize,h_300,w_500" alt="需要启动插件，不器用没有效果"></li><li>插件是否生效了<br><img src="http://t-blog-images.aijs.top/img/20220428105126.png?x-oss-process=image/resize,h_300,w_500" alt="压缩后的校验"></li><li>插件列表<br><a href="https://github.com/PicGo/Awesome-PicGo">github链接</a></li></ul><h2 id="书写文章-hexo页面不热重载？"><a href="#书写文章-hexo页面不热重载？" class="headerlink" title="书写文章 hexo页面不热重载？"></a>书写文章 hexo页面不热重载？</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yarn add global browser-syncyarn add hexo-browsersync</code></pre><h2 id="启用评论"><a href="#启用评论" class="headerlink" title="启用评论"></a>启用评论</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># For local development only!gitalk:  enable: false  autoExpand: true  clientID: &#39;&#39;  clientSecret: &#39;&#39;  repo: &#39;dev-blog-comments&#39;  owner: &#39;TriDiamond&#39;  admin: [&#39;TriDiamond&#39;]  id: uid  language: en  distractionFreeMode: true  recentComment: true  proxy: &#39;&#39;# Valine comment plugin (recommended!)# see https:&#x2F;&#x2F;valine.js.org&#x2F;quickstart.htmlvaline:  enable: true  app_id: 去申请  app_key: 去申请  avatar: &#39;http:&#x2F;&#x2F;t-blog-images.aijs.top&#x2F;img&#x2F;avatar.jpeg&#39;  placeholder: Leave your thoughts behind~  visitor: true  lang: en  avatarForce: false  meta: [&#39;nick&#39;, &#39;mail&#39;]  requiredFields: []  admin: &#39;海龙&#39;  recentComment: true</code></pre><h2 id="图片增加水印"><a href="#图片增加水印" class="headerlink" title="图片增加水印"></a>图片增加水印</h2><p><strong>配置及效果</strong><br><img src="http://t-blog-images.aijs.top/img/20220524104857.webp"></p><h2 id="picgo生成代码"><a href="#picgo生成代码" class="headerlink" title="picgo生成代码"></a>picgo生成代码</h2><ul><li>可选不同的代码方式<img src="http://t-blog-images.aijs.top/img/20220526230443.png"/></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>每次发布后，github page 自定义域名会丢失<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在_posts目录下建立CNAME文件 填写上自己的域名</p></blockquote></li><li>图床picGo，上传了图片，在oss上查看也成功了，但是picGo相册中没有展示<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><code>/Users/chenhailong/Library/Application Support/picgo</code>目录下，删除 <code>rm picgo.db</code>,重新启动<br>见<a href="https://github.com/Molunerfinn/PicGo/issues/781">issue #781</a></p></blockquote></li><li>调整博客文件时间，运行后文章排序并没有改变，需要清理根目录下<code>db.json</code></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>总体而言picgo已经很好了，有几点可以优化</p><ul><li>已有图片二次重新上传压缩功能</li><li>窗口实在是太小了，正常情况下可以手动拖拽改变大小</li><li>插件列表插件卡片部分重叠</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lerna调试开源库遇到的问题</title>
      <link href="//post/2022-05-05lerna.html"/>
      <url>//post/2022-05-05lerna.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">yarn install --mutex network:42424 --non-interactive👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ lerna --version4.0.0👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ yarn global add lerna@3.19.0    Usage Error: The &#39;yarn global&#39; commands have been removed in 2.x - consider using &#39;yarn dlx&#39; or a third-party plugin instead$ yarn run [--inspect] [--inspect-brk] &lt;scriptName&gt; ...👑 ~&#x2F;Desktop&#x2F;slate git:(main) $ yarn --version              3.0.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC存储空间不足问题</title>
      <link href="//post/2022-05-05mac.html"/>
      <url>//post/2022-05-05mac.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://t-blog-images.aijs.top/img/20220505165350.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String相关面试代码</title>
      <link href="//post/2022-05-03string.html"/>
      <url>//post/2022-05-03string.html</url>
      
        <content type="html"><![CDATA[<h3 id="转化为驼峰命名"><a href="#转化为驼峰命名" class="headerlink" title="转化为驼峰命名"></a>转化为驼峰命名</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><code>var s1 = &quot;get-element-by-id&quot;</code></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var f &#x3D; function (s) &#123;  return s.replace(&#x2F;-\w&#x2F;g, function (x) &#123;    return x.splice(1).toUpperCase();  &#125;);&#125;;</code></pre><h3 id="模版引擎实现"><a href="#模版引擎实现" class="headerlink" title="模版引擎实现"></a>模版引擎实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">let template &#x3D; &quot;我是&#123;&#123;name&#125;&#125;,年龄&#123;&#123;age&#125;&#125;,性别&#123;&#123;sex&#125;&#125;&quot;;let data &#x3D; &#123;  name: &quot;姓名&quot;,  age: 18,&#125;;render(template, data); &#x2F;&#x2F;我是姓名,年龄18,性别undefinedfunction render(template, data) &#123;  &#x2F;&#x2F; 模版字符串正则  const resg &#x3D; &#x2F;\&#123;\&#123;(\w+)\&#125;\&#125;&#x2F;;  &#x2F;&#x2F; 判断模版里是否有模版字符串  if (reg.test(template)) &#123;    &#x2F;&#x2F; 查找当前模版里第一个模版字符串的字符    const name &#x3D; reg.exec(template)[1];    &#x2F;&#x2F; 将第一个模版字符串渲染    template &#x3D; template.replace(reg, data[name]);    &#x2F;&#x2F; 递归的渲染并返回渲染后的结构    return render(template, data);  &#125;&#125;</code></pre><h3 id="解析-URL-Params-为对象"><a href="#解析-URL-Params-为对象" class="headerlink" title="解析 URL Params 为对象"></a>解析 URL Params 为对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">let url &#x3D;  &quot;http:&#x2F;&#x2F;www.domain.com&#x2F;?user&#x3D;anonymouse&amp;id&#x3D;123&amp;id&#x3D;456&amp;city&#x3D;%E5%8C%97%E4%BA%AC&amp;enabled&quot;;&#x2F;** * 结果 * &#123; *  user: &#39;anonymouse&#39;, *  id: [123,456], &#x2F;&#x2F; 重复出现的key，要转化成数组 *  city: &#39;北京&#39;, &#x2F;&#x2F; 中文需要解码 *  enabled: true &#x2F;&#x2F; 未指定值的key，约定为true * * * &#125; * **&#x2F;function paramParam(url) &#123;  const paramsStr &#x3D; &#x2F;.+\?(.+)$&#x2F;.exec(url)[1];  const paramsArr &#x3D; paramsArr.split(&quot;&amp;&quot;);  let paramsObj &#x3D; &#123;&#125;;  paramsArr.forEach((param) &#x3D;&gt; &#123;    if (&#x2F;&#x3D;&#x2F;.test(param)) &#123;      let [key, val] &#x3D; param.split(&quot;&#x3D;&quot;); &#x2F;&#x2F; 拆分键&#x2F;值      val &#x3D; decodeURLComponent(val); &#x2F;&#x2F; 汉字解码      val &#x3D; &#x2F;^\d+$&#x2F;.test(val) ? parseFloat(val) : val; &#x2F;&#x2F; 数字转化      if (paramsObj.hasOwnProperty(key)) &#123;        paramsObj[key] &#x3D; [].concat(paramsObj[key], val); &#x2F;&#x2F; 重复key转数组      &#125; else &#123;        paramsObj[key] &#x3D; val;      &#125;    &#125; else &#123;      paramsObj[key] &#x3D; true; &#x2F;&#x2F; 处理约定    &#125;  &#125;);&#125;</code></pre><h3 id="查找字符串中，出现最多的字符和个数"><a href="#查找字符串中，出现最多的字符和个数" class="headerlink" title="查找字符串中，出现最多的字符和个数"></a>查找字符串中，出现最多的字符和个数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">let str &#x3D; &quot;abcabcabcbbcccc&quot;;let num &#x3D; 0;let char &#x3D; &quot;&quot;;&#x2F;&#x2F; 先排序，后用正则处理个数str &#x3D; str.split(&quot;&quot;).sort().join(&quot;&quot;);let re &#x3D; &#x2F;(\w)\1+&#x2F;g;str.replace(re, ($0, $1) &#x3D;&gt; &#123;  if (num &lt; $0.length) &#123;    num &#x3D; $0.length;    char &#x3D; $1;  &#125;&#125;);</code></pre><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a &#x3D; &quot;34&quot;;b &#x3D; &quot;1234567&quot;; &#x2F;&#x2F; 返回2a &#x3D; &quot;35&quot;;b &#x3D; &quot;1234567&quot;; &#x2F;&#x2F; 返回 -1a &#x3D; &quot;355&quot;;b &#x3D; &quot;1234355&quot;; &#x2F;&#x2F; 返回5function isContain(a, b) &#123;  for (let i in b) &#123;    if (a[0] &#x3D;&#x3D;&#x3D; b[i]) &#123;      let tmp &#x3D; true;      for (let j in a) &#123;        if (a[j] !&#x3D;&#x3D; b[~~i + ~~j]) &#123;          tmp &#x3D; false;        &#125;      &#125;      if (tmp) &#123;        return i;      &#125;    &#125;  &#125;  return -1;&#125;</code></pre><h3 id="实现千分位分隔符"><a href="#实现千分位分隔符" class="headerlink" title="实现千分位分隔符"></a>实现千分位分隔符</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">&#x2F;&#x2F; 保留三位小数paraseToMoney(1234.56); &#x2F;&#x2F; return &#39;1,234.56&#39;paraseToMoney(123456789); &#x2F;&#x2F; return 123,456,789paraseToMoney(1087654.321); &#x2F;&#x2F; return 1,087,654.321function paraseToMoney(params) &#123;  num &#x3D; parseFloat(num.toFixed(3));  let [integer, decimal] &#x3D; String.prototype.split.call(num, &quot;.&quot;);  integer &#x3D; integer.replace(&#x2F;\d(?&#x3D;(\d&#123;3&#125;))+$&#x2F;, &quot;$&amp;,&quot;);  return integer + &quot;.&quot; + (decimal ?? &quot;&quot;);&#125;</code></pre><h3 id="判断是否是电话号码"><a href="#判断是否是电话号码" class="headerlink" title="判断是否是电话号码"></a>判断是否是电话号码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function isPhone(str) &#123;  let regx &#x3D; &#x2F;^1[34578]\d&#123;9&#125;$&#x2F;;  return regx.test(str);&#125;</code></pre><h3 id="判断是否是邮箱"><a href="#判断是否是邮箱" class="headerlink" title="判断是否是邮箱"></a>判断是否是邮箱</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function isEmail(mail) &#123;  var regx &#x3D; &#x2F;^(a-zA-Z0-9_\-)+@(a-zA-Z0-9_\-)+(\.[a-zA-Z0-9_\-])+$&#x2F;;  return regx.test(email);&#125;</code></pre><h3 id="校验身份证"><a href="#校验身份证" class="headerlink" title="校验身份证"></a>校验身份证</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function isCard(number) &#123;  var regx &#x3D; &#x2F;(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)&#x2F;;  return regx.test(number);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构设计引发的血案</title>
      <link href="//post/2022-04-29nextjs.html"/>
      <url>//post/2022-04-29nextjs.html</url>
      
        <content type="html"><![CDATA[<h2 id="记录个bug-并在此文中规避"><a href="#记录个bug-并在此文中规避" class="headerlink" title="记录个bug,并在此文中规避"></a>记录个bug,并在此文中规避</h2><p>此处记下 hexo-theme-aurora 源码bug，没空时候帮他改</p><pre class="line-numbers language-none"><code class="language-none">.article .article-content p &#123;    font-size: .875rem;    line-height: 1.25rem;    margin-bottom: 0.5rem;    padding-bottom: 1rem;    word-break: break-all;&#125;</code></pre><h2 id="bug复现"><a href="#bug复现" class="headerlink" title="bug复现"></a>bug复现</h2><p><img src="http://t-blog-images.aijs.top/img/20220429103417.png"><br><img src="http://t-blog-images.aijs.top/img/20220429103946.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">(node:29) UnhandledPromiseRejectionWarning: Error: Forbidden    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)    at async Promise.all (index 3)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag &#96;--unhandled-rejections&#x3D;strict&#96; (see https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;cli.html#cli_unhandled_rejections_mode). (rejection id: 19)(node:29) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.(node:29) UnhandledPromiseRejectionWarning: Error: Forbidden    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)    at async Promise.all (index 3)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag &#96;--unhandled-rejections&#x3D;strict&#96; (see https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;cli.html#cli_unhandled_rejections_mode). (rejection id: 44)Error: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Object.refreshPendingPerformanceNum (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11487:25)    at async Promise.all (index 2)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)Error: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Promise.all (index 0)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)Error: Forbidden    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Object.getDataReport (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11494:19)    at async Promise.all (index 3)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)Error: Forbidden    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Promise.all (index 0)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)Error: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Promise.all (index 0)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)Error: invalid json response body at https:&#x2F;&#x2F;login-daily.敏感数据-inc.cn:7799&#x2F;error&#x2F;illegal&#x2F;location reason: Unexpected token &lt; in JSON at position 0    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:13141:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Object.refreshPendingPerformanceNum (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:11487:25)    at async Promise.all (index 2)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-a053507d8512cb10a3ff.js:12208:22)</code></pre><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const [resp] &#x3D; await Promise.all([  getLoginInfo(ctx),  CommonModel.effects.refreshPendingObjectiveNum(req, ctx),  CommonModel.effects.refreshPendingPerformanceNum(req, ctx),  CommonModel.effects.getDataReport(req, ctx),])if (resp.success) &#123;  UserModal.actions.setUser(resp.result, req)&#125;</code></pre><h2 id="增加异常捕获"><a href="#增加异常捕获" class="headerlink" title="增加异常捕获"></a>增加异常捕获</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">const [resp] &#x3D; await Promise.all([  getLoginInfo(ctx),  CommonModel.effects.refreshPendingObjectiveNum(req, ctx),  CommonModel.effects.refreshPendingPerformanceNum(req, ctx),  CommonModel.effects.getDataReport(req, ctx),]).catch(e&#x3D;&gt;&#123;  console.log(&quot;发生错误&quot;)  console.log(e)&#125;)</code></pre><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>日志仅 <code>Forbidden</code> 有效信息，大概是接口</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">发生错误Error: Forbidden    at &#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-7be1c2d9b56a41e863e3.js:13144:29    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:95:5)    at async Promise.all (index 0)    at async Function.getInitialProps (&#x2F;code&#x2F;client&#x2F;.next&#x2F;server&#x2F;pages&#x2F;_app-7be1c2d9b56a41e863e3.js:12208:22)</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>因为acl 企业权限整了180天（顶配），时不时就出现系统瘫痪的情况，<code>日常</code>、<code>线上</code>都有此问题这架构设计的，估计没谁了。完全可以改成离职后，系统自动将用户禁权即可</li><li>除此之外，sso也有个通病，三个月没改过密码，用户账户无法登录，需要重新密码方可登录</li></ol>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs 结合 knife4j</title>
      <link href="//post/2022-02-29node.html"/>
      <url>//post/2022-02-29node.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/nest-knife4j">nest-knife4j</a><br><a href="https://github.com/xiaoymin/swagger-bootstrap-ui">knife4j github</a><br><a href="https://xiaoym.gitee.io/knife4j/documentation/">knife4j 文档</a><br><code>knife4j</code>可以理解为<code>一套swagger皮肤</code>，不使用knife4j默认是<code>swagger 1</code>版本的样式<br><img src="http://t-blog-images.aijs.top/img/11460713-6cda8a0126f7ee78.png"></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs文件上传</title>
      <link href="//post/2022-02-28node.html"/>
      <url>//post/2022-02-28node.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><a href="https://www.jianshu.com/p/28f8dd9a732e">Nestjs 上传文件</a><br><a href="https://www.cnblogs.com/ajanuw/p/9575278.html">Nestjs 上传文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 拖拽兼容</title>
      <link href="//post/2022-02-27react.html"/>
      <url>//post/2022-02-27react.html</url>
      
        <content type="html"><![CDATA[<h2 id="拖拽在web-pc-端、iframe、h5移动端"><a href="#拖拽在web-pc-端、iframe、h5移动端" class="headerlink" title="拖拽在web pc 端、iframe、h5移动端"></a>拖拽在web pc 端、iframe、h5移动端</h2><h3 id="存在差异"><a href="#存在差异" class="headerlink" title="存在差异"></a>存在差异</h3><ul><li>web pc 端支持：<code>onMouseDown</code>、<code>onMouseUp</code>、<code>onMousemove</code>、<code>onDragStart</code>、<code>onDragEnd</code>、<code>nDragOver</code></li><li>iframe web pc 端支持：<code>onMouseDown</code>、<code>onMouseUp</code>、<code>onMousemove</code></li><li>h5移动端支持：<code>onTouchStart</code>、<code>onTouchEnd</code>、<code>onTouchmove</code><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export default function Draggable(props: Props) &#123;  const &#123; children, style, className, onDragFinish, onDraggingStart, onPositionGet, boundary &#x3D; &#123; x: MARGIN_TO_PAGE, y: MARGIN_TO_PAGE &#125; &#125; &#x3D; props  const [dragging, setDragging] &#x3D; useState(false)  const [attaching, setAttaching] &#x3D; useState(false)  const [top, setTop] &#x3D; useState(0)  const [left, setLeft] &#x3D; useState(0)  const ghostRef: MutableRefObject&lt;HTMLDivElement&gt; &#x3D; useRef()  const elRef: MutableRefObject&lt;HTMLDivElement&gt; &#x3D; useRef()  const onDragStart &#x3D; useCallback((e: DragEvent&lt;HTMLDivElement&gt; | TouchEvent&lt;HTMLDivElement&gt;) &#x3D;&gt; &#123;    let x    let y    if (isDrag(e)) &#123;      if (e.target !&#x3D;&#x3D; elRef.current) &#123;        return      &#125;      e.dataTransfer.setDragImage(emptyImg, 0, 0)      x &#x3D; e.clientX      y &#x3D; e.clientY    &#125; else &#123;      if (!e.target || !(e.target instanceof HTMLElement)) &#123;        return      &#125;      if (!parentHasClass(e.target, [rootStyles.feedbackRoot])) &#123;        return      &#125;      x &#x3D; e.touches[0].clientX      y &#x3D; e.touches[0].clientY    &#125;    e.stopPropagation()    const rect &#x3D; e.currentTarget.getBoundingClientRect()    const offsetX &#x3D; x - rect.x    const offsetY &#x3D; y - rect.y    setTop(rect.y)    setLeft(rect.x)    setDragging(true)    if (isDrag(e)) &#123;      dragoverHandle &#x3D; (event: DragEvent) &#x3D;&gt; &#123;        if (event.clientX || event.clientY) &#123;          setTop(event.clientY - offsetY)          setLeft(event.clientX - offsetX)        &#125;      &#125;      &#x2F;&#x2F; firefox 中，ondrag 拿不到鼠标的坐标，所以这里使用 document 的 dragover      document.addEventListener(&#39;dragover&#39;, dragoverHandle)    &#125; else &#123;      dragoverHandle &#x3D; (event: TouchEvent) &#x3D;&gt; &#123;        const touch &#x3D; event.touches[0]        if (touch.clientX || touch.clientY) &#123;          setTop(touch.clientY - offsetY)          setLeft(touch.clientX - offsetX)        &#125;      &#125;      document.addEventListener(&#39;touchmove&#39;, dragoverHandle)    &#125;    onDraggingStart()  &#125;, [])  const onDragEnd &#x3D; useCallback((event) &#x3D;&gt; &#123;    if (!ghostRef.current) &#123;      setDragging(false)      return    &#125;    const rect &#x3D; ghostRef.current.getBoundingClientRect()    const &#123; rel, abs &#125; &#x3D; calcAttachSide(rect, boundary)    setTop(abs.top)    setLeft(abs.left)    setAttaching(true)    if (isDrag(event)) &#123;      document.removeEventListener(&#39;dragover&#39;, dragoverHandle)    &#125; else &#123;      document.removeEventListener(&#39;touchmove&#39;, dragoverHandle)    &#125;    &#x2F;&#x2F; onPosition &amp;&amp; onPosition(rel) &#x2F;&#x2F; 其他业务    dragoverHandle &#x3D; null    setTimeout(() &#x3D;&gt; &#123;      onDragFinish(rel)      setAttaching(false)      setDragging(false)    &#125;, 300)  &#125;, [])  const onMousedown &#x3D; useCallback((e) &#x3D;&gt; &#123;    const x &#x3D; e.clientX    const y &#x3D; e.clientY    const rect &#x3D; e.currentTarget.getBoundingClientRect()    const offsetX &#x3D; x - rect.x    const offsetY &#x3D; y - rect.y    setTop(rect.y)    setLeft(rect.x)    setDragging(true)    if (e.preventDefault) &#123;      e.preventDefault()    &#125; else &#123;      e.returnValue &#x3D; false    &#125;    document.onmousemove &#x3D; function (ev: any) &#123;      const _event &#x3D; ev || window.event      const endx &#x3D; _event.clientX - offsetX      const endy &#x3D; _event.clientY - offsetY      setTop(endy)      setLeft(endx)    &#125;  &#125;, [])  const onMouseup &#x3D; useCallback((e) &#x3D;&gt; &#123;    if (!ghostRef.current) &#123;      setDragging(false)      return    &#125;    const rect &#x3D; ghostRef.current.getBoundingClientRect()    const &#123; rel, abs &#125; &#x3D; calcAttachSide(rect, boundary)    setTop(abs.top)    setLeft(abs.left)    setAttaching(true)    document.onmousemove &#x3D; null    onPositionGet &amp;&amp; onPositionGet(rel)    setTimeout(() &#x3D;&gt; &#123;      onDragFinish(rel)      setAttaching(false)      setDragging(false)    &#125;, 300)  &#125;, []) &#x2F;&#x2F; 能力检测  if (&#39;dragover&#39; in document.documentElement || &#39;ontouchstart&#39; in document.documentElement) &#123;    return (      &lt;div        style&#x3D;&#123;style&#125;        className&#x3D;&#123;className&#125;        draggable        onTouchStart&#x3D;&#123;onDragStart&#125;        onTouchEnd&#x3D;&#123;onDragEnd&#125;        onDragStart&#x3D;&#123;onDragStart&#125;        onDragEnd&#x3D;&#123;onDragEnd&#125;        onDragOver&#x3D;&#123;prevent&#125;        ref&#x3D;&#123;elRef&#125;      &gt;        &lt;div          style&#x3D;&#123;dragging ? &#123; top, left &#125; : null&#125;          className&#x3D;&#123;cn(&#123;            [styles.dragging]: dragging,            [styles.attaching]: attaching,          &#125;)&#125;          ref&#x3D;&#123;ghostRef&#125;        &gt;          &#123;children&#125;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    )  &#125;  return (    &lt;div      style&#x3D;&#123;style&#125;      className&#x3D;&#123;className&#125;      draggable      onMouseDown&#x3D;&#123;onMousedown&#125;      onMouseUp&#x3D;&#123;onMouseup&#125;      ref&#x3D;&#123;elRef&#125;    &gt;      &lt;div        style&#x3D;&#123;dragging ? &#123; top, left &#125; : null&#125;        className&#x3D;&#123;cn(&#123;          [styles.dragging]: dragging,          [styles.attaching]: attaching,        &#125;)&#125;        ref&#x3D;&#123;ghostRef&#125;      &gt;        &#123;children&#125;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  )&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React DOM</title>
      <link href="//post/2022-05-04react.html"/>
      <url>//post/2022-05-04react.html</url>
      
        <content type="html"><![CDATA[<h2 id="17-0-0-October-20-2020"><a href="#17-0-0-October-20-2020" class="headerlink" title="17.0.0 (October 20, 2020)"></a>17.0.0 (October 20, 2020)</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Delegate events to roots instead of document<br>来看下<a href="https://www.bigbinary.com/blog/react-17-delegates-events-to-root-instead-of-document">原因</a></p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>React自首次发布以来一直在自动执行事件委派。它直接在文档节点上为每个事件类型附加一个处理程序。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>虽然它提高了应用程序的性能，但由于文档节点上的事件委派，已经报告了许多问题。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>为了演示其中一个问题，让我们以select下拉列表为例。<br>下面示例中的CountryDropDown是用于国家选择的React组件，它将被呈现给id为React root的div。react DOM容器封装在id为main的div中，该div有一个包含stopPropagation（）的更改事件。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;!--Div&#39;s change event contains stopPropagation()--&gt;&lt;div id&#x3D;&quot;main&quot;&gt;  &lt;!--Div where react component will be rendered --&gt;  &lt;div id&#x3D;&quot;react-root&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">class CountryDropDown extends React.Component &#123;  state &#x3D; &#123;    country: &#39;&#39;,  &#125;  const handleChange &#x3D; e &#x3D;&gt; &#123;    this.setState(&#123; country: e.target.value &#125;);  &#125;  render() &#123;    return (      &lt;table class&#x3D;&quot;table table-striped table-condensed&quot;&gt;        &lt;thead&gt;          &lt;tr&gt;            &lt;th&gt;Country&lt;&#x2F;th&gt;            &lt;th&gt;Selected country&lt;&#x2F;th&gt;          &lt;&#x2F;tr&gt;        &lt;&#x2F;thead&gt;        &lt;tbody&gt;          &lt;tr&gt;            &lt;td&gt;              &lt;select value&#x3D;&#123;this.state.country&#125;                onChange&#x3D;&#123;this.handleChange&#125;              &gt;                &lt;option value&#x3D;&quot;&quot;&gt;--Select--&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;India&quot;&gt;India&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;US&quot;&gt;US&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;Dubai&quot;&gt;Dubai&lt;&#x2F;option&gt;              &lt;&#x2F;select&gt;            &lt;&#x2F;td&gt;            &lt;td&gt;              &#123;this.state.country&#125;            &lt;&#x2F;td&gt;          &lt;&#x2F;tr&gt;        &lt;&#x2F;tbody&gt;      &lt;&#x2F;table&gt;    );  &#125;&#125;ReactDOM.render(&lt;CountryDropDown &#x2F;&gt;, document.getElementById(&#39;react-root&#39;));</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>将更改事件附加到主div</p></blockquote><pre class="line-numbers language-none"><code class="language-none">document.getElementById(&quot;main&quot;).addEventListener(  &quot;change&quot;,  function (e) &#123;    e.stopPropagation();  &#125;,  false);</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当选择一个国家时，我们无法看到所选的国家</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>此意外行为的原因是附加到文档节点的onChange dropdown事件。包含e.stopPropagation（）的主div的change事件阻止了下拉菜单的onChange事件。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>为了解决此类问题，React 17不再在文档级别附加事件处理程序。相反，它将它们附加到根DOM容器中，React树将被渲染到该容器中。<br><img src="https://www.bigbinary.com/blog_images/react17/react_17_event_delegation.png"></p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在React 17中进行更改后，事件被附加到根DOM容器，React树被呈现到该容器中。在我们的示例中，onChange事件的下拉列表将附加到id为react root的div。当选择任何国家&#x2F;地区呈现预期行为时，将触发此事件。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentry错误日志获取</title>
      <link href="//post/2021-06-20sentry.html"/>
      <url>//post/2021-06-20sentry.html</url>
      
        <content type="html"><![CDATA[<ul><li>先上图</li></ul><p><img src="http://t-blog-images.aijs.top/img/11460713-94dac7337bf8ed4f.png"></p><p><img src="http://t-blog-images.aijs.top/img/11460713-2d4eb13808a7a16a.png"></p><p>This is a quick getting started guide. For in-depth instructions on integrating Sentry with React, view <a href="https://docs.sentry.io/platforms/javascript/guides/react/">our complete documentation</a>.</p><p>To instrument your React application with Sentry, first install the <code>@sentry/react</code> and <code>@sentry/tracing</code> packages:</p><pre class="line-numbers language-none"><code class="language-none"># Using yarnyarn add @sentry&#x2F;react @sentry&#x2F;tracing# Using npmnpm install --save @sentry&#x2F;react @sentry&#x2F;tracing</code></pre><p>Next, import and initialize the Sentry module as early as possible, before initializing React:</p><pre class="line-numbers language-none"><code class="language-none">import React from &quot;react&quot;;import ReactDOM from &quot;react-dom&quot;;import * as Sentry from &quot;@sentry&#x2F;react&quot;;import &#123; Integrations &#125; from &quot;@sentry&#x2F;tracing&quot;;import App from &quot;.&#x2F;App&quot;;Sentry.init(&#123;  dsn: &quot;https:&#x2F;&#x2F;a5f1c39789b24bb7a434868b677e0c65@&#x2F;1063&quot;,  integrations: [new Integrations.BrowserTracing()],  &#x2F;&#x2F; Set tracesSampleRate to 1.0 to capture 100%  &#x2F;&#x2F; of transactions for performance monitoring.  &#x2F;&#x2F; We recommend adjusting this value in production  tracesSampleRate: 1.0,&#125;);ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;root&quot;));&#x2F;&#x2F; Can also use with React Concurrent Mode&#x2F;&#x2F; ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render(&lt;App &#x2F;&gt;);</code></pre><p>The above configuration captures both error and performance data. To reduce the volume of performance data captured, change <code>tracesSampleRate</code> to a value between 0 and 1.</p><p>After this step, Sentry will report any uncaught exceptions triggered by your application.</p><p>You can trigger your first event from your development environment by raising an exception somewhere within your application. An example of this would be rendering a button whose <code>onClick</code> handler attempts to invoke a method that does not exist:</p><pre class="line-numbers language-none"><code class="language-none">return &lt;button onClick&#x3D;&#123;methodDoesNotExist&#125;&gt;Break the world&lt;&#x2F;button&gt;;</code></pre><p>Once you’ve verified the library is initialized properly and sent a test event, consider visiting our <a href="https://docs.sentry.io/platforms/javascript/guides/react/">complete React docs</a>. There you’ll find additional instructions for surfacing valuable context from React error boundaries, React Router, Redux, and more.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 自动生成 .d.ts</title>
      <link href="//post/2021-06-10scss2type.html"/>
      <url>//post/2021-06-10scss2type.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-Module-Typed"><a href="#CSS-Module-Typed" class="headerlink" title="CSS Module Typed"></a>CSS Module Typed</h2><p><strong>vscode 插件列表中有好多个，不要安装错了</strong></p><p><img src="http://t-blog-images.aijs.top/img/20220607152316.webp"></p><h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=awwit.typed-css-modules-plugin">link</a></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Install deps first:</p><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><p><code>npm install typed-css-modules</code></p><h3 id="if-you-need-less"><a href="#if-you-need-less" class="headerlink" title="if you need less"></a>if you need less</h3><p><code>npm install less</code></p><h3 id="if-you-need-scss-x2F-sass"><a href="#if-you-need-scss-x2F-sass" class="headerlink" title="if you need scss&#x2F;sass"></a>if you need scss&#x2F;sass</h3><p><code>npm install sass</code></p><h3 id="if-you-need-stylus"><a href="#if-you-need-stylus" class="headerlink" title="if you need stylus"></a>if you need stylus</h3><p><code>npm install stylus</code></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Modules can be installed globally. yarn is supported.</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>To switch the package manager (npm or yarn), you need to change the settings npm.packageManager of the built-in module vscode.npm.</p></blockquote><h3 id="Configuring"><a href="#Configuring" class="headerlink" title="Configuring"></a>Configuring</h3><p>By default, the option to automatically format .d.ts files using eslint is enabled. You can disable this feature through the setting “typed-css-modules.eslint.enable”: false.</p><p>Usage<br>put</p><p><code>// @type</code></p><p>or</p><p><code>/* @type */</code></p><p>ahead of your .css&#x2F;.less&#x2F;.scss&#x2F;.sass&#x2F;.styl file, and save, you will get a d.ts file in same directory.</p><h3 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h3><p><img src="https://s2.ax1x.com/2019/01/31/k1yTT1.gif"></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">&#x2F;* @type *&#x2F;.root &#123;  padding: 16px;  min-height: 100%;  .empty-wrapper &#123;    height: 380px;    display: flex;    flex-direction: column;    align-items: center;    justify-content: center;  &#125;  &gt; h3 &#123;    font-size: inherit;    margin-bottom: 4px;  &#125;  .toolbar-wrapper &#123;    position: relative;    .toolbar &#123;      position: absolute;      margin: 12px 0;      z-index: 1;      &amp;.static &#123;        position: static;      &#125;      &gt; *:not(:first-child) &#123;        margin-left: 8px;      &#125;    &#125;  &#125;  .buttons &#123;    button &#123;      margin-right: 8px;    &#125;  &#125;&#125;.use-select &#123;  width: 300px;&#125;</code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare const styles: &#123;  readonly root: string;  readonly &quot;empty-wrapper&quot;: string;  readonly &quot;toolbar-wrapper&quot;: string;  readonly toolbar: string;  readonly static: string;  readonly buttons: string;  readonly &quot;use-select&quot;: string;&#125;;export &#x3D; styles;</code></pre><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Creates .d.ts files from css-modules .css&#x2F;.less&#x2F;.scss&#x2F;.sass&#x2F;.styl files.</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Error: vscode-typed-css-modules: Cannot find global module ‘typed-css-modules’</p></blockquote><pre class="line-numbers language-none"><code class="language-none">npm install -g typed-css-modules</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 增效 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//post/hello-world.html"/>
      <url>//post/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode GitHub Copilot</title>
      <link href="//post/2022-05-08vscode.html"/>
      <url>//post/2022-05-08vscode.html</url>
      
        <content type="html"><![CDATA[<h2 id="Copilot"><a href="#Copilot" class="headerlink" title="Copilot"></a>Copilot</h2><a href="https://copilot.github.com/" target="_blank"><img src="https://copilot.github.com/head2x.png"  width= 100/></a><p>Your AI pair programmer</p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a><a href="https://copilot.github.com/">官网</a></h3><p><img src="https://copilot.github.com/diagram.png"></p><h3 id="支持开发工具"><a href="#支持开发工具" class="headerlink" title="支持开发工具"></a>支持开发工具</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>support Visual Studio Code, Neovim, and IntelliJ-based IDEs like JetBrains IntelliJ IDEA, Android Studio or PyCharm.</p></blockquote><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ul><li>需要人员审批通过，等[1-2 工作日]</li></ul><p><a href="https://github.com/features/copilot/signup">注册&#x2F;结果查看</a><br><img src="http://t-blog-images.aijs.top/img/20220526184023.webp"></p><p><strong>我等到了5月25号才通过</strong>，好像有两周的样子😂</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Join the GitHub Copilot waitlist<br>Access is limited to a small group of testers during the technical preview of GitHub Copilot. Sign up today for your chance to try it out and help us improve.</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>You’re already on the waitlist for GitHub Copilot! We’ll notify you when we’ve enabled it on your account. Make sure your primary email address is up-to-date so we can notify you.</p></blockquote><h3 id="vscode-安装插件-Copilot"><a href="#vscode-安装插件-Copilot" class="headerlink" title="vscode 安装插件 Copilot"></a>vscode 安装插件 <code>Copilot</code></h3><p><img src="http://t-blog-images.aijs.top/img/20220508111956.webp"></p><h3 id="读源码的利器"><a href="#读源码的利器" class="headerlink" title="读源码的利器"></a>读源码的利器</h3><p><img src="http://t-blog-images.aijs.top/img/20220527093323.webp"></p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 增效 </tag>
            
            <tag> vscode </tag>
            
            <tag> AI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git public key</title>
      <link href="//post/2016-06-20git.html"/>
      <url>//post/2016-06-20git.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">[root@izbp1hun1qsl59e2nzqyvcz ~]# git config --global user.name &quot;hailong.chen&quot;[root@izbp1hun1qsl59e2nzqyvcz ~]# git config --global user.email &quot;841660202@qq.com&quot;</code></pre><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>SSH<br>SSH keys<br>SSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。 先执行以下语句来判断是否已经存在本地公钥：<br><code>cat ~/.ssh/id_rsa.pub</code><br>如果你看到一长串以 ssh-rsa或 ssh-dsa开头的字符串, 你可以跳过 ssh-keygen的步骤。<br>提示: 最好的情况是一个密码对应一个ssh key，但是那不是必须的。你完全可以跳过创建密码这个步骤。请记住设置的密码并不能被修改或获取。<br>你可以按如下命令来生成ssh key<br><code>ssh-keygen -t rsa -C &quot;841660202@qq.com&quot;</code><br>这个指令会要求你提供一个位置和文件名去存放键值对和密码，你可以点击Enter键去使用默认值。<br>用以下命令获取你生成的公钥：<br><code>cat ~/.ssh/id_rsa.pub</code><br>复制这个公钥放到你的个人设置中的SSH&#x2F;My SSH Keys下，请完整拷贝从ssh-开始直到你的用户名和主机名为止的内容。<br>如果打算拷贝你的公钥到你的粘贴板下，请参考你的操作系统使用以下的命令：<br>Windows:<br><code>clip &lt; ~/.ssh/id_rsa.pub</code><br>Mac:<br><code>pbcopy &lt; ~/.ssh/id_rsa.pub</code><br>GNU&#x2F;Linux (requires xclip):<br><code>xclip -sel clip &lt; ~/.ssh/id_rsa.pub</code><br>Applications<br>Eclipse<br>如何在Eclipse中添加ssh key: <a href="https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_Configuration">https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_Configuration</a><br>Tip: Non-default OpenSSH key file names or locations<br>如果，不管你有什么理由，当你决定去用一个非默认的位置或文件名去存放你的ssh key。你必须配置好你的ssh客户端以找到你的ssh私钥去连接Code服务器，对于OpenSSH客户端，这个通常是在~&#x2F;.ssh&#x2F;config类似的位置配置的：<br>Host my-git.company.com<br>RSAAuthentication yes<br>IdentityFile ~&#x2F;my-ssh-key-directory&#x2F;company-com-private-key-filename</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Last login: Sun Apr 17 16:06:15 on consoleN&#x2F;A: version &quot;N&#x2F;A -&gt; N&#x2F;A&quot; is not yet installed.You need to run &quot;nvm install N&#x2F;A&quot; to install it before using it.N&#x2F;A: version &quot;N&#x2F;A -&gt; N&#x2F;A&quot; is not yet installed.You need to run &quot;nvm install N&#x2F;A&quot; to install it before using it.The default interactive shell is now zsh.To update your account to use zsh, please run &#96;chsh -s &#x2F;bin&#x2F;zsh&#96;.For more details, please visit https:&#x2F;&#x2F;support.apple.com&#x2F;kb&#x2F;HT208050.chenhailong@chenhailongdeMacBook-Pro:~$ &#x2F;Users&#x2F;chenhailong&#x2F;Desktop -bash: &#x2F;Users&#x2F;chenhailong&#x2F;Desktop: is a directorychenhailong@chenhailongdeMacBook-Pro:~$ cd &#x2F;Users&#x2F;chenhailong&#x2F;Desktop chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.gitCloning into &#39;841660202.github.io&#39;...The authenticity of host &#39;github.com (20.205.243.166)&#39; can&#39;t be established.ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF&#x2F;zLDA0zPMSvHdkr4UvCOqU.This key is not known by any other namesAre you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yesWarning: Permanently added &#39;github.com&#39; (ED25519) to the list of known hosts.git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.gitCloning into &#39;841660202.github.io&#39;...git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ pbcopy &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub-bash: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directorychenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ cat ~&#x2F;.ssh&#x2F;id_rsa.pubcat: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directorychenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git config --global user.name &quot;hailong.chen&quot;chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git config --global user.email &quot;841660202@qq.com&quot;chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ cat ~&#x2F;.ssh&#x2F;id_rsa.pubcat: &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pub: No such file or directorychenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ ssh-keygen -t rsa -C &quot;841660202@qq.com&quot;Generating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsaYour public key has been saved in &#x2F;Users&#x2F;chenhailong&#x2F;.ssh&#x2F;id_rsa.pubThe key fingerprint is:SHA256:bdtIDeRXGKxGTEa&#x2F;Ex3QdPtVoOUiwuiq7YKjKrLakbU 841660202@qq.comThe key&#39;s randomart image is:+---[RSA 3072]----+|         +&#x3D;.o**.o||       o +o.o*.oo||      . o.+.* o..||     .   oo&#x3D; +  o||    . . S.+ +   .||   o o   o + .   || .o E     o .    ||&#x3D;..+             ||@oooo            |+----[SHA256]-----+chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ pbcopy &lt; ~&#x2F;.ssh&#x2F;id_rsa.pubchenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ git clone git@github.com:841660202&#x2F;841660202.github.io.gitCloning into &#39;841660202.github.io&#39;...remote: Enumerating objects: 441, done.remote: Counting objects: 100% (441&#x2F;441), done.remote: Compressing objects: 100% (216&#x2F;216), done.remote: Total 441 (delta 208), reused 401 (delta 168), pack-reused 0Receiving objects: 100% (441&#x2F;441), 1.34 MiB | 1.05 MiB&#x2F;s, done.Resolving deltas: 100% (208&#x2F;208), done.chenhailong@chenhailongdeMacBook-Pro:~&#x2F;Desktop$ </code></pre><h2 id="设置github-SSH-keys"><a href="#设置github-SSH-keys" class="headerlink" title="设置github SSH keys"></a>设置github SSH keys</h2><p><a href="https://github.com/settings/keys">https://github.com/settings/keys</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC Iterm2美化终端</title>
      <link href="//post/2017-07-09item2.html"/>
      <url>//post/2017-07-09item2.html</url>
      
        <content type="html"><![CDATA[<h2 id="MAC-环境"><a href="#MAC-环境" class="headerlink" title="MAC 环境"></a>MAC 环境</h2><p><strong>注意：以下内容仅限MAC,其他环境，请自行谷歌</strong></p><h2 id="oh-my-zsh-插件推荐"><a href="#oh-my-zsh-插件推荐" class="headerlink" title="oh-my-zsh 插件推荐 :"></a>oh-my-zsh 插件推荐 :</h2><ul><li>autojump 这个没用起来，使用没什么效果🥹</li><li>zsh-autosuggestion 命令行输入有提示，（命令下载失败，手动下载，拷贝到 <code>~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code>）</li><li>zsh-syntax-highlighting</li></ul><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p><strong>1.使用 brew 安装</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install oh-my-zsh</code></pre><p><strong>2. 手动安装</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zshcp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc</code></pre><h2 id="安装-autojump"><a href="#安装-autojump" class="headerlink" title="安装 autojump"></a>安装 autojump</h2><p><strong>1.安装</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install autojump</code></pre><p><strong>2.配置</strong><br><code>code ~/.zshrc</code>，把以下代码加到尾部</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用brew安装的[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.shsource $ZSH&#x2F;oh-my-zsh.sh# 使用git安装的[[ -s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh</code></pre><p><strong>3.刷新配置</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source ~&#x2F;.zshrc</code></pre><h2 id="安装-zsh-autosuggestion"><a href="#安装-zsh-autosuggestion" class="headerlink" title="安装 zsh-autosuggestion"></a>安装 zsh-autosuggestion</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre><h2 id="安装-zsh-syntax-highlighting"><a href="#安装-zsh-syntax-highlighting" class="headerlink" title="安装 zsh-syntax-highlighting"></a>安装 zsh-syntax-highlighting</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</code></pre><h2 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h2><p>最后用 <code>source ~/.zshrc</code> 命令更新配置文件</p><h2 id="zshrc-配置如下："><a href="#zshrc-配置如下：" class="headerlink" title=".zshrc 配置如下："></a>.zshrc 配置如下：</h2><ul><li>自己电脑配置，下面截图是办公电脑截图<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># If you come from bash you might have to change your $PATH.# export PATH&#x3D;$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:$PATH# Path to your oh-my-zsh installation.export ZSH&#x3D;&quot;$HOME&#x2F;.oh-my-zsh&quot;# Set name of the theme to load --- if set to &quot;random&quot;, it will# load a random theme each time oh-my-zsh is loaded, in which case,# to know which specific one was loaded, run: echo $RANDOM_THEME# See https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;wiki&#x2F;ThemesZSH_THEME&#x3D;&quot;robbyrussell&quot;# Set list of themes to pick from when loading at random# Setting this variable when ZSH_THEME&#x3D;random will cause zsh to load# a theme from this variable instead of looking in $ZSH&#x2F;themes&#x2F;# If set to an empty array, this variable will have no effect.# ZSH_THEME_RANDOM_CANDIDATES&#x3D;( &quot;robbyrussell&quot; &quot;agnoster&quot; )# Uncomment the following line to use case-sensitive completion.# CASE_SENSITIVE&#x3D;&quot;true&quot;# Uncomment the following line to use hyphen-insensitive completion.# Case-sensitive completion must be off. _ and - will be interchangeable.# HYPHEN_INSENSITIVE&#x3D;&quot;true&quot;# Uncomment one of the following lines to change the auto-update behavior# zstyle &#39;:omz:update&#39; mode disabled  # disable automatic updates# zstyle &#39;:omz:update&#39; mode auto      # update automatically without asking# zstyle &#39;:omz:update&#39; mode reminder  # just remind me to update when it&#39;s time# Uncomment the following line to change how often to auto-update (in days).# zstyle &#39;:omz:update&#39; frequency 13# Uncomment the following line if pasting URLs and other text is messed up.# DISABLE_MAGIC_FUNCTIONS&#x3D;&quot;true&quot;# Uncomment the following line to disable colors in ls.# DISABLE_LS_COLORS&#x3D;&quot;true&quot;# Uncomment the following line to disable auto-setting terminal title.# DISABLE_AUTO_TITLE&#x3D;&quot;true&quot;# Uncomment the following line to enable command auto-correction.# ENABLE_CORRECTION&#x3D;&quot;true&quot;# Uncomment the following line to display red dots whilst waiting for completion.# You can also set it to another string to have that shown instead of the default red dots.# e.g. COMPLETION_WAITING_DOTS&#x3D;&quot;%F&#123;yellow&#125;waiting...%f&quot;# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)# COMPLETION_WAITING_DOTS&#x3D;&quot;true&quot;# Uncomment the following line if you want to disable marking untracked files# under VCS as dirty. This makes repository status check for large repositories# much, much faster.# DISABLE_UNTRACKED_FILES_DIRTY&#x3D;&quot;true&quot;# Uncomment the following line if you want to change the command execution time# stamp shown in the history command output.# You can set one of the optional three formats:# &quot;mm&#x2F;dd&#x2F;yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;# or set a custom format using the strftime function format specifications,# see &#39;man strftime&#39; for details.# HIST_STAMPS&#x3D;&quot;mm&#x2F;dd&#x2F;yyyy&quot;# Would you like to use another custom folder than $ZSH&#x2F;custom?# ZSH_CUSTOM&#x3D;&#x2F;path&#x2F;to&#x2F;new-custom-folder# Which plugins would you like to load?# Standard plugins can be found in $ZSH&#x2F;plugins&#x2F;# Custom plugins may be added to $ZSH_CUSTOM&#x2F;plugins&#x2F;# Example format: plugins&#x3D;(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.# 插件信息plugins&#x3D;(  git  zsh-syntax-highlighting  zsh-autosuggestions  autojump)source $ZSH&#x2F;oh-my-zsh.sh[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.shsource $ZSH&#x2F;oh-my-zsh.sh# User configurationPROMPT&#x3D;&quot;%(?:%&#123;$fg_bold[yellow]%&#125;♠ :%&#123;$fg_bold[red]%&#125;♠ )%&#123;$fg[cyan]%&#125;%d $ &quot;# PROMPT&#x3D;&quot;%(?:%&#123;$fg_bold[yellow]%&#125;♠ :%&#123;$fg_bold[red]%&#125;♠ )%&#123;$fg[cyan]%&#125;%d %&#123;$fg_bold[magenta]%&#125;$ &quot;PROMPT+&#x3D;&#39;%&#123;$reset_color%&#125;&#39;ZSH_THEME_GIT_PROMPT_PREFIX&#x3D;&quot;%&#123;$fg_bold[blue]%&#125;&quot;ZSH_THEME_GIT_PROMPT_SUFFIX&#x3D;&quot;%&#123;$reset_color%&#125; &quot;ZSH_THEME_GIT_PROMPT_DIRTY&#x3D;&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;✗&quot;ZSH_THEME_GIT_PROMPT_CLEAN&#x3D;&quot;%&#123;$fg[blue]%&#125;)&quot;# 参考 https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b84d8b7b134e# codevalue# %T系统时间（时：分）# %*系统时间（时：分：秒）# %D系统日期（年-月-日）# %n用户名# %B - %b开始到结束使用粗体打印# %U - %u开始到结束使用下划线打印# %c仅当前文件夹路径# %d当前目录路径完整# %~当前目录相对于～的相对路径# %M计算机的主机名# %m计算机的主机名（在第一个句号之前截断# %l当前的tty# export MANPATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;man:$MANPATH&quot;# You may need to manually set your language environment# export LANG&#x3D;en_US.UTF-8# Preferred editor for local and remote sessions# if [[ -n $SSH_CONNECTION ]]; then#   export EDITOR&#x3D;&#39;vim&#39;# else#   export EDITOR&#x3D;&#39;mvim&#39;# fi# Compilation flags# export ARCHFLAGS&#x3D;&quot;-arch x86_64&quot;# Set personal aliases, overriding those provided by oh-my-zsh libs,# plugins, and themes. Aliases can be placed here, though oh-my-zsh# users are encouraged to define aliases within the ZSH_CUSTOM folder.# For a full list of active aliases, run &#96;alias&#96;.## Example aliases# alias zshconfig&#x3D;&quot;mate ~&#x2F;.zshrc&quot;# alias ohmyzsh&#x3D;&quot;mate ~&#x2F;.oh-my-zsh&quot;</code></pre><h2 id="推荐博客左岸博客"><a href="#推荐博客左岸博客" class="headerlink" title="推荐博客左岸博客"></a>推荐博客<a href="https://www.zrahh.com/archives/167.html">左岸博客</a></h2><h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><img src="http://t-blog-images.aijs.top/img/11460713-14c8ef376aabe04a.png"><br><img src="http://t-blog-images.aijs.top/img/11460713-ef2da0af46da7712.png"><br><img src="http://t-blog-images.aijs.top/img/11460713-e49ed15245409774.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 增效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除目录</title>
      <link href="//post/2019-10-30shell.html"/>
      <url>//post/2019-10-30shell.html</url>
      
        <content type="html"><![CDATA[<h2 id="删除某个目录下所有子目录的node-modules"><a href="#删除某个目录下所有子目录的node-modules" class="headerlink" title="删除某个目录下所有子目录的node_modules"></a>删除某个目录下所有子目录的node_modules</h2><pre class="line-numbers language-none"><code class="language-none"># 查找 &#x2F;tmp&#x2F;test&#x2F; 子目录下所有 modu 执行删除find &#x2F;tmp&#x2F;test&#x2F; -type d -name modu |xargs rm -rf</code></pre><pre class="line-numbers language-none"><code class="language-none"># 查找 &#x2F;tmp&#x2F;test&#x2F; 子目录下所有 node_modules 执行删除find &#x2F;tmp&#x2F;test&#x2F; -type d -name node_modules |xargs rm -rf</code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 增效 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layoffs</title>
      <link href="//post/2022-03-25Layoffs.html"/>
      <url>//post/2022-03-25Layoffs.html</url>
      
        <content type="html"><![CDATA[<h2 id="一家上市公司近期「B业」人数变化"><a href="#一家上市公司近期「B业」人数变化" class="headerlink" title="一家上市公司近期「B业」人数变化"></a>一家上市公司近期「B业」人数变化</h2><p><img src="http://t-blog-images.aijs.top/img/11460713-98eaa0e7b6e68c6f.png" alt="2022-03-30"><br><img src="http://t-blog-images.aijs.top/img/11460713-f2c5edfe1032663d.png" alt="2022-03-31"><br><img src="http://t-blog-images.aijs.top/img/11460713-0d1febc4e52867bd.png" alt="2022-04-01"><br><img src="http://t-blog-images.aijs.top/img/11460713-3c855f37997fca9d.png" alt="2022-04-02"><br><img src="http://t-blog-images.aijs.top/img/11460713-33ab1685e98181c5.png" alt="2022-04-07"><br><img src="http://t-blog-images.aijs.top/img/11460713-f6178de2c725ba0d.png" alt="2022-04-08"><br><img src="http://t-blog-images.aijs.top/img/11460713-1c49e477ebebdb04.png" alt="2022-04-11"><br><img src="http://t-blog-images.aijs.top/img/11460713-ff83505b93a40211.png" alt="2022-04-12"><br><img src="http://t-blog-images.aijs.top/img/11460713-6e26dc81d1bc1bb5.png" alt="2022-04-13"><br><img src="http://t-blog-images.aijs.top/img/11460713-6f19d0ccbc1470d1.png" alt="2022-04-14"><br><img src="http://t-blog-images.aijs.top/img/11460713-5fa4eb0d60075e10.png" alt="2022-04-15"><br><img src="http://t-blog-images.aijs.top/img/11460713-a75f3fa3bc0cc9ad.png" alt="2022-04-20"><br><img src="http://t-blog-images.aijs.top/img/11460713-2cb92c5f9a24df72.png" alt="2022-04-21"><br><img src="http://t-blog-images.aijs.top/img/11460713-ea85739148839bd2.png" alt="image.png"><br><img src="http://t-blog-images.aijs.top/img/11460713-cc82a2680e69dccd.png" alt="2022-04-26"><br><img src="http://t-blog-images.aijs.top/img/11460713-fdd722c44a598a88.png" alt="2022-04-27"><br><img src="http://t-blog-images.aijs.top/img/11460713-35395fd4c9b459ea.png" alt="2022-04-28"><br><img src="http://t-blog-images.aijs.top/img/20220505093216.webp" alt="2022-05-05"><br><img src="http://t-blog-images.aijs.top/img/20220509134022.webp" alt="2022-05-09"><br><img src="http://t-blog-images.aijs.top/img/20220510180811.webp" alt="2022-05-10"></p>]]></content>
      
      
      <categories>
          
          <category> Layoffs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layoffs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs服务端技术栈</title>
      <link href="//post/2021-06-30node.html"/>
      <url>//post/2021-06-30node.html</url>
      
        <content type="html"><![CDATA[<h2 id="NestJS中文文档"><a href="#NestJS中文文档" class="headerlink" title="NestJS中文文档"></a>NestJS中文文档</h2><p><a href="https://nestjs.bootcss.com/">NestJS中文文档</a><br><a href="https://docs.nestjs.cn/">NestJS中文文档</a><br><a href="https://github.com/nestjs/nest">github</a> 42.2K</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>A progressive Node.js framework for building efficient, scalable, and enterprise-grade server-side applications on top of TypeScript &amp; JavaScript (ES6, ES7, ES8) 🚀</p></blockquote><h2 id="TypeORM"><a href="#TypeORM" class="headerlink" title="TypeORM"></a>TypeORM</h2><p><a href="https://typeorm.biunav.com/zh/#%E5%AE%89%E8%A3%85">TypeORM中文文档</a><br><a href="https://github.com/typeorm/typeorm">github地址</a> 26.3K</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>ORM for TypeScript and JavaScript (ES7, ES6, ES5). Supports MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server, Oracle, SAP Hana, WebSQL databases. Works in NodeJS, Browser, Ionic, Cordova and Electron platforms.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web office预览</title>
      <link href="//post/2021-09-07web.html"/>
      <url>//post/2021-09-07web.html</url>
      
        <content type="html"><![CDATA[<p>第一步<br>将文件上传到你的服务器里，并支持url下载这个文件。<br>第二步<br>访问：<a href="http://view.officeapps.live.com/op/view.aspx?src=%E8%A6%81%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6%E7%9A%84url%E5%9C%B0%E5%9D%80%EF%BC%88%E8%AE%B0%E5%BE%97url%E7%BC%96%E7%A0%81%E5%93%A6%EF%BC%89">http://view.officeapps.live.com/op/view.aspx?src=要预览文件的url地址（记得url编码哦）</a><br>第三步<br>可以使用iframe嵌入你的系统<br>更多<br>详情查看：<a href="https://www.microsoft.com/en-us/microsoft-365/blog/2013/04/10/office-web-viewer-view-office-documents-in-a-browser/?eu=true">https://www.microsoft.com/en-us/microsoft-365/blog/2013/04/10/office-web-viewer-view-office-documents-in-a-browser/?eu=true</a><br><img src="http://t-blog-images.aijs.top/img/11460713-93b26693cac5c2d8.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-dev</title>
      <link href="//post/2021-11-02node.html"/>
      <url>//post/2021-11-02node.html</url>
      
        <content type="html"><![CDATA[<h2 id="在幕后用ts-node调整node-dev"><a href="#在幕后用ts-node调整node-dev" class="headerlink" title="在幕后用ts-node调整node-dev"></a>在幕后用ts-node调整node-dev</h2><ul><li>作用：在幕后用ts-node调整node-dev</li><li>优点：<ul><li>任意依赖的文件改变时候，重启node process，但是共享ts编译线程。</li><li>因为不需要每次ts-node编译的实例化，而提升性能</li></ul></li><li>配置项：</li><li>注意事项：</li><li>截图：<br><img src="http://t-blog-images.aijs.top/img/11460713-10cfe41335cfeb5d.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简书迁移到OSS</title>
      <link href="//post/2022-04-27mv-blog-jianshu.html"/>
      <url>//post/2022-04-27mv-blog-jianshu.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre class="line-numbers language-none"><code class="language-none">cat .&#x2F;* |grep uploadimages.jianshu.io &gt; image.txtmkdir img3dcd img3dwget -i ..&#x2F;image.txtsed -i&#39;&#39; -e &#39;s&#x2F;!\[image.png\](&#x2F;&#x2F;g&#39; image.txtsed -i&#39;&#39; -e &#39;s&#x2F;)&#x2F;&#x2F;g&#39; image.txt</code></pre><h2 id="迁移简书图片下载后重命名"><a href="#迁移简书图片下载后重命名" class="headerlink" title="迁移简书图片下载后重命名"></a>迁移简书图片下载后重命名</h2><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;shfor eachfile in &#96;ls -B&#96;do    # echo $&#123;eachfile%%\%3F*&#125; # 截掉最后.txt    # $ % https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;b3bdc3b3968e  filename&#x3D;$&#123;eachfile%%\%3F*&#125;  filehead&#x3D;&#96;echo $eachfile | awk -F \%3F &#39;&#123;print $1 &#125;&#39;&#96;  filelast&#x3D;&#96;echo $eachfile | awk -F \%3F &#39;&#123;print $2 &#125;&#39;&#96;  # mv $filename.txt $&#123;filelast&#125;_$filehead.txt  # https:&#x2F;&#x2F;baijiahao.baidu.com&#x2F;s?id&#x3D;1726788915185806701&amp;wfr&#x3D;spider&amp;for&#x3D;pc  echo &#39;--&#39;  # echo $filename  echo $filehead #分割字符左边部分  echo $filelast #分割字符右边部分  # 右边文件存在的情况下才处理  if [ &quot;$filelast&quot; !&#x3D; &quot;&quot; ]  then    echo &#39;执行rename &#39;    mv $eachfile $filehead  fidone</code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
